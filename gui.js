webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(35);
	var VM = __webpack_require__(173);

	var Blocks = __webpack_require__(174);
	var GUI = __webpack_require__(185);
	var log = __webpack_require__(237);
	var ProjectLoader = __webpack_require__(250);

	var App = function (_React$Component) {
	    _inherits(App, _React$Component);

	    function App(props) {
	        _classCallCheck(this, App);

	        var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

	        bindAll(_this, ['fetchProjectId', 'updateProject', 'onMouseMove']);
	        _this.state = {
	            projectId: null,
	            projectData: JSON.stringify(ProjectLoader.DEFAULT_PROJECT_DATA)
	        };
	        return _this;
	    }

	    _createClass(App, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;

	            this.hashChangeListener = function () {
	                return _this2.updateProject();
	            };
	            window.addEventListener('hashchange', this.hashChangeListener);
	            window.addEventListener('mousemove', this.onMouseMove);
	            // eslint-disable-next-line react/no-did-mount-set-state
	            this.setState({ toolbox: this.toolbox });
	            this.updateProject(this.fetchProjectId() || this.props.initialProjectId);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            window.removeEventListener('hashchange', this.hashChangeListener);
	            window.removeEventListener('mousemove', this.onMouseMove);
	        }
	    }, {
	        key: 'onMouseMove',
	        value: function onMouseMove(e) {
	            var width = window.innerWidth;
	            var height = window.innerHeight;
	            var coordinates = {
	                x: Math.round(e.clientX / width * 200),
	                y: Math.round(e.clientY / height * 200),
	                canvasWidth: 200,
	                canvasHeight: 200
	            };
	            this.props.vm.postIOData('mouse', coordinates);
	        }
	    }, {
	        key: 'fetchProjectId',
	        value: function fetchProjectId() {
	            return location.hash.substring(1);
	        }
	    }, {
	        key: 'updateProject',
	        value: function updateProject(projectId) {
	            var _this3 = this;

	            projectId = projectId || this.fetchProjectId();
	            if (projectId !== this.state.projectId) {
	                if (projectId.length < 1) {
	                    return this.setState({
	                        projectId: projectId,
	                        projectData: JSON.stringify(ProjectLoader.DEFAULT_PROJECT_DATA)
	                    });
	                }
	                ProjectLoader.load(projectId, function (err, body) {
	                    if (err) return log.error(err);
	                    _this3.setState({ projectData: body });
	                });
	                this.setState({ projectId: projectId });
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;

	            return React.createElement(
	                GUI,
	                {
	                    basePath: this.props.basePath,
	                    projectData: this.state.projectData,
	                    vm: this.props.vm
	                },
	                React.createElement(
	                    'xml',
	                    {
	                        ref: function ref(tb) {
	                            return _this4.toolbox = tb;
	                        },
	                        style: { display: 'none' }
	                    },
	                    React.createElement(
	                        'category',
	                        { is: true, name: 'Sound', colour: '#D65CD6', secondaryColour: '#BD42BD' },
	                        React.createElement(
	                            'block',
	                            { type: 'sound_play' },
	                            React.createElement(
	                                'value',
	                                { name: 'SOUND_MENU' },
	                                React.createElement('shadow', { type: 'sound_sounds_option' })
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_playuntildone' },
	                            React.createElement(
	                                'value',
	                                { name: 'SOUND_MENU' },
	                                React.createElement('shadow', { type: 'sound_sounds_option' })
	                            )
	                        ),
	                        React.createElement('block', { type: 'sound_stopallsounds' }),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_playdrumforbeats' },
	                            React.createElement(
	                                'value',
	                                { name: 'DRUMTYPE' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '1'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'BEATS' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '0.25'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_restforbeats' },
	                            React.createElement(
	                                'value',
	                                { name: 'BEATS' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '0.25'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_playnoteforbeats' },
	                            React.createElement(
	                                'value',
	                                { name: 'NOTE' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '60'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'BEATS' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '0.5'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_setinstrumentto' },
	                            React.createElement(
	                                'value',
	                                { name: 'INSTRUMENT' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '1'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_playthereminforbeats' },
	                            React.createElement(
	                                'value',
	                                { name: 'NOTE' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '60'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'BEATS' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '0.5'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_seteffectto' },
	                            React.createElement(
	                                'value',
	                                { name: 'EFFECT' },
	                                React.createElement('shadow', { type: 'sound_effects_menu' })
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'VALUE' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '100'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_changeeffectby' },
	                            React.createElement(
	                                'value',
	                                { name: 'EFFECT' },
	                                React.createElement('shadow', { type: 'sound_effects_menu' })
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'VALUE' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '10'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement('block', { type: 'sound_cleareffects' }),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_changevolumeby' },
	                            React.createElement(
	                                'value',
	                                { name: 'VOLUME' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '-10'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_setvolumeto' },
	                            React.createElement(
	                                'value',
	                                { name: 'VOLUME' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '100'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement('block', { type: 'sound_volume' }),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_changetempoby' },
	                            React.createElement(
	                                'value',
	                                { name: 'TEMPO' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '20'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'sound_settempotobpm' },
	                            React.createElement(
	                                'value',
	                                { name: 'TEMPO' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '60'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement('block', { type: 'sound_tempo' })
	                    ),
	                    React.createElement(
	                        'category',
	                        { is: true, name: 'Events', colour: '#FFD500', secondaryColour: '#CC9900' },
	                        React.createElement('block', { type: 'event_whenflagclicked' }),
	                        React.createElement('block', { type: 'event_whenkeypressed' }),
	                        React.createElement(
	                            'block',
	                            { type: 'control_wait' },
	                            React.createElement(
	                                'value',
	                                { name: 'DURATION' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_positive_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '1'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'control_repeat' },
	                            React.createElement(
	                                'value',
	                                { name: 'TIMES' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_whole_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '10'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement('block', { type: 'control_forever' }),
	                        React.createElement('block', { type: 'control_if' }),
	                        React.createElement('block', { type: 'control_if_else' }),
	                        React.createElement('block', { type: 'control_wait_until' }),
	                        React.createElement('block', { type: 'control_repeat_until' }),
	                        React.createElement('block', { type: 'control_stop' })
	                    ),
	                    React.createElement(
	                        'category',
	                        { is: true, name: 'Sensing', colour: '#4CBFE6', secondaryColour: '#2E8EB8' },
	                        React.createElement(
	                            'block',
	                            { type: 'sensing_keypressed' },
	                            React.createElement(
	                                'value',
	                                { name: 'KEY_OPTION' },
	                                React.createElement('shadow', { type: 'sensing_keyoptions' })
	                            )
	                        ),
	                        React.createElement('block', { type: 'sensing_mousedown' }),
	                        React.createElement('block', { type: 'sensing_mousex' }),
	                        React.createElement('block', { type: 'sensing_mousey' }),
	                        React.createElement('block', { type: 'sensing_timer' }),
	                        React.createElement('block', { type: 'sensing_resettimer' }),
	                        React.createElement('block', { type: 'sensing_dayssince2000' })
	                    ),
	                    React.createElement('category', { is: true, name: 'Data', colour: '#FF8C1A', secondaryColour: '#DB6E00', custom: 'VARIABLE' }),
	                    React.createElement(
	                        'category',
	                        { is: true, name: 'Operators', colour: '#40BF4A', secondaryColour: '#389438' },
	                        React.createElement(
	                            'block',
	                            { type: 'operator_add' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_subtract' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_multiply' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_divide' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_random' },
	                            React.createElement(
	                                'value',
	                                { name: 'FROM' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '1'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'TO' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '10'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_lt' },
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_equals' },
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_gt' },
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'OPERAND2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement('field', { name: 'TEXT' })
	                                )
	                            )
	                        ),
	                        React.createElement('block', { type: 'operator_and' }),
	                        React.createElement('block', { type: 'operator_or' }),
	                        React.createElement('block', { type: 'operator_not' }),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_join' },
	                            React.createElement(
	                                'value',
	                                { name: 'STRING1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'TEXT' },
	                                        'hello'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'STRING2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'TEXT' },
	                                        'world'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_letter_of' },
	                            React.createElement(
	                                'value',
	                                { name: 'LETTER' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_whole_number' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'NUM' },
	                                        '1'
	                                    )
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'STRING' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'TEXT' },
	                                        'world'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_length' },
	                            React.createElement(
	                                'value',
	                                { name: 'STRING' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'text' },
	                                    React.createElement(
	                                        'field',
	                                        { name: 'TEXT' },
	                                        'world'
	                                    )
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_mod' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM1' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM2' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_round' },
	                            React.createElement(
	                                'value',
	                                { name: 'NUM' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        ),
	                        React.createElement(
	                            'block',
	                            { type: 'operator_mathop' },
	                            React.createElement(
	                                'value',
	                                { name: 'OPERATOR' },
	                                React.createElement('shadow', { type: 'operator_mathop_menu' })
	                            ),
	                            React.createElement(
	                                'value',
	                                { name: 'NUM' },
	                                React.createElement(
	                                    'shadow',
	                                    { type: 'math_number' },
	                                    React.createElement('field', { name: 'NUM' })
	                                )
	                            )
	                        )
	                    )
	                ),
	                this.state.toolbox ? React.createElement(Blocks, {
	                    options: {
	                        media: this.props.basePath + 'static/blocks-media/',
	                        toolbox: this.state.toolbox
	                    },
	                    style: {
	                        position: 'absolute',
	                        top: 0,
	                        right: 0,
	                        bottom: 0,
	                        left: 0
	                    },
	                    vm: this.props.vm
	                }) : null
	            );
	        }
	    }]);

	    return App;
	}(React.Component);

	App.propTypes = {
	    basePath: React.PropTypes.string,
	    initialProjectId: React.PropTypes.number,
	    vm: React.PropTypes.instanceOf(VM)
	};

	App.defaultProps = {
	    vm: new VM()
	};

	var appTarget = document.createElement('div');
	document.body.appendChild(appTarget);

	ReactDOM.render(React.createElement(App, {
	    basePath: ("/scratch-gui/"),
	    initialProjectId: 123236165
	}), appTarget);

/***/ },
/* 1 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/** Used to compose bitmasks for function metadata. */
	var BIND_FLAG = 1,
	    BIND_KEY_FLAG = 2,
	    CURRY_BOUND_FLAG = 4,
	    CURRY_FLAG = 8,
	    CURRY_RIGHT_FLAG = 16,
	    PARTIAL_FLAG = 32,
	    PARTIAL_RIGHT_FLAG = 64,
	    ARY_FLAG = 128,
	    REARG_FLAG = 256,
	    FLIP_FLAG = 512;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_SAFE_INTEGER = 9007199254740991,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [
	  ['ary', ARY_FLAG],
	  ['bind', BIND_FLAG],
	  ['bindKey', BIND_KEY_FLAG],
	  ['curry', CURRY_FLAG],
	  ['curryRight', CURRY_RIGHT_FLAG],
	  ['flip', FLIP_FLAG],
	  ['partial', PARTIAL_FLAG],
	  ['partialRight', PARTIAL_RIGHT_FLAG],
	  ['rearg', REARG_FLAG]
	];

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    symbolTag = '[object Symbol]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to match wrap detail comments. */
	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
	    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	    reSplitDetails = /,? & /;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array ? array.length : 0;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return baseFindIndex(array, baseIsNaN, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */
	function countHolders(array, placeholder) {
	  var length = array.length,
	      result = 0;

	  while (length--) {
	    if (array[length] === placeholder) {
	      result++;
	    }
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders(array, placeholder) {
	  var index = -1,
	      length = array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value === placeholder || value === PLACEHOLDER) {
	      array[index] = PLACEHOLDER;
	      result[resIndex++] = index;
	    }
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Symbol = root.Symbol,
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/* Used to set `toString` methods. */
	var defineProperty = (function() {
	  var func = getNative(Object, 'defineProperty'),
	      name = getNative.name;

	  return (name && name.length > 2) ? func : undefined;
	}());

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersLength = holders.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(leftLength + rangeLength),
	      isUncurried = !isCurried;

	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }
	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}

	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	      argsLength = args.length,
	      holdersIndex = -1,
	      holdersLength = holders.length,
	      rightIndex = -1,
	      rightLength = partials.length,
	      rangeLength = nativeMax(argsLength - holdersLength, 0),
	      result = Array(rangeLength + rightLength),
	      isUncurried = !isCurried;

	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }
	  return result;
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createBind(func, bitmask, thisArg) {
	  var isBind = bitmask & BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtor(Ctor) {
	  return function() {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0: return new Ctor;
	      case 1: return new Ctor(args[0]);
	      case 2: return new Ctor(args[0], args[1]);
	      case 3: return new Ctor(args[0], args[1], args[2]);
	      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = baseCreate(Ctor.prototype),
	        result = Ctor.apply(thisBinding, args);

	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject(result) ? result : thisBinding;
	  };
	}

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCurry(func, bitmask, arity) {
	  var Ctor = createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length,
	        placeholder = getHolder(wrapper);

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
	      ? []
	      : replaceHolders(args, placeholder);

	    length -= holders.length;
	    if (length < arity) {
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, undefined,
	        args, holders, undefined, undefined, arity - length);
	    }
	    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	    return apply(fn, this, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & ARY_FLAG,
	      isBind = bitmask & BIND_FLAG,
	      isBindKey = bitmask & BIND_KEY_FLAG,
	      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
	      isFlip = bitmask & FLIP_FLAG,
	      Ctor = isBindKey ? undefined : createCtor(func);

	  function wrapper() {
	    var length = arguments.length,
	        args = Array(length),
	        index = length;

	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (isCurried) {
	      var placeholder = getHolder(wrapper),
	          holdersCount = countHolders(args, placeholder);
	    }
	    if (partials) {
	      args = composeArgs(args, partials, holders, isCurried);
	    }
	    if (partialsRight) {
	      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
	    }
	    length -= holdersCount;
	    if (isCurried && length < arity) {
	      var newHolders = replaceHolders(args, placeholder);
	      return createRecurry(
	        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
	        args, newHolders, argPos, ary, arity - length
	      );
	    }
	    var thisBinding = isBind ? thisArg : this,
	        fn = isBindKey ? thisBinding[func] : func;

	    length = args.length;
	    if (argPos) {
	      args = reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }
	    if (isAry && ary < length) {
	      args.length = ary;
	    }
	    if (this && this !== root && this instanceof wrapper) {
	      fn = Ctor || createCtor(fn);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createPartial(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & BIND_FLAG,
	      Ctor = createCtor(func);

	  function wrapper() {
	    var argsIndex = -1,
	        argsLength = arguments.length,
	        leftIndex = -1,
	        leftLength = partials.length,
	        args = Array(leftLength + argsLength),
	        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    return apply(fn, isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}

	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & CURRY_FLAG,
	      newHolders = isCurry ? holders : undefined,
	      newHoldersRight = isCurry ? undefined : holders,
	      newPartials = isCurry ? partials : undefined,
	      newPartialsRight = isCurry ? undefined : partials;

	  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	  if (!(bitmask & CURRY_BOUND_FLAG)) {
	    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	  }

	  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
	  result.placeholder = placeholder;
	  return setWrapToString(result, func, bitmask);
	}

	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - `_.bind`
	 *     2 - `_.bindKey`
	 *     4 - `_.curry` or `_.curryRight` of a bound function
	 *     8 - `_.curry`
	 *    16 - `_.curryRight`
	 *    32 - `_.partial`
	 *    64 - `_.partialRight`
	 *   128 - `_.rearg`
	 *   256 - `_.ary`
	 *   512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & BIND_KEY_FLAG;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	    partials = holders = undefined;
	  }
	  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
	  arity = arity === undefined ? arity : toInteger(arity);
	  length -= holders ? holders.length : 0;

	  if (bitmask & PARTIAL_RIGHT_FLAG) {
	    var partialsRight = partials,
	        holdersRight = holders;

	    partials = holders = undefined;
	  }

	  var newData = [
	    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
	    argPos, ary, arity
	  ];

	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] == null
	    ? (isBindKey ? 0 : func.length)
	    : nativeMax(newData[9] - length, 0);

	  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
	    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
	  }
	  if (!bitmask || bitmask == BIND_FLAG) {
	    var result = createBind(func, bitmask, thisArg);
	  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
	    result = createCurry(func, bitmask, arity);
	  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
	    result = createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = createHybrid.apply(undefined, newData);
	  }
	  return setWrapToString(result, func, bitmask);
	}

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */
	function getHolder(func) {
	  var object = func;
	  return object.placeholder;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */
	function getWrapDetails(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}

	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */
	function insertWrapDetails(source, details) {
	  var length = details.length,
	      lastIndex = length - 1;

	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder(array, indexes) {
	  var arrLength = array.length,
	      length = nativeMin(indexes.length, arrLength),
	      oldArray = copyArray(array);

	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */
	var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
	  var source = (reference + '');
	  return defineProperty(wrapper, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
	  });
	};

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */
	function updateWrapDetails(details, bitmask) {
	  arrayEach(wrapFlags, function(pair) {
	    var value = '_.' + pair[0];
	    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}

	/**
	 * Creates a function that invokes `func` with the `this` binding of `thisArg`
	 * and `partials` prepended to the arguments it receives.
	 *
	 * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for partially applied arguments.
	 *
	 * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
	 * property of bound functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {...*} [partials] The arguments to be partially applied.
	 * @returns {Function} Returns the new bound function.
	 * @example
	 *
	 * function greet(greeting, punctuation) {
	 *   return greeting + ' ' + this.user + punctuation;
	 * }
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * var bound = _.bind(greet, object, 'hi');
	 * bound('!');
	 * // => 'hi fred!'
	 *
	 * // Bound with placeholders.
	 * var bound = _.bind(greet, object, _, '!');
	 * bound('hi');
	 * // => 'hi fred!'
	 */
	var bind = baseRest(function(func, thisArg, partials) {
	  var bitmask = BIND_FLAG;
	  if (partials.length) {
	    var holders = replaceHolders(partials, getHolder(bind));
	    bitmask |= PARTIAL_FLAG;
	  }
	  return createWrap(func, bitmask, thisArg, partials, holders);
	});

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	/**
	 * Binds methods of an object to the object itself, overwriting the existing
	 * method.
	 *
	 * **Note:** This method doesn't set the "length" property of bound functions.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {Object} object The object to bind and assign the bound methods to.
	 * @param {...(string|string[])} methodNames The object method names to bind.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var view = {
	 *   'label': 'docs',
	 *   'click': function() {
	 *     console.log('clicked ' + this.label);
	 *   }
	 * };
	 *
	 * _.bindAll(view, ['click']);
	 * jQuery(element).on('click', view.click);
	 * // => Logs 'clicked docs' when clicked.
	 */
	var bindAll = baseRest(function(object, methodNames) {
	  arrayEach(baseFlatten(methodNames, 1), function(key) {
	    key = toKey(key);
	    object[key] = bind(object[key], object);
	  });
	  return object;
	});

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	// Assign default placeholders.
	bind.placeholder = {};

	module.exports = bindAll;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */
/***/ function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		var EventEmitter = __webpack_require__(1);
		var util = __webpack_require__(2);

		var Runtime = __webpack_require__(6);
		var sb2import = __webpack_require__(91);
		var Sprite = __webpack_require__(98);
		var Blocks = __webpack_require__(11);

		/**
		 * Handles connections between blocks, stage, and extensions.
		 *
		 * @author Andrew Sliwinski <ascii@media.mit.edu>
		 */
		function VirtualMachine () {
		    var instance = this;
		    // Bind event emitter and runtime to VM instance
		    EventEmitter.call(instance);
		    /**
		     * VM runtime, to store blocks, I/O devices, sprites/targets, etc.
		     * @type {!Runtime}
		     */
		    instance.runtime = new Runtime();
		    /**
		     * The "currently editing"/selected target ID for the VM.
		     * Block events from any Blockly workspace are routed to this target.
		     * @type {!string}
		     */
		    instance.editingTarget = null;
		    // Runtime emits are passed along as VM emits.
		    instance.runtime.on(Runtime.SCRIPT_GLOW_ON, function (id) {
		        instance.emit(Runtime.SCRIPT_GLOW_ON, {id: id});
		    });
		    instance.runtime.on(Runtime.SCRIPT_GLOW_OFF, function (id) {
		        instance.emit(Runtime.SCRIPT_GLOW_OFF, {id: id});
		    });
		    instance.runtime.on(Runtime.BLOCK_GLOW_ON, function (id) {
		        instance.emit(Runtime.BLOCK_GLOW_ON, {id: id});
		    });
		    instance.runtime.on(Runtime.BLOCK_GLOW_OFF, function (id) {
		        instance.emit(Runtime.BLOCK_GLOW_OFF, {id: id});
		    });
		    instance.runtime.on(Runtime.VISUAL_REPORT, function (id, value) {
		        instance.emit(Runtime.VISUAL_REPORT, {id: id, value: value});
		    });

		    this.blockListener = this.blockListener.bind(this);
		    this.flyoutBlockListener = this.flyoutBlockListener.bind(this);
		}

		/**
		 * Inherit from EventEmitter
		 */
		util.inherits(VirtualMachine, EventEmitter);

		/**
		 * Start running the VM - do this before anything else.
		 */
		VirtualMachine.prototype.start = function () {
		    this.runtime.start();
		};

		/**
		 * "Green flag" handler - start all threads starting with a green flag.
		 */
		VirtualMachine.prototype.greenFlag = function () {
		    this.runtime.greenFlag();
		};

		/**
		 * Stop all threads and running activities.
		 */
		VirtualMachine.prototype.stopAll = function () {
		    this.runtime.stopAll();
		};

		/**
		 * Clear out current running project data.
		 */
		VirtualMachine.prototype.clear = function () {
		    this.runtime.dispose();
		    this.editingTarget = null;
		    this.emitTargetsUpdate();
		};

		/**
		 * Get data for playground. Data comes back in an emitted event.
		 */
		VirtualMachine.prototype.getPlaygroundData = function () {
		    var instance = this;
		    // Only send back thread data for the current editingTarget.
		    var threadData = this.runtime.threads.filter(function(thread) {
		        return thread.target == instance.editingTarget;
		    });
		    // Remove the target key, since it's a circular reference.
		    var filteredThreadData = JSON.stringify(threadData, function(key, value) {
		        if (key == 'target') return undefined;
		        return value;
		    }, 2);
		    this.emit('playgroundData', {
		        blocks: this.editingTarget.blocks,
		        threads: filteredThreadData
		    });
		};

		/**
		 * Handle an animation frame.
		 */
		VirtualMachine.prototype.animationFrame = function () {
		    this.runtime.animationFrame();
		};

		/**
		 * Post I/O data to the virtual devices.
		 * @param {?string} device Name of virtual I/O device.
		 * @param {Object} data Any data object to post to the I/O device.
		 */
		VirtualMachine.prototype.postIOData = function (device, data) {
		    if (this.runtime.ioDevices[device]) {
		        this.runtime.ioDevices[device].postData(data);
		    }
		};

		/**
		 * Load a project from a Scratch 2.0 JSON representation.
		 * @param {?string} json JSON string representing the project.
		 */
		VirtualMachine.prototype.loadProject = function (json) {
		    this.clear();
		    // @todo: Handle other formats, e.g., Scratch 1.4, Scratch 3.0.
		    sb2import(json, this.runtime);
		    // Select the first target for editing, e.g., the stage.
		    this.editingTarget = this.runtime.targets[0];
		    // Update the VM user's knowledge of targets and blocks on the workspace.
		    this.emitTargetsUpdate();
		    this.emitWorkspaceUpdate();
		    this.runtime.setEditingTarget(this.editingTarget);
		};

		/**
		 * Temporary way to make an empty project, in case the desired project
		 * cannot be loaded from the online server.
		 */
		VirtualMachine.prototype.createEmptyProject = function () {
		    // Stage.
		    var blocks2 = new Blocks();
		    var stage = new Sprite(blocks2, this.runtime);
		    stage.name = 'Stage';
		    stage.costumes.push({
		        skin: './assets/stage.png',
		        name: 'backdrop1',
		        bitmapResolution: 2,
		        rotationCenterX: 480,
		        rotationCenterY: 360
		    });
		    var target2 = stage.createClone();
		    this.runtime.targets.push(target2);
		    target2.x = 0;
		    target2.y = 0;
		    target2.direction = 90;
		    target2.size = 200;
		    target2.visible = true;
		    target2.isStage = true;
		    // Sprite1 (cat).
		    var blocks1 = new Blocks();
		    var sprite = new Sprite(blocks1, this.runtime);
		    sprite.name = 'Sprite1';
		    sprite.costumes.push({
		        skin: './assets/scratch_cat.svg',
		        name: 'costume1',
		        bitmapResolution: 1,
		        rotationCenterX: 47,
		        rotationCenterY: 55
		    });
		    var target1 = sprite.createClone();
		    this.runtime.targets.push(target1);
		    target1.x = 0;
		    target1.y = 0;
		    target1.direction = 90;
		    target1.size = 100;
		    target1.visible = true;
		    this.editingTarget = this.runtime.targets[0];
		    this.emitTargetsUpdate();
		    this.emitWorkspaceUpdate();
		};

		/**
		 * Set the renderer for the VM/runtime
		 * @param {!RenderWebGL} renderer The renderer to attach
		 */
		VirtualMachine.prototype.attachRenderer = function (renderer) {
		    this.runtime.attachRenderer(renderer);
		};

		/**
		 * Handle a Blockly event for the current editing target.
		 * @param {!Blockly.Event} e Any Blockly event.
		 */
		VirtualMachine.prototype.blockListener = function (e) {
		    if (this.editingTarget) {
		        this.editingTarget.blocks.blocklyListen(e, this.runtime);
		    }
		};

		/**
		 * Handle a Blockly event for the flyout.
		 * @param {!Blockly.Event} e Any Blockly event.
		 */
		VirtualMachine.prototype.flyoutBlockListener = function (e) {
		    this.runtime.flyoutBlocks.blocklyListen(e, this.runtime);
		};

		/**
		 * Set an editing target. An editor UI can use this function to switch
		 * between editing different targets, sprites, etc.
		 * After switching the editing target, the VM may emit updates
		 * to the list of targets and any attached workspace blocks
		 * (see `emitTargetsUpdate` and `emitWorkspaceUpdate`).
		 * @param {string} targetId Id of target to set as editing.
		 */
		VirtualMachine.prototype.setEditingTarget = function (targetId) {
		    // Has the target id changed? If not, exit.
		    if (targetId == this.editingTarget.id) {
		        return;
		    }
		    var target = this.runtime.getTargetById(targetId);
		    if (target) {
		        this.editingTarget = target;
		        // Emit appropriate UI updates.
		        this.emitTargetsUpdate();
		        this.emitWorkspaceUpdate();
		        this.runtime.setEditingTarget(target);
		    }
		};

		/**
		 * Emit metadata about available targets.
		 * An editor UI could use this to display a list of targets and show
		 * the currently editing one.
		 */
		VirtualMachine.prototype.emitTargetsUpdate = function () {
		    this.emit('targetsUpdate', {
		        // [[target id, human readable target name], ...].
		        targetList: this.runtime.targets.filter(function (target) {
		            // Don't report clones.
		            return !target.hasOwnProperty('isOriginal') || target.isOriginal;
		        }).map(function(target) {
		            return [target.id, target.getName()];
		        }),
		        // Currently editing target id.
		        editingTarget: this.editingTarget ? this.editingTarget.id : null
		    });
		};

		/**
		 * Emit an Blockly/scratch-blocks compatible XML representation
		 * of the current editing target's blocks.
		 */
		VirtualMachine.prototype.emitWorkspaceUpdate = function () {
		    this.emit('workspaceUpdate', {
		        'xml': this.editingTarget.blocks.toXML()
		    });
		};

		module.exports = VirtualMachine;


	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		function EventEmitter() {
		  this._events = this._events || {};
		  this._maxListeners = this._maxListeners || undefined;
		}
		module.exports = EventEmitter;

		// Backwards-compat with node 0.10.x
		EventEmitter.EventEmitter = EventEmitter;

		EventEmitter.prototype._events = undefined;
		EventEmitter.prototype._maxListeners = undefined;

		// By default EventEmitters will print a warning if more than 10 listeners are
		// added to it. This is a useful default which helps finding memory leaks.
		EventEmitter.defaultMaxListeners = 10;

		// Obviously not all Emitters should be limited to 10. This function allows
		// that to be increased. Set to zero for unlimited.
		EventEmitter.prototype.setMaxListeners = function(n) {
		  if (!isNumber(n) || n < 0 || isNaN(n))
		    throw TypeError('n must be a positive number');
		  this._maxListeners = n;
		  return this;
		};

		EventEmitter.prototype.emit = function(type) {
		  var er, handler, len, args, i, listeners;

		  if (!this._events)
		    this._events = {};

		  // If there is no 'error' event listener then throw.
		  if (type === 'error') {
		    if (!this._events.error ||
		        (isObject(this._events.error) && !this._events.error.length)) {
		      er = arguments[1];
		      if (er instanceof Error) {
		        throw er; // Unhandled 'error' event
		      } else {
		        // At least give some kind of context to the user
		        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
		        err.context = er;
		        throw err;
		      }
		    }
		  }

		  handler = this._events[type];

		  if (isUndefined(handler))
		    return false;

		  if (isFunction(handler)) {
		    switch (arguments.length) {
		      // fast cases
		      case 1:
		        handler.call(this);
		        break;
		      case 2:
		        handler.call(this, arguments[1]);
		        break;
		      case 3:
		        handler.call(this, arguments[1], arguments[2]);
		        break;
		      // slower
		      default:
		        args = Array.prototype.slice.call(arguments, 1);
		        handler.apply(this, args);
		    }
		  } else if (isObject(handler)) {
		    args = Array.prototype.slice.call(arguments, 1);
		    listeners = handler.slice();
		    len = listeners.length;
		    for (i = 0; i < len; i++)
		      listeners[i].apply(this, args);
		  }

		  return true;
		};

		EventEmitter.prototype.addListener = function(type, listener) {
		  var m;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events)
		    this._events = {};

		  // To avoid recursion in the case that type === "newListener"! Before
		  // adding it to the listeners, first emit "newListener".
		  if (this._events.newListener)
		    this.emit('newListener', type,
		              isFunction(listener.listener) ?
		              listener.listener : listener);

		  if (!this._events[type])
		    // Optimize the case of one listener. Don't need the extra array object.
		    this._events[type] = listener;
		  else if (isObject(this._events[type]))
		    // If we've already got an array, just append.
		    this._events[type].push(listener);
		  else
		    // Adding the second element, need to change to array.
		    this._events[type] = [this._events[type], listener];

		  // Check for listener leak
		  if (isObject(this._events[type]) && !this._events[type].warned) {
		    if (!isUndefined(this._maxListeners)) {
		      m = this._maxListeners;
		    } else {
		      m = EventEmitter.defaultMaxListeners;
		    }

		    if (m && m > 0 && this._events[type].length > m) {
		      this._events[type].warned = true;
		      console.error('(node) warning: possible EventEmitter memory ' +
		                    'leak detected. %d listeners added. ' +
		                    'Use emitter.setMaxListeners() to increase limit.',
		                    this._events[type].length);
		      if (typeof console.trace === 'function') {
		        // not supported in IE 10
		        console.trace();
		      }
		    }
		  }

		  return this;
		};

		EventEmitter.prototype.on = EventEmitter.prototype.addListener;

		EventEmitter.prototype.once = function(type, listener) {
		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  var fired = false;

		  function g() {
		    this.removeListener(type, g);

		    if (!fired) {
		      fired = true;
		      listener.apply(this, arguments);
		    }
		  }

		  g.listener = listener;
		  this.on(type, g);

		  return this;
		};

		// emits a 'removeListener' event iff the listener was removed
		EventEmitter.prototype.removeListener = function(type, listener) {
		  var list, position, length, i;

		  if (!isFunction(listener))
		    throw TypeError('listener must be a function');

		  if (!this._events || !this._events[type])
		    return this;

		  list = this._events[type];
		  length = list.length;
		  position = -1;

		  if (list === listener ||
		      (isFunction(list.listener) && list.listener === listener)) {
		    delete this._events[type];
		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);

		  } else if (isObject(list)) {
		    for (i = length; i-- > 0;) {
		      if (list[i] === listener ||
		          (list[i].listener && list[i].listener === listener)) {
		        position = i;
		        break;
		      }
		    }

		    if (position < 0)
		      return this;

		    if (list.length === 1) {
		      list.length = 0;
		      delete this._events[type];
		    } else {
		      list.splice(position, 1);
		    }

		    if (this._events.removeListener)
		      this.emit('removeListener', type, listener);
		  }

		  return this;
		};

		EventEmitter.prototype.removeAllListeners = function(type) {
		  var key, listeners;

		  if (!this._events)
		    return this;

		  // not listening for removeListener, no need to emit
		  if (!this._events.removeListener) {
		    if (arguments.length === 0)
		      this._events = {};
		    else if (this._events[type])
		      delete this._events[type];
		    return this;
		  }

		  // emit removeListener for all listeners on all events
		  if (arguments.length === 0) {
		    for (key in this._events) {
		      if (key === 'removeListener') continue;
		      this.removeAllListeners(key);
		    }
		    this.removeAllListeners('removeListener');
		    this._events = {};
		    return this;
		  }

		  listeners = this._events[type];

		  if (isFunction(listeners)) {
		    this.removeListener(type, listeners);
		  } else if (listeners) {
		    // LIFO order
		    while (listeners.length)
		      this.removeListener(type, listeners[listeners.length - 1]);
		  }
		  delete this._events[type];

		  return this;
		};

		EventEmitter.prototype.listeners = function(type) {
		  var ret;
		  if (!this._events || !this._events[type])
		    ret = [];
		  else if (isFunction(this._events[type]))
		    ret = [this._events[type]];
		  else
		    ret = this._events[type].slice();
		  return ret;
		};

		EventEmitter.prototype.listenerCount = function(type) {
		  if (this._events) {
		    var evlistener = this._events[type];

		    if (isFunction(evlistener))
		      return 1;
		    else if (evlistener)
		      return evlistener.length;
		  }
		  return 0;
		};

		EventEmitter.listenerCount = function(emitter, type) {
		  return emitter.listenerCount(type);
		};

		function isFunction(arg) {
		  return typeof arg === 'function';
		}

		function isNumber(arg) {
		  return typeof arg === 'number';
		}

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}

		function isUndefined(arg) {
		  return arg === void 0;
		}


	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var formatRegExp = /%[sdj%]/g;
		exports.format = function(f) {
		  if (!isString(f)) {
		    var objects = [];
		    for (var i = 0; i < arguments.length; i++) {
		      objects.push(inspect(arguments[i]));
		    }
		    return objects.join(' ');
		  }

		  var i = 1;
		  var args = arguments;
		  var len = args.length;
		  var str = String(f).replace(formatRegExp, function(x) {
		    if (x === '%%') return '%';
		    if (i >= len) return x;
		    switch (x) {
		      case '%s': return String(args[i++]);
		      case '%d': return Number(args[i++]);
		      case '%j':
		        try {
		          return JSON.stringify(args[i++]);
		        } catch (_) {
		          return '[Circular]';
		        }
		      default:
		        return x;
		    }
		  });
		  for (var x = args[i]; i < len; x = args[++i]) {
		    if (isNull(x) || !isObject(x)) {
		      str += ' ' + x;
		    } else {
		      str += ' ' + inspect(x);
		    }
		  }
		  return str;
		};


		// Mark that a method should not be used.
		// Returns a modified function which warns once by default.
		// If --no-deprecation is set, then it is a no-op.
		exports.deprecate = function(fn, msg) {
		  // Allow for deprecating things in the process of starting up.
		  if (isUndefined(global.process)) {
		    return function() {
		      return exports.deprecate(fn, msg).apply(this, arguments);
		    };
		  }

		  if (process.noDeprecation === true) {
		    return fn;
		  }

		  var warned = false;
		  function deprecated() {
		    if (!warned) {
		      if (process.throwDeprecation) {
		        throw new Error(msg);
		      } else if (process.traceDeprecation) {
		        console.trace(msg);
		      } else {
		        console.error(msg);
		      }
		      warned = true;
		    }
		    return fn.apply(this, arguments);
		  }

		  return deprecated;
		};


		var debugs = {};
		var debugEnviron;
		exports.debuglog = function(set) {
		  if (isUndefined(debugEnviron))
		    debugEnviron = process.env.NODE_DEBUG || '';
		  set = set.toUpperCase();
		  if (!debugs[set]) {
		    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
		      var pid = process.pid;
		      debugs[set] = function() {
		        var msg = exports.format.apply(exports, arguments);
		        console.error('%s %d: %s', set, pid, msg);
		      };
		    } else {
		      debugs[set] = function() {};
		    }
		  }
		  return debugs[set];
		};


		/**
		 * Echos the value of a value. Trys to print the value out
		 * in the best way possible given the different types.
		 *
		 * @param {Object} obj The object to print out.
		 * @param {Object} opts Optional options object that alters the output.
		 */
		/* legacy: obj, showHidden, depth, colors*/
		function inspect(obj, opts) {
		  // default options
		  var ctx = {
		    seen: [],
		    stylize: stylizeNoColor
		  };
		  // legacy...
		  if (arguments.length >= 3) ctx.depth = arguments[2];
		  if (arguments.length >= 4) ctx.colors = arguments[3];
		  if (isBoolean(opts)) {
		    // legacy...
		    ctx.showHidden = opts;
		  } else if (opts) {
		    // got an "options" object
		    exports._extend(ctx, opts);
		  }
		  // set default options
		  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
		  if (isUndefined(ctx.depth)) ctx.depth = 2;
		  if (isUndefined(ctx.colors)) ctx.colors = false;
		  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
		  if (ctx.colors) ctx.stylize = stylizeWithColor;
		  return formatValue(ctx, obj, ctx.depth);
		}
		exports.inspect = inspect;


		// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
		inspect.colors = {
		  'bold' : [1, 22],
		  'italic' : [3, 23],
		  'underline' : [4, 24],
		  'inverse' : [7, 27],
		  'white' : [37, 39],
		  'grey' : [90, 39],
		  'black' : [30, 39],
		  'blue' : [34, 39],
		  'cyan' : [36, 39],
		  'green' : [32, 39],
		  'magenta' : [35, 39],
		  'red' : [31, 39],
		  'yellow' : [33, 39]
		};

		// Don't use 'blue' not visible on cmd.exe
		inspect.styles = {
		  'special': 'cyan',
		  'number': 'yellow',
		  'boolean': 'yellow',
		  'undefined': 'grey',
		  'null': 'bold',
		  'string': 'green',
		  'date': 'magenta',
		  // "name": intentionally not styling
		  'regexp': 'red'
		};


		function stylizeWithColor(str, styleType) {
		  var style = inspect.styles[styleType];

		  if (style) {
		    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
		           '\u001b[' + inspect.colors[style][1] + 'm';
		  } else {
		    return str;
		  }
		}


		function stylizeNoColor(str, styleType) {
		  return str;
		}


		function arrayToHash(array) {
		  var hash = {};

		  array.forEach(function(val, idx) {
		    hash[val] = true;
		  });

		  return hash;
		}


		function formatValue(ctx, value, recurseTimes) {
		  // Provide a hook for user-specified inspect functions.
		  // Check that value is an object with an inspect function on it
		  if (ctx.customInspect &&
		      value &&
		      isFunction(value.inspect) &&
		      // Filter out the util module, it's inspect function is special
		      value.inspect !== exports.inspect &&
		      // Also filter out any prototype objects using the circular check.
		      !(value.constructor && value.constructor.prototype === value)) {
		    var ret = value.inspect(recurseTimes, ctx);
		    if (!isString(ret)) {
		      ret = formatValue(ctx, ret, recurseTimes);
		    }
		    return ret;
		  }

		  // Primitive types cannot have properties
		  var primitive = formatPrimitive(ctx, value);
		  if (primitive) {
		    return primitive;
		  }

		  // Look up the keys of the object.
		  var keys = Object.keys(value);
		  var visibleKeys = arrayToHash(keys);

		  if (ctx.showHidden) {
		    keys = Object.getOwnPropertyNames(value);
		  }

		  // IE doesn't make error fields non-enumerable
		  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
		  if (isError(value)
		      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
		    return formatError(value);
		  }

		  // Some type of object without properties can be shortcutted.
		  if (keys.length === 0) {
		    if (isFunction(value)) {
		      var name = value.name ? ': ' + value.name : '';
		      return ctx.stylize('[Function' + name + ']', 'special');
		    }
		    if (isRegExp(value)) {
		      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		    }
		    if (isDate(value)) {
		      return ctx.stylize(Date.prototype.toString.call(value), 'date');
		    }
		    if (isError(value)) {
		      return formatError(value);
		    }
		  }

		  var base = '', array = false, braces = ['{', '}'];

		  // Make Array say that they are Array
		  if (isArray(value)) {
		    array = true;
		    braces = ['[', ']'];
		  }

		  // Make functions say that they are functions
		  if (isFunction(value)) {
		    var n = value.name ? ': ' + value.name : '';
		    base = ' [Function' + n + ']';
		  }

		  // Make RegExps say that they are RegExps
		  if (isRegExp(value)) {
		    base = ' ' + RegExp.prototype.toString.call(value);
		  }

		  // Make dates with properties first say the date
		  if (isDate(value)) {
		    base = ' ' + Date.prototype.toUTCString.call(value);
		  }

		  // Make error with message first say the error
		  if (isError(value)) {
		    base = ' ' + formatError(value);
		  }

		  if (keys.length === 0 && (!array || value.length == 0)) {
		    return braces[0] + base + braces[1];
		  }

		  if (recurseTimes < 0) {
		    if (isRegExp(value)) {
		      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		    } else {
		      return ctx.stylize('[Object]', 'special');
		    }
		  }

		  ctx.seen.push(value);

		  var output;
		  if (array) {
		    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
		  } else {
		    output = keys.map(function(key) {
		      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
		    });
		  }

		  ctx.seen.pop();

		  return reduceToSingleString(output, base, braces);
		}


		function formatPrimitive(ctx, value) {
		  if (isUndefined(value))
		    return ctx.stylize('undefined', 'undefined');
		  if (isString(value)) {
		    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
		                                             .replace(/'/g, "\\'")
		                                             .replace(/\\"/g, '"') + '\'';
		    return ctx.stylize(simple, 'string');
		  }
		  if (isNumber(value))
		    return ctx.stylize('' + value, 'number');
		  if (isBoolean(value))
		    return ctx.stylize('' + value, 'boolean');
		  // For some reason typeof null is "object", so special case here.
		  if (isNull(value))
		    return ctx.stylize('null', 'null');
		}


		function formatError(value) {
		  return '[' + Error.prototype.toString.call(value) + ']';
		}


		function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
		  var output = [];
		  for (var i = 0, l = value.length; i < l; ++i) {
		    if (hasOwnProperty(value, String(i))) {
		      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		          String(i), true));
		    } else {
		      output.push('');
		    }
		  }
		  keys.forEach(function(key) {
		    if (!key.match(/^\d+$/)) {
		      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
		          key, true));
		    }
		  });
		  return output;
		}


		function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
		  var name, str, desc;
		  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
		  if (desc.get) {
		    if (desc.set) {
		      str = ctx.stylize('[Getter/Setter]', 'special');
		    } else {
		      str = ctx.stylize('[Getter]', 'special');
		    }
		  } else {
		    if (desc.set) {
		      str = ctx.stylize('[Setter]', 'special');
		    }
		  }
		  if (!hasOwnProperty(visibleKeys, key)) {
		    name = '[' + key + ']';
		  }
		  if (!str) {
		    if (ctx.seen.indexOf(desc.value) < 0) {
		      if (isNull(recurseTimes)) {
		        str = formatValue(ctx, desc.value, null);
		      } else {
		        str = formatValue(ctx, desc.value, recurseTimes - 1);
		      }
		      if (str.indexOf('\n') > -1) {
		        if (array) {
		          str = str.split('\n').map(function(line) {
		            return '  ' + line;
		          }).join('\n').substr(2);
		        } else {
		          str = '\n' + str.split('\n').map(function(line) {
		            return '   ' + line;
		          }).join('\n');
		        }
		      }
		    } else {
		      str = ctx.stylize('[Circular]', 'special');
		    }
		  }
		  if (isUndefined(name)) {
		    if (array && key.match(/^\d+$/)) {
		      return str;
		    }
		    name = JSON.stringify('' + key);
		    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
		      name = name.substr(1, name.length - 2);
		      name = ctx.stylize(name, 'name');
		    } else {
		      name = name.replace(/'/g, "\\'")
		                 .replace(/\\"/g, '"')
		                 .replace(/(^"|"$)/g, "'");
		      name = ctx.stylize(name, 'string');
		    }
		  }

		  return name + ': ' + str;
		}


		function reduceToSingleString(output, base, braces) {
		  var numLinesEst = 0;
		  var length = output.reduce(function(prev, cur) {
		    numLinesEst++;
		    if (cur.indexOf('\n') >= 0) numLinesEst++;
		    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
		  }, 0);

		  if (length > 60) {
		    return braces[0] +
		           (base === '' ? '' : base + '\n ') +
		           ' ' +
		           output.join(',\n  ') +
		           ' ' +
		           braces[1];
		  }

		  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
		}


		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.
		function isArray(ar) {
		  return Array.isArray(ar);
		}
		exports.isArray = isArray;

		function isBoolean(arg) {
		  return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;

		function isNull(arg) {
		  return arg === null;
		}
		exports.isNull = isNull;

		function isNullOrUndefined(arg) {
		  return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;

		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		exports.isNumber = isNumber;

		function isString(arg) {
		  return typeof arg === 'string';
		}
		exports.isString = isString;

		function isSymbol(arg) {
		  return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;

		function isUndefined(arg) {
		  return arg === void 0;
		}
		exports.isUndefined = isUndefined;

		function isRegExp(re) {
		  return isObject(re) && objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;

		function isDate(d) {
		  return isObject(d) && objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;

		function isError(e) {
		  return isObject(e) &&
		      (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;

		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		exports.isFunction = isFunction;

		function isPrimitive(arg) {
		  return arg === null ||
		         typeof arg === 'boolean' ||
		         typeof arg === 'number' ||
		         typeof arg === 'string' ||
		         typeof arg === 'symbol' ||  // ES6 symbol
		         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;

		exports.isBuffer = __webpack_require__(4);

		function objectToString(o) {
		  return Object.prototype.toString.call(o);
		}


		function pad(n) {
		  return n < 10 ? '0' + n.toString(10) : n.toString(10);
		}


		var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
		              'Oct', 'Nov', 'Dec'];

		// 26 Feb 16:19:34
		function timestamp() {
		  var d = new Date();
		  var time = [pad(d.getHours()),
		              pad(d.getMinutes()),
		              pad(d.getSeconds())].join(':');
		  return [d.getDate(), months[d.getMonth()], time].join(' ');
		}


		// log is just a thin wrapper to console.log that prepends a timestamp
		exports.log = function() {
		  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
		};


		/**
		 * Inherit the prototype methods from one constructor into another.
		 *
		 * The Function.prototype.inherits from lang.js rewritten as a standalone
		 * function (not on Function.prototype). NOTE: If this file is to be loaded
		 * during bootstrapping this function needs to be rewritten using some native
		 * functions as prototype setup using normal JavaScript does not work as
		 * expected during bootstrapping (see mirror.js in r114903).
		 *
		 * @param {function} ctor Constructor function which needs to inherit the
		 *     prototype.
		 * @param {function} superCtor Constructor function to inherit prototype from.
		 */
		exports.inherits = __webpack_require__(5);

		exports._extend = function(origin, add) {
		  // Don't do anything if add isn't an object
		  if (!add || !isObject(add)) return origin;

		  var keys = Object.keys(add);
		  var i = keys.length;
		  while (i--) {
		    origin[keys[i]] = add[keys[i]];
		  }
		  return origin;
		};

		function hasOwnProperty(obj, prop) {
		  return Object.prototype.hasOwnProperty.call(obj, prop);
		}

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};

		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }


		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }



		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		module.exports = function isBuffer(arg) {
		  return arg && typeof arg === 'object'
		    && typeof arg.copy === 'function'
		    && typeof arg.fill === 'function'
		    && typeof arg.readUInt8 === 'function';
		}

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    ctor.prototype = Object.create(superCtor.prototype, {
		      constructor: {
		        value: ctor,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    var TempCtor = function () {}
		    TempCtor.prototype = superCtor.prototype
		    ctor.prototype = new TempCtor()
		    ctor.prototype.constructor = ctor
		  }
		}


	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		var EventEmitter = __webpack_require__(1);
		var Sequencer = __webpack_require__(7);
		var Blocks = __webpack_require__(11);
		var Thread = __webpack_require__(9);
		var util = __webpack_require__(2);

		// Virtual I/O devices.
		var Clock = __webpack_require__(66);
		var Keyboard = __webpack_require__(67);
		var Mouse = __webpack_require__(70);

		var defaultBlockPackages = {
		    'scratch3_control': __webpack_require__(72),
		    'scratch3_event': __webpack_require__(83),
		    'scratch3_looks': __webpack_require__(84),
		    'scratch3_motion': __webpack_require__(85),
		    'scratch3_operators': __webpack_require__(86),
		    'scratch3_sound': __webpack_require__(87),
		    'scratch3_sensing': __webpack_require__(88),
		    'scratch3_data': __webpack_require__(89),
		    'scratch3_procedures': __webpack_require__(90)
		};

		/**
		 * Manages targets, scripts, and the sequencer.
		 */
		function Runtime () {
		    // Bind event emitter
		    EventEmitter.call(this);

		    // State for the runtime

		    /**
		     * Target management and storage.
		     * @type {Array.<!Target>}
		     */
		    this.targets = [];

		    /**
		     * A list of threads that are currently running in the VM.
		     * Threads are added when execution starts and pruned when execution ends.
		     * @type {Array.<Thread>}
		     */
		    this.threads = [];

		    /** @type {!Sequencer} */
		    this.sequencer = new Sequencer(this);

		    this.flyoutBlocks = new Blocks();

		    /**
		     * Map to look up a block primitive's implementation function by its opcode.
		     * This is a two-step lookup: package name first, then primitive name.
		     * @type {Object.<string, Function>}
		     */
		    this._primitives = {};
		    this._hats = {};
		    this._edgeActivatedHatValues = {};
		    this._registerBlockPackages();

		    this.ioDevices = {
		        'clock': new Clock(),
		        'keyboard': new Keyboard(this),
		        'mouse': new Mouse(this)
		    };

		    this._scriptGlowsPreviousFrame = [];
		    this._editingTarget = null;
		    /**
		     * Currently known number of clones.
		     * @type {number}
		     */
		    this._cloneCounter = 0;
		}

		/**
		 * Width of the stage, in pixels.
		 * @const {number}
		 */
		Runtime.STAGE_WIDTH = 480;

		/**
		 * Height of the stage, in pixels.
		 * @const {number}
		 */
		Runtime.STAGE_HEIGHT = 360;

		/**
		 * Event name for glowing a script.
		 * @const {string}
		 */
		Runtime.SCRIPT_GLOW_ON = 'STACK_GLOW_ON';

		/**
		 * Event name for unglowing a script.
		 * @const {string}
		 */
		Runtime.SCRIPT_GLOW_OFF = 'STACK_GLOW_OFF';

		/**
		 * Event name for glowing a block.
		 * @const {string}
		 */
		Runtime.BLOCK_GLOW_ON = 'BLOCK_GLOW_ON';

		/**
		 * Event name for unglowing a block.
		 * @const {string}
		 */
		Runtime.BLOCK_GLOW_OFF = 'BLOCK_GLOW_OFF';

		/**
		 * Event name for visual value report.
		 * @const {string}
		 */
		Runtime.VISUAL_REPORT = 'VISUAL_REPORT';

		/**
		 * Inherit from EventEmitter
		 */
		util.inherits(Runtime, EventEmitter);

		/**
		 * How rapidly we try to step threads, in ms.
		 */
		Runtime.THREAD_STEP_INTERVAL = 1000 / 60;

		/**
		 * How many clones can be created at a time.
		 * @const {number}
		 */
		Runtime.MAX_CLONES = 300;

		// -----------------------------------------------------------------------------
		// -----------------------------------------------------------------------------

		/**
		 * Register default block packages with this runtime.
		 * @todo Prefix opcodes with package name.
		 * @private
		 */
		Runtime.prototype._registerBlockPackages = function () {
		    for (var packageName in defaultBlockPackages) {
		        if (defaultBlockPackages.hasOwnProperty(packageName)) {
		            // @todo pass a different runtime depending on package privilege?
		            var packageObject = new (defaultBlockPackages[packageName])(this);
		            // Collect primitives from package.
		            if (packageObject.getPrimitives) {
		                var packagePrimitives = packageObject.getPrimitives();
		                for (var op in packagePrimitives) {
		                    if (packagePrimitives.hasOwnProperty(op)) {
		                        this._primitives[op] =
		                            packagePrimitives[op].bind(packageObject);
		                    }
		                }
		            }
		            // Collect hat metadata from package.
		            if (packageObject.getHats) {
		                var packageHats = packageObject.getHats();
		                for (var hatName in packageHats) {
		                    if (packageHats.hasOwnProperty(hatName)) {
		                        this._hats[hatName] = packageHats[hatName];
		                    }
		                }
		            }
		        }
		    }
		};

		/**
		 * Retrieve the function associated with the given opcode.
		 * @param {!string} opcode The opcode to look up.
		 * @return {Function} The function which implements the opcode.
		 */
		Runtime.prototype.getOpcodeFunction = function (opcode) {
		    return this._primitives[opcode];
		};

		// -----------------------------------------------------------------------------
		// -----------------------------------------------------------------------------

		/**
		 * Return whether an opcode represents a hat block.
		 * @param {!string} opcode The opcode to look up.
		 * @return {Boolean} True if the op is known to be a hat.
		 */
		Runtime.prototype.getIsHat = function (opcode) {
		    return this._hats.hasOwnProperty(opcode);
		};

		/**
		 * Return whether an opcode represents an edge-activated hat block.
		 * @param {!string} opcode The opcode to look up.
		 * @return {Boolean} True if the op is known to be a edge-activated hat.
		 */
		Runtime.prototype.getIsEdgeActivatedHat = function (opcode) {
		    return this._hats.hasOwnProperty(opcode) &&
		        this._hats[opcode].edgeActivated;
		};

		/**
		 * Update an edge-activated hat block value.
		 * @param {!string} blockId ID of hat to store value for.
		 * @param {*} newValue Value to store for edge-activated hat.
		 * @return {*} The old value for the edge-activated hat.
		 */
		Runtime.prototype.updateEdgeActivatedValue = function (blockId, newValue) {
		    var oldValue = this._edgeActivatedHatValues[blockId];
		    this._edgeActivatedHatValues[blockId] = newValue;
		    return oldValue;
		};

		/**
		 * Clear all edge-activaed hat values.
		 */
		Runtime.prototype.clearEdgeActivatedValues = function () {
		    this._edgeActivatedHatValues = {};
		};

		/**
		 * Attach the renderer
		 * @param {!RenderWebGL} renderer The renderer to attach
		 */
		Runtime.prototype.attachRenderer = function (renderer) {
		    this.renderer = renderer;
		};

		// -----------------------------------------------------------------------------
		// -----------------------------------------------------------------------------

		/**
		 * Create a thread and push it to the list of threads.
		 * @param {!string} id ID of block that starts the stack.
		 * @param {!Target} target Target to run thread on.
		 * @return {!Thread} The newly created thread.
		 */
		Runtime.prototype._pushThread = function (id, target) {
		    var thread = new Thread(id);
		    thread.setTarget(target);
		    thread.pushStack(id);
		    this.threads.push(thread);
		    return thread;
		};

		/**
		 * Remove a thread from the list of threads.
		 * @param {?Thread} thread Thread object to remove from actives
		 */
		Runtime.prototype._removeThread = function (thread) {
		    // Inform sequencer to stop executing that thread.
		    this.sequencer.retireThread(thread);
		    // Remove from the list.
		    var i = this.threads.indexOf(thread);
		    if (i > -1) {
		        this.threads.splice(i, 1);
		    }
		};

		/**
		 * Return whether a thread is currently active/running.
		 * @param {?Thread} thread Thread object to check.
		 * @return {Boolean} True if the thread is active/running.
		 */
		Runtime.prototype.isActiveThread = function (thread) {
		    return this.threads.indexOf(thread) > -1;
		};

		/**
		 * Toggle a script.
		 * @param {!string} topBlockId ID of block that starts the script.
		 */
		Runtime.prototype.toggleScript = function (topBlockId) {
		    // Remove any existing thread.
		    for (var i = 0; i < this.threads.length; i++) {
		        if (this.threads[i].topBlock == topBlockId) {
		            this._removeThread(this.threads[i]);
		            return;
		        }
		    }
		    // Otherwise add it.
		    this._pushThread(topBlockId, this._editingTarget);
		};

		/**
		 * Run a function `f` for all scripts in a workspace.
		 * `f` will be called with two parameters:
		 *  - the top block ID of the script.
		 *  - the target that owns the script.
		 * @param {!Function} f Function to call for each script.
		 * @param {Target=} opt_target Optionally, a target to restrict to.
		 */
		Runtime.prototype.allScriptsDo = function (f, opt_target) {
		    var targets = this.targets;
		    if (opt_target) {
		        targets = [opt_target];
		    }
		    for (var t = 0; t < targets.length; t++) {
		        var target = targets[t];
		        var scripts = target.blocks.getScripts();
		        for (var j = 0; j < scripts.length; j++) {
		            var topBlockId = scripts[j];
		            f(topBlockId, target);
		        }
		    }
		};

		/**
		 * Start all relevant hats.
		 * @param {!string} requestedHatOpcode Opcode of hats to start.
		 * @param {Object=} opt_matchFields Optionally, fields to match on the hat.
		 * @param {Target=} opt_target Optionally, a target to restrict to.
		 * @return {Array.<Thread>} List of threads started by this function.
		 */
		Runtime.prototype.startHats = function (requestedHatOpcode,
		    opt_matchFields, opt_target) {
		    if (!this._hats.hasOwnProperty(requestedHatOpcode)) {
		        // No known hat with this opcode.
		        return;
		    }
		    var instance = this;
		    var newThreads = [];
		    // Consider all scripts, looking for hats with opcode `requestedHatOpcode`.
		    this.allScriptsDo(function(topBlockId, target) {
		        var potentialHatOpcode = target.blocks.getBlock(topBlockId).opcode;
		        if (potentialHatOpcode !== requestedHatOpcode) {
		            // Not the right hat.
		            return;
		        }
		        // Match any requested fields.
		        // For example: ensures that broadcasts match.
		        // This needs to happen before the block is evaluated
		        // (i.e., before the predicate can be run) because "broadcast and wait"
		        // needs to have a precise collection of started threads.
		        var hatFields = target.blocks.getFields(topBlockId);
		        if (opt_matchFields) {
		            for (var matchField in opt_matchFields) {
		                if (hatFields[matchField].value !==
		                    opt_matchFields[matchField]) {
		                    // Field mismatch.
		                    return;
		                }
		            }
		        }
		        // Look up metadata for the relevant hat.
		        var hatMeta = instance._hats[requestedHatOpcode];
		        if (hatMeta.restartExistingThreads) {
		            // If `restartExistingThreads` is true, we should stop
		            // any existing threads starting with the top block.
		            for (var i = 0; i < instance.threads.length; i++) {
		                if (instance.threads[i].topBlock === topBlockId &&
		                    instance.threads[i].target == target) {
		                    instance._removeThread(instance.threads[i]);
		                }
		            }
		        } else {
		            // If `restartExistingThreads` is false, we should
		            // give up if any threads with the top block are running.
		            for (var j = 0; j < instance.threads.length; j++) {
		                if (instance.threads[j].topBlock === topBlockId &&
		                    instance.threads[j].target == target) {
		                    // Some thread is already running.
		                    return;
		                }
		            }
		        }
		        // Start the thread with this top block.
		        newThreads.push(instance._pushThread(topBlockId, target));
		    }, opt_target);
		    return newThreads;
		};

		/**
		 * Dispose all targets. Return to clean state.
		 */
		Runtime.prototype.dispose = function () {
		    this.stopAll();
		    this.targets.map(this.disposeTarget, this);
		};

		/**
		 * Dispose of a target.
		 * @param {!Target} disposingTarget Target to dispose of.
		 */
		Runtime.prototype.disposeTarget = function (disposingTarget) {
		    this.targets = this.targets.filter(function (target) {
		        if (disposingTarget !== target) return true;
		        // Allow target to do dispose actions.
		        target.dispose();
		        // Remove from list of targets.
		        return false;
		    });
		};

		/**
		 * Stop any threads acting on the target.
		 * @param {!Target} target Target to stop threads for.
		 * @param {Thread=} opt_threadException Optional thread to skip.
		 */
		Runtime.prototype.stopForTarget = function (target, opt_threadException) {
		    // Stop any threads on the target.
		    for (var i = 0; i < this.threads.length; i++) {
		        if (this.threads[i] === opt_threadException) {
		            continue;
		        }
		        if (this.threads[i].target == target) {
		            this._removeThread(this.threads[i]);
		        }
		    }
		};

		/**
		 * Start all threads that start with the green flag.
		 */
		Runtime.prototype.greenFlag = function () {
		    this.stopAll();
		    this.ioDevices.clock.resetProjectTimer();
		    this.clearEdgeActivatedValues();
		    // Inform all targets of the green flag.
		    for (var i = 0; i < this.targets.length; i++) {
		        this.targets[i].onGreenFlag();
		    }
		    this.startHats('event_whenflagclicked');
		};

		/**
		 * Stop "everything."
		 */
		Runtime.prototype.stopAll = function () {
		    // Dispose all clones.
		    var newTargets = [];
		    for (var i = 0; i < this.targets.length; i++) {
		        if (this.targets[i].hasOwnProperty('isOriginal') &&
		            !this.targets[i].isOriginal) {
		            this.targets[i].dispose();
		        } else {
		            newTargets.push(this.targets[i]);
		        }
		    }
		    this.targets = newTargets;
		    // Dispose all threads.
		    var threadsCopy = this.threads.slice();
		    while (threadsCopy.length > 0) {
		        var poppedThread = threadsCopy.pop();
		        this._removeThread(poppedThread);
		    }
		};

		/**
		 * Repeatedly run `sequencer.stepThreads` and filter out
		 * inactive threads after each iteration.
		 */
		Runtime.prototype._step = function () {
		    // Find all edge-activated hats, and add them to threads to be evaluated.
		    for (var hatType in this._hats) {
		        var hat = this._hats[hatType];
		        if (hat.edgeActivated) {
		            this.startHats(hatType);
		        }
		    }
		    var inactiveThreads = this.sequencer.stepThreads(this.threads);
		    this._updateScriptGlows();
		    for (var i = 0; i < inactiveThreads.length; i++) {
		        this._removeThread(inactiveThreads[i]);
		    }
		};

		Runtime.prototype.setEditingTarget = function (editingTarget) {
		    this._scriptGlowsPreviousFrame = [];
		    this._editingTarget = editingTarget;
		    this._updateScriptGlows();
		};

		Runtime.prototype._updateScriptGlows = function () {
		    // Set of scripts that request a glow this frame.
		    var requestedGlowsThisFrame = [];
		    // Final set of scripts glowing during this frame.
		    var finalScriptGlows = [];
		    // Find all scripts that should be glowing.
		    for (var i = 0; i < this.threads.length; i++) {
		        var thread = this.threads[i];
		        var target = thread.target;
		        if (thread.requestScriptGlowInFrame && target == this._editingTarget) {
		            var blockForThread = thread.peekStack() || thread.topBlock;
		            var script = target.blocks.getTopLevelScript(blockForThread);
		            if (!script) {
		                // Attempt to find in flyout blocks.
		                script = this.flyoutBlocks.getTopLevelScript(blockForThread);
		            }
		            if (script) {
		                requestedGlowsThisFrame.push(script);
		            }
		        }
		    }
		    // Compare to previous frame.
		    for (var j = 0; j < this._scriptGlowsPreviousFrame.length; j++) {
		        var previousFrameGlow = this._scriptGlowsPreviousFrame[j];
		        if (requestedGlowsThisFrame.indexOf(previousFrameGlow) < 0) {
		            // Glow turned off.
		            this.glowScript(previousFrameGlow, false);
		        } else {
		            // Still glowing.
		            finalScriptGlows.push(previousFrameGlow);
		        }
		    }
		    for (var k = 0; k < requestedGlowsThisFrame.length; k++) {
		        var currentFrameGlow = requestedGlowsThisFrame[k];
		        if (this._scriptGlowsPreviousFrame.indexOf(currentFrameGlow) < 0) {
		            // Glow turned on.
		            this.glowScript(currentFrameGlow, true);
		            finalScriptGlows.push(currentFrameGlow);
		        }
		    }
		    this._scriptGlowsPreviousFrame = finalScriptGlows;
		};

		/**
		 * "Quiet" a script's glow: stop the VM from generating glow/unglow events
		 * about that script. Use when a script has just been deleted, but we may
		 * still be tracking glow data about it.
		 * @param {!string} scriptBlockId Id of top-level block in script to quiet.
		 */
		Runtime.prototype.quietGlow = function (scriptBlockId) {
		    var index = this._scriptGlowsPreviousFrame.indexOf(scriptBlockId);
		    if (index > -1) {
		        this._scriptGlowsPreviousFrame.splice(index, 1);
		    }
		};

		/**
		 * Emit feedback for block glowing (used in the sequencer).
		 * @param {?string} blockId ID for the block to update glow
		 * @param {boolean} isGlowing True to turn on glow; false to turn off.
		 */
		Runtime.prototype.glowBlock = function (blockId, isGlowing) {
		    if (isGlowing) {
		        this.emit(Runtime.BLOCK_GLOW_ON, blockId);
		    } else {
		        this.emit(Runtime.BLOCK_GLOW_OFF, blockId);
		    }
		};

		/**
		 * Emit feedback for script glowing.
		 * @param {?string} topBlockId ID for the top block to update glow
		 * @param {boolean} isGlowing True to turn on glow; false to turn off.
		 */
		Runtime.prototype.glowScript = function (topBlockId, isGlowing) {
		    if (isGlowing) {
		        this.emit(Runtime.SCRIPT_GLOW_ON, topBlockId);
		    } else {
		        this.emit(Runtime.SCRIPT_GLOW_OFF, topBlockId);
		    }
		};

		/**
		 * Emit value for reporter to show in the blocks.
		 * @param {string} blockId ID for the block.
		 * @param {string} value Value to show associated with the block.
		 */
		Runtime.prototype.visualReport = function (blockId, value) {
		    this.emit(Runtime.VISUAL_REPORT, blockId, String(value));
		};

		/**
		 * Get a target by its id.
		 * @param {string} targetId Id of target to find.
		 * @return {?Target} The target, if found.
		 */
		Runtime.prototype.getTargetById = function (targetId) {
		    for (var i = 0; i < this.targets.length; i++) {
		        var target = this.targets[i];
		        if (target.id == targetId) {
		            return target;
		        }
		    }
		};

		/**
		 * Get the first original (non-clone-block-created) sprite given a name.
		 * @param {string} spriteName Name of sprite to look for.
		 * @return {?Target} Target representing a sprite of the given name.
		 */
		Runtime.prototype.getSpriteTargetByName = function (spriteName) {
		    for (var i = 0; i < this.targets.length; i++) {
		        var target = this.targets[i];
		        if (target.sprite && target.sprite.name == spriteName) {
		            return target;
		        }
		    }
		};

		/**
		 * Update the clone counter to track how many clones are created.
		 * @param {number} changeAmount How many clones have been created/destroyed.
		 */
		Runtime.prototype.changeCloneCounter = function (changeAmount) {
		    this._cloneCounter += changeAmount;
		};

		/**
		 * Return whether there are clones available.
		 * @return {boolean} True until the number of clones hits Runtime.MAX_CLONES.
		 */
		Runtime.prototype.clonesAvailable = function () {
		    return this._cloneCounter < Runtime.MAX_CLONES;
		};

		/**
		 * Get a target representing the Scratch stage, if one exists.
		 * @return {?Target} The target, if found.
		 */
		Runtime.prototype.getTargetForStage = function () {
		    for (var i = 0; i < this.targets.length; i++) {
		        var target = this.targets[i];
		        if (target.isStage) {
		            return target;
		        }
		    }
		};

		/**
		 * Handle an animation frame from the main thread.
		 */
		Runtime.prototype.animationFrame = function () {
		    if (this.renderer) {
		        this.renderer.draw();
		    }
		};

		/**
		 * Set up timers to repeatedly step in a browser
		 */
		Runtime.prototype.start = function () {
		    self.setInterval(function() {
		        this._step();
		    }.bind(this), Runtime.THREAD_STEP_INTERVAL);
		};

		module.exports = Runtime;


	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		var Timer = __webpack_require__(8);
		var Thread = __webpack_require__(9);
		var execute = __webpack_require__(10);

		function Sequencer (runtime) {
		    /**
		     * A utility timer for timing thread sequencing.
		     * @type {!Timer}
		     */
		    this.timer = new Timer();

		    /**
		     * Reference to the runtime owning this sequencer.
		     * @type {!Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * The sequencer does as much work as it can within WORK_TIME milliseconds,
		 * then yields. This is essentially a rate-limiter for blocks.
		 * In Scratch 2.0, this is set to 75% of the target stage frame-rate (30fps).
		 * @const {!number}
		 */
		Sequencer.WORK_TIME = 10;

		/**
		 * Step through all threads in `this.threads`, running them in order.
		 * @param {Array.<Thread>} threads List of which threads to step.
		 * @return {Array.<Thread>} All threads which have finished in this iteration.
		 */
		Sequencer.prototype.stepThreads = function (threads) {
		    // Start counting toward WORK_TIME
		    this.timer.start();
		    // List of threads which have been killed by this step.
		    var inactiveThreads = [];
		    // If all of the threads are yielding, we should yield.
		    var numYieldingThreads = 0;
		    // Clear all yield statuses that were for the previous frame.
		    for (var t = 0; t < threads.length; t++) {
		        if (threads[t].status === Thread.STATUS_YIELD_FRAME) {
		            threads[t].setStatus(Thread.STATUS_RUNNING);
		        }
		    }

		    // While there are still threads to run and we are within WORK_TIME,
		    // continue executing threads.
		    while (threads.length > 0 &&
		           threads.length > numYieldingThreads &&
		           this.timer.timeElapsed() < Sequencer.WORK_TIME) {
		        // New threads at the end of the iteration.
		        var newThreads = [];
		        // Reset yielding thread count.
		        numYieldingThreads = 0;
		        // Attempt to run each thread one time
		        for (var i = 0; i < threads.length; i++) {
		            var activeThread = threads[i];
		            if (activeThread.status === Thread.STATUS_RUNNING) {
		                // Normal-mode thread: step.
		                this.startThread(activeThread);
		            } else if (activeThread.status === Thread.STATUS_YIELD ||
		                       activeThread.status === Thread.STATUS_YIELD_FRAME) {
		                // Yielding thread: do nothing for this step.
		                numYieldingThreads++;
		            }
		            if (activeThread.stack.length === 0 &&
		                activeThread.status === Thread.STATUS_DONE) {
		                // Finished with this thread - tell runtime to clean it up.
		                inactiveThreads.push(activeThread);
		            } else {
		                // Keep this thead in the loop.
		                newThreads.push(activeThread);
		            }
		        }
		        // Effectively filters out threads that have stopped.
		        threads = newThreads;
		    }
		    return inactiveThreads;
		};

		/**
		 * Step the requested thread
		 * @param {!Thread} thread Thread object to step
		 */
		Sequencer.prototype.startThread = function (thread) {
		    var currentBlockId = thread.peekStack();
		    if (!currentBlockId) {
		        // A "null block" - empty branch.
		        // Yield for the frame.
		        thread.popStack();
		        thread.setStatus(Thread.STATUS_YIELD_FRAME);
		        return;
		    }
		    // Execute the current block
		    execute(this, thread);
		    // If the block executed without yielding and without doing control flow,
		    // move to done.
		    if (thread.status === Thread.STATUS_RUNNING &&
		        thread.peekStack() === currentBlockId) {
		        this.proceedThread(thread);
		    }
		};

		/**
		 * Step a thread into a block's branch.
		 * @param {!Thread} thread Thread object to step to branch.
		 * @param {Number} branchNum Which branch to step to (i.e., 1, 2).
		 */
		Sequencer.prototype.stepToBranch = function (thread, branchNum) {
		    if (!branchNum) {
		        branchNum = 1;
		    }
		    var currentBlockId = thread.peekStack();
		    var branchId = thread.target.blocks.getBranch(
		        currentBlockId,
		        branchNum
		    );
		    if (branchId) {
		        // Push branch ID to the thread's stack.
		        thread.pushStack(branchId);
		    } else {
		        // Push null, so we come back to the current block.
		        thread.pushStack(null);
		    }
		};

		/**
		 * Step a procedure.
		 * @param {!Thread} thread Thread object to step to procedure.
		 * @param {!string} procedureName Name of procedure defined in this target.
		 */
		Sequencer.prototype.stepToProcedure = function (thread, procedureName) {
		    var definition = thread.target.blocks.getProcedureDefinition(procedureName);
		    thread.pushStack(definition);
		    // Check if the call is recursive. If so, yield.
		    // @todo: Have behavior match Scratch 2.0.
		    if (thread.stack.indexOf(definition) > -1) {
		        thread.setStatus(Thread.STATUS_YIELD_FRAME);
		    }
		};

		/**
		 * Step a thread into an input reporter, and manage its status appropriately.
		 * @param {!Thread} thread Thread object to step to reporter.
		 * @param {!string} blockId ID of reporter block.
		 * @param {!string} inputName Name of input on parent block.
		 * @return {boolean} True if yielded, false if it finished immediately.
		 */
		Sequencer.prototype.stepToReporter = function (thread, blockId, inputName) {
		    var currentStackFrame = thread.peekStackFrame();
		    // Push to the stack to evaluate the reporter block.
		    thread.pushStack(blockId);
		    // Save name of input for `Thread.pushReportedValue`.
		    currentStackFrame.waitingReporter = inputName;
		    // Actually execute the block.
		    this.startThread(thread);
		    // If a reporter yielded, caller must wait for it to unyield.
		    // The value will be populated once the reporter unyields,
		    // and passed up to the currentStackFrame on next execution.
		    return thread.status === Thread.STATUS_YIELD;
		};

		/**
		 * Finish stepping a thread and proceed it to the next block.
		 * @param {!Thread} thread Thread object to proceed.
		 */
		Sequencer.prototype.proceedThread = function (thread) {
		    var currentBlockId = thread.peekStack();
		    // Mark the status as done and proceed to the next block.
		    // Pop from the stack - finished this level of execution.
		    thread.popStack();
		    // Push next connected block, if there is one.
		    var nextBlockId = thread.target.blocks.getNextBlock(currentBlockId);
		    if (nextBlockId) {
		        thread.pushStack(nextBlockId);
		    }
		    // If we can't find a next block to run, mark the thread as done.
		    if (!thread.peekStack()) {
		        thread.setStatus(Thread.STATUS_DONE);
		    }
		};

		/**
		 * Retire a thread in the middle, without considering further blocks.
		 * @param {!Thread} thread Thread object to retire.
		 */
		Sequencer.prototype.retireThread = function (thread) {
		    thread.stack = [];
		    thread.stackFrame = [];
		    thread.requestScriptGlowInFrame = false;
		    thread.setStatus(Thread.STATUS_DONE);
		};

		module.exports = Sequencer;


	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		/**
		 * @fileoverview
		 * A utility for accurately measuring time.
		 * To use:
		 * ---
		 * var timer = new Timer();
		 * timer.start();
		 * ... pass some time ...
		 * var timeDifference = timer.timeElapsed();
		 * ---
		 * Or, you can use the `time` and `relativeTime`
		 * to do some measurement yourself.
		 */

		/**
		 * @constructor
		 */
		function Timer () {}

		/**
		 * Used to store the start time of a timer action.
		 * Updated when calling `timer.start`.
		 */
		Timer.prototype.startTime = 0;

		/**
		 * Return the currently known absolute time, in ms precision.
		 * @returns {number} ms elapsed since 1 January 1970 00:00:00 UTC.
		 */
		Timer.prototype.time = function () {
		    if (Date.now) {
		        return Date.now();
		    } else {
		        return new Date().getTime();
		    }
		};

		/**
		 * Returns a time accurate relative to other times produced by this function.
		 * If possible, will use sub-millisecond precision.
		 * If not, will use millisecond precision.
		 * Not guaranteed to produce the same absolute values per-system.
		 * @returns {number} ms-scale accurate time relative to other relative times.
		 */
		Timer.prototype.relativeTime = function () {
		    if (typeof self !== 'undefined' &&
		        self.performance && 'now' in self.performance) {
		        return self.performance.now();
		    } else {
		        return this.time();
		    }
		};

		/**
		 * Start a timer for measuring elapsed time,
		 * at the most accurate precision possible.
		 */
		Timer.prototype.start = function () {
		    this.startTime = this.relativeTime();
		};

		/**
		 * Check time elapsed since `timer.start` was called.
		 * @returns {number} Time elapsed, in ms (possibly sub-ms precision).
		 */
		Timer.prototype.timeElapsed = function () {
		    return this.relativeTime() - this.startTime;
		};

		module.exports = Timer;


	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		/**
		 * A thread is a running stack context and all the metadata needed.
		 * @param {?string} firstBlock First block to execute in the thread.
		 * @constructor
		 */
		function Thread (firstBlock) {
		    /**
		     * ID of top block of the thread
		     * @type {!string}
		     */
		    this.topBlock = firstBlock;

		    /**
		     * Stack for the thread. When the sequencer enters a control structure,
		     * the block is pushed onto the stack so we know where to exit.
		     * @type {Array.<string>}
		     */
		    this.stack = [];

		    /**
		     * Stack frames for the thread. Store metadata for the executing blocks.
		     * @type {Array.<Object>}
		     */
		    this.stackFrames = [];

		    /**
		     * Status of the thread, one of three states (below)
		     * @type {number}
		     */
		    this.status = 0; /* Thread.STATUS_RUNNING */

		    /**
		     * Target of this thread.
		     * @type {?Target}
		     */
		    this.target = null;

		    /**
		     * Whether the thread requests its script to glow during this frame.
		     * @type {boolean}
		     */
		    this.requestScriptGlowInFrame = false;
		}

		/**
		 * Thread status for initialized or running thread.
		 * This is the default state for a thread - execution should run normally,
		 * stepping from block to block.
		 * @const
		 */
		Thread.STATUS_RUNNING = 0;

		/**
		 * Thread status for a yielded thread.
		 * Threads are in this state when a primitive has yielded; execution is paused
		 * until the relevant primitive unyields.
		 * @const
		 */
		Thread.STATUS_YIELD = 1;

		/**
		 * Thread status for a single-frame yield.
		 * @const
		 */
		Thread.STATUS_YIELD_FRAME = 2;

		/**
		 * Thread status for a finished/done thread.
		 * Thread is in this state when there are no more blocks to execute.
		 * @const
		 */
		Thread.STATUS_DONE = 3;

		/**
		 * Push stack and update stack frames appropriately.
		 * @param {string} blockId Block ID to push to stack.
		 */
		Thread.prototype.pushStack = function (blockId) {
		    this.stack.push(blockId);
		    // Push an empty stack frame, if we need one.
		    // Might not, if we just popped the stack.
		    if (this.stack.length > this.stackFrames.length) {
		        this.stackFrames.push({
		            reported: {}, // Collects reported input values.
		            waitingReporter: null, // Name of waiting reporter.
		            params: {}, // Procedure parameters.
		            executionContext: {} // A context passed to block implementations.
		        });
		    }
		};

		/**
		 * Pop last block on the stack and its stack frame.
		 * @return {string} Block ID popped from the stack.
		 */
		Thread.prototype.popStack = function () {
		    this.stackFrames.pop();
		    return this.stack.pop();
		};

		/**
		 * Get top stack item.
		 * @return {?string} Block ID on top of stack.
		 */
		Thread.prototype.peekStack = function () {
		    return this.stack[this.stack.length - 1];
		};


		/**
		 * Get top stack frame.
		 * @return {?Object} Last stack frame stored on this thread.
		 */
		Thread.prototype.peekStackFrame = function () {
		    return this.stackFrames[this.stackFrames.length - 1];
		};

		/**
		 * Get stack frame above the current top.
		 * @return {?Object} Second to last stack frame stored on this thread.
		 */
		Thread.prototype.peekParentStackFrame = function () {
		    return this.stackFrames[this.stackFrames.length - 2];
		};

		/**
		 * Push a reported value to the parent of the current stack frame.
		 * @param {!Any} value Reported value to push.
		 */
		Thread.prototype.pushReportedValue = function (value) {
		    var parentStackFrame = this.peekParentStackFrame();
		    if (parentStackFrame) {
		        var waitingReporter = parentStackFrame.waitingReporter;
		        parentStackFrame.reported[waitingReporter] = value;
		        parentStackFrame.waitingReporter = null;
		    }
		};

		Thread.prototype.pushParam = function (paramName, value) {
		    var stackFrame = this.peekStackFrame();
		    stackFrame.params[paramName] = value;
		};

		Thread.prototype.getParam = function (paramName) {
		    for (var i = this.stackFrames.length - 1; i >= 0; i--) {
		        var frame = this.stackFrames[i];
		        if (frame.params.hasOwnProperty(paramName)) {
		            return frame.params[paramName];
		        }
		    }
		    return null;
		};

		/**
		 * Whether the current execution of a thread is at the top of the stack.
		 * @return {Boolean} True if execution is at top of the stack.
		 */
		Thread.prototype.atStackTop = function () {
		    return this.peekStack() === this.topBlock;
		};

		/**
		 * Set thread status.
		 * @param {number} status Enum representing thread status.
		 */
		Thread.prototype.setStatus = function (status) {
		    this.status = status;
		};

		/**
		 * Set thread target.
		 * @param {?Target} target Target for this thread.
		 */
		Thread.prototype.setTarget = function (target) {
		    this.target = target;
		};

		/**
		 * Get thread target.
		 * @return {?Target} Target for this thread, if available.
		 */
		Thread.prototype.getTarget = function () {
		    return this.target;
		};

		module.exports = Thread;


	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		var Thread = __webpack_require__(9);

		/**
		 * Utility function to determine if a value is a Promise.
		 * @param {*} value Value to check for a Promise.
		 * @return {Boolean} True if the value appears to be a Promise.
		 */
		var isPromise = function (value) {
		    return value && value.then && typeof value.then === 'function';
		};

		/**
		 * Execute a block.
		 * @param {!Sequencer} sequencer Which sequencer is executing.
		 * @param {!Thread} thread Thread which to read and execute.
		 */
		var execute = function (sequencer, thread) {
		    var runtime = sequencer.runtime;
		    var target = thread.target;

		    // Current block to execute is the one on the top of the stack.
		    var currentBlockId = thread.peekStack();
		    var currentStackFrame = thread.peekStackFrame();

		    // Check where the block lives: target blocks or flyout blocks.
		    var targetHasBlock = (
		        typeof target.blocks.getBlock(currentBlockId) !== 'undefined'
		    );
		    var flyoutHasBlock = (
		        typeof runtime.flyoutBlocks.getBlock(currentBlockId) !== 'undefined'
		    );

		    // Stop if block or target no longer exists.
		    if (!target || (!targetHasBlock && !flyoutHasBlock)) {
		        // No block found: stop the thread; script no longer exists.
		        sequencer.retireThread(thread);
		        return;
		    }

		    // Query info about the block.
		    var blockContainer = null;
		    if (targetHasBlock) {
		        blockContainer = target.blocks;
		    } else {
		        blockContainer = runtime.flyoutBlocks;
		    }
		    var opcode = blockContainer.getOpcode(currentBlockId);
		    var fields = blockContainer.getFields(currentBlockId);
		    var inputs = blockContainer.getInputs(currentBlockId);
		    var blockFunction = runtime.getOpcodeFunction(opcode);
		    var isHat = runtime.getIsHat(opcode);


		    if (!opcode) {
		        console.warn('Could not get opcode for block: ' + currentBlockId);
		        return;
		    }

		    /**
		     * Handle any reported value from the primitive, either directly returned
		     * or after a promise resolves.
		     * @param {*} resolvedValue Value eventually returned from the primitive.
		     */
		    var handleReport = function (resolvedValue) {
		        thread.pushReportedValue(resolvedValue);
		        if (isHat) {
		            // Hat predicate was evaluated.
		            if (runtime.getIsEdgeActivatedHat(opcode)) {
		                // If this is an edge-activated hat, only proceed if
		                // the value is true and used to be false.
		                var oldEdgeValue = runtime.updateEdgeActivatedValue(
		                    currentBlockId,
		                    resolvedValue
		                );
		                var edgeWasActivated = !oldEdgeValue && resolvedValue;
		                if (!edgeWasActivated) {
		                    sequencer.retireThread(thread);
		                }
		            } else {
		                // Not an edge-activated hat: retire the thread
		                // if predicate was false.
		                if (!resolvedValue) {
		                    sequencer.retireThread(thread);
		                }
		            }
		        } else {
		            // In a non-hat, report the value visually if necessary if
		            // at the top of the thread stack.
		            if (typeof resolvedValue !== 'undefined' && thread.atStackTop()) {
		                runtime.visualReport(currentBlockId, resolvedValue);
		            }
		            // Finished any yields.
		            thread.setStatus(Thread.STATUS_RUNNING);
		        }
		    };

		    // Hats and single-field shadows are implemented slightly differently
		    // from regular blocks.
		    // For hats: if they have an associated block function,
		    // it's treated as a predicate; if not, execution will proceed as a no-op.
		    // For single-field shadows: If the block has a single field, and no inputs,
		    // immediately return the value of the field.
		    if (!blockFunction) {
		        if (isHat) {
		            // Skip through the block (hat with no predicate).
		            return;
		        } else {
		            if (Object.keys(fields).length == 1 &&
		                Object.keys(inputs).length == 0) {
		                // One field and no inputs - treat as arg.
		                for (var fieldKey in fields) { // One iteration.
		                    handleReport(fields[fieldKey].value);
		                }
		            } else {
		                console.warn('Could not get implementation for opcode: ' +
		                    opcode);
		            }
		            thread.requestScriptGlowInFrame = true;
		            return;
		        }
		    }

		    // Generate values for arguments (inputs).
		    var argValues = {};

		    // Add all fields on this block to the argValues.
		    for (var fieldName in fields) {
		        argValues[fieldName] = fields[fieldName].value;
		    }

		    // Recursively evaluate input blocks.
		    for (var inputName in inputs) {
		        var input = inputs[inputName];
		        var inputBlockId = input.block;
		        // Is there no value for this input waiting in the stack frame?
		        if (typeof currentStackFrame.reported[inputName] === 'undefined') {
		            // If there's not, we need to evaluate the block.
		            var reporterYielded = (
		                sequencer.stepToReporter(thread, inputBlockId, inputName)
		            );
		            // If the reporter yielded, return immediately;
		            // it needs time to finish and report its value.
		            if (reporterYielded) {
		                return;
		            }
		        }
		        argValues[inputName] = currentStackFrame.reported[inputName];
		    }

		    // Add any mutation to args (e.g., for procedures).
		    var mutation = blockContainer.getMutation(currentBlockId);
		    if (mutation) {
		        argValues.mutation = mutation;
		    }

		    // If we've gotten this far, all of the input blocks are evaluated,
		    // and `argValues` is fully populated. So, execute the block primitive.
		    // First, clear `currentStackFrame.reported`, so any subsequent execution
		    // (e.g., on return from a branch) gets fresh inputs.
		    currentStackFrame.reported = {};

		    var primitiveReportedValue = null;
		    primitiveReportedValue = blockFunction(argValues, {
		        stackFrame: currentStackFrame.executionContext,
		        target: target,
		        yield: function() {
		            thread.setStatus(Thread.STATUS_YIELD);
		        },
		        yieldFrame: function() {
		            thread.setStatus(Thread.STATUS_YIELD_FRAME);
		        },
		        done: function() {
		            thread.setStatus(Thread.STATUS_RUNNING);
		            sequencer.proceedThread(thread);
		        },
		        startBranch: function (branchNum) {
		            sequencer.stepToBranch(thread, branchNum);
		        },
		        stopAll: function () {
		            runtime.stopAll();
		        },
		        stopOtherTargetThreads: function() {
		            runtime.stopForTarget(target, thread);
		        },
		        stopThread: function() {
		            sequencer.retireThread(thread);
		        },
		        startProcedure: function (procedureName) {
		            sequencer.stepToProcedure(thread, procedureName);
		        },
		        getProcedureParamNames: function (procedureName) {
		            return blockContainer.getProcedureParamNames(procedureName);
		        },
		        pushParam: function (paramName, paramValue) {
		            thread.pushParam(paramName, paramValue);
		        },
		        getParam: function (paramName) {
		            return thread.getParam(paramName);
		        },
		        startHats: function(requestedHat, opt_matchFields, opt_target) {
		            return (
		                runtime.startHats(requestedHat, opt_matchFields, opt_target)
		            );
		        },
		        ioQuery: function (device, func, args) {
		            // Find the I/O device and execute the query/function call.
		            if (runtime.ioDevices[device] && runtime.ioDevices[device][func]) {
		                var devObject = runtime.ioDevices[device];
		                return devObject[func].call(devObject, args);
		            }
		        }
		    });

		    if (typeof primitiveReportedValue === 'undefined') {
		        // No value reported - potentially a command block.
		        // Edge-activated hats don't request a glow; all commands do.
		        thread.requestScriptGlowInFrame = true;
		    }

		    // If it's a promise, wait until promise resolves.
		    if (isPromise(primitiveReportedValue)) {
		        if (thread.status === Thread.STATUS_RUNNING) {
		            // Primitive returned a promise; automatically yield thread.
		            thread.setStatus(Thread.STATUS_YIELD);
		        }
		        // Promise handlers
		        primitiveReportedValue.then(function(resolvedValue) {
		            handleReport(resolvedValue);
		            sequencer.proceedThread(thread);
		        }, function(rejectionReason) {
		            // Promise rejected: the primitive had some error.
		            // Log it and proceed.
		            console.warn('Primitive rejected promise: ', rejectionReason);
		            thread.setStatus(Thread.STATUS_RUNNING);
		            sequencer.proceedThread(thread);
		        });
		    } else if (thread.status === Thread.STATUS_RUNNING) {
		        handleReport(primitiveReportedValue);
		    }
		};

		module.exports = execute;


	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		var adapter = __webpack_require__(12);
		var mutationAdapter = __webpack_require__(13);
		var xmlEscape = __webpack_require__(65);

		/**
		 * @fileoverview
		 * Store and mutate the VM block representation,
		 * and handle updates from Scratch Blocks events.
		 */

		function Blocks () {
		    /**
		     * All blocks in the workspace.
		     * Keys are block IDs, values are metadata about the block.
		     * @type {Object.<string, Object>}
		     */
		    this._blocks = {};

		    /**
		     * All top-level scripts in the workspace.
		     * A list of block IDs that represent scripts (i.e., first block in script).
		     * @type {Array.<String>}
		     */
		    this._scripts = [];
		}

		/**
		 * Blockly inputs that represent statements/branch.
		 * are prefixed with this string.
		 * @const{string}
		 */
		Blocks.BRANCH_INPUT_PREFIX = 'SUBSTACK';

		/**
		 * Provide an object with metadata for the requested block ID.
		 * @param {!string} blockId ID of block we have stored.
		 * @return {?Object} Metadata about the block, if it exists.
		 */
		Blocks.prototype.getBlock = function (blockId) {
		    return this._blocks[blockId];
		};

		/**
		 * Get all known top-level blocks that start scripts.
		 * @return {Array.<string>} List of block IDs.
		 */
		Blocks.prototype.getScripts = function () {
		    return this._scripts;
		};

		 /**
		  * Get the next block for a particular block
		  * @param {?string} id ID of block to get the next block for
		  * @return {?string} ID of next block in the sequence
		  */
		Blocks.prototype.getNextBlock = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    return this._blocks[id].next;
		};

		/**
		 * Get the branch for a particular C-shaped block.
		 * @param {?string} id ID for block to get the branch for.
		 * @param {?number} branchNum Which branch to select (e.g. for if-else).
		 * @return {?string} ID of block in the branch.
		 */
		Blocks.prototype.getBranch = function (id, branchNum) {
		    var block = this._blocks[id];
		    if (typeof block === 'undefined') return null;
		    if (!branchNum) branchNum = 1;

		    var inputName = Blocks.BRANCH_INPUT_PREFIX;
		    if (branchNum > 1) {
		        inputName += branchNum;
		    }

		    // Empty C-block?
		    if (!(inputName in block.inputs)) return null;
		    return block.inputs[inputName].block;
		};

		/**
		 * Get the opcode for a particular block
		 * @param {?string} id ID of block to query
		 * @return {?string} the opcode corresponding to that block
		 */
		Blocks.prototype.getOpcode = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    return this._blocks[id].opcode;
		};

		/**
		 * Get all fields and their values for a block.
		 * @param {?string} id ID of block to query.
		 * @return {!Object} All fields and their values.
		 */
		Blocks.prototype.getFields = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    return this._blocks[id].fields;
		};

		/**
		 * Get all non-branch inputs for a block.
		 * @param {?string} id ID of block to query.
		 * @return {!Object} All non-branch inputs and their associated blocks.
		 */
		Blocks.prototype.getInputs = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    var inputs = {};
		    for (var input in this._blocks[id].inputs) {
		        // Ignore blocks prefixed with branch prefix.
		        if (input.substring(0, Blocks.BRANCH_INPUT_PREFIX.length)
		            != Blocks.BRANCH_INPUT_PREFIX) {
		            inputs[input] = this._blocks[id].inputs[input];
		        }
		    }
		    return inputs;
		};

		/**
		 * Get mutation data for a block.
		 * @param {?string} id ID of block to query.
		 * @return {!Object} Mutation for the block.
		 */
		Blocks.prototype.getMutation = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    return this._blocks[id].mutation;
		};

		/**
		 * Get the top-level script for a given block.
		 * @param {?string} id ID of block to query.
		 * @return {?string} ID of top-level script block.
		 */
		Blocks.prototype.getTopLevelScript = function (id) {
		    if (typeof this._blocks[id] === 'undefined') return null;
		    var block = this._blocks[id];
		    while (block.parent !== null) {
		        block = this._blocks[block.parent];
		    }
		    return block.id;
		};

		/**
		 * Get the procedure definition for a given name.
		 * @param {?string} name Name of procedure to query.
		 * @return {?string} ID of procedure definition.
		 */
		Blocks.prototype.getProcedureDefinition = function (name) {
		    for (var id in this._blocks) {
		        var block = this._blocks[id];
		        if ((block.opcode == 'procedures_defnoreturn' ||
		            block.opcode == 'procedures_defreturn') &&
		            block.mutation.proccode == name) {
		            return id;
		        }
		    }
		    return null;
		};

		/**
		 * Get the procedure definition for a given name.
		 * @param {?string} name Name of procedure to query.
		 * @return {?string} ID of procedure definition.
		 */
		Blocks.prototype.getProcedureParamNames = function (name) {
		    for (var id in this._blocks) {
		        var block = this._blocks[id];
		        if ((block.opcode == 'procedures_defnoreturn' ||
		            block.opcode == 'procedures_defreturn') &&
		            block.mutation.proccode == name) {
		            return JSON.parse(block.mutation.argumentnames);
		        }
		    }
		    return null;
		};

		// ---------------------------------------------------------------------

		/**
		 * Create event listener for blocks. Handles validation and serves as a generic
		 * adapter between the blocks and the runtime interface.
		 * @param {Object} e Blockly "block" event
		 * @param {?Runtime} opt_runtime Optional runtime to forward click events to.
		 */

		Blocks.prototype.blocklyListen = function (e, opt_runtime) {
		    // Validate event
		    if (typeof e !== 'object') return;
		    if (typeof e.blockId !== 'string') return;

		    // UI event: clicked scripts toggle in the runtime.
		    if (e.element === 'stackclick') {
		        if (opt_runtime) {
		            opt_runtime.toggleScript(e.blockId);
		        }
		        return;
		    }

		    // Block create/update/destroy
		    switch (e.type) {
		    case 'create':
		        var newBlocks = adapter(e);
		        // A create event can create many blocks. Add them all.
		        for (var i = 0; i < newBlocks.length; i++) {
		            this.createBlock(newBlocks[i]);
		        }
		        break;
		    case 'change':
		        this.changeBlock({
		            id: e.blockId,
		            element: e.element,
		            name: e.name,
		            value: e.newValue
		        });
		        break;
		    case 'move':
		        this.moveBlock({
		            id: e.blockId,
		            oldParent: e.oldParentId,
		            oldInput: e.oldInputName,
		            newParent: e.newParentId,
		            newInput: e.newInputName,
		            newCoordinate: e.newCoordinate
		        });
		        break;
		    case 'delete':
		        // Don't accept delete events for missing blocks,
		        // or shadow blocks being obscured.
		        if (!this._blocks.hasOwnProperty(e.blockId) ||
		            this._blocks[e.blockId].shadow) {
		            return;
		        }
		        // Inform any runtime to forget about glows on this script.
		        if (opt_runtime && this._blocks[e.blockId].topLevel) {
		            opt_runtime.quietGlow(e.blockId);
		        }
		        this.deleteBlock({
		            id: e.blockId
		        });
		        break;
		    }
		};

		// ---------------------------------------------------------------------

		/**
		 * Block management: create blocks and scripts from a `create` event
		 * @param {!Object} block Blockly create event to be processed
		 */
		Blocks.prototype.createBlock = function (block) {
		    // Does the block already exist?
		    // Could happen, e.g., for an unobscured shadow.
		    if (this._blocks.hasOwnProperty(block.id)) {
		        return;
		    }
		    // Create new block.
		    this._blocks[block.id] = block;
		    // Push block id to scripts array.
		    // Blocks are added as a top-level stack if they are marked as a top-block
		    // (if they were top-level XML in the event).
		    if (block.topLevel) {
		        this._addScript(block.id);
		    }
		};

		/**
		 * Block management: change block field values
		 * @param {!Object} args Blockly change event to be processed
		 */
		Blocks.prototype.changeBlock = function (args) {
		    // Validate
		    if (args.element !== 'field' && args.element !== 'mutation') return;
		    if (typeof this._blocks[args.id] === 'undefined') return;

		    if (args.element == 'field') {
		        // Update block value
		        if (!this._blocks[args.id].fields[args.name]) return;
		        this._blocks[args.id].fields[args.name].value = args.value;
		    } else if (args.element == 'mutation') {
		        this._blocks[args.id].mutation = mutationAdapter(args.value);
		    }
		};

		/**
		 * Block management: move blocks from parent to parent
		 * @param {!Object} e Blockly move event to be processed
		 */
		Blocks.prototype.moveBlock = function (e) {
		    if (!this._blocks.hasOwnProperty(e.id)) {
		        return;
		    }

		    // Move coordinate changes.
		    if (e.newCoordinate) {
		        this._blocks[e.id].x = e.newCoordinate.x;
		        this._blocks[e.id].y = e.newCoordinate.y;
		    }

		    // Remove from any old parent.
		    if (e.oldParent !== undefined) {
		        var oldParent = this._blocks[e.oldParent];
		        if (e.oldInput !== undefined &&
		            oldParent.inputs[e.oldInput].block === e.id) {
		            // This block was connected to the old parent's input.
		            oldParent.inputs[e.oldInput].block = null;
		        } else if (oldParent.next === e.id) {
		            // This block was connected to the old parent's next connection.
		            oldParent.next = null;
		        }
		        this._blocks[e.id].parent = null;
		    }

		    // Has the block become a top-level block?
		    if (e.newParent === undefined) {
		        this._addScript(e.id);
		    } else {
		        // Remove script, if one exists.
		        this._deleteScript(e.id);
		        // Otherwise, try to connect it in its new place.
		        if (e.newInput !== undefined) {
		            // Moved to the new parent's input.
		            // Don't obscure the shadow block.
		            var oldShadow = null;
		            if (this._blocks[e.newParent].inputs.hasOwnProperty(e.newInput)) {
		                oldShadow = this._blocks[e.newParent].inputs[e.newInput].shadow;
		            }
		            this._blocks[e.newParent].inputs[e.newInput] = {
		                name: e.newInput,
		                block: e.id,
		                shadow: oldShadow
		            };
		        } else {
		            // Moved to the new parent's next connection.
		            this._blocks[e.newParent].next = e.id;
		        }
		        this._blocks[e.id].parent = e.newParent;
		    }
		};

		/**
		 * Block management: delete blocks and their associated scripts.
		 * @param {!Object} e Blockly delete event to be processed.
		 */
		Blocks.prototype.deleteBlock = function (e) {
		    // @todo In runtime, stop threads running on this script.

		    // Get block
		    var block = this._blocks[e.id];

		    // Delete children
		    if (block.next !== null) {
		        this.deleteBlock({id: block.next});
		    }

		    // Delete inputs (including branches)
		    for (var input in block.inputs) {
		        // If it's null, the block in this input moved away.
		        if (block.inputs[input].block !== null) {
		            this.deleteBlock({id: block.inputs[input].block});
		        }
		        // Delete obscured shadow blocks.
		        if (block.inputs[input].shadow !== null &&
		            block.inputs[input].shadow !== block.inputs[input].block) {
		            this.deleteBlock({id: block.inputs[input].shadow});
		        }
		    }

		    // Delete any script starting with this block.
		    this._deleteScript(e.id);

		    // Delete block itself.
		    delete this._blocks[e.id];
		};

		// ---------------------------------------------------------------------

		/**
		 * Encode all of `this._blocks` as an XML string usable
		 * by a Blockly/scratch-blocks workspace.
		 * @return {string} String of XML representing this object's blocks.
		 */
		Blocks.prototype.toXML = function () {
		    var xmlString = '<xml xmlns="http://www.w3.org/1999/xhtml">';
		    for (var i = 0; i < this._scripts.length; i++) {
		        xmlString += this.blockToXML(this._scripts[i]);
		    }
		    return xmlString + '</xml>';
		};

		/**
		 * Recursively encode an individual block and its children
		 * into a Blockly/scratch-blocks XML string.
		 * @param {!string} blockId ID of block to encode.
		 * @return {string} String of XML representing this block and any children.
		 */
		Blocks.prototype.blockToXML = function (blockId) {
		    var block = this._blocks[blockId];
		    // Encode properties of this block.
		    var tagName = (block.shadow) ? 'shadow' : 'block';
		    var xy = (block.topLevel) ?
		        ' x="' + block.x +'"' + ' y="' + block.y +'"' :
		        '';
		    var xmlString = '';
		    xmlString += '<' + tagName +
		        ' id="' + block.id + '"' +
		        ' type="' + block.opcode + '"' +
		        xy +
		        '>';
		    // Add any mutation. Must come before inputs.
		    if (block.mutation) {
		        xmlString += this.mutationToXML(block.mutation);
		    }
		    // Add any inputs on this block.
		    for (var input in block.inputs) {
		        var blockInput = block.inputs[input];
		        // Only encode a value tag if the value input is occupied.
		        if (blockInput.block || blockInput.shadow) {
		            xmlString += '<value name="' + blockInput.name + '">';
		            if (blockInput.block) {
		                xmlString += this.blockToXML(blockInput.block);
		            }
		            if (blockInput.shadow && blockInput.shadow != blockInput.block) {
		                // Obscured shadow.
		                xmlString += this.blockToXML(blockInput.shadow);
		            }
		            xmlString += '</value>';
		        }
		    }
		    // Add any fields on this block.
		    for (var field in block.fields) {
		        var blockField = block.fields[field];
		        var value = blockField.value;
		        if (typeof value === 'string') {
		            value = xmlEscape(blockField.value);
		        }
		        xmlString += '<field name="' + blockField.name + '">' +
		            value + '</field>';
		    }
		    // Add blocks connected to the next connection.
		    if (block.next) {
		        xmlString += '<next>' + this.blockToXML(block.next) + '</next>';
		    }
		    xmlString += '</' + tagName + '>';
		    return xmlString;
		};

		/**
		 * Recursively encode a mutation object to XML.
		 * @param {!Object} mutation Object representing a mutation.
		 * @return {string} XML string representing a mutation.
		 */
		Blocks.prototype.mutationToXML = function (mutation) {
		    var mutationString = '<' + mutation.tagName;
		    for (var prop in mutation) {
		        if (prop == 'children' || prop == 'tagName') continue;
		        var mutationValue = (typeof mutation[prop] === 'string') ?
		            xmlEscape(mutation[prop]) : mutation[prop];
		        mutationString += ' ' + prop + '="' + mutationValue + '"';
		    }
		    mutationString += '>';
		    for (var i = 0; i < mutation.children.length; i++) {
		        mutationString += this.mutationToXML(mutation.children[i]);
		    }
		    mutationString += '</' + mutation.tagName + '>';
		    return mutationString;
		};

		// ---------------------------------------------------------------------

		/**
		 * Helper to add a stack to `this._scripts`.
		 * @param {?string} topBlockId ID of block that starts the script.
		 */
		Blocks.prototype._addScript = function (topBlockId) {
		    var i = this._scripts.indexOf(topBlockId);
		    if (i > -1) return; // Already in scripts.
		    this._scripts.push(topBlockId);
		    // Update `topLevel` property on the top block.
		    this._blocks[topBlockId].topLevel = true;
		};

		/**
		 * Helper to remove a script from `this._scripts`.
		 * @param {?string} topBlockId ID of block that starts the script.
		 */
		Blocks.prototype._deleteScript = function (topBlockId) {
		    var i = this._scripts.indexOf(topBlockId);
		    if (i > -1) this._scripts.splice(i, 1);
		    // Update `topLevel` property on the top block.
		    if (this._blocks[topBlockId]) this._blocks[topBlockId].topLevel = false;
		};

		module.exports = Blocks;


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		var mutationAdapter = __webpack_require__(13);
		var html = __webpack_require__(14);

		/**
		 * Adapter between block creation events and block representation which can be
		 * used by the Scratch runtime.
		 * @param {Object} e `Blockly.events.create`
		 * @return {Array.<Object>} List of blocks from this CREATE event.
		 */
		module.exports = function (e) {
		    // Validate input
		    if (typeof e !== 'object') return;
		    if (typeof e.xml !== 'object') return;

		    return domToBlocks(html.parseDOM(e.xml.outerHTML));
		};

		/**
		 * Convert outer blocks DOM from a Blockly CREATE event
		 * to a usable form for the Scratch runtime.
		 * This structure is based on Blockly xml.js:`domToWorkspace` and `domToBlock`.
		 * @param {Element} blocksDOM DOM tree for this event.
		 * @return {Array.<Object>} Usable list of blocks from this CREATE event.
		 */
		function domToBlocks (blocksDOM) {
		    // At this level, there could be multiple blocks adjacent in the DOM tree.
		    var blocks = {};
		    for (var i = 0; i < blocksDOM.length; i++) {
		        var block = blocksDOM[i];
		        if (!block.name || !block.attribs) {
		            continue;
		        }
		        var tagName = block.name.toLowerCase();
		        if (tagName == 'block' || tagName == 'shadow') {
		            domToBlock(block, blocks, true, null);
		        }
		    }
		    // Flatten blocks object into a list.
		    var blocksList = [];
		    for (var b in blocks) {
		        blocksList.push(blocks[b]);
		    }
		    return blocksList;
		}

		/**
		 * Convert and an individual block DOM to the representation tree.
		 * Based on Blockly's `domToBlockHeadless_`.
		 * @param {Element} blockDOM DOM tree for an individual block.
		 * @param {Object} blocks Collection of blocks to add to.
		 * @param {Boolean} isTopBlock Whether blocks at this level are "top blocks."
		 * @param {?string} parent Parent block ID.
		 */
		function domToBlock (blockDOM, blocks, isTopBlock, parent) {
		    // Block skeleton.
		    var block = {
		        id: blockDOM.attribs.id, // Block ID
		        opcode: blockDOM.attribs.type, // For execution, "event_whengreenflag".
		        inputs: {}, // Inputs to this block and the blocks they point to.
		        fields: {}, // Fields on this block and their values.
		        next: null, // Next block in the stack, if one exists.
		        topLevel: isTopBlock, // If this block starts a stack.
		        parent: parent, // Parent block ID, if available.
		        shadow: blockDOM.name == 'shadow', // If this represents a shadow/slot.
		        x: blockDOM.attribs.x, // X position of script, if top-level.
		        y: blockDOM.attribs.y // Y position of script, if top-level.
		    };

		    // Add the block to the representation tree.
		    blocks[block.id] = block;

		    // Process XML children and find enclosed blocks, fields, etc.
		    for (var i = 0; i < blockDOM.children.length; i++) {
		        var xmlChild = blockDOM.children[i];
		        // Enclosed blocks and shadows
		        var childBlockNode = null;
		        var childShadowNode = null;
		        for (var j = 0; j < xmlChild.children.length; j++) {
		            var grandChildNode = xmlChild.children[j];
		            if (!grandChildNode.name) {
		                // Non-XML tag node.
		                continue;
		            }
		            var grandChildNodeName = grandChildNode.name.toLowerCase();
		            if (grandChildNodeName == 'block') {
		                childBlockNode = grandChildNode;
		            } else if (grandChildNodeName == 'shadow') {
		                childShadowNode = grandChildNode;
		            }
		        }

		        // Use shadow block only if there's no real block node.
		        if (!childBlockNode && childShadowNode) {
		            childBlockNode = childShadowNode;
		        }

		        // Not all Blockly-type blocks are handled here,
		        // as we won't be using all of them for Scratch.
		        switch (xmlChild.name.toLowerCase()) {
		        case 'field':
		            // Add the field to this block.
		            var fieldName = xmlChild.attribs.name;
		            var fieldData = '';
		            if (xmlChild.children.length > 0 && xmlChild.children[0].data) {
		                fieldData = xmlChild.children[0].data;
		            } else {
		                // If the child of the field with a data property
		                // doesn't exist, set the data to an empty string.
		                fieldData = '';
		            }
		            block.fields[fieldName] = {
		                name: fieldName,
		                value: fieldData
		            };
		            break;
		        case 'value':
		        case 'statement':
		            // Recursively generate block structure for input block.
		            domToBlock(childBlockNode, blocks, false, block.id);
		            if (childShadowNode && childBlockNode != childShadowNode) {
		                // Also generate the shadow block.
		                domToBlock(childShadowNode, blocks, false, block.id);
		            }
		            // Link this block's input to the child block.
		            var inputName = xmlChild.attribs.name;
		            block.inputs[inputName] = {
		                name: inputName,
		                block: childBlockNode.attribs.id,
		                shadow: childShadowNode ? childShadowNode.attribs.id : null
		            };
		            break;
		        case 'next':
		            if (!childBlockNode || !childBlockNode.attribs) {
		                // Invalid child block.
		                continue;
		            }
		            // Recursively generate block structure for next block.
		            domToBlock(childBlockNode, blocks, false, block.id);
		            // Link next block to this block.
		            block.next = childBlockNode.attribs.id;
		            break;
		        case 'mutation':
		            block.mutation = mutationAdapter(xmlChild);
		            break;
		        }
		    }
		}


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		var html = __webpack_require__(14);

		/**
		 * Adapter between mutator XML or DOM and block representation which can be
		 * used by the Scratch runtime.
		 * @param {(Object|string)} mutation Mutation XML string or DOM.
		 * @return {Object} Object representing the mutation.
		 */
		module.exports = function (mutation) {
		    var mutationParsed;
		    // Check if the mutation is already parsed; if not, parse it.
		    if (typeof mutation === 'object') {
		        mutationParsed = mutation;
		    } else {
		        mutationParsed = html.parseDOM(mutation)[0];
		    }
		    return mutatorTagToObject(mutationParsed);
		};

		/**
		 * Convert a part of a mutation DOM to a mutation VM object, recursively.
		 * @param {Object} dom DOM object for mutation tag.
		 * @return {Object} Object representing useful parts of this mutation.
		 */
		function mutatorTagToObject (dom) {
		    var obj = Object.create(null);
		    obj.tagName = dom.name;
		    obj.children = [];
		    for (var prop in dom.attribs) {
		        if (prop == 'xmlns') continue;
		        obj[prop] = dom.attribs[prop];
		    }
		    for (var i = 0; i < dom.children.length; i++) {
		        obj.children.push(
		            mutatorTagToObject(dom.children[i])
		        );
		    }
		    return obj;
		}


	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		var Parser = __webpack_require__(15),
		    DomHandler = __webpack_require__(22);

		function defineProp(name, value){
			delete module.exports[name];
			module.exports[name] = value;
			return value;
		}

		module.exports = {
			Parser: Parser,
			Tokenizer: __webpack_require__(16),
			ElementType: __webpack_require__(23),
			DomHandler: DomHandler,
			get FeedHandler(){
				return defineProp("FeedHandler", __webpack_require__(26));
			},
			get Stream(){
				return defineProp("Stream", __webpack_require__(27));
			},
			get WritableStream(){
				return defineProp("WritableStream", __webpack_require__(28));
			},
			get ProxyHandler(){
				return defineProp("ProxyHandler", __webpack_require__(51));
			},
			get DomUtils(){
				return defineProp("DomUtils", __webpack_require__(52));
			},
			get CollectingHandler(){
				return defineProp("CollectingHandler", __webpack_require__(64));
			},
			// For legacy support
			DefaultHandler: DomHandler,
			get RssHandler(){
				return defineProp("RssHandler", this.FeedHandler);
			},
			//helper methods
			parseDOM: function(data, options){
				var handler = new DomHandler(options);
				new Parser(handler, options).end(data);
				return handler.dom;
			},
			parseFeed: function(feed, options){
				var handler = new module.exports.FeedHandler(options);
				new Parser(handler, options).end(feed);
				return handler.dom;
			},
			createDomStream: function(cb, options, elementCb){
				var handler = new DomHandler(cb, options, elementCb);
				return new Parser(handler, options);
			},
			// List of all events that the parser emits
			EVENTS: { /* Format: eventname: number of arguments */
				attribute: 2,
				cdatastart: 0,
				cdataend: 0,
				text: 1,
				processinginstruction: 2,
				comment: 1,
				commentend: 0,
				closetag: 1,
				opentag: 2,
				opentagname: 1,
				error: 1,
				end: 0
			}
		};


	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

		var Tokenizer = __webpack_require__(16);

		/*
			Options:

			xmlMode: Disables the special behavior for script/style tags (false by default)
			lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
			lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
		*/

		/*
			Callbacks:

			oncdataend,
			oncdatastart,
			onclosetag,
			oncomment,
			oncommentend,
			onerror,
			onopentag,
			onprocessinginstruction,
			onreset,
			ontext
		*/

		var formTags = {
			input: true,
			option: true,
			optgroup: true,
			select: true,
			button: true,
			datalist: true,
			textarea: true
		};

		var openImpliesClose = {
			tr      : { tr:true, th:true, td:true },
			th      : { th:true },
			td      : { thead:true, th:true, td:true },
			body    : { head:true, link:true, script:true },
			li      : { li:true },
			p       : { p:true },
			h1      : { p:true },
			h2      : { p:true },
			h3      : { p:true },
			h4      : { p:true },
			h5      : { p:true },
			h6      : { p:true },
			select  : formTags,
			input   : formTags,
			output  : formTags,
			button  : formTags,
			datalist: formTags,
			textarea: formTags,
			option  : { option:true },
			optgroup: { optgroup:true }
		};

		var voidElements = {
			__proto__: null,
			area: true,
			base: true,
			basefont: true,
			br: true,
			col: true,
			command: true,
			embed: true,
			frame: true,
			hr: true,
			img: true,
			input: true,
			isindex: true,
			keygen: true,
			link: true,
			meta: true,
			param: true,
			source: true,
			track: true,
			wbr: true,

			//common self closing svg elements
			path: true,
			circle: true,
			ellipse: true,
			line: true,
			rect: true,
			use: true,
			stop: true,
			polyline: true,
			polygon: true
		};

		var re_nameEnd = /\s|\//;

		function Parser(cbs, options){
			this._options = options || {};
			this._cbs = cbs || {};

			this._tagname = "";
			this._attribname = "";
			this._attribvalue = "";
			this._attribs = null;
			this._stack = [];

			this.startIndex = 0;
			this.endIndex = null;

			this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
											!!this._options.lowerCaseTags :
											!this._options.xmlMode;
			this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
											!!this._options.lowerCaseAttributeNames :
											!this._options.xmlMode;
			if(!!this._options.Tokenizer) {
				Tokenizer = this._options.Tokenizer;
			}
			this._tokenizer = new Tokenizer(this._options, this);

			if(this._cbs.onparserinit) this._cbs.onparserinit(this);
		}

		__webpack_require__(2).inherits(Parser, __webpack_require__(1).EventEmitter);

		Parser.prototype._updatePosition = function(initialOffset){
			if(this.endIndex === null){
				if(this._tokenizer._sectionStart <= initialOffset){
					this.startIndex = 0;
				} else {
					this.startIndex = this._tokenizer._sectionStart - initialOffset;
				}
			}
			else this.startIndex = this.endIndex + 1;
			this.endIndex = this._tokenizer.getAbsoluteIndex();
		};

		//Tokenizer event handlers
		Parser.prototype.ontext = function(data){
			this._updatePosition(1);
			this.endIndex--;

			if(this._cbs.ontext) this._cbs.ontext(data);
		};

		Parser.prototype.onopentagname = function(name){
			if(this._lowerCaseTagNames){
				name = name.toLowerCase();
			}

			this._tagname = name;

			if(!this._options.xmlMode && name in openImpliesClose) {
				for(
					var el;
					(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
					this.onclosetag(el)
				);
			}

			if(this._options.xmlMode || !(name in voidElements)){
				this._stack.push(name);
			}

			if(this._cbs.onopentagname) this._cbs.onopentagname(name);
			if(this._cbs.onopentag) this._attribs = {};
		};

		Parser.prototype.onopentagend = function(){
			this._updatePosition(1);

			if(this._attribs){
				if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
				this._attribs = null;
			}

			if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
				this._cbs.onclosetag(this._tagname);
			}

			this._tagname = "";
		};

		Parser.prototype.onclosetag = function(name){
			this._updatePosition(1);

			if(this._lowerCaseTagNames){
				name = name.toLowerCase();
			}

			if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
				var pos = this._stack.lastIndexOf(name);
				if(pos !== -1){
					if(this._cbs.onclosetag){
						pos = this._stack.length - pos;
						while(pos--) this._cbs.onclosetag(this._stack.pop());
					}
					else this._stack.length = pos;
				} else if(name === "p" && !this._options.xmlMode){
					this.onopentagname(name);
					this._closeCurrentTag();
				}
			} else if(!this._options.xmlMode && (name === "br" || name === "p")){
				this.onopentagname(name);
				this._closeCurrentTag();
			}
		};

		Parser.prototype.onselfclosingtag = function(){
			if(this._options.xmlMode || this._options.recognizeSelfClosing){
				this._closeCurrentTag();
			} else {
				this.onopentagend();
			}
		};

		Parser.prototype._closeCurrentTag = function(){
			var name = this._tagname;

			this.onopentagend();

			//self-closing tags will be on the top of the stack
			//(cheaper check than in onclosetag)
			if(this._stack[this._stack.length - 1] === name){
				if(this._cbs.onclosetag){
					this._cbs.onclosetag(name);
				}
				this._stack.pop();
			}
		};

		Parser.prototype.onattribname = function(name){
			if(this._lowerCaseAttributeNames){
				name = name.toLowerCase();
			}
			this._attribname = name;
		};

		Parser.prototype.onattribdata = function(value){
			this._attribvalue += value;
		};

		Parser.prototype.onattribend = function(){
			if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
			if(
				this._attribs &&
				!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
			){
				this._attribs[this._attribname] = this._attribvalue;
			}
			this._attribname = "";
			this._attribvalue = "";
		};

		Parser.prototype._getInstructionName = function(value){
			var idx = value.search(re_nameEnd),
			    name = idx < 0 ? value : value.substr(0, idx);

			if(this._lowerCaseTagNames){
				name = name.toLowerCase();
			}

			return name;
		};

		Parser.prototype.ondeclaration = function(value){
			if(this._cbs.onprocessinginstruction){
				var name = this._getInstructionName(value);
				this._cbs.onprocessinginstruction("!" + name, "!" + value);
			}
		};

		Parser.prototype.onprocessinginstruction = function(value){
			if(this._cbs.onprocessinginstruction){
				var name = this._getInstructionName(value);
				this._cbs.onprocessinginstruction("?" + name, "?" + value);
			}
		};

		Parser.prototype.oncomment = function(value){
			this._updatePosition(4);

			if(this._cbs.oncomment) this._cbs.oncomment(value);
			if(this._cbs.oncommentend) this._cbs.oncommentend();
		};

		Parser.prototype.oncdata = function(value){
			this._updatePosition(1);

			if(this._options.xmlMode || this._options.recognizeCDATA){
				if(this._cbs.oncdatastart) this._cbs.oncdatastart();
				if(this._cbs.ontext) this._cbs.ontext(value);
				if(this._cbs.oncdataend) this._cbs.oncdataend();
			} else {
				this.oncomment("[CDATA[" + value + "]]");
			}
		};

		Parser.prototype.onerror = function(err){
			if(this._cbs.onerror) this._cbs.onerror(err);
		};

		Parser.prototype.onend = function(){
			if(this._cbs.onclosetag){
				for(
					var i = this._stack.length;
					i > 0;
					this._cbs.onclosetag(this._stack[--i])
				);
			}
			if(this._cbs.onend) this._cbs.onend();
		};


		//Resets the parser to a blank state, ready to parse a new HTML document
		Parser.prototype.reset = function(){
			if(this._cbs.onreset) this._cbs.onreset();
			this._tokenizer.reset();

			this._tagname = "";
			this._attribname = "";
			this._attribs = null;
			this._stack = [];

			if(this._cbs.onparserinit) this._cbs.onparserinit(this);
		};

		//Parses a complete HTML document and pushes it to the handler
		Parser.prototype.parseComplete = function(data){
			this.reset();
			this.end(data);
		};

		Parser.prototype.write = function(chunk){
			this._tokenizer.write(chunk);
		};

		Parser.prototype.end = function(chunk){
			this._tokenizer.end(chunk);
		};

		Parser.prototype.pause = function(){
			this._tokenizer.pause();
		};

		Parser.prototype.resume = function(){
			this._tokenizer.resume();
		};

		//alias for backwards compat
		Parser.prototype.parseChunk = Parser.prototype.write;
		Parser.prototype.done = Parser.prototype.end;

		module.exports = Parser;


	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = Tokenizer;

		var decodeCodePoint = __webpack_require__(17),
		    entityMap = __webpack_require__(19),
		    legacyMap = __webpack_require__(20),
		    xmlMap    = __webpack_require__(21),

		    i = 0,

		    TEXT                      = i++,
		    BEFORE_TAG_NAME           = i++, //after <
		    IN_TAG_NAME               = i++,
		    IN_SELF_CLOSING_TAG       = i++,
		    BEFORE_CLOSING_TAG_NAME   = i++,
		    IN_CLOSING_TAG_NAME       = i++,
		    AFTER_CLOSING_TAG_NAME    = i++,

		    //attributes
		    BEFORE_ATTRIBUTE_NAME     = i++,
		    IN_ATTRIBUTE_NAME         = i++,
		    AFTER_ATTRIBUTE_NAME      = i++,
		    BEFORE_ATTRIBUTE_VALUE    = i++,
		    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
		    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
		    IN_ATTRIBUTE_VALUE_NQ     = i++,

		    //declarations
		    BEFORE_DECLARATION        = i++, // !
		    IN_DECLARATION            = i++,

		    //processing instructions
		    IN_PROCESSING_INSTRUCTION = i++, // ?

		    //comments
		    BEFORE_COMMENT            = i++,
		    IN_COMMENT                = i++,
		    AFTER_COMMENT_1           = i++,
		    AFTER_COMMENT_2           = i++,

		    //cdata
		    BEFORE_CDATA_1            = i++, // [
		    BEFORE_CDATA_2            = i++, // C
		    BEFORE_CDATA_3            = i++, // D
		    BEFORE_CDATA_4            = i++, // A
		    BEFORE_CDATA_5            = i++, // T
		    BEFORE_CDATA_6            = i++, // A
		    IN_CDATA                  = i++, // [
		    AFTER_CDATA_1             = i++, // ]
		    AFTER_CDATA_2             = i++, // ]

		    //special tags
		    BEFORE_SPECIAL            = i++, //S
		    BEFORE_SPECIAL_END        = i++,   //S

		    BEFORE_SCRIPT_1           = i++, //C
		    BEFORE_SCRIPT_2           = i++, //R
		    BEFORE_SCRIPT_3           = i++, //I
		    BEFORE_SCRIPT_4           = i++, //P
		    BEFORE_SCRIPT_5           = i++, //T
		    AFTER_SCRIPT_1            = i++, //C
		    AFTER_SCRIPT_2            = i++, //R
		    AFTER_SCRIPT_3            = i++, //I
		    AFTER_SCRIPT_4            = i++, //P
		    AFTER_SCRIPT_5            = i++, //T

		    BEFORE_STYLE_1            = i++, //T
		    BEFORE_STYLE_2            = i++, //Y
		    BEFORE_STYLE_3            = i++, //L
		    BEFORE_STYLE_4            = i++, //E
		    AFTER_STYLE_1             = i++, //T
		    AFTER_STYLE_2             = i++, //Y
		    AFTER_STYLE_3             = i++, //L
		    AFTER_STYLE_4             = i++, //E

		    BEFORE_ENTITY             = i++, //&
		    BEFORE_NUMERIC_ENTITY     = i++, //#
		    IN_NAMED_ENTITY           = i++,
		    IN_NUMERIC_ENTITY         = i++,
		    IN_HEX_ENTITY             = i++, //X

		    j = 0,

		    SPECIAL_NONE              = j++,
		    SPECIAL_SCRIPT            = j++,
		    SPECIAL_STYLE             = j++;

		function whitespace(c){
			return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
		}

		function characterState(char, SUCCESS){
			return function(c){
				if(c === char) this._state = SUCCESS;
			};
		}

		function ifElseState(upper, SUCCESS, FAILURE){
			var lower = upper.toLowerCase();

			if(upper === lower){
				return function(c){
					if(c === lower){
						this._state = SUCCESS;
					} else {
						this._state = FAILURE;
						this._index--;
					}
				};
			} else {
				return function(c){
					if(c === lower || c === upper){
						this._state = SUCCESS;
					} else {
						this._state = FAILURE;
						this._index--;
					}
				};
			}
		}

		function consumeSpecialNameChar(upper, NEXT_STATE){
			var lower = upper.toLowerCase();

			return function(c){
				if(c === lower || c === upper){
					this._state = NEXT_STATE;
				} else {
					this._state = IN_TAG_NAME;
					this._index--; //consume the token again
				}
			};
		}

		function Tokenizer(options, cbs){
			this._state = TEXT;
			this._buffer = "";
			this._sectionStart = 0;
			this._index = 0;
			this._bufferOffset = 0; //chars removed from _buffer
			this._baseState = TEXT;
			this._special = SPECIAL_NONE;
			this._cbs = cbs;
			this._running = true;
			this._ended = false;
			this._xmlMode = !!(options && options.xmlMode);
			this._decodeEntities = !!(options && options.decodeEntities);
		}

		Tokenizer.prototype._stateText = function(c){
			if(c === "<"){
				if(this._index > this._sectionStart){
					this._cbs.ontext(this._getSection());
				}
				this._state = BEFORE_TAG_NAME;
				this._sectionStart = this._index;
			} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
				if(this._index > this._sectionStart){
					this._cbs.ontext(this._getSection());
				}
				this._baseState = TEXT;
				this._state = BEFORE_ENTITY;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateBeforeTagName = function(c){
			if(c === "/"){
				this._state = BEFORE_CLOSING_TAG_NAME;
			} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
				this._state = TEXT;
			} else if(c === "!"){
				this._state = BEFORE_DECLARATION;
				this._sectionStart = this._index + 1;
			} else if(c === "?"){
				this._state = IN_PROCESSING_INSTRUCTION;
				this._sectionStart = this._index + 1;
			} else if(c === "<"){
				this._cbs.ontext(this._getSection());
				this._sectionStart = this._index;
			} else {
				this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
								BEFORE_SPECIAL : IN_TAG_NAME;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateInTagName = function(c){
			if(c === "/" || c === ">" || whitespace(c)){
				this._emitToken("onopentagname");
				this._state = BEFORE_ATTRIBUTE_NAME;
				this._index--;
			}
		};

		Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
			if(whitespace(c));
			else if(c === ">"){
				this._state = TEXT;
			} else if(this._special !== SPECIAL_NONE){
				if(c === "s" || c === "S"){
					this._state = BEFORE_SPECIAL_END;
				} else {
					this._state = TEXT;
					this._index--;
				}
			} else {
				this._state = IN_CLOSING_TAG_NAME;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateInCloseingTagName = function(c){
			if(c === ">" || whitespace(c)){
				this._emitToken("onclosetag");
				this._state = AFTER_CLOSING_TAG_NAME;
				this._index--;
			}
		};

		Tokenizer.prototype._stateAfterCloseingTagName = function(c){
			//skip everything until ">"
			if(c === ">"){
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			}
		};

		Tokenizer.prototype._stateBeforeAttributeName = function(c){
			if(c === ">"){
				this._cbs.onopentagend();
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			} else if(c === "/"){
				this._state = IN_SELF_CLOSING_TAG;
			} else if(!whitespace(c)){
				this._state = IN_ATTRIBUTE_NAME;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateInSelfClosingTag = function(c){
			if(c === ">"){
				this._cbs.onselfclosingtag();
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			} else if(!whitespace(c)){
				this._state = BEFORE_ATTRIBUTE_NAME;
				this._index--;
			}
		};

		Tokenizer.prototype._stateInAttributeName = function(c){
			if(c === "=" || c === "/" || c === ">" || whitespace(c)){
				this._cbs.onattribname(this._getSection());
				this._sectionStart = -1;
				this._state = AFTER_ATTRIBUTE_NAME;
				this._index--;
			}
		};

		Tokenizer.prototype._stateAfterAttributeName = function(c){
			if(c === "="){
				this._state = BEFORE_ATTRIBUTE_VALUE;
			} else if(c === "/" || c === ">"){
				this._cbs.onattribend();
				this._state = BEFORE_ATTRIBUTE_NAME;
				this._index--;
			} else if(!whitespace(c)){
				this._cbs.onattribend();
				this._state = IN_ATTRIBUTE_NAME;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateBeforeAttributeValue = function(c){
			if(c === "\""){
				this._state = IN_ATTRIBUTE_VALUE_DQ;
				this._sectionStart = this._index + 1;
			} else if(c === "'"){
				this._state = IN_ATTRIBUTE_VALUE_SQ;
				this._sectionStart = this._index + 1;
			} else if(!whitespace(c)){
				this._state = IN_ATTRIBUTE_VALUE_NQ;
				this._sectionStart = this._index;
				this._index--; //reconsume token
			}
		};

		Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
			if(c === "\""){
				this._emitToken("onattribdata");
				this._cbs.onattribend();
				this._state = BEFORE_ATTRIBUTE_NAME;
			} else if(this._decodeEntities && c === "&"){
				this._emitToken("onattribdata");
				this._baseState = this._state;
				this._state = BEFORE_ENTITY;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
			if(c === "'"){
				this._emitToken("onattribdata");
				this._cbs.onattribend();
				this._state = BEFORE_ATTRIBUTE_NAME;
			} else if(this._decodeEntities && c === "&"){
				this._emitToken("onattribdata");
				this._baseState = this._state;
				this._state = BEFORE_ENTITY;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
			if(whitespace(c) || c === ">"){
				this._emitToken("onattribdata");
				this._cbs.onattribend();
				this._state = BEFORE_ATTRIBUTE_NAME;
				this._index--;
			} else if(this._decodeEntities && c === "&"){
				this._emitToken("onattribdata");
				this._baseState = this._state;
				this._state = BEFORE_ENTITY;
				this._sectionStart = this._index;
			}
		};

		Tokenizer.prototype._stateBeforeDeclaration = function(c){
			this._state = c === "[" ? BEFORE_CDATA_1 :
							c === "-" ? BEFORE_COMMENT :
								IN_DECLARATION;
		};

		Tokenizer.prototype._stateInDeclaration = function(c){
			if(c === ">"){
				this._cbs.ondeclaration(this._getSection());
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			}
		};

		Tokenizer.prototype._stateInProcessingInstruction = function(c){
			if(c === ">"){
				this._cbs.onprocessinginstruction(this._getSection());
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			}
		};

		Tokenizer.prototype._stateBeforeComment = function(c){
			if(c === "-"){
				this._state = IN_COMMENT;
				this._sectionStart = this._index + 1;
			} else {
				this._state = IN_DECLARATION;
			}
		};

		Tokenizer.prototype._stateInComment = function(c){
			if(c === "-") this._state = AFTER_COMMENT_1;
		};

		Tokenizer.prototype._stateAfterComment1 = function(c){
			if(c === "-"){
				this._state = AFTER_COMMENT_2;
			} else {
				this._state = IN_COMMENT;
			}
		};

		Tokenizer.prototype._stateAfterComment2 = function(c){
			if(c === ">"){
				//remove 2 trailing chars
				this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			} else if(c !== "-"){
				this._state = IN_COMMENT;
			}
			// else: stay in AFTER_COMMENT_2 (`--->`)
		};

		Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
		Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
		Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
		Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
		Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

		Tokenizer.prototype._stateBeforeCdata6 = function(c){
			if(c === "["){
				this._state = IN_CDATA;
				this._sectionStart = this._index + 1;
			} else {
				this._state = IN_DECLARATION;
				this._index--;
			}
		};

		Tokenizer.prototype._stateInCdata = function(c){
			if(c === "]") this._state = AFTER_CDATA_1;
		};

		Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

		Tokenizer.prototype._stateAfterCdata2 = function(c){
			if(c === ">"){
				//remove 2 trailing chars
				this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
				this._state = TEXT;
				this._sectionStart = this._index + 1;
			} else if(c !== "]") {
				this._state = IN_CDATA;
			}
			//else: stay in AFTER_CDATA_2 (`]]]>`)
		};

		Tokenizer.prototype._stateBeforeSpecial = function(c){
			if(c === "c" || c === "C"){
				this._state = BEFORE_SCRIPT_1;
			} else if(c === "t" || c === "T"){
				this._state = BEFORE_STYLE_1;
			} else {
				this._state = IN_TAG_NAME;
				this._index--; //consume the token again
			}
		};

		Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
			if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
				this._state = AFTER_SCRIPT_1;
			} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
				this._state = AFTER_STYLE_1;
			}
			else this._state = TEXT;
		};

		Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
		Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
		Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
		Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

		Tokenizer.prototype._stateBeforeScript5 = function(c){
			if(c === "/" || c === ">" || whitespace(c)){
				this._special = SPECIAL_SCRIPT;
			}
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		};

		Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
		Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
		Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
		Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

		Tokenizer.prototype._stateAfterScript5 = function(c){
			if(c === ">" || whitespace(c)){
				this._special = SPECIAL_NONE;
				this._state = IN_CLOSING_TAG_NAME;
				this._sectionStart = this._index - 6;
				this._index--; //reconsume the token
			}
			else this._state = TEXT;
		};

		Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
		Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
		Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

		Tokenizer.prototype._stateBeforeStyle4 = function(c){
			if(c === "/" || c === ">" || whitespace(c)){
				this._special = SPECIAL_STYLE;
			}
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		};

		Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
		Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
		Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

		Tokenizer.prototype._stateAfterStyle4 = function(c){
			if(c === ">" || whitespace(c)){
				this._special = SPECIAL_NONE;
				this._state = IN_CLOSING_TAG_NAME;
				this._sectionStart = this._index - 5;
				this._index--; //reconsume the token
			}
			else this._state = TEXT;
		};

		Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
		Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

		//for entities terminated with a semicolon
		Tokenizer.prototype._parseNamedEntityStrict = function(){
			//offset = 1
			if(this._sectionStart + 1 < this._index){
				var entity = this._buffer.substring(this._sectionStart + 1, this._index),
				    map = this._xmlMode ? xmlMap : entityMap;

				if(map.hasOwnProperty(entity)){
					this._emitPartial(map[entity]);
					this._sectionStart = this._index + 1;
				}
			}
		};


		//parses legacy entities (without trailing semicolon)
		Tokenizer.prototype._parseLegacyEntity = function(){
			var start = this._sectionStart + 1,
			    limit = this._index - start;

			if(limit > 6) limit = 6; //the max length of legacy entities is 6

			while(limit >= 2){ //the min length of legacy entities is 2
				var entity = this._buffer.substr(start, limit);

				if(legacyMap.hasOwnProperty(entity)){
					this._emitPartial(legacyMap[entity]);
					this._sectionStart += limit + 1;
					return;
				} else {
					limit--;
				}
			}
		};

		Tokenizer.prototype._stateInNamedEntity = function(c){
			if(c === ";"){
				this._parseNamedEntityStrict();
				if(this._sectionStart + 1 < this._index && !this._xmlMode){
					this._parseLegacyEntity();
				}
				this._state = this._baseState;
			} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
				if(this._xmlMode);
				else if(this._sectionStart + 1 === this._index);
				else if(this._baseState !== TEXT){
					if(c !== "="){
						this._parseNamedEntityStrict();
					}
				} else {
					this._parseLegacyEntity();
				}

				this._state = this._baseState;
				this._index--;
			}
		};

		Tokenizer.prototype._decodeNumericEntity = function(offset, base){
			var sectionStart = this._sectionStart + offset;

			if(sectionStart !== this._index){
				//parse entity
				var entity = this._buffer.substring(sectionStart, this._index);
				var parsed = parseInt(entity, base);

				this._emitPartial(decodeCodePoint(parsed));
				this._sectionStart = this._index;
			} else {
				this._sectionStart--;
			}

			this._state = this._baseState;
		};

		Tokenizer.prototype._stateInNumericEntity = function(c){
			if(c === ";"){
				this._decodeNumericEntity(2, 10);
				this._sectionStart++;
			} else if(c < "0" || c > "9"){
				if(!this._xmlMode){
					this._decodeNumericEntity(2, 10);
				} else {
					this._state = this._baseState;
				}
				this._index--;
			}
		};

		Tokenizer.prototype._stateInHexEntity = function(c){
			if(c === ";"){
				this._decodeNumericEntity(3, 16);
				this._sectionStart++;
			} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
				if(!this._xmlMode){
					this._decodeNumericEntity(3, 16);
				} else {
					this._state = this._baseState;
				}
				this._index--;
			}
		};

		Tokenizer.prototype._cleanup = function (){
			if(this._sectionStart < 0){
				this._buffer = "";
				this._index = 0;
				this._bufferOffset += this._index;
			} else if(this._running){
				if(this._state === TEXT){
					if(this._sectionStart !== this._index){
						this._cbs.ontext(this._buffer.substr(this._sectionStart));
					}
					this._buffer = "";
					this._index = 0;
					this._bufferOffset += this._index;
				} else if(this._sectionStart === this._index){
					//the section just started
					this._buffer = "";
					this._index = 0;
					this._bufferOffset += this._index;
				} else {
					//remove everything unnecessary
					this._buffer = this._buffer.substr(this._sectionStart);
					this._index -= this._sectionStart;
					this._bufferOffset += this._sectionStart;
				}

				this._sectionStart = 0;
			}
		};

		//TODO make events conditional
		Tokenizer.prototype.write = function(chunk){
			if(this._ended) this._cbs.onerror(Error(".write() after done!"));

			this._buffer += chunk;
			this._parse();
		};

		Tokenizer.prototype._parse = function(){
			while(this._index < this._buffer.length && this._running){
				var c = this._buffer.charAt(this._index);
				if(this._state === TEXT) {
					this._stateText(c);
				} else if(this._state === BEFORE_TAG_NAME){
					this._stateBeforeTagName(c);
				} else if(this._state === IN_TAG_NAME) {
					this._stateInTagName(c);
				} else if(this._state === BEFORE_CLOSING_TAG_NAME){
					this._stateBeforeCloseingTagName(c);
				} else if(this._state === IN_CLOSING_TAG_NAME){
					this._stateInCloseingTagName(c);
				} else if(this._state === AFTER_CLOSING_TAG_NAME){
					this._stateAfterCloseingTagName(c);
				} else if(this._state === IN_SELF_CLOSING_TAG){
					this._stateInSelfClosingTag(c);
				}

				/*
				*	attributes
				*/
				else if(this._state === BEFORE_ATTRIBUTE_NAME){
					this._stateBeforeAttributeName(c);
				} else if(this._state === IN_ATTRIBUTE_NAME){
					this._stateInAttributeName(c);
				} else if(this._state === AFTER_ATTRIBUTE_NAME){
					this._stateAfterAttributeName(c);
				} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
					this._stateBeforeAttributeValue(c);
				} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
					this._stateInAttributeValueDoubleQuotes(c);
				} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
					this._stateInAttributeValueSingleQuotes(c);
				} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
					this._stateInAttributeValueNoQuotes(c);
				}

				/*
				*	declarations
				*/
				else if(this._state === BEFORE_DECLARATION){
					this._stateBeforeDeclaration(c);
				} else if(this._state === IN_DECLARATION){
					this._stateInDeclaration(c);
				}

				/*
				*	processing instructions
				*/
				else if(this._state === IN_PROCESSING_INSTRUCTION){
					this._stateInProcessingInstruction(c);
				}

				/*
				*	comments
				*/
				else if(this._state === BEFORE_COMMENT){
					this._stateBeforeComment(c);
				} else if(this._state === IN_COMMENT){
					this._stateInComment(c);
				} else if(this._state === AFTER_COMMENT_1){
					this._stateAfterComment1(c);
				} else if(this._state === AFTER_COMMENT_2){
					this._stateAfterComment2(c);
				}

				/*
				*	cdata
				*/
				else if(this._state === BEFORE_CDATA_1){
					this._stateBeforeCdata1(c);
				} else if(this._state === BEFORE_CDATA_2){
					this._stateBeforeCdata2(c);
				} else if(this._state === BEFORE_CDATA_3){
					this._stateBeforeCdata3(c);
				} else if(this._state === BEFORE_CDATA_4){
					this._stateBeforeCdata4(c);
				} else if(this._state === BEFORE_CDATA_5){
					this._stateBeforeCdata5(c);
				} else if(this._state === BEFORE_CDATA_6){
					this._stateBeforeCdata6(c);
				} else if(this._state === IN_CDATA){
					this._stateInCdata(c);
				} else if(this._state === AFTER_CDATA_1){
					this._stateAfterCdata1(c);
				} else if(this._state === AFTER_CDATA_2){
					this._stateAfterCdata2(c);
				}

				/*
				* special tags
				*/
				else if(this._state === BEFORE_SPECIAL){
					this._stateBeforeSpecial(c);
				} else if(this._state === BEFORE_SPECIAL_END){
					this._stateBeforeSpecialEnd(c);
				}

				/*
				* script
				*/
				else if(this._state === BEFORE_SCRIPT_1){
					this._stateBeforeScript1(c);
				} else if(this._state === BEFORE_SCRIPT_2){
					this._stateBeforeScript2(c);
				} else if(this._state === BEFORE_SCRIPT_3){
					this._stateBeforeScript3(c);
				} else if(this._state === BEFORE_SCRIPT_4){
					this._stateBeforeScript4(c);
				} else if(this._state === BEFORE_SCRIPT_5){
					this._stateBeforeScript5(c);
				}

				else if(this._state === AFTER_SCRIPT_1){
					this._stateAfterScript1(c);
				} else if(this._state === AFTER_SCRIPT_2){
					this._stateAfterScript2(c);
				} else if(this._state === AFTER_SCRIPT_3){
					this._stateAfterScript3(c);
				} else if(this._state === AFTER_SCRIPT_4){
					this._stateAfterScript4(c);
				} else if(this._state === AFTER_SCRIPT_5){
					this._stateAfterScript5(c);
				}

				/*
				* style
				*/
				else if(this._state === BEFORE_STYLE_1){
					this._stateBeforeStyle1(c);
				} else if(this._state === BEFORE_STYLE_2){
					this._stateBeforeStyle2(c);
				} else if(this._state === BEFORE_STYLE_3){
					this._stateBeforeStyle3(c);
				} else if(this._state === BEFORE_STYLE_4){
					this._stateBeforeStyle4(c);
				}

				else if(this._state === AFTER_STYLE_1){
					this._stateAfterStyle1(c);
				} else if(this._state === AFTER_STYLE_2){
					this._stateAfterStyle2(c);
				} else if(this._state === AFTER_STYLE_3){
					this._stateAfterStyle3(c);
				} else if(this._state === AFTER_STYLE_4){
					this._stateAfterStyle4(c);
				}

				/*
				* entities
				*/
				else if(this._state === BEFORE_ENTITY){
					this._stateBeforeEntity(c);
				} else if(this._state === BEFORE_NUMERIC_ENTITY){
					this._stateBeforeNumericEntity(c);
				} else if(this._state === IN_NAMED_ENTITY){
					this._stateInNamedEntity(c);
				} else if(this._state === IN_NUMERIC_ENTITY){
					this._stateInNumericEntity(c);
				} else if(this._state === IN_HEX_ENTITY){
					this._stateInHexEntity(c);
				}

				else {
					this._cbs.onerror(Error("unknown _state"), this._state);
				}

				this._index++;
			}

			this._cleanup();
		};

		Tokenizer.prototype.pause = function(){
			this._running = false;
		};
		Tokenizer.prototype.resume = function(){
			this._running = true;

			if(this._index < this._buffer.length){
				this._parse();
			}
			if(this._ended){
				this._finish();
			}
		};

		Tokenizer.prototype.end = function(chunk){
			if(this._ended) this._cbs.onerror(Error(".end() after done!"));
			if(chunk) this.write(chunk);

			this._ended = true;

			if(this._running) this._finish();
		};

		Tokenizer.prototype._finish = function(){
			//if there is remaining data, emit it in a reasonable way
			if(this._sectionStart < this._index){
				this._handleTrailingData();
			}

			this._cbs.onend();
		};

		Tokenizer.prototype._handleTrailingData = function(){
			var data = this._buffer.substr(this._sectionStart);

			if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
				this._cbs.oncdata(data);
			} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
				this._cbs.oncomment(data);
			} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
				this._parseLegacyEntity();
				if(this._sectionStart < this._index){
					this._state = this._baseState;
					this._handleTrailingData();
				}
			} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
				this._decodeNumericEntity(2, 10);
				if(this._sectionStart < this._index){
					this._state = this._baseState;
					this._handleTrailingData();
				}
			} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
				this._decodeNumericEntity(3, 16);
				if(this._sectionStart < this._index){
					this._state = this._baseState;
					this._handleTrailingData();
				}
			} else if(
				this._state !== IN_TAG_NAME &&
				this._state !== BEFORE_ATTRIBUTE_NAME &&
				this._state !== BEFORE_ATTRIBUTE_VALUE &&
				this._state !== AFTER_ATTRIBUTE_NAME &&
				this._state !== IN_ATTRIBUTE_NAME &&
				this._state !== IN_ATTRIBUTE_VALUE_SQ &&
				this._state !== IN_ATTRIBUTE_VALUE_DQ &&
				this._state !== IN_ATTRIBUTE_VALUE_NQ &&
				this._state !== IN_CLOSING_TAG_NAME
			){
				this._cbs.ontext(data);
			}
			//else, ignore remaining data
			//TODO add a way to remove current tag
		};

		Tokenizer.prototype.reset = function(){
			Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
		};

		Tokenizer.prototype.getAbsoluteIndex = function(){
			return this._bufferOffset + this._index;
		};

		Tokenizer.prototype._getSection = function(){
			return this._buffer.substring(this._sectionStart, this._index);
		};

		Tokenizer.prototype._emitToken = function(name){
			this._cbs[name](this._getSection());
			this._sectionStart = -1;
		};

		Tokenizer.prototype._emitPartial = function(value){
			if(this._baseState !== TEXT){
				this._cbs.onattribdata(value); //TODO implement the new event
			} else {
				this._cbs.ontext(value);
			}
		};


	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		var decodeMap = __webpack_require__(18);

		module.exports = decodeCodePoint;

		// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
		function decodeCodePoint(codePoint){

			if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
				return "\uFFFD";
			}

			if(codePoint in decodeMap){
				codePoint = decodeMap[codePoint];
			}

			var output = "";

			if(codePoint > 0xFFFF){
				codePoint -= 0x10000;
				output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
				codePoint = 0xDC00 | codePoint & 0x3FF;
			}

			output += String.fromCharCode(codePoint);
			return output;
		}


	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		module.exports = {
			"0": 65533,
			"128": 8364,
			"130": 8218,
			"131": 402,
			"132": 8222,
			"133": 8230,
			"134": 8224,
			"135": 8225,
			"136": 710,
			"137": 8240,
			"138": 352,
			"139": 8249,
			"140": 338,
			"142": 381,
			"145": 8216,
			"146": 8217,
			"147": 8220,
			"148": 8221,
			"149": 8226,
			"150": 8211,
			"151": 8212,
			"152": 732,
			"153": 8482,
			"154": 353,
			"155": 8250,
			"156": 339,
			"158": 382,
			"159": 376
		};

	/***/ },
	/* 19 */
	/***/ function(module, exports) {

		module.exports = {
			"Aacute": "Á",
			"aacute": "á",
			"Abreve": "Ă",
			"abreve": "ă",
			"ac": "∾",
			"acd": "∿",
			"acE": "∾̳",
			"Acirc": "Â",
			"acirc": "â",
			"acute": "´",
			"Acy": "А",
			"acy": "а",
			"AElig": "Æ",
			"aelig": "æ",
			"af": "⁡",
			"Afr": "𝔄",
			"afr": "𝔞",
			"Agrave": "À",
			"agrave": "à",
			"alefsym": "ℵ",
			"aleph": "ℵ",
			"Alpha": "Α",
			"alpha": "α",
			"Amacr": "Ā",
			"amacr": "ā",
			"amalg": "⨿",
			"amp": "&",
			"AMP": "&",
			"andand": "⩕",
			"And": "⩓",
			"and": "∧",
			"andd": "⩜",
			"andslope": "⩘",
			"andv": "⩚",
			"ang": "∠",
			"ange": "⦤",
			"angle": "∠",
			"angmsdaa": "⦨",
			"angmsdab": "⦩",
			"angmsdac": "⦪",
			"angmsdad": "⦫",
			"angmsdae": "⦬",
			"angmsdaf": "⦭",
			"angmsdag": "⦮",
			"angmsdah": "⦯",
			"angmsd": "∡",
			"angrt": "∟",
			"angrtvb": "⊾",
			"angrtvbd": "⦝",
			"angsph": "∢",
			"angst": "Å",
			"angzarr": "⍼",
			"Aogon": "Ą",
			"aogon": "ą",
			"Aopf": "𝔸",
			"aopf": "𝕒",
			"apacir": "⩯",
			"ap": "≈",
			"apE": "⩰",
			"ape": "≊",
			"apid": "≋",
			"apos": "'",
			"ApplyFunction": "⁡",
			"approx": "≈",
			"approxeq": "≊",
			"Aring": "Å",
			"aring": "å",
			"Ascr": "𝒜",
			"ascr": "𝒶",
			"Assign": "≔",
			"ast": "*",
			"asymp": "≈",
			"asympeq": "≍",
			"Atilde": "Ã",
			"atilde": "ã",
			"Auml": "Ä",
			"auml": "ä",
			"awconint": "∳",
			"awint": "⨑",
			"backcong": "≌",
			"backepsilon": "϶",
			"backprime": "‵",
			"backsim": "∽",
			"backsimeq": "⋍",
			"Backslash": "∖",
			"Barv": "⫧",
			"barvee": "⊽",
			"barwed": "⌅",
			"Barwed": "⌆",
			"barwedge": "⌅",
			"bbrk": "⎵",
			"bbrktbrk": "⎶",
			"bcong": "≌",
			"Bcy": "Б",
			"bcy": "б",
			"bdquo": "„",
			"becaus": "∵",
			"because": "∵",
			"Because": "∵",
			"bemptyv": "⦰",
			"bepsi": "϶",
			"bernou": "ℬ",
			"Bernoullis": "ℬ",
			"Beta": "Β",
			"beta": "β",
			"beth": "ℶ",
			"between": "≬",
			"Bfr": "𝔅",
			"bfr": "𝔟",
			"bigcap": "⋂",
			"bigcirc": "◯",
			"bigcup": "⋃",
			"bigodot": "⨀",
			"bigoplus": "⨁",
			"bigotimes": "⨂",
			"bigsqcup": "⨆",
			"bigstar": "★",
			"bigtriangledown": "▽",
			"bigtriangleup": "△",
			"biguplus": "⨄",
			"bigvee": "⋁",
			"bigwedge": "⋀",
			"bkarow": "⤍",
			"blacklozenge": "⧫",
			"blacksquare": "▪",
			"blacktriangle": "▴",
			"blacktriangledown": "▾",
			"blacktriangleleft": "◂",
			"blacktriangleright": "▸",
			"blank": "␣",
			"blk12": "▒",
			"blk14": "░",
			"blk34": "▓",
			"block": "█",
			"bne": "=⃥",
			"bnequiv": "≡⃥",
			"bNot": "⫭",
			"bnot": "⌐",
			"Bopf": "𝔹",
			"bopf": "𝕓",
			"bot": "⊥",
			"bottom": "⊥",
			"bowtie": "⋈",
			"boxbox": "⧉",
			"boxdl": "┐",
			"boxdL": "╕",
			"boxDl": "╖",
			"boxDL": "╗",
			"boxdr": "┌",
			"boxdR": "╒",
			"boxDr": "╓",
			"boxDR": "╔",
			"boxh": "─",
			"boxH": "═",
			"boxhd": "┬",
			"boxHd": "╤",
			"boxhD": "╥",
			"boxHD": "╦",
			"boxhu": "┴",
			"boxHu": "╧",
			"boxhU": "╨",
			"boxHU": "╩",
			"boxminus": "⊟",
			"boxplus": "⊞",
			"boxtimes": "⊠",
			"boxul": "┘",
			"boxuL": "╛",
			"boxUl": "╜",
			"boxUL": "╝",
			"boxur": "└",
			"boxuR": "╘",
			"boxUr": "╙",
			"boxUR": "╚",
			"boxv": "│",
			"boxV": "║",
			"boxvh": "┼",
			"boxvH": "╪",
			"boxVh": "╫",
			"boxVH": "╬",
			"boxvl": "┤",
			"boxvL": "╡",
			"boxVl": "╢",
			"boxVL": "╣",
			"boxvr": "├",
			"boxvR": "╞",
			"boxVr": "╟",
			"boxVR": "╠",
			"bprime": "‵",
			"breve": "˘",
			"Breve": "˘",
			"brvbar": "¦",
			"bscr": "𝒷",
			"Bscr": "ℬ",
			"bsemi": "⁏",
			"bsim": "∽",
			"bsime": "⋍",
			"bsolb": "⧅",
			"bsol": "\\",
			"bsolhsub": "⟈",
			"bull": "•",
			"bullet": "•",
			"bump": "≎",
			"bumpE": "⪮",
			"bumpe": "≏",
			"Bumpeq": "≎",
			"bumpeq": "≏",
			"Cacute": "Ć",
			"cacute": "ć",
			"capand": "⩄",
			"capbrcup": "⩉",
			"capcap": "⩋",
			"cap": "∩",
			"Cap": "⋒",
			"capcup": "⩇",
			"capdot": "⩀",
			"CapitalDifferentialD": "ⅅ",
			"caps": "∩︀",
			"caret": "⁁",
			"caron": "ˇ",
			"Cayleys": "ℭ",
			"ccaps": "⩍",
			"Ccaron": "Č",
			"ccaron": "č",
			"Ccedil": "Ç",
			"ccedil": "ç",
			"Ccirc": "Ĉ",
			"ccirc": "ĉ",
			"Cconint": "∰",
			"ccups": "⩌",
			"ccupssm": "⩐",
			"Cdot": "Ċ",
			"cdot": "ċ",
			"cedil": "¸",
			"Cedilla": "¸",
			"cemptyv": "⦲",
			"cent": "¢",
			"centerdot": "·",
			"CenterDot": "·",
			"cfr": "𝔠",
			"Cfr": "ℭ",
			"CHcy": "Ч",
			"chcy": "ч",
			"check": "✓",
			"checkmark": "✓",
			"Chi": "Χ",
			"chi": "χ",
			"circ": "ˆ",
			"circeq": "≗",
			"circlearrowleft": "↺",
			"circlearrowright": "↻",
			"circledast": "⊛",
			"circledcirc": "⊚",
			"circleddash": "⊝",
			"CircleDot": "⊙",
			"circledR": "®",
			"circledS": "Ⓢ",
			"CircleMinus": "⊖",
			"CirclePlus": "⊕",
			"CircleTimes": "⊗",
			"cir": "○",
			"cirE": "⧃",
			"cire": "≗",
			"cirfnint": "⨐",
			"cirmid": "⫯",
			"cirscir": "⧂",
			"ClockwiseContourIntegral": "∲",
			"CloseCurlyDoubleQuote": "”",
			"CloseCurlyQuote": "’",
			"clubs": "♣",
			"clubsuit": "♣",
			"colon": ":",
			"Colon": "∷",
			"Colone": "⩴",
			"colone": "≔",
			"coloneq": "≔",
			"comma": ",",
			"commat": "@",
			"comp": "∁",
			"compfn": "∘",
			"complement": "∁",
			"complexes": "ℂ",
			"cong": "≅",
			"congdot": "⩭",
			"Congruent": "≡",
			"conint": "∮",
			"Conint": "∯",
			"ContourIntegral": "∮",
			"copf": "𝕔",
			"Copf": "ℂ",
			"coprod": "∐",
			"Coproduct": "∐",
			"copy": "©",
			"COPY": "©",
			"copysr": "℗",
			"CounterClockwiseContourIntegral": "∳",
			"crarr": "↵",
			"cross": "✗",
			"Cross": "⨯",
			"Cscr": "𝒞",
			"cscr": "𝒸",
			"csub": "⫏",
			"csube": "⫑",
			"csup": "⫐",
			"csupe": "⫒",
			"ctdot": "⋯",
			"cudarrl": "⤸",
			"cudarrr": "⤵",
			"cuepr": "⋞",
			"cuesc": "⋟",
			"cularr": "↶",
			"cularrp": "⤽",
			"cupbrcap": "⩈",
			"cupcap": "⩆",
			"CupCap": "≍",
			"cup": "∪",
			"Cup": "⋓",
			"cupcup": "⩊",
			"cupdot": "⊍",
			"cupor": "⩅",
			"cups": "∪︀",
			"curarr": "↷",
			"curarrm": "⤼",
			"curlyeqprec": "⋞",
			"curlyeqsucc": "⋟",
			"curlyvee": "⋎",
			"curlywedge": "⋏",
			"curren": "¤",
			"curvearrowleft": "↶",
			"curvearrowright": "↷",
			"cuvee": "⋎",
			"cuwed": "⋏",
			"cwconint": "∲",
			"cwint": "∱",
			"cylcty": "⌭",
			"dagger": "†",
			"Dagger": "‡",
			"daleth": "ℸ",
			"darr": "↓",
			"Darr": "↡",
			"dArr": "⇓",
			"dash": "‐",
			"Dashv": "⫤",
			"dashv": "⊣",
			"dbkarow": "⤏",
			"dblac": "˝",
			"Dcaron": "Ď",
			"dcaron": "ď",
			"Dcy": "Д",
			"dcy": "д",
			"ddagger": "‡",
			"ddarr": "⇊",
			"DD": "ⅅ",
			"dd": "ⅆ",
			"DDotrahd": "⤑",
			"ddotseq": "⩷",
			"deg": "°",
			"Del": "∇",
			"Delta": "Δ",
			"delta": "δ",
			"demptyv": "⦱",
			"dfisht": "⥿",
			"Dfr": "𝔇",
			"dfr": "𝔡",
			"dHar": "⥥",
			"dharl": "⇃",
			"dharr": "⇂",
			"DiacriticalAcute": "´",
			"DiacriticalDot": "˙",
			"DiacriticalDoubleAcute": "˝",
			"DiacriticalGrave": "`",
			"DiacriticalTilde": "˜",
			"diam": "⋄",
			"diamond": "⋄",
			"Diamond": "⋄",
			"diamondsuit": "♦",
			"diams": "♦",
			"die": "¨",
			"DifferentialD": "ⅆ",
			"digamma": "ϝ",
			"disin": "⋲",
			"div": "÷",
			"divide": "÷",
			"divideontimes": "⋇",
			"divonx": "⋇",
			"DJcy": "Ђ",
			"djcy": "ђ",
			"dlcorn": "⌞",
			"dlcrop": "⌍",
			"dollar": "$",
			"Dopf": "𝔻",
			"dopf": "𝕕",
			"Dot": "¨",
			"dot": "˙",
			"DotDot": "⃜",
			"doteq": "≐",
			"doteqdot": "≑",
			"DotEqual": "≐",
			"dotminus": "∸",
			"dotplus": "∔",
			"dotsquare": "⊡",
			"doublebarwedge": "⌆",
			"DoubleContourIntegral": "∯",
			"DoubleDot": "¨",
			"DoubleDownArrow": "⇓",
			"DoubleLeftArrow": "⇐",
			"DoubleLeftRightArrow": "⇔",
			"DoubleLeftTee": "⫤",
			"DoubleLongLeftArrow": "⟸",
			"DoubleLongLeftRightArrow": "⟺",
			"DoubleLongRightArrow": "⟹",
			"DoubleRightArrow": "⇒",
			"DoubleRightTee": "⊨",
			"DoubleUpArrow": "⇑",
			"DoubleUpDownArrow": "⇕",
			"DoubleVerticalBar": "∥",
			"DownArrowBar": "⤓",
			"downarrow": "↓",
			"DownArrow": "↓",
			"Downarrow": "⇓",
			"DownArrowUpArrow": "⇵",
			"DownBreve": "̑",
			"downdownarrows": "⇊",
			"downharpoonleft": "⇃",
			"downharpoonright": "⇂",
			"DownLeftRightVector": "⥐",
			"DownLeftTeeVector": "⥞",
			"DownLeftVectorBar": "⥖",
			"DownLeftVector": "↽",
			"DownRightTeeVector": "⥟",
			"DownRightVectorBar": "⥗",
			"DownRightVector": "⇁",
			"DownTeeArrow": "↧",
			"DownTee": "⊤",
			"drbkarow": "⤐",
			"drcorn": "⌟",
			"drcrop": "⌌",
			"Dscr": "𝒟",
			"dscr": "𝒹",
			"DScy": "Ѕ",
			"dscy": "ѕ",
			"dsol": "⧶",
			"Dstrok": "Đ",
			"dstrok": "đ",
			"dtdot": "⋱",
			"dtri": "▿",
			"dtrif": "▾",
			"duarr": "⇵",
			"duhar": "⥯",
			"dwangle": "⦦",
			"DZcy": "Џ",
			"dzcy": "џ",
			"dzigrarr": "⟿",
			"Eacute": "É",
			"eacute": "é",
			"easter": "⩮",
			"Ecaron": "Ě",
			"ecaron": "ě",
			"Ecirc": "Ê",
			"ecirc": "ê",
			"ecir": "≖",
			"ecolon": "≕",
			"Ecy": "Э",
			"ecy": "э",
			"eDDot": "⩷",
			"Edot": "Ė",
			"edot": "ė",
			"eDot": "≑",
			"ee": "ⅇ",
			"efDot": "≒",
			"Efr": "𝔈",
			"efr": "𝔢",
			"eg": "⪚",
			"Egrave": "È",
			"egrave": "è",
			"egs": "⪖",
			"egsdot": "⪘",
			"el": "⪙",
			"Element": "∈",
			"elinters": "⏧",
			"ell": "ℓ",
			"els": "⪕",
			"elsdot": "⪗",
			"Emacr": "Ē",
			"emacr": "ē",
			"empty": "∅",
			"emptyset": "∅",
			"EmptySmallSquare": "◻",
			"emptyv": "∅",
			"EmptyVerySmallSquare": "▫",
			"emsp13": " ",
			"emsp14": " ",
			"emsp": " ",
			"ENG": "Ŋ",
			"eng": "ŋ",
			"ensp": " ",
			"Eogon": "Ę",
			"eogon": "ę",
			"Eopf": "𝔼",
			"eopf": "𝕖",
			"epar": "⋕",
			"eparsl": "⧣",
			"eplus": "⩱",
			"epsi": "ε",
			"Epsilon": "Ε",
			"epsilon": "ε",
			"epsiv": "ϵ",
			"eqcirc": "≖",
			"eqcolon": "≕",
			"eqsim": "≂",
			"eqslantgtr": "⪖",
			"eqslantless": "⪕",
			"Equal": "⩵",
			"equals": "=",
			"EqualTilde": "≂",
			"equest": "≟",
			"Equilibrium": "⇌",
			"equiv": "≡",
			"equivDD": "⩸",
			"eqvparsl": "⧥",
			"erarr": "⥱",
			"erDot": "≓",
			"escr": "ℯ",
			"Escr": "ℰ",
			"esdot": "≐",
			"Esim": "⩳",
			"esim": "≂",
			"Eta": "Η",
			"eta": "η",
			"ETH": "Ð",
			"eth": "ð",
			"Euml": "Ë",
			"euml": "ë",
			"euro": "€",
			"excl": "!",
			"exist": "∃",
			"Exists": "∃",
			"expectation": "ℰ",
			"exponentiale": "ⅇ",
			"ExponentialE": "ⅇ",
			"fallingdotseq": "≒",
			"Fcy": "Ф",
			"fcy": "ф",
			"female": "♀",
			"ffilig": "ﬃ",
			"fflig": "ﬀ",
			"ffllig": "ﬄ",
			"Ffr": "𝔉",
			"ffr": "𝔣",
			"filig": "ﬁ",
			"FilledSmallSquare": "◼",
			"FilledVerySmallSquare": "▪",
			"fjlig": "fj",
			"flat": "♭",
			"fllig": "ﬂ",
			"fltns": "▱",
			"fnof": "ƒ",
			"Fopf": "𝔽",
			"fopf": "𝕗",
			"forall": "∀",
			"ForAll": "∀",
			"fork": "⋔",
			"forkv": "⫙",
			"Fouriertrf": "ℱ",
			"fpartint": "⨍",
			"frac12": "½",
			"frac13": "⅓",
			"frac14": "¼",
			"frac15": "⅕",
			"frac16": "⅙",
			"frac18": "⅛",
			"frac23": "⅔",
			"frac25": "⅖",
			"frac34": "¾",
			"frac35": "⅗",
			"frac38": "⅜",
			"frac45": "⅘",
			"frac56": "⅚",
			"frac58": "⅝",
			"frac78": "⅞",
			"frasl": "⁄",
			"frown": "⌢",
			"fscr": "𝒻",
			"Fscr": "ℱ",
			"gacute": "ǵ",
			"Gamma": "Γ",
			"gamma": "γ",
			"Gammad": "Ϝ",
			"gammad": "ϝ",
			"gap": "⪆",
			"Gbreve": "Ğ",
			"gbreve": "ğ",
			"Gcedil": "Ģ",
			"Gcirc": "Ĝ",
			"gcirc": "ĝ",
			"Gcy": "Г",
			"gcy": "г",
			"Gdot": "Ġ",
			"gdot": "ġ",
			"ge": "≥",
			"gE": "≧",
			"gEl": "⪌",
			"gel": "⋛",
			"geq": "≥",
			"geqq": "≧",
			"geqslant": "⩾",
			"gescc": "⪩",
			"ges": "⩾",
			"gesdot": "⪀",
			"gesdoto": "⪂",
			"gesdotol": "⪄",
			"gesl": "⋛︀",
			"gesles": "⪔",
			"Gfr": "𝔊",
			"gfr": "𝔤",
			"gg": "≫",
			"Gg": "⋙",
			"ggg": "⋙",
			"gimel": "ℷ",
			"GJcy": "Ѓ",
			"gjcy": "ѓ",
			"gla": "⪥",
			"gl": "≷",
			"glE": "⪒",
			"glj": "⪤",
			"gnap": "⪊",
			"gnapprox": "⪊",
			"gne": "⪈",
			"gnE": "≩",
			"gneq": "⪈",
			"gneqq": "≩",
			"gnsim": "⋧",
			"Gopf": "𝔾",
			"gopf": "𝕘",
			"grave": "`",
			"GreaterEqual": "≥",
			"GreaterEqualLess": "⋛",
			"GreaterFullEqual": "≧",
			"GreaterGreater": "⪢",
			"GreaterLess": "≷",
			"GreaterSlantEqual": "⩾",
			"GreaterTilde": "≳",
			"Gscr": "𝒢",
			"gscr": "ℊ",
			"gsim": "≳",
			"gsime": "⪎",
			"gsiml": "⪐",
			"gtcc": "⪧",
			"gtcir": "⩺",
			"gt": ">",
			"GT": ">",
			"Gt": "≫",
			"gtdot": "⋗",
			"gtlPar": "⦕",
			"gtquest": "⩼",
			"gtrapprox": "⪆",
			"gtrarr": "⥸",
			"gtrdot": "⋗",
			"gtreqless": "⋛",
			"gtreqqless": "⪌",
			"gtrless": "≷",
			"gtrsim": "≳",
			"gvertneqq": "≩︀",
			"gvnE": "≩︀",
			"Hacek": "ˇ",
			"hairsp": " ",
			"half": "½",
			"hamilt": "ℋ",
			"HARDcy": "Ъ",
			"hardcy": "ъ",
			"harrcir": "⥈",
			"harr": "↔",
			"hArr": "⇔",
			"harrw": "↭",
			"Hat": "^",
			"hbar": "ℏ",
			"Hcirc": "Ĥ",
			"hcirc": "ĥ",
			"hearts": "♥",
			"heartsuit": "♥",
			"hellip": "…",
			"hercon": "⊹",
			"hfr": "𝔥",
			"Hfr": "ℌ",
			"HilbertSpace": "ℋ",
			"hksearow": "⤥",
			"hkswarow": "⤦",
			"hoarr": "⇿",
			"homtht": "∻",
			"hookleftarrow": "↩",
			"hookrightarrow": "↪",
			"hopf": "𝕙",
			"Hopf": "ℍ",
			"horbar": "―",
			"HorizontalLine": "─",
			"hscr": "𝒽",
			"Hscr": "ℋ",
			"hslash": "ℏ",
			"Hstrok": "Ħ",
			"hstrok": "ħ",
			"HumpDownHump": "≎",
			"HumpEqual": "≏",
			"hybull": "⁃",
			"hyphen": "‐",
			"Iacute": "Í",
			"iacute": "í",
			"ic": "⁣",
			"Icirc": "Î",
			"icirc": "î",
			"Icy": "И",
			"icy": "и",
			"Idot": "İ",
			"IEcy": "Е",
			"iecy": "е",
			"iexcl": "¡",
			"iff": "⇔",
			"ifr": "𝔦",
			"Ifr": "ℑ",
			"Igrave": "Ì",
			"igrave": "ì",
			"ii": "ⅈ",
			"iiiint": "⨌",
			"iiint": "∭",
			"iinfin": "⧜",
			"iiota": "℩",
			"IJlig": "Ĳ",
			"ijlig": "ĳ",
			"Imacr": "Ī",
			"imacr": "ī",
			"image": "ℑ",
			"ImaginaryI": "ⅈ",
			"imagline": "ℐ",
			"imagpart": "ℑ",
			"imath": "ı",
			"Im": "ℑ",
			"imof": "⊷",
			"imped": "Ƶ",
			"Implies": "⇒",
			"incare": "℅",
			"in": "∈",
			"infin": "∞",
			"infintie": "⧝",
			"inodot": "ı",
			"intcal": "⊺",
			"int": "∫",
			"Int": "∬",
			"integers": "ℤ",
			"Integral": "∫",
			"intercal": "⊺",
			"Intersection": "⋂",
			"intlarhk": "⨗",
			"intprod": "⨼",
			"InvisibleComma": "⁣",
			"InvisibleTimes": "⁢",
			"IOcy": "Ё",
			"iocy": "ё",
			"Iogon": "Į",
			"iogon": "į",
			"Iopf": "𝕀",
			"iopf": "𝕚",
			"Iota": "Ι",
			"iota": "ι",
			"iprod": "⨼",
			"iquest": "¿",
			"iscr": "𝒾",
			"Iscr": "ℐ",
			"isin": "∈",
			"isindot": "⋵",
			"isinE": "⋹",
			"isins": "⋴",
			"isinsv": "⋳",
			"isinv": "∈",
			"it": "⁢",
			"Itilde": "Ĩ",
			"itilde": "ĩ",
			"Iukcy": "І",
			"iukcy": "і",
			"Iuml": "Ï",
			"iuml": "ï",
			"Jcirc": "Ĵ",
			"jcirc": "ĵ",
			"Jcy": "Й",
			"jcy": "й",
			"Jfr": "𝔍",
			"jfr": "𝔧",
			"jmath": "ȷ",
			"Jopf": "𝕁",
			"jopf": "𝕛",
			"Jscr": "𝒥",
			"jscr": "𝒿",
			"Jsercy": "Ј",
			"jsercy": "ј",
			"Jukcy": "Є",
			"jukcy": "є",
			"Kappa": "Κ",
			"kappa": "κ",
			"kappav": "ϰ",
			"Kcedil": "Ķ",
			"kcedil": "ķ",
			"Kcy": "К",
			"kcy": "к",
			"Kfr": "𝔎",
			"kfr": "𝔨",
			"kgreen": "ĸ",
			"KHcy": "Х",
			"khcy": "х",
			"KJcy": "Ќ",
			"kjcy": "ќ",
			"Kopf": "𝕂",
			"kopf": "𝕜",
			"Kscr": "𝒦",
			"kscr": "𝓀",
			"lAarr": "⇚",
			"Lacute": "Ĺ",
			"lacute": "ĺ",
			"laemptyv": "⦴",
			"lagran": "ℒ",
			"Lambda": "Λ",
			"lambda": "λ",
			"lang": "⟨",
			"Lang": "⟪",
			"langd": "⦑",
			"langle": "⟨",
			"lap": "⪅",
			"Laplacetrf": "ℒ",
			"laquo": "«",
			"larrb": "⇤",
			"larrbfs": "⤟",
			"larr": "←",
			"Larr": "↞",
			"lArr": "⇐",
			"larrfs": "⤝",
			"larrhk": "↩",
			"larrlp": "↫",
			"larrpl": "⤹",
			"larrsim": "⥳",
			"larrtl": "↢",
			"latail": "⤙",
			"lAtail": "⤛",
			"lat": "⪫",
			"late": "⪭",
			"lates": "⪭︀",
			"lbarr": "⤌",
			"lBarr": "⤎",
			"lbbrk": "❲",
			"lbrace": "{",
			"lbrack": "[",
			"lbrke": "⦋",
			"lbrksld": "⦏",
			"lbrkslu": "⦍",
			"Lcaron": "Ľ",
			"lcaron": "ľ",
			"Lcedil": "Ļ",
			"lcedil": "ļ",
			"lceil": "⌈",
			"lcub": "{",
			"Lcy": "Л",
			"lcy": "л",
			"ldca": "⤶",
			"ldquo": "“",
			"ldquor": "„",
			"ldrdhar": "⥧",
			"ldrushar": "⥋",
			"ldsh": "↲",
			"le": "≤",
			"lE": "≦",
			"LeftAngleBracket": "⟨",
			"LeftArrowBar": "⇤",
			"leftarrow": "←",
			"LeftArrow": "←",
			"Leftarrow": "⇐",
			"LeftArrowRightArrow": "⇆",
			"leftarrowtail": "↢",
			"LeftCeiling": "⌈",
			"LeftDoubleBracket": "⟦",
			"LeftDownTeeVector": "⥡",
			"LeftDownVectorBar": "⥙",
			"LeftDownVector": "⇃",
			"LeftFloor": "⌊",
			"leftharpoondown": "↽",
			"leftharpoonup": "↼",
			"leftleftarrows": "⇇",
			"leftrightarrow": "↔",
			"LeftRightArrow": "↔",
			"Leftrightarrow": "⇔",
			"leftrightarrows": "⇆",
			"leftrightharpoons": "⇋",
			"leftrightsquigarrow": "↭",
			"LeftRightVector": "⥎",
			"LeftTeeArrow": "↤",
			"LeftTee": "⊣",
			"LeftTeeVector": "⥚",
			"leftthreetimes": "⋋",
			"LeftTriangleBar": "⧏",
			"LeftTriangle": "⊲",
			"LeftTriangleEqual": "⊴",
			"LeftUpDownVector": "⥑",
			"LeftUpTeeVector": "⥠",
			"LeftUpVectorBar": "⥘",
			"LeftUpVector": "↿",
			"LeftVectorBar": "⥒",
			"LeftVector": "↼",
			"lEg": "⪋",
			"leg": "⋚",
			"leq": "≤",
			"leqq": "≦",
			"leqslant": "⩽",
			"lescc": "⪨",
			"les": "⩽",
			"lesdot": "⩿",
			"lesdoto": "⪁",
			"lesdotor": "⪃",
			"lesg": "⋚︀",
			"lesges": "⪓",
			"lessapprox": "⪅",
			"lessdot": "⋖",
			"lesseqgtr": "⋚",
			"lesseqqgtr": "⪋",
			"LessEqualGreater": "⋚",
			"LessFullEqual": "≦",
			"LessGreater": "≶",
			"lessgtr": "≶",
			"LessLess": "⪡",
			"lesssim": "≲",
			"LessSlantEqual": "⩽",
			"LessTilde": "≲",
			"lfisht": "⥼",
			"lfloor": "⌊",
			"Lfr": "𝔏",
			"lfr": "𝔩",
			"lg": "≶",
			"lgE": "⪑",
			"lHar": "⥢",
			"lhard": "↽",
			"lharu": "↼",
			"lharul": "⥪",
			"lhblk": "▄",
			"LJcy": "Љ",
			"ljcy": "љ",
			"llarr": "⇇",
			"ll": "≪",
			"Ll": "⋘",
			"llcorner": "⌞",
			"Lleftarrow": "⇚",
			"llhard": "⥫",
			"lltri": "◺",
			"Lmidot": "Ŀ",
			"lmidot": "ŀ",
			"lmoustache": "⎰",
			"lmoust": "⎰",
			"lnap": "⪉",
			"lnapprox": "⪉",
			"lne": "⪇",
			"lnE": "≨",
			"lneq": "⪇",
			"lneqq": "≨",
			"lnsim": "⋦",
			"loang": "⟬",
			"loarr": "⇽",
			"lobrk": "⟦",
			"longleftarrow": "⟵",
			"LongLeftArrow": "⟵",
			"Longleftarrow": "⟸",
			"longleftrightarrow": "⟷",
			"LongLeftRightArrow": "⟷",
			"Longleftrightarrow": "⟺",
			"longmapsto": "⟼",
			"longrightarrow": "⟶",
			"LongRightArrow": "⟶",
			"Longrightarrow": "⟹",
			"looparrowleft": "↫",
			"looparrowright": "↬",
			"lopar": "⦅",
			"Lopf": "𝕃",
			"lopf": "𝕝",
			"loplus": "⨭",
			"lotimes": "⨴",
			"lowast": "∗",
			"lowbar": "_",
			"LowerLeftArrow": "↙",
			"LowerRightArrow": "↘",
			"loz": "◊",
			"lozenge": "◊",
			"lozf": "⧫",
			"lpar": "(",
			"lparlt": "⦓",
			"lrarr": "⇆",
			"lrcorner": "⌟",
			"lrhar": "⇋",
			"lrhard": "⥭",
			"lrm": "‎",
			"lrtri": "⊿",
			"lsaquo": "‹",
			"lscr": "𝓁",
			"Lscr": "ℒ",
			"lsh": "↰",
			"Lsh": "↰",
			"lsim": "≲",
			"lsime": "⪍",
			"lsimg": "⪏",
			"lsqb": "[",
			"lsquo": "‘",
			"lsquor": "‚",
			"Lstrok": "Ł",
			"lstrok": "ł",
			"ltcc": "⪦",
			"ltcir": "⩹",
			"lt": "<",
			"LT": "<",
			"Lt": "≪",
			"ltdot": "⋖",
			"lthree": "⋋",
			"ltimes": "⋉",
			"ltlarr": "⥶",
			"ltquest": "⩻",
			"ltri": "◃",
			"ltrie": "⊴",
			"ltrif": "◂",
			"ltrPar": "⦖",
			"lurdshar": "⥊",
			"luruhar": "⥦",
			"lvertneqq": "≨︀",
			"lvnE": "≨︀",
			"macr": "¯",
			"male": "♂",
			"malt": "✠",
			"maltese": "✠",
			"Map": "⤅",
			"map": "↦",
			"mapsto": "↦",
			"mapstodown": "↧",
			"mapstoleft": "↤",
			"mapstoup": "↥",
			"marker": "▮",
			"mcomma": "⨩",
			"Mcy": "М",
			"mcy": "м",
			"mdash": "—",
			"mDDot": "∺",
			"measuredangle": "∡",
			"MediumSpace": " ",
			"Mellintrf": "ℳ",
			"Mfr": "𝔐",
			"mfr": "𝔪",
			"mho": "℧",
			"micro": "µ",
			"midast": "*",
			"midcir": "⫰",
			"mid": "∣",
			"middot": "·",
			"minusb": "⊟",
			"minus": "−",
			"minusd": "∸",
			"minusdu": "⨪",
			"MinusPlus": "∓",
			"mlcp": "⫛",
			"mldr": "…",
			"mnplus": "∓",
			"models": "⊧",
			"Mopf": "𝕄",
			"mopf": "𝕞",
			"mp": "∓",
			"mscr": "𝓂",
			"Mscr": "ℳ",
			"mstpos": "∾",
			"Mu": "Μ",
			"mu": "μ",
			"multimap": "⊸",
			"mumap": "⊸",
			"nabla": "∇",
			"Nacute": "Ń",
			"nacute": "ń",
			"nang": "∠⃒",
			"nap": "≉",
			"napE": "⩰̸",
			"napid": "≋̸",
			"napos": "ŉ",
			"napprox": "≉",
			"natural": "♮",
			"naturals": "ℕ",
			"natur": "♮",
			"nbsp": " ",
			"nbump": "≎̸",
			"nbumpe": "≏̸",
			"ncap": "⩃",
			"Ncaron": "Ň",
			"ncaron": "ň",
			"Ncedil": "Ņ",
			"ncedil": "ņ",
			"ncong": "≇",
			"ncongdot": "⩭̸",
			"ncup": "⩂",
			"Ncy": "Н",
			"ncy": "н",
			"ndash": "–",
			"nearhk": "⤤",
			"nearr": "↗",
			"neArr": "⇗",
			"nearrow": "↗",
			"ne": "≠",
			"nedot": "≐̸",
			"NegativeMediumSpace": "​",
			"NegativeThickSpace": "​",
			"NegativeThinSpace": "​",
			"NegativeVeryThinSpace": "​",
			"nequiv": "≢",
			"nesear": "⤨",
			"nesim": "≂̸",
			"NestedGreaterGreater": "≫",
			"NestedLessLess": "≪",
			"NewLine": "\n",
			"nexist": "∄",
			"nexists": "∄",
			"Nfr": "𝔑",
			"nfr": "𝔫",
			"ngE": "≧̸",
			"nge": "≱",
			"ngeq": "≱",
			"ngeqq": "≧̸",
			"ngeqslant": "⩾̸",
			"nges": "⩾̸",
			"nGg": "⋙̸",
			"ngsim": "≵",
			"nGt": "≫⃒",
			"ngt": "≯",
			"ngtr": "≯",
			"nGtv": "≫̸",
			"nharr": "↮",
			"nhArr": "⇎",
			"nhpar": "⫲",
			"ni": "∋",
			"nis": "⋼",
			"nisd": "⋺",
			"niv": "∋",
			"NJcy": "Њ",
			"njcy": "њ",
			"nlarr": "↚",
			"nlArr": "⇍",
			"nldr": "‥",
			"nlE": "≦̸",
			"nle": "≰",
			"nleftarrow": "↚",
			"nLeftarrow": "⇍",
			"nleftrightarrow": "↮",
			"nLeftrightarrow": "⇎",
			"nleq": "≰",
			"nleqq": "≦̸",
			"nleqslant": "⩽̸",
			"nles": "⩽̸",
			"nless": "≮",
			"nLl": "⋘̸",
			"nlsim": "≴",
			"nLt": "≪⃒",
			"nlt": "≮",
			"nltri": "⋪",
			"nltrie": "⋬",
			"nLtv": "≪̸",
			"nmid": "∤",
			"NoBreak": "⁠",
			"NonBreakingSpace": " ",
			"nopf": "𝕟",
			"Nopf": "ℕ",
			"Not": "⫬",
			"not": "¬",
			"NotCongruent": "≢",
			"NotCupCap": "≭",
			"NotDoubleVerticalBar": "∦",
			"NotElement": "∉",
			"NotEqual": "≠",
			"NotEqualTilde": "≂̸",
			"NotExists": "∄",
			"NotGreater": "≯",
			"NotGreaterEqual": "≱",
			"NotGreaterFullEqual": "≧̸",
			"NotGreaterGreater": "≫̸",
			"NotGreaterLess": "≹",
			"NotGreaterSlantEqual": "⩾̸",
			"NotGreaterTilde": "≵",
			"NotHumpDownHump": "≎̸",
			"NotHumpEqual": "≏̸",
			"notin": "∉",
			"notindot": "⋵̸",
			"notinE": "⋹̸",
			"notinva": "∉",
			"notinvb": "⋷",
			"notinvc": "⋶",
			"NotLeftTriangleBar": "⧏̸",
			"NotLeftTriangle": "⋪",
			"NotLeftTriangleEqual": "⋬",
			"NotLess": "≮",
			"NotLessEqual": "≰",
			"NotLessGreater": "≸",
			"NotLessLess": "≪̸",
			"NotLessSlantEqual": "⩽̸",
			"NotLessTilde": "≴",
			"NotNestedGreaterGreater": "⪢̸",
			"NotNestedLessLess": "⪡̸",
			"notni": "∌",
			"notniva": "∌",
			"notnivb": "⋾",
			"notnivc": "⋽",
			"NotPrecedes": "⊀",
			"NotPrecedesEqual": "⪯̸",
			"NotPrecedesSlantEqual": "⋠",
			"NotReverseElement": "∌",
			"NotRightTriangleBar": "⧐̸",
			"NotRightTriangle": "⋫",
			"NotRightTriangleEqual": "⋭",
			"NotSquareSubset": "⊏̸",
			"NotSquareSubsetEqual": "⋢",
			"NotSquareSuperset": "⊐̸",
			"NotSquareSupersetEqual": "⋣",
			"NotSubset": "⊂⃒",
			"NotSubsetEqual": "⊈",
			"NotSucceeds": "⊁",
			"NotSucceedsEqual": "⪰̸",
			"NotSucceedsSlantEqual": "⋡",
			"NotSucceedsTilde": "≿̸",
			"NotSuperset": "⊃⃒",
			"NotSupersetEqual": "⊉",
			"NotTilde": "≁",
			"NotTildeEqual": "≄",
			"NotTildeFullEqual": "≇",
			"NotTildeTilde": "≉",
			"NotVerticalBar": "∤",
			"nparallel": "∦",
			"npar": "∦",
			"nparsl": "⫽⃥",
			"npart": "∂̸",
			"npolint": "⨔",
			"npr": "⊀",
			"nprcue": "⋠",
			"nprec": "⊀",
			"npreceq": "⪯̸",
			"npre": "⪯̸",
			"nrarrc": "⤳̸",
			"nrarr": "↛",
			"nrArr": "⇏",
			"nrarrw": "↝̸",
			"nrightarrow": "↛",
			"nRightarrow": "⇏",
			"nrtri": "⋫",
			"nrtrie": "⋭",
			"nsc": "⊁",
			"nsccue": "⋡",
			"nsce": "⪰̸",
			"Nscr": "𝒩",
			"nscr": "𝓃",
			"nshortmid": "∤",
			"nshortparallel": "∦",
			"nsim": "≁",
			"nsime": "≄",
			"nsimeq": "≄",
			"nsmid": "∤",
			"nspar": "∦",
			"nsqsube": "⋢",
			"nsqsupe": "⋣",
			"nsub": "⊄",
			"nsubE": "⫅̸",
			"nsube": "⊈",
			"nsubset": "⊂⃒",
			"nsubseteq": "⊈",
			"nsubseteqq": "⫅̸",
			"nsucc": "⊁",
			"nsucceq": "⪰̸",
			"nsup": "⊅",
			"nsupE": "⫆̸",
			"nsupe": "⊉",
			"nsupset": "⊃⃒",
			"nsupseteq": "⊉",
			"nsupseteqq": "⫆̸",
			"ntgl": "≹",
			"Ntilde": "Ñ",
			"ntilde": "ñ",
			"ntlg": "≸",
			"ntriangleleft": "⋪",
			"ntrianglelefteq": "⋬",
			"ntriangleright": "⋫",
			"ntrianglerighteq": "⋭",
			"Nu": "Ν",
			"nu": "ν",
			"num": "#",
			"numero": "№",
			"numsp": " ",
			"nvap": "≍⃒",
			"nvdash": "⊬",
			"nvDash": "⊭",
			"nVdash": "⊮",
			"nVDash": "⊯",
			"nvge": "≥⃒",
			"nvgt": ">⃒",
			"nvHarr": "⤄",
			"nvinfin": "⧞",
			"nvlArr": "⤂",
			"nvle": "≤⃒",
			"nvlt": "<⃒",
			"nvltrie": "⊴⃒",
			"nvrArr": "⤃",
			"nvrtrie": "⊵⃒",
			"nvsim": "∼⃒",
			"nwarhk": "⤣",
			"nwarr": "↖",
			"nwArr": "⇖",
			"nwarrow": "↖",
			"nwnear": "⤧",
			"Oacute": "Ó",
			"oacute": "ó",
			"oast": "⊛",
			"Ocirc": "Ô",
			"ocirc": "ô",
			"ocir": "⊚",
			"Ocy": "О",
			"ocy": "о",
			"odash": "⊝",
			"Odblac": "Ő",
			"odblac": "ő",
			"odiv": "⨸",
			"odot": "⊙",
			"odsold": "⦼",
			"OElig": "Œ",
			"oelig": "œ",
			"ofcir": "⦿",
			"Ofr": "𝔒",
			"ofr": "𝔬",
			"ogon": "˛",
			"Ograve": "Ò",
			"ograve": "ò",
			"ogt": "⧁",
			"ohbar": "⦵",
			"ohm": "Ω",
			"oint": "∮",
			"olarr": "↺",
			"olcir": "⦾",
			"olcross": "⦻",
			"oline": "‾",
			"olt": "⧀",
			"Omacr": "Ō",
			"omacr": "ō",
			"Omega": "Ω",
			"omega": "ω",
			"Omicron": "Ο",
			"omicron": "ο",
			"omid": "⦶",
			"ominus": "⊖",
			"Oopf": "𝕆",
			"oopf": "𝕠",
			"opar": "⦷",
			"OpenCurlyDoubleQuote": "“",
			"OpenCurlyQuote": "‘",
			"operp": "⦹",
			"oplus": "⊕",
			"orarr": "↻",
			"Or": "⩔",
			"or": "∨",
			"ord": "⩝",
			"order": "ℴ",
			"orderof": "ℴ",
			"ordf": "ª",
			"ordm": "º",
			"origof": "⊶",
			"oror": "⩖",
			"orslope": "⩗",
			"orv": "⩛",
			"oS": "Ⓢ",
			"Oscr": "𝒪",
			"oscr": "ℴ",
			"Oslash": "Ø",
			"oslash": "ø",
			"osol": "⊘",
			"Otilde": "Õ",
			"otilde": "õ",
			"otimesas": "⨶",
			"Otimes": "⨷",
			"otimes": "⊗",
			"Ouml": "Ö",
			"ouml": "ö",
			"ovbar": "⌽",
			"OverBar": "‾",
			"OverBrace": "⏞",
			"OverBracket": "⎴",
			"OverParenthesis": "⏜",
			"para": "¶",
			"parallel": "∥",
			"par": "∥",
			"parsim": "⫳",
			"parsl": "⫽",
			"part": "∂",
			"PartialD": "∂",
			"Pcy": "П",
			"pcy": "п",
			"percnt": "%",
			"period": ".",
			"permil": "‰",
			"perp": "⊥",
			"pertenk": "‱",
			"Pfr": "𝔓",
			"pfr": "𝔭",
			"Phi": "Φ",
			"phi": "φ",
			"phiv": "ϕ",
			"phmmat": "ℳ",
			"phone": "☎",
			"Pi": "Π",
			"pi": "π",
			"pitchfork": "⋔",
			"piv": "ϖ",
			"planck": "ℏ",
			"planckh": "ℎ",
			"plankv": "ℏ",
			"plusacir": "⨣",
			"plusb": "⊞",
			"pluscir": "⨢",
			"plus": "+",
			"plusdo": "∔",
			"plusdu": "⨥",
			"pluse": "⩲",
			"PlusMinus": "±",
			"plusmn": "±",
			"plussim": "⨦",
			"plustwo": "⨧",
			"pm": "±",
			"Poincareplane": "ℌ",
			"pointint": "⨕",
			"popf": "𝕡",
			"Popf": "ℙ",
			"pound": "£",
			"prap": "⪷",
			"Pr": "⪻",
			"pr": "≺",
			"prcue": "≼",
			"precapprox": "⪷",
			"prec": "≺",
			"preccurlyeq": "≼",
			"Precedes": "≺",
			"PrecedesEqual": "⪯",
			"PrecedesSlantEqual": "≼",
			"PrecedesTilde": "≾",
			"preceq": "⪯",
			"precnapprox": "⪹",
			"precneqq": "⪵",
			"precnsim": "⋨",
			"pre": "⪯",
			"prE": "⪳",
			"precsim": "≾",
			"prime": "′",
			"Prime": "″",
			"primes": "ℙ",
			"prnap": "⪹",
			"prnE": "⪵",
			"prnsim": "⋨",
			"prod": "∏",
			"Product": "∏",
			"profalar": "⌮",
			"profline": "⌒",
			"profsurf": "⌓",
			"prop": "∝",
			"Proportional": "∝",
			"Proportion": "∷",
			"propto": "∝",
			"prsim": "≾",
			"prurel": "⊰",
			"Pscr": "𝒫",
			"pscr": "𝓅",
			"Psi": "Ψ",
			"psi": "ψ",
			"puncsp": " ",
			"Qfr": "𝔔",
			"qfr": "𝔮",
			"qint": "⨌",
			"qopf": "𝕢",
			"Qopf": "ℚ",
			"qprime": "⁗",
			"Qscr": "𝒬",
			"qscr": "𝓆",
			"quaternions": "ℍ",
			"quatint": "⨖",
			"quest": "?",
			"questeq": "≟",
			"quot": "\"",
			"QUOT": "\"",
			"rAarr": "⇛",
			"race": "∽̱",
			"Racute": "Ŕ",
			"racute": "ŕ",
			"radic": "√",
			"raemptyv": "⦳",
			"rang": "⟩",
			"Rang": "⟫",
			"rangd": "⦒",
			"range": "⦥",
			"rangle": "⟩",
			"raquo": "»",
			"rarrap": "⥵",
			"rarrb": "⇥",
			"rarrbfs": "⤠",
			"rarrc": "⤳",
			"rarr": "→",
			"Rarr": "↠",
			"rArr": "⇒",
			"rarrfs": "⤞",
			"rarrhk": "↪",
			"rarrlp": "↬",
			"rarrpl": "⥅",
			"rarrsim": "⥴",
			"Rarrtl": "⤖",
			"rarrtl": "↣",
			"rarrw": "↝",
			"ratail": "⤚",
			"rAtail": "⤜",
			"ratio": "∶",
			"rationals": "ℚ",
			"rbarr": "⤍",
			"rBarr": "⤏",
			"RBarr": "⤐",
			"rbbrk": "❳",
			"rbrace": "}",
			"rbrack": "]",
			"rbrke": "⦌",
			"rbrksld": "⦎",
			"rbrkslu": "⦐",
			"Rcaron": "Ř",
			"rcaron": "ř",
			"Rcedil": "Ŗ",
			"rcedil": "ŗ",
			"rceil": "⌉",
			"rcub": "}",
			"Rcy": "Р",
			"rcy": "р",
			"rdca": "⤷",
			"rdldhar": "⥩",
			"rdquo": "”",
			"rdquor": "”",
			"rdsh": "↳",
			"real": "ℜ",
			"realine": "ℛ",
			"realpart": "ℜ",
			"reals": "ℝ",
			"Re": "ℜ",
			"rect": "▭",
			"reg": "®",
			"REG": "®",
			"ReverseElement": "∋",
			"ReverseEquilibrium": "⇋",
			"ReverseUpEquilibrium": "⥯",
			"rfisht": "⥽",
			"rfloor": "⌋",
			"rfr": "𝔯",
			"Rfr": "ℜ",
			"rHar": "⥤",
			"rhard": "⇁",
			"rharu": "⇀",
			"rharul": "⥬",
			"Rho": "Ρ",
			"rho": "ρ",
			"rhov": "ϱ",
			"RightAngleBracket": "⟩",
			"RightArrowBar": "⇥",
			"rightarrow": "→",
			"RightArrow": "→",
			"Rightarrow": "⇒",
			"RightArrowLeftArrow": "⇄",
			"rightarrowtail": "↣",
			"RightCeiling": "⌉",
			"RightDoubleBracket": "⟧",
			"RightDownTeeVector": "⥝",
			"RightDownVectorBar": "⥕",
			"RightDownVector": "⇂",
			"RightFloor": "⌋",
			"rightharpoondown": "⇁",
			"rightharpoonup": "⇀",
			"rightleftarrows": "⇄",
			"rightleftharpoons": "⇌",
			"rightrightarrows": "⇉",
			"rightsquigarrow": "↝",
			"RightTeeArrow": "↦",
			"RightTee": "⊢",
			"RightTeeVector": "⥛",
			"rightthreetimes": "⋌",
			"RightTriangleBar": "⧐",
			"RightTriangle": "⊳",
			"RightTriangleEqual": "⊵",
			"RightUpDownVector": "⥏",
			"RightUpTeeVector": "⥜",
			"RightUpVectorBar": "⥔",
			"RightUpVector": "↾",
			"RightVectorBar": "⥓",
			"RightVector": "⇀",
			"ring": "˚",
			"risingdotseq": "≓",
			"rlarr": "⇄",
			"rlhar": "⇌",
			"rlm": "‏",
			"rmoustache": "⎱",
			"rmoust": "⎱",
			"rnmid": "⫮",
			"roang": "⟭",
			"roarr": "⇾",
			"robrk": "⟧",
			"ropar": "⦆",
			"ropf": "𝕣",
			"Ropf": "ℝ",
			"roplus": "⨮",
			"rotimes": "⨵",
			"RoundImplies": "⥰",
			"rpar": ")",
			"rpargt": "⦔",
			"rppolint": "⨒",
			"rrarr": "⇉",
			"Rrightarrow": "⇛",
			"rsaquo": "›",
			"rscr": "𝓇",
			"Rscr": "ℛ",
			"rsh": "↱",
			"Rsh": "↱",
			"rsqb": "]",
			"rsquo": "’",
			"rsquor": "’",
			"rthree": "⋌",
			"rtimes": "⋊",
			"rtri": "▹",
			"rtrie": "⊵",
			"rtrif": "▸",
			"rtriltri": "⧎",
			"RuleDelayed": "⧴",
			"ruluhar": "⥨",
			"rx": "℞",
			"Sacute": "Ś",
			"sacute": "ś",
			"sbquo": "‚",
			"scap": "⪸",
			"Scaron": "Š",
			"scaron": "š",
			"Sc": "⪼",
			"sc": "≻",
			"sccue": "≽",
			"sce": "⪰",
			"scE": "⪴",
			"Scedil": "Ş",
			"scedil": "ş",
			"Scirc": "Ŝ",
			"scirc": "ŝ",
			"scnap": "⪺",
			"scnE": "⪶",
			"scnsim": "⋩",
			"scpolint": "⨓",
			"scsim": "≿",
			"Scy": "С",
			"scy": "с",
			"sdotb": "⊡",
			"sdot": "⋅",
			"sdote": "⩦",
			"searhk": "⤥",
			"searr": "↘",
			"seArr": "⇘",
			"searrow": "↘",
			"sect": "§",
			"semi": ";",
			"seswar": "⤩",
			"setminus": "∖",
			"setmn": "∖",
			"sext": "✶",
			"Sfr": "𝔖",
			"sfr": "𝔰",
			"sfrown": "⌢",
			"sharp": "♯",
			"SHCHcy": "Щ",
			"shchcy": "щ",
			"SHcy": "Ш",
			"shcy": "ш",
			"ShortDownArrow": "↓",
			"ShortLeftArrow": "←",
			"shortmid": "∣",
			"shortparallel": "∥",
			"ShortRightArrow": "→",
			"ShortUpArrow": "↑",
			"shy": "­",
			"Sigma": "Σ",
			"sigma": "σ",
			"sigmaf": "ς",
			"sigmav": "ς",
			"sim": "∼",
			"simdot": "⩪",
			"sime": "≃",
			"simeq": "≃",
			"simg": "⪞",
			"simgE": "⪠",
			"siml": "⪝",
			"simlE": "⪟",
			"simne": "≆",
			"simplus": "⨤",
			"simrarr": "⥲",
			"slarr": "←",
			"SmallCircle": "∘",
			"smallsetminus": "∖",
			"smashp": "⨳",
			"smeparsl": "⧤",
			"smid": "∣",
			"smile": "⌣",
			"smt": "⪪",
			"smte": "⪬",
			"smtes": "⪬︀",
			"SOFTcy": "Ь",
			"softcy": "ь",
			"solbar": "⌿",
			"solb": "⧄",
			"sol": "/",
			"Sopf": "𝕊",
			"sopf": "𝕤",
			"spades": "♠",
			"spadesuit": "♠",
			"spar": "∥",
			"sqcap": "⊓",
			"sqcaps": "⊓︀",
			"sqcup": "⊔",
			"sqcups": "⊔︀",
			"Sqrt": "√",
			"sqsub": "⊏",
			"sqsube": "⊑",
			"sqsubset": "⊏",
			"sqsubseteq": "⊑",
			"sqsup": "⊐",
			"sqsupe": "⊒",
			"sqsupset": "⊐",
			"sqsupseteq": "⊒",
			"square": "□",
			"Square": "□",
			"SquareIntersection": "⊓",
			"SquareSubset": "⊏",
			"SquareSubsetEqual": "⊑",
			"SquareSuperset": "⊐",
			"SquareSupersetEqual": "⊒",
			"SquareUnion": "⊔",
			"squarf": "▪",
			"squ": "□",
			"squf": "▪",
			"srarr": "→",
			"Sscr": "𝒮",
			"sscr": "𝓈",
			"ssetmn": "∖",
			"ssmile": "⌣",
			"sstarf": "⋆",
			"Star": "⋆",
			"star": "☆",
			"starf": "★",
			"straightepsilon": "ϵ",
			"straightphi": "ϕ",
			"strns": "¯",
			"sub": "⊂",
			"Sub": "⋐",
			"subdot": "⪽",
			"subE": "⫅",
			"sube": "⊆",
			"subedot": "⫃",
			"submult": "⫁",
			"subnE": "⫋",
			"subne": "⊊",
			"subplus": "⪿",
			"subrarr": "⥹",
			"subset": "⊂",
			"Subset": "⋐",
			"subseteq": "⊆",
			"subseteqq": "⫅",
			"SubsetEqual": "⊆",
			"subsetneq": "⊊",
			"subsetneqq": "⫋",
			"subsim": "⫇",
			"subsub": "⫕",
			"subsup": "⫓",
			"succapprox": "⪸",
			"succ": "≻",
			"succcurlyeq": "≽",
			"Succeeds": "≻",
			"SucceedsEqual": "⪰",
			"SucceedsSlantEqual": "≽",
			"SucceedsTilde": "≿",
			"succeq": "⪰",
			"succnapprox": "⪺",
			"succneqq": "⪶",
			"succnsim": "⋩",
			"succsim": "≿",
			"SuchThat": "∋",
			"sum": "∑",
			"Sum": "∑",
			"sung": "♪",
			"sup1": "¹",
			"sup2": "²",
			"sup3": "³",
			"sup": "⊃",
			"Sup": "⋑",
			"supdot": "⪾",
			"supdsub": "⫘",
			"supE": "⫆",
			"supe": "⊇",
			"supedot": "⫄",
			"Superset": "⊃",
			"SupersetEqual": "⊇",
			"suphsol": "⟉",
			"suphsub": "⫗",
			"suplarr": "⥻",
			"supmult": "⫂",
			"supnE": "⫌",
			"supne": "⊋",
			"supplus": "⫀",
			"supset": "⊃",
			"Supset": "⋑",
			"supseteq": "⊇",
			"supseteqq": "⫆",
			"supsetneq": "⊋",
			"supsetneqq": "⫌",
			"supsim": "⫈",
			"supsub": "⫔",
			"supsup": "⫖",
			"swarhk": "⤦",
			"swarr": "↙",
			"swArr": "⇙",
			"swarrow": "↙",
			"swnwar": "⤪",
			"szlig": "ß",
			"Tab": "\t",
			"target": "⌖",
			"Tau": "Τ",
			"tau": "τ",
			"tbrk": "⎴",
			"Tcaron": "Ť",
			"tcaron": "ť",
			"Tcedil": "Ţ",
			"tcedil": "ţ",
			"Tcy": "Т",
			"tcy": "т",
			"tdot": "⃛",
			"telrec": "⌕",
			"Tfr": "𝔗",
			"tfr": "𝔱",
			"there4": "∴",
			"therefore": "∴",
			"Therefore": "∴",
			"Theta": "Θ",
			"theta": "θ",
			"thetasym": "ϑ",
			"thetav": "ϑ",
			"thickapprox": "≈",
			"thicksim": "∼",
			"ThickSpace": "  ",
			"ThinSpace": " ",
			"thinsp": " ",
			"thkap": "≈",
			"thksim": "∼",
			"THORN": "Þ",
			"thorn": "þ",
			"tilde": "˜",
			"Tilde": "∼",
			"TildeEqual": "≃",
			"TildeFullEqual": "≅",
			"TildeTilde": "≈",
			"timesbar": "⨱",
			"timesb": "⊠",
			"times": "×",
			"timesd": "⨰",
			"tint": "∭",
			"toea": "⤨",
			"topbot": "⌶",
			"topcir": "⫱",
			"top": "⊤",
			"Topf": "𝕋",
			"topf": "𝕥",
			"topfork": "⫚",
			"tosa": "⤩",
			"tprime": "‴",
			"trade": "™",
			"TRADE": "™",
			"triangle": "▵",
			"triangledown": "▿",
			"triangleleft": "◃",
			"trianglelefteq": "⊴",
			"triangleq": "≜",
			"triangleright": "▹",
			"trianglerighteq": "⊵",
			"tridot": "◬",
			"trie": "≜",
			"triminus": "⨺",
			"TripleDot": "⃛",
			"triplus": "⨹",
			"trisb": "⧍",
			"tritime": "⨻",
			"trpezium": "⏢",
			"Tscr": "𝒯",
			"tscr": "𝓉",
			"TScy": "Ц",
			"tscy": "ц",
			"TSHcy": "Ћ",
			"tshcy": "ћ",
			"Tstrok": "Ŧ",
			"tstrok": "ŧ",
			"twixt": "≬",
			"twoheadleftarrow": "↞",
			"twoheadrightarrow": "↠",
			"Uacute": "Ú",
			"uacute": "ú",
			"uarr": "↑",
			"Uarr": "↟",
			"uArr": "⇑",
			"Uarrocir": "⥉",
			"Ubrcy": "Ў",
			"ubrcy": "ў",
			"Ubreve": "Ŭ",
			"ubreve": "ŭ",
			"Ucirc": "Û",
			"ucirc": "û",
			"Ucy": "У",
			"ucy": "у",
			"udarr": "⇅",
			"Udblac": "Ű",
			"udblac": "ű",
			"udhar": "⥮",
			"ufisht": "⥾",
			"Ufr": "𝔘",
			"ufr": "𝔲",
			"Ugrave": "Ù",
			"ugrave": "ù",
			"uHar": "⥣",
			"uharl": "↿",
			"uharr": "↾",
			"uhblk": "▀",
			"ulcorn": "⌜",
			"ulcorner": "⌜",
			"ulcrop": "⌏",
			"ultri": "◸",
			"Umacr": "Ū",
			"umacr": "ū",
			"uml": "¨",
			"UnderBar": "_",
			"UnderBrace": "⏟",
			"UnderBracket": "⎵",
			"UnderParenthesis": "⏝",
			"Union": "⋃",
			"UnionPlus": "⊎",
			"Uogon": "Ų",
			"uogon": "ų",
			"Uopf": "𝕌",
			"uopf": "𝕦",
			"UpArrowBar": "⤒",
			"uparrow": "↑",
			"UpArrow": "↑",
			"Uparrow": "⇑",
			"UpArrowDownArrow": "⇅",
			"updownarrow": "↕",
			"UpDownArrow": "↕",
			"Updownarrow": "⇕",
			"UpEquilibrium": "⥮",
			"upharpoonleft": "↿",
			"upharpoonright": "↾",
			"uplus": "⊎",
			"UpperLeftArrow": "↖",
			"UpperRightArrow": "↗",
			"upsi": "υ",
			"Upsi": "ϒ",
			"upsih": "ϒ",
			"Upsilon": "Υ",
			"upsilon": "υ",
			"UpTeeArrow": "↥",
			"UpTee": "⊥",
			"upuparrows": "⇈",
			"urcorn": "⌝",
			"urcorner": "⌝",
			"urcrop": "⌎",
			"Uring": "Ů",
			"uring": "ů",
			"urtri": "◹",
			"Uscr": "𝒰",
			"uscr": "𝓊",
			"utdot": "⋰",
			"Utilde": "Ũ",
			"utilde": "ũ",
			"utri": "▵",
			"utrif": "▴",
			"uuarr": "⇈",
			"Uuml": "Ü",
			"uuml": "ü",
			"uwangle": "⦧",
			"vangrt": "⦜",
			"varepsilon": "ϵ",
			"varkappa": "ϰ",
			"varnothing": "∅",
			"varphi": "ϕ",
			"varpi": "ϖ",
			"varpropto": "∝",
			"varr": "↕",
			"vArr": "⇕",
			"varrho": "ϱ",
			"varsigma": "ς",
			"varsubsetneq": "⊊︀",
			"varsubsetneqq": "⫋︀",
			"varsupsetneq": "⊋︀",
			"varsupsetneqq": "⫌︀",
			"vartheta": "ϑ",
			"vartriangleleft": "⊲",
			"vartriangleright": "⊳",
			"vBar": "⫨",
			"Vbar": "⫫",
			"vBarv": "⫩",
			"Vcy": "В",
			"vcy": "в",
			"vdash": "⊢",
			"vDash": "⊨",
			"Vdash": "⊩",
			"VDash": "⊫",
			"Vdashl": "⫦",
			"veebar": "⊻",
			"vee": "∨",
			"Vee": "⋁",
			"veeeq": "≚",
			"vellip": "⋮",
			"verbar": "|",
			"Verbar": "‖",
			"vert": "|",
			"Vert": "‖",
			"VerticalBar": "∣",
			"VerticalLine": "|",
			"VerticalSeparator": "❘",
			"VerticalTilde": "≀",
			"VeryThinSpace": " ",
			"Vfr": "𝔙",
			"vfr": "𝔳",
			"vltri": "⊲",
			"vnsub": "⊂⃒",
			"vnsup": "⊃⃒",
			"Vopf": "𝕍",
			"vopf": "𝕧",
			"vprop": "∝",
			"vrtri": "⊳",
			"Vscr": "𝒱",
			"vscr": "𝓋",
			"vsubnE": "⫋︀",
			"vsubne": "⊊︀",
			"vsupnE": "⫌︀",
			"vsupne": "⊋︀",
			"Vvdash": "⊪",
			"vzigzag": "⦚",
			"Wcirc": "Ŵ",
			"wcirc": "ŵ",
			"wedbar": "⩟",
			"wedge": "∧",
			"Wedge": "⋀",
			"wedgeq": "≙",
			"weierp": "℘",
			"Wfr": "𝔚",
			"wfr": "𝔴",
			"Wopf": "𝕎",
			"wopf": "𝕨",
			"wp": "℘",
			"wr": "≀",
			"wreath": "≀",
			"Wscr": "𝒲",
			"wscr": "𝓌",
			"xcap": "⋂",
			"xcirc": "◯",
			"xcup": "⋃",
			"xdtri": "▽",
			"Xfr": "𝔛",
			"xfr": "𝔵",
			"xharr": "⟷",
			"xhArr": "⟺",
			"Xi": "Ξ",
			"xi": "ξ",
			"xlarr": "⟵",
			"xlArr": "⟸",
			"xmap": "⟼",
			"xnis": "⋻",
			"xodot": "⨀",
			"Xopf": "𝕏",
			"xopf": "𝕩",
			"xoplus": "⨁",
			"xotime": "⨂",
			"xrarr": "⟶",
			"xrArr": "⟹",
			"Xscr": "𝒳",
			"xscr": "𝓍",
			"xsqcup": "⨆",
			"xuplus": "⨄",
			"xutri": "△",
			"xvee": "⋁",
			"xwedge": "⋀",
			"Yacute": "Ý",
			"yacute": "ý",
			"YAcy": "Я",
			"yacy": "я",
			"Ycirc": "Ŷ",
			"ycirc": "ŷ",
			"Ycy": "Ы",
			"ycy": "ы",
			"yen": "¥",
			"Yfr": "𝔜",
			"yfr": "𝔶",
			"YIcy": "Ї",
			"yicy": "ї",
			"Yopf": "𝕐",
			"yopf": "𝕪",
			"Yscr": "𝒴",
			"yscr": "𝓎",
			"YUcy": "Ю",
			"yucy": "ю",
			"yuml": "ÿ",
			"Yuml": "Ÿ",
			"Zacute": "Ź",
			"zacute": "ź",
			"Zcaron": "Ž",
			"zcaron": "ž",
			"Zcy": "З",
			"zcy": "з",
			"Zdot": "Ż",
			"zdot": "ż",
			"zeetrf": "ℨ",
			"ZeroWidthSpace": "​",
			"Zeta": "Ζ",
			"zeta": "ζ",
			"zfr": "𝔷",
			"Zfr": "ℨ",
			"ZHcy": "Ж",
			"zhcy": "ж",
			"zigrarr": "⇝",
			"zopf": "𝕫",
			"Zopf": "ℤ",
			"Zscr": "𝒵",
			"zscr": "𝓏",
			"zwj": "‍",
			"zwnj": "‌"
		};

	/***/ },
	/* 20 */
	/***/ function(module, exports) {

		module.exports = {
			"Aacute": "Á",
			"aacute": "á",
			"Acirc": "Â",
			"acirc": "â",
			"acute": "´",
			"AElig": "Æ",
			"aelig": "æ",
			"Agrave": "À",
			"agrave": "à",
			"amp": "&",
			"AMP": "&",
			"Aring": "Å",
			"aring": "å",
			"Atilde": "Ã",
			"atilde": "ã",
			"Auml": "Ä",
			"auml": "ä",
			"brvbar": "¦",
			"Ccedil": "Ç",
			"ccedil": "ç",
			"cedil": "¸",
			"cent": "¢",
			"copy": "©",
			"COPY": "©",
			"curren": "¤",
			"deg": "°",
			"divide": "÷",
			"Eacute": "É",
			"eacute": "é",
			"Ecirc": "Ê",
			"ecirc": "ê",
			"Egrave": "È",
			"egrave": "è",
			"ETH": "Ð",
			"eth": "ð",
			"Euml": "Ë",
			"euml": "ë",
			"frac12": "½",
			"frac14": "¼",
			"frac34": "¾",
			"gt": ">",
			"GT": ">",
			"Iacute": "Í",
			"iacute": "í",
			"Icirc": "Î",
			"icirc": "î",
			"iexcl": "¡",
			"Igrave": "Ì",
			"igrave": "ì",
			"iquest": "¿",
			"Iuml": "Ï",
			"iuml": "ï",
			"laquo": "«",
			"lt": "<",
			"LT": "<",
			"macr": "¯",
			"micro": "µ",
			"middot": "·",
			"nbsp": " ",
			"not": "¬",
			"Ntilde": "Ñ",
			"ntilde": "ñ",
			"Oacute": "Ó",
			"oacute": "ó",
			"Ocirc": "Ô",
			"ocirc": "ô",
			"Ograve": "Ò",
			"ograve": "ò",
			"ordf": "ª",
			"ordm": "º",
			"Oslash": "Ø",
			"oslash": "ø",
			"Otilde": "Õ",
			"otilde": "õ",
			"Ouml": "Ö",
			"ouml": "ö",
			"para": "¶",
			"plusmn": "±",
			"pound": "£",
			"quot": "\"",
			"QUOT": "\"",
			"raquo": "»",
			"reg": "®",
			"REG": "®",
			"sect": "§",
			"shy": "­",
			"sup1": "¹",
			"sup2": "²",
			"sup3": "³",
			"szlig": "ß",
			"THORN": "Þ",
			"thorn": "þ",
			"times": "×",
			"Uacute": "Ú",
			"uacute": "ú",
			"Ucirc": "Û",
			"ucirc": "û",
			"Ugrave": "Ù",
			"ugrave": "ù",
			"uml": "¨",
			"Uuml": "Ü",
			"uuml": "ü",
			"Yacute": "Ý",
			"yacute": "ý",
			"yen": "¥",
			"yuml": "ÿ"
		};

	/***/ },
	/* 21 */
	/***/ function(module, exports) {

		module.exports = {
			"amp": "&",
			"apos": "'",
			"gt": ">",
			"lt": "<",
			"quot": "\""
		};

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		var ElementType = __webpack_require__(23);

		var re_whitespace = /\s+/g;
		var NodePrototype = __webpack_require__(24);
		var ElementPrototype = __webpack_require__(25);

		function DomHandler(callback, options, elementCB){
			if(typeof callback === "object"){
				elementCB = options;
				options = callback;
				callback = null;
			} else if(typeof options === "function"){
				elementCB = options;
				options = defaultOpts;
			}
			this._callback = callback;
			this._options = options || defaultOpts;
			this._elementCB = elementCB;
			this.dom = [];
			this._done = false;
			this._tagStack = [];
			this._parser = this._parser || null;
		}

		//default options
		var defaultOpts = {
			normalizeWhitespace: false, //Replace all whitespace with single spaces
			withStartIndices: false, //Add startIndex properties to nodes
		};

		DomHandler.prototype.onparserinit = function(parser){
			this._parser = parser;
		};

		//Resets the handler back to starting state
		DomHandler.prototype.onreset = function(){
			DomHandler.call(this, this._callback, this._options, this._elementCB);
		};

		//Signals the handler that parsing is done
		DomHandler.prototype.onend = function(){
			if(this._done) return;
			this._done = true;
			this._parser = null;
			this._handleCallback(null);
		};

		DomHandler.prototype._handleCallback =
		DomHandler.prototype.onerror = function(error){
			if(typeof this._callback === "function"){
				this._callback(error, this.dom);
			} else {
				if(error) throw error;
			}
		};

		DomHandler.prototype.onclosetag = function(){
			//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
			var elem = this._tagStack.pop();
			if(this._elementCB) this._elementCB(elem);
		};

		DomHandler.prototype._addDomElement = function(element){
			var parent = this._tagStack[this._tagStack.length - 1];
			var siblings = parent ? parent.children : this.dom;
			var previousSibling = siblings[siblings.length - 1];

			element.next = null;

			if(this._options.withStartIndices){
				element.startIndex = this._parser.startIndex;
			}

			if (this._options.withDomLvl1) {
				element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
			}

			if(previousSibling){
				element.prev = previousSibling;
				previousSibling.next = element;
			} else {
				element.prev = null;
			}

			siblings.push(element);
			element.parent = parent || null;
		};

		DomHandler.prototype.onopentag = function(name, attribs){
			var element = {
				type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
				name: name,
				attribs: attribs,
				children: []
			};

			this._addDomElement(element);

			this._tagStack.push(element);
		};

		DomHandler.prototype.ontext = function(data){
			//the ignoreWhitespace is officially dropped, but for now,
			//it's an alias for normalizeWhitespace
			var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

			var lastTag;

			if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
				if(normalize){
					lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
				} else {
					lastTag.data += data;
				}
			} else {
				if(
					this._tagStack.length &&
					(lastTag = this._tagStack[this._tagStack.length - 1]) &&
					(lastTag = lastTag.children[lastTag.children.length - 1]) &&
					lastTag.type === ElementType.Text
				){
					if(normalize){
						lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
					} else {
						lastTag.data += data;
					}
				} else {
					if(normalize){
						data = data.replace(re_whitespace, " ");
					}

					this._addDomElement({
						data: data,
						type: ElementType.Text
					});
				}
			}
		};

		DomHandler.prototype.oncomment = function(data){
			var lastTag = this._tagStack[this._tagStack.length - 1];

			if(lastTag && lastTag.type === ElementType.Comment){
				lastTag.data += data;
				return;
			}

			var element = {
				data: data,
				type: ElementType.Comment
			};

			this._addDomElement(element);
			this._tagStack.push(element);
		};

		DomHandler.prototype.oncdatastart = function(){
			var element = {
				children: [{
					data: "",
					type: ElementType.Text
				}],
				type: ElementType.CDATA
			};

			this._addDomElement(element);
			this._tagStack.push(element);
		};

		DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
			this._tagStack.pop();
		};

		DomHandler.prototype.onprocessinginstruction = function(name, data){
			this._addDomElement({
				name: name,
				data: data,
				type: ElementType.Directive
			});
		};

		module.exports = DomHandler;


	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		//Types of elements found in the DOM
		module.exports = {
			Text: "text", //Text
			Directive: "directive", //<? ... ?>
			Comment: "comment", //<!-- ... -->
			Script: "script", //<script> tags
			Style: "style", //<style> tags
			Tag: "tag", //Any tag
			CDATA: "cdata", //<![CDATA[ ... ]]>
			Doctype: "doctype",

			isTag: function(elem){
				return elem.type === "tag" || elem.type === "script" || elem.type === "style";
			}
		};


	/***/ },
	/* 24 */
	/***/ function(module, exports) {

		// This object will be used as the prototype for Nodes when creating a
		// DOM-Level-1-compliant structure.
		var NodePrototype = module.exports = {
			get firstChild() {
				var children = this.children;
				return children && children[0] || null;
			},
			get lastChild() {
				var children = this.children;
				return children && children[children.length - 1] || null;
			},
			get nodeType() {
				return nodeTypes[this.type] || nodeTypes.element;
			}
		};

		var domLvl1 = {
			tagName: "name",
			childNodes: "children",
			parentNode: "parent",
			previousSibling: "prev",
			nextSibling: "next",
			nodeValue: "data"
		};

		var nodeTypes = {
			element: 1,
			text: 3,
			cdata: 4,
			comment: 8
		};

		Object.keys(domLvl1).forEach(function(key) {
			var shorthand = domLvl1[key];
			Object.defineProperty(NodePrototype, key, {
				get: function() {
					return this[shorthand] || null;
				},
				set: function(val) {
					this[shorthand] = val;
					return val;
				}
			});
		});


	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		// DOM-Level-1-compliant structure
		var NodePrototype = __webpack_require__(24);
		var ElementPrototype = module.exports = Object.create(NodePrototype);

		var domLvl1 = {
			tagName: "name"
		};

		Object.keys(domLvl1).forEach(function(key) {
			var shorthand = domLvl1[key];
			Object.defineProperty(ElementPrototype, key, {
				get: function() {
					return this[shorthand] || null;
				},
				set: function(val) {
					this[shorthand] = val;
					return val;
				}
			});
		});


	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

		var index = __webpack_require__(14),
		    DomHandler = index.DomHandler,
			DomUtils = index.DomUtils;

		//TODO: make this a streamable handler
		function FeedHandler(callback, options){
			this.init(callback, options);
		}

		__webpack_require__(2).inherits(FeedHandler, DomHandler);

		FeedHandler.prototype.init = DomHandler;

		function getElements(what, where){
			return DomUtils.getElementsByTagName(what, where, true);
		}
		function getOneElement(what, where){
			return DomUtils.getElementsByTagName(what, where, true, 1)[0];
		}
		function fetch(what, where, recurse){
			return DomUtils.getText(
				DomUtils.getElementsByTagName(what, where, recurse, 1)
			).trim();
		}

		function addConditionally(obj, prop, what, where, recurse){
			var tmp = fetch(what, where, recurse);
			if(tmp) obj[prop] = tmp;
		}

		var isValidFeed = function(value){
			return value === "rss" || value === "feed" || value === "rdf:RDF";
		};

		FeedHandler.prototype.onend = function(){
			var feed = {},
				feedRoot = getOneElement(isValidFeed, this.dom),
				tmp, childs;

			if(feedRoot){
				if(feedRoot.name === "feed"){
					childs = feedRoot.children;

					feed.type = "atom";
					addConditionally(feed, "id", "id", childs);
					addConditionally(feed, "title", "title", childs);
					if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
					addConditionally(feed, "description", "subtitle", childs);
					if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
					addConditionally(feed, "author", "email", childs, true);

					feed.items = getElements("entry", childs).map(function(item){
						var entry = {}, tmp;

						item = item.children;

						addConditionally(entry, "id", "id", item);
						addConditionally(entry, "title", "title", item);
						if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
						if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
						if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
						return entry;
					});
				} else {
					childs = getOneElement("channel", feedRoot.children).children;

					feed.type = feedRoot.name.substr(0, 3);
					feed.id = "";
					addConditionally(feed, "title", "title", childs);
					addConditionally(feed, "link", "link", childs);
					addConditionally(feed, "description", "description", childs);
					if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
					addConditionally(feed, "author", "managingEditor", childs, true);

					feed.items = getElements("item", feedRoot.children).map(function(item){
						var entry = {}, tmp;

						item = item.children;

						addConditionally(entry, "id", "guid", item);
						addConditionally(entry, "title", "title", item);
						addConditionally(entry, "link", "link", item);
						addConditionally(entry, "description", "description", item);
						if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
						return entry;
					});
				}
			}
			this.dom = feed;
			DomHandler.prototype._handleCallback.call(
				this, feedRoot ? null : Error("couldn't find root of feed")
			);
		};

		module.exports = FeedHandler;


	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = Stream;

		var Parser = __webpack_require__(28);

		function Stream(options){
			Parser.call(this, new Cbs(this), options);
		}

		__webpack_require__(2).inherits(Stream, Parser);

		Stream.prototype.readable = true;

		function Cbs(scope){
			this.scope = scope;
		}

		var EVENTS = __webpack_require__(14).EVENTS;

		Object.keys(EVENTS).forEach(function(name){
			if(EVENTS[name] === 0){
				Cbs.prototype["on" + name] = function(){
					this.scope.emit(name);
				};
			} else if(EVENTS[name] === 1){
				Cbs.prototype["on" + name] = function(a){
					this.scope.emit(name, a);
				};
			} else if(EVENTS[name] === 2){
				Cbs.prototype["on" + name] = function(a, b){
					this.scope.emit(name, a, b);
				};
			} else {
				throw Error("wrong number of arguments!");
			}
		});

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = Stream;

		var Parser = __webpack_require__(15),
		    WritableStream = __webpack_require__(29).Writable || __webpack_require__(50).Writable;

		function Stream(cbs, options){
			var parser = this._parser = new Parser(cbs, options);

			WritableStream.call(this, {decodeStrings: false});

			this.once("finish", function(){
				parser.end();
			});
		}

		__webpack_require__(2).inherits(Stream, WritableStream);

		WritableStream.prototype._write = function(chunk, encoding, cb){
			this._parser.write(chunk);
			cb();
		};

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		module.exports = Stream;

		var EE = __webpack_require__(1).EventEmitter;
		var inherits = __webpack_require__(30);

		inherits(Stream, EE);
		Stream.Readable = __webpack_require__(31);
		Stream.Writable = __webpack_require__(46);
		Stream.Duplex = __webpack_require__(47);
		Stream.Transform = __webpack_require__(48);
		Stream.PassThrough = __webpack_require__(49);

		// Backwards-compat with node 0.4.x
		Stream.Stream = Stream;



		// old-style streams.  Note that the pipe method (the only relevant
		// part of this class) is overridden in the Readable class.

		function Stream() {
		  EE.call(this);
		}

		Stream.prototype.pipe = function(dest, options) {
		  var source = this;

		  function ondata(chunk) {
		    if (dest.writable) {
		      if (false === dest.write(chunk) && source.pause) {
		        source.pause();
		      }
		    }
		  }

		  source.on('data', ondata);

		  function ondrain() {
		    if (source.readable && source.resume) {
		      source.resume();
		    }
		  }

		  dest.on('drain', ondrain);

		  // If the 'end' option is not supplied, dest.end() will be called when
		  // source gets the 'end' or 'close' events.  Only dest.end() once.
		  if (!dest._isStdio && (!options || options.end !== false)) {
		    source.on('end', onend);
		    source.on('close', onclose);
		  }

		  var didOnEnd = false;
		  function onend() {
		    if (didOnEnd) return;
		    didOnEnd = true;

		    dest.end();
		  }


		  function onclose() {
		    if (didOnEnd) return;
		    didOnEnd = true;

		    if (typeof dest.destroy === 'function') dest.destroy();
		  }

		  // don't leave dangling pipes when there are errors.
		  function onerror(er) {
		    cleanup();
		    if (EE.listenerCount(this, 'error') === 0) {
		      throw er; // Unhandled stream error in pipe.
		    }
		  }

		  source.on('error', onerror);
		  dest.on('error', onerror);

		  // remove all the event listeners that were added.
		  function cleanup() {
		    source.removeListener('data', ondata);
		    dest.removeListener('drain', ondrain);

		    source.removeListener('end', onend);
		    source.removeListener('close', onclose);

		    source.removeListener('error', onerror);
		    dest.removeListener('error', onerror);

		    source.removeListener('end', cleanup);
		    source.removeListener('close', cleanup);

		    dest.removeListener('close', cleanup);
		  }

		  source.on('end', cleanup);
		  source.on('close', cleanup);

		  dest.on('close', cleanup);

		  dest.emit('pipe', source);

		  // Allow for unix-like usage: A.pipe(B).pipe(C)
		  return dest;
		};


	/***/ },
	/* 30 */
	/***/ function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    ctor.prototype = Object.create(superCtor.prototype, {
		      constructor: {
		        value: ctor,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    var TempCtor = function () {}
		    TempCtor.prototype = superCtor.prototype
		    ctor.prototype = new TempCtor()
		    ctor.prototype.constructor = ctor
		  }
		}


	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(32);
		exports.Stream = __webpack_require__(29);
		exports.Readable = exports;
		exports.Writable = __webpack_require__(42);
		exports.Duplex = __webpack_require__(41);
		exports.Transform = __webpack_require__(44);
		exports.PassThrough = __webpack_require__(45);
		if (!process.browser && process.env.READABLE_STREAM === 'disable') {
		  module.exports = __webpack_require__(29);
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		module.exports = Readable;

		/*<replacement>*/
		var isArray = __webpack_require__(33);
		/*</replacement>*/


		/*<replacement>*/
		var Buffer = __webpack_require__(34).Buffer;
		/*</replacement>*/

		Readable.ReadableState = ReadableState;

		var EE = __webpack_require__(1).EventEmitter;

		/*<replacement>*/
		if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
		  return emitter.listeners(type).length;
		};
		/*</replacement>*/

		var Stream = __webpack_require__(29);

		/*<replacement>*/
		var util = __webpack_require__(38);
		util.inherits = __webpack_require__(39);
		/*</replacement>*/

		var StringDecoder;


		/*<replacement>*/
		var debug = __webpack_require__(40);
		if (debug && debug.debuglog) {
		  debug = debug.debuglog('stream');
		} else {
		  debug = function () {};
		}
		/*</replacement>*/


		util.inherits(Readable, Stream);

		function ReadableState(options, stream) {
		  var Duplex = __webpack_require__(41);

		  options = options || {};

		  // the point at which it stops calling _read() to fill the buffer
		  // Note: 0 is a valid value, means "don't call _read preemptively ever"
		  var hwm = options.highWaterMark;
		  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
		  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

		  // cast to ints.
		  this.highWaterMark = ~~this.highWaterMark;

		  this.buffer = [];
		  this.length = 0;
		  this.pipes = null;
		  this.pipesCount = 0;
		  this.flowing = null;
		  this.ended = false;
		  this.endEmitted = false;
		  this.reading = false;

		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;

		  // whenever we return null, then we set a flag to say
		  // that we're awaiting a 'readable' event emission.
		  this.needReadable = false;
		  this.emittedReadable = false;
		  this.readableListening = false;


		  // object stream flag. Used to make read(n) ignore n and to
		  // make all the buffer merging and length checks go away
		  this.objectMode = !!options.objectMode;

		  if (stream instanceof Duplex)
		    this.objectMode = this.objectMode || !!options.readableObjectMode;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // when piping, we only care about 'readable' events that happen
		  // after read()ing all the bytes and not getting any pushback.
		  this.ranOut = false;

		  // the number of writers that are awaiting a drain event in .pipe()s
		  this.awaitDrain = 0;

		  // if true, a maybeReadMore has been scheduled
		  this.readingMore = false;

		  this.decoder = null;
		  this.encoding = null;
		  if (options.encoding) {
		    if (!StringDecoder)
		      StringDecoder = __webpack_require__(43).StringDecoder;
		    this.decoder = new StringDecoder(options.encoding);
		    this.encoding = options.encoding;
		  }
		}

		function Readable(options) {
		  var Duplex = __webpack_require__(41);

		  if (!(this instanceof Readable))
		    return new Readable(options);

		  this._readableState = new ReadableState(options, this);

		  // legacy
		  this.readable = true;

		  Stream.call(this);
		}

		// Manually shove something into the read() buffer.
		// This returns true if the highWaterMark has not been hit yet,
		// similar to how Writable.write() returns true if you should
		// write() some more.
		Readable.prototype.push = function(chunk, encoding) {
		  var state = this._readableState;

		  if (util.isString(chunk) && !state.objectMode) {
		    encoding = encoding || state.defaultEncoding;
		    if (encoding !== state.encoding) {
		      chunk = new Buffer(chunk, encoding);
		      encoding = '';
		    }
		  }

		  return readableAddChunk(this, state, chunk, encoding, false);
		};

		// Unshift should *always* be something directly out of read()
		Readable.prototype.unshift = function(chunk) {
		  var state = this._readableState;
		  return readableAddChunk(this, state, chunk, '', true);
		};

		function readableAddChunk(stream, state, chunk, encoding, addToFront) {
		  var er = chunkInvalid(state, chunk);
		  if (er) {
		    stream.emit('error', er);
		  } else if (util.isNullOrUndefined(chunk)) {
		    state.reading = false;
		    if (!state.ended)
		      onEofChunk(stream, state);
		  } else if (state.objectMode || chunk && chunk.length > 0) {
		    if (state.ended && !addToFront) {
		      var e = new Error('stream.push() after EOF');
		      stream.emit('error', e);
		    } else if (state.endEmitted && addToFront) {
		      var e = new Error('stream.unshift() after end event');
		      stream.emit('error', e);
		    } else {
		      if (state.decoder && !addToFront && !encoding)
		        chunk = state.decoder.write(chunk);

		      if (!addToFront)
		        state.reading = false;

		      // if we want the data now, just emit it.
		      if (state.flowing && state.length === 0 && !state.sync) {
		        stream.emit('data', chunk);
		        stream.read(0);
		      } else {
		        // update the buffer info.
		        state.length += state.objectMode ? 1 : chunk.length;
		        if (addToFront)
		          state.buffer.unshift(chunk);
		        else
		          state.buffer.push(chunk);

		        if (state.needReadable)
		          emitReadable(stream);
		      }

		      maybeReadMore(stream, state);
		    }
		  } else if (!addToFront) {
		    state.reading = false;
		  }

		  return needMoreData(state);
		}



		// if it's past the high water mark, we can push in some more.
		// Also, if we have no data yet, we can stand some
		// more bytes.  This is to work around cases where hwm=0,
		// such as the repl.  Also, if the push() triggered a
		// readable event, and the user called read(largeNumber) such that
		// needReadable was set, then we ought to push more, so that another
		// 'readable' event will be triggered.
		function needMoreData(state) {
		  return !state.ended &&
		         (state.needReadable ||
		          state.length < state.highWaterMark ||
		          state.length === 0);
		}

		// backwards compatibility.
		Readable.prototype.setEncoding = function(enc) {
		  if (!StringDecoder)
		    StringDecoder = __webpack_require__(43).StringDecoder;
		  this._readableState.decoder = new StringDecoder(enc);
		  this._readableState.encoding = enc;
		  return this;
		};

		// Don't raise the hwm > 128MB
		var MAX_HWM = 0x800000;
		function roundUpToNextPowerOf2(n) {
		  if (n >= MAX_HWM) {
		    n = MAX_HWM;
		  } else {
		    // Get the next highest power of 2
		    n--;
		    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
		    n++;
		  }
		  return n;
		}

		function howMuchToRead(n, state) {
		  if (state.length === 0 && state.ended)
		    return 0;

		  if (state.objectMode)
		    return n === 0 ? 0 : 1;

		  if (isNaN(n) || util.isNull(n)) {
		    // only flow one buffer at a time
		    if (state.flowing && state.buffer.length)
		      return state.buffer[0].length;
		    else
		      return state.length;
		  }

		  if (n <= 0)
		    return 0;

		  // If we're asking for more than the target buffer level,
		  // then raise the water mark.  Bump up to the next highest
		  // power of 2, to prevent increasing it excessively in tiny
		  // amounts.
		  if (n > state.highWaterMark)
		    state.highWaterMark = roundUpToNextPowerOf2(n);

		  // don't have that much.  return null, unless we've ended.
		  if (n > state.length) {
		    if (!state.ended) {
		      state.needReadable = true;
		      return 0;
		    } else
		      return state.length;
		  }

		  return n;
		}

		// you can override either this method, or the async _read(n) below.
		Readable.prototype.read = function(n) {
		  debug('read', n);
		  var state = this._readableState;
		  var nOrig = n;

		  if (!util.isNumber(n) || n > 0)
		    state.emittedReadable = false;

		  // if we're doing read(0) to trigger a readable event, but we
		  // already have a bunch of data in the buffer, then just trigger
		  // the 'readable' event and move on.
		  if (n === 0 &&
		      state.needReadable &&
		      (state.length >= state.highWaterMark || state.ended)) {
		    debug('read: emitReadable', state.length, state.ended);
		    if (state.length === 0 && state.ended)
		      endReadable(this);
		    else
		      emitReadable(this);
		    return null;
		  }

		  n = howMuchToRead(n, state);

		  // if we've ended, and we're now clear, then finish it up.
		  if (n === 0 && state.ended) {
		    if (state.length === 0)
		      endReadable(this);
		    return null;
		  }

		  // All the actual chunk generation logic needs to be
		  // *below* the call to _read.  The reason is that in certain
		  // synthetic stream cases, such as passthrough streams, _read
		  // may be a completely synchronous operation which may change
		  // the state of the read buffer, providing enough data when
		  // before there was *not* enough.
		  //
		  // So, the steps are:
		  // 1. Figure out what the state of things will be after we do
		  // a read from the buffer.
		  //
		  // 2. If that resulting state will trigger a _read, then call _read.
		  // Note that this may be asynchronous, or synchronous.  Yes, it is
		  // deeply ugly to write APIs this way, but that still doesn't mean
		  // that the Readable class should behave improperly, as streams are
		  // designed to be sync/async agnostic.
		  // Take note if the _read call is sync or async (ie, if the read call
		  // has returned yet), so that we know whether or not it's safe to emit
		  // 'readable' etc.
		  //
		  // 3. Actually pull the requested chunks out of the buffer and return.

		  // if we need a readable event, then we need to do some reading.
		  var doRead = state.needReadable;
		  debug('need readable', doRead);

		  // if we currently have less than the highWaterMark, then also read some
		  if (state.length === 0 || state.length - n < state.highWaterMark) {
		    doRead = true;
		    debug('length less than watermark', doRead);
		  }

		  // however, if we've ended, then there's no point, and if we're already
		  // reading, then it's unnecessary.
		  if (state.ended || state.reading) {
		    doRead = false;
		    debug('reading or ended', doRead);
		  }

		  if (doRead) {
		    debug('do read');
		    state.reading = true;
		    state.sync = true;
		    // if the length is currently zero, then we *need* a readable event.
		    if (state.length === 0)
		      state.needReadable = true;
		    // call internal read method
		    this._read(state.highWaterMark);
		    state.sync = false;
		  }

		  // If _read pushed data synchronously, then `reading` will be false,
		  // and we need to re-evaluate how much data we can return to the user.
		  if (doRead && !state.reading)
		    n = howMuchToRead(nOrig, state);

		  var ret;
		  if (n > 0)
		    ret = fromList(n, state);
		  else
		    ret = null;

		  if (util.isNull(ret)) {
		    state.needReadable = true;
		    n = 0;
		  }

		  state.length -= n;

		  // If we have nothing in the buffer, then we want to know
		  // as soon as we *do* get something into the buffer.
		  if (state.length === 0 && !state.ended)
		    state.needReadable = true;

		  // If we tried to read() past the EOF, then emit end on the next tick.
		  if (nOrig !== n && state.ended && state.length === 0)
		    endReadable(this);

		  if (!util.isNull(ret))
		    this.emit('data', ret);

		  return ret;
		};

		function chunkInvalid(state, chunk) {
		  var er = null;
		  if (!util.isBuffer(chunk) &&
		      !util.isString(chunk) &&
		      !util.isNullOrUndefined(chunk) &&
		      !state.objectMode) {
		    er = new TypeError('Invalid non-string/buffer chunk');
		  }
		  return er;
		}


		function onEofChunk(stream, state) {
		  if (state.decoder && !state.ended) {
		    var chunk = state.decoder.end();
		    if (chunk && chunk.length) {
		      state.buffer.push(chunk);
		      state.length += state.objectMode ? 1 : chunk.length;
		    }
		  }
		  state.ended = true;

		  // emit 'readable' now to make sure it gets picked up.
		  emitReadable(stream);
		}

		// Don't emit readable right away in sync mode, because this can trigger
		// another read() call => stack overflow.  This way, it might trigger
		// a nextTick recursion warning, but that's not so bad.
		function emitReadable(stream) {
		  var state = stream._readableState;
		  state.needReadable = false;
		  if (!state.emittedReadable) {
		    debug('emitReadable', state.flowing);
		    state.emittedReadable = true;
		    if (state.sync)
		      process.nextTick(function() {
		        emitReadable_(stream);
		      });
		    else
		      emitReadable_(stream);
		  }
		}

		function emitReadable_(stream) {
		  debug('emit readable');
		  stream.emit('readable');
		  flow(stream);
		}


		// at this point, the user has presumably seen the 'readable' event,
		// and called read() to consume some data.  that may have triggered
		// in turn another _read(n) call, in which case reading = true if
		// it's in progress.
		// However, if we're not ended, or reading, and the length < hwm,
		// then go ahead and try to read some more preemptively.
		function maybeReadMore(stream, state) {
		  if (!state.readingMore) {
		    state.readingMore = true;
		    process.nextTick(function() {
		      maybeReadMore_(stream, state);
		    });
		  }
		}

		function maybeReadMore_(stream, state) {
		  var len = state.length;
		  while (!state.reading && !state.flowing && !state.ended &&
		         state.length < state.highWaterMark) {
		    debug('maybeReadMore read 0');
		    stream.read(0);
		    if (len === state.length)
		      // didn't get any data, stop spinning.
		      break;
		    else
		      len = state.length;
		  }
		  state.readingMore = false;
		}

		// abstract method.  to be overridden in specific implementation classes.
		// call cb(er, data) where data is <= n in length.
		// for virtual (non-string, non-buffer) streams, "length" is somewhat
		// arbitrary, and perhaps not very meaningful.
		Readable.prototype._read = function(n) {
		  this.emit('error', new Error('not implemented'));
		};

		Readable.prototype.pipe = function(dest, pipeOpts) {
		  var src = this;
		  var state = this._readableState;

		  switch (state.pipesCount) {
		    case 0:
		      state.pipes = dest;
		      break;
		    case 1:
		      state.pipes = [state.pipes, dest];
		      break;
		    default:
		      state.pipes.push(dest);
		      break;
		  }
		  state.pipesCount += 1;
		  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

		  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
		              dest !== process.stdout &&
		              dest !== process.stderr;

		  var endFn = doEnd ? onend : cleanup;
		  if (state.endEmitted)
		    process.nextTick(endFn);
		  else
		    src.once('end', endFn);

		  dest.on('unpipe', onunpipe);
		  function onunpipe(readable) {
		    debug('onunpipe');
		    if (readable === src) {
		      cleanup();
		    }
		  }

		  function onend() {
		    debug('onend');
		    dest.end();
		  }

		  // when the dest drains, it reduces the awaitDrain counter
		  // on the source.  This would be more elegant with a .once()
		  // handler in flow(), but adding and removing repeatedly is
		  // too slow.
		  var ondrain = pipeOnDrain(src);
		  dest.on('drain', ondrain);

		  function cleanup() {
		    debug('cleanup');
		    // cleanup event handlers once the pipe is broken
		    dest.removeListener('close', onclose);
		    dest.removeListener('finish', onfinish);
		    dest.removeListener('drain', ondrain);
		    dest.removeListener('error', onerror);
		    dest.removeListener('unpipe', onunpipe);
		    src.removeListener('end', onend);
		    src.removeListener('end', cleanup);
		    src.removeListener('data', ondata);

		    // if the reader is waiting for a drain event from this
		    // specific writer, then it would cause it to never start
		    // flowing again.
		    // So, if this is awaiting a drain, then we just call it now.
		    // If we don't know, then assume that we are waiting for one.
		    if (state.awaitDrain &&
		        (!dest._writableState || dest._writableState.needDrain))
		      ondrain();
		  }

		  src.on('data', ondata);
		  function ondata(chunk) {
		    debug('ondata');
		    var ret = dest.write(chunk);
		    if (false === ret) {
		      debug('false write response, pause',
		            src._readableState.awaitDrain);
		      src._readableState.awaitDrain++;
		      src.pause();
		    }
		  }

		  // if the dest has an error, then stop piping into it.
		  // however, don't suppress the throwing behavior for this.
		  function onerror(er) {
		    debug('onerror', er);
		    unpipe();
		    dest.removeListener('error', onerror);
		    if (EE.listenerCount(dest, 'error') === 0)
		      dest.emit('error', er);
		  }
		  // This is a brutally ugly hack to make sure that our error handler
		  // is attached before any userland ones.  NEVER DO THIS.
		  if (!dest._events || !dest._events.error)
		    dest.on('error', onerror);
		  else if (isArray(dest._events.error))
		    dest._events.error.unshift(onerror);
		  else
		    dest._events.error = [onerror, dest._events.error];



		  // Both close and finish should trigger unpipe, but only once.
		  function onclose() {
		    dest.removeListener('finish', onfinish);
		    unpipe();
		  }
		  dest.once('close', onclose);
		  function onfinish() {
		    debug('onfinish');
		    dest.removeListener('close', onclose);
		    unpipe();
		  }
		  dest.once('finish', onfinish);

		  function unpipe() {
		    debug('unpipe');
		    src.unpipe(dest);
		  }

		  // tell the dest that it's being piped to
		  dest.emit('pipe', src);

		  // start the flow if it hasn't been started already.
		  if (!state.flowing) {
		    debug('pipe resume');
		    src.resume();
		  }

		  return dest;
		};

		function pipeOnDrain(src) {
		  return function() {
		    var state = src._readableState;
		    debug('pipeOnDrain', state.awaitDrain);
		    if (state.awaitDrain)
		      state.awaitDrain--;
		    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
		      state.flowing = true;
		      flow(src);
		    }
		  };
		}


		Readable.prototype.unpipe = function(dest) {
		  var state = this._readableState;

		  // if we're not piping anywhere, then do nothing.
		  if (state.pipesCount === 0)
		    return this;

		  // just one destination.  most common case.
		  if (state.pipesCount === 1) {
		    // passed in one, but it's not the right one.
		    if (dest && dest !== state.pipes)
		      return this;

		    if (!dest)
		      dest = state.pipes;

		    // got a match.
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;
		    if (dest)
		      dest.emit('unpipe', this);
		    return this;
		  }

		  // slow case. multiple pipe destinations.

		  if (!dest) {
		    // remove all.
		    var dests = state.pipes;
		    var len = state.pipesCount;
		    state.pipes = null;
		    state.pipesCount = 0;
		    state.flowing = false;

		    for (var i = 0; i < len; i++)
		      dests[i].emit('unpipe', this);
		    return this;
		  }

		  // try to find the right one.
		  var i = indexOf(state.pipes, dest);
		  if (i === -1)
		    return this;

		  state.pipes.splice(i, 1);
		  state.pipesCount -= 1;
		  if (state.pipesCount === 1)
		    state.pipes = state.pipes[0];

		  dest.emit('unpipe', this);

		  return this;
		};

		// set up data events if they are asked for
		// Ensure readable listeners eventually get something
		Readable.prototype.on = function(ev, fn) {
		  var res = Stream.prototype.on.call(this, ev, fn);

		  // If listening to data, and it has not explicitly been paused,
		  // then call resume to start the flow of data on the next tick.
		  if (ev === 'data' && false !== this._readableState.flowing) {
		    this.resume();
		  }

		  if (ev === 'readable' && this.readable) {
		    var state = this._readableState;
		    if (!state.readableListening) {
		      state.readableListening = true;
		      state.emittedReadable = false;
		      state.needReadable = true;
		      if (!state.reading) {
		        var self = this;
		        process.nextTick(function() {
		          debug('readable nexttick read 0');
		          self.read(0);
		        });
		      } else if (state.length) {
		        emitReadable(this, state);
		      }
		    }
		  }

		  return res;
		};
		Readable.prototype.addListener = Readable.prototype.on;

		// pause() and resume() are remnants of the legacy readable stream API
		// If the user uses them, then switch into old mode.
		Readable.prototype.resume = function() {
		  var state = this._readableState;
		  if (!state.flowing) {
		    debug('resume');
		    state.flowing = true;
		    if (!state.reading) {
		      debug('resume read 0');
		      this.read(0);
		    }
		    resume(this, state);
		  }
		  return this;
		};

		function resume(stream, state) {
		  if (!state.resumeScheduled) {
		    state.resumeScheduled = true;
		    process.nextTick(function() {
		      resume_(stream, state);
		    });
		  }
		}

		function resume_(stream, state) {
		  state.resumeScheduled = false;
		  stream.emit('resume');
		  flow(stream);
		  if (state.flowing && !state.reading)
		    stream.read(0);
		}

		Readable.prototype.pause = function() {
		  debug('call pause flowing=%j', this._readableState.flowing);
		  if (false !== this._readableState.flowing) {
		    debug('pause');
		    this._readableState.flowing = false;
		    this.emit('pause');
		  }
		  return this;
		};

		function flow(stream) {
		  var state = stream._readableState;
		  debug('flow', state.flowing);
		  if (state.flowing) {
		    do {
		      var chunk = stream.read();
		    } while (null !== chunk && state.flowing);
		  }
		}

		// wrap an old-style stream as the async data source.
		// This is *not* part of the readable stream interface.
		// It is an ugly unfortunate mess of history.
		Readable.prototype.wrap = function(stream) {
		  var state = this._readableState;
		  var paused = false;

		  var self = this;
		  stream.on('end', function() {
		    debug('wrapped end');
		    if (state.decoder && !state.ended) {
		      var chunk = state.decoder.end();
		      if (chunk && chunk.length)
		        self.push(chunk);
		    }

		    self.push(null);
		  });

		  stream.on('data', function(chunk) {
		    debug('wrapped data');
		    if (state.decoder)
		      chunk = state.decoder.write(chunk);
		    if (!chunk || !state.objectMode && !chunk.length)
		      return;

		    var ret = self.push(chunk);
		    if (!ret) {
		      paused = true;
		      stream.pause();
		    }
		  });

		  // proxy all the other methods.
		  // important when wrapping filters and duplexes.
		  for (var i in stream) {
		    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
		      this[i] = function(method) { return function() {
		        return stream[method].apply(stream, arguments);
		      }}(i);
		    }
		  }

		  // proxy certain important events.
		  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
		  forEach(events, function(ev) {
		    stream.on(ev, self.emit.bind(self, ev));
		  });

		  // when we try to consume some more bytes, simply unpause the
		  // underlying stream.
		  self._read = function(n) {
		    debug('wrapped _read', n);
		    if (paused) {
		      paused = false;
		      stream.resume();
		    }
		  };

		  return self;
		};



		// exposed for testing purposes only.
		Readable._fromList = fromList;

		// Pluck off n bytes from an array of buffers.
		// Length is the combined lengths of all the buffers in the list.
		function fromList(n, state) {
		  var list = state.buffer;
		  var length = state.length;
		  var stringMode = !!state.decoder;
		  var objectMode = !!state.objectMode;
		  var ret;

		  // nothing in the list, definitely empty.
		  if (list.length === 0)
		    return null;

		  if (length === 0)
		    ret = null;
		  else if (objectMode)
		    ret = list.shift();
		  else if (!n || n >= length) {
		    // read it all, truncate the array.
		    if (stringMode)
		      ret = list.join('');
		    else
		      ret = Buffer.concat(list, length);
		    list.length = 0;
		  } else {
		    // read just some of it.
		    if (n < list[0].length) {
		      // just take a part of the first list item.
		      // slice is the same for buffers and strings.
		      var buf = list[0];
		      ret = buf.slice(0, n);
		      list[0] = buf.slice(n);
		    } else if (n === list[0].length) {
		      // first list is a perfect match
		      ret = list.shift();
		    } else {
		      // complex case.
		      // we have enough to cover it, but it spans past the first buffer.
		      if (stringMode)
		        ret = '';
		      else
		        ret = new Buffer(n);

		      var c = 0;
		      for (var i = 0, l = list.length; i < l && c < n; i++) {
		        var buf = list[0];
		        var cpy = Math.min(n - c, buf.length);

		        if (stringMode)
		          ret += buf.slice(0, cpy);
		        else
		          buf.copy(ret, c, 0, cpy);

		        if (cpy < buf.length)
		          list[0] = buf.slice(cpy);
		        else
		          list.shift();

		        c += cpy;
		      }
		    }
		  }

		  return ret;
		}

		function endReadable(stream) {
		  var state = stream._readableState;

		  // If we get here before consuming all the bytes, then that is a
		  // bug in node.  Should never happen.
		  if (state.length > 0)
		    throw new Error('endReadable called on non-empty stream');

		  if (!state.endEmitted) {
		    state.ended = true;
		    process.nextTick(function() {
		      // Check that we didn't get one last unshift.
		      if (!state.endEmitted && state.length === 0) {
		        state.endEmitted = true;
		        stream.readable = false;
		        stream.emit('end');
		      }
		    });
		  }
		}

		function forEach (xs, f) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    f(xs[i], i);
		  }
		}

		function indexOf (xs, x) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    if (xs[i] === x) return i;
		  }
		  return -1;
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ },
	/* 33 */
	/***/ function(module, exports) {

		module.exports = Array.isArray || function (arr) {
		  return Object.prototype.toString.call(arr) == '[object Array]';
		};


	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
		 * The buffer module from node.js, for the browser.
		 *
		 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		 * @license  MIT
		 */
		/* eslint-disable no-proto */

		'use strict'

		var base64 = __webpack_require__(35)
		var ieee754 = __webpack_require__(36)
		var isArray = __webpack_require__(37)

		exports.Buffer = Buffer
		exports.SlowBuffer = SlowBuffer
		exports.INSPECT_MAX_BYTES = 50

		/**
		 * If `Buffer.TYPED_ARRAY_SUPPORT`:
		 *   === true    Use Uint8Array implementation (fastest)
		 *   === false   Use Object implementation (most compatible, even IE6)
		 *
		 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		 * Opera 11.6+, iOS 4.2+.
		 *
		 * Due to various browser bugs, sometimes the Object implementation will be used even
		 * when the browser supports typed arrays.
		 *
		 * Note:
		 *
		 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		 *
		 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		 *
		 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		 *     incorrect length in some situations.

		 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		 * get the Object implementation, which is slower but behaves correctly.
		 */
		Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
		  ? global.TYPED_ARRAY_SUPPORT
		  : typedArraySupport()

		/*
		 * Export kMaxLength after typed array support is determined.
		 */
		exports.kMaxLength = kMaxLength()

		function typedArraySupport () {
		  try {
		    var arr = new Uint8Array(1)
		    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
		    return arr.foo() === 42 && // typed array instances can be augmented
		        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
		        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
		  } catch (e) {
		    return false
		  }
		}

		function kMaxLength () {
		  return Buffer.TYPED_ARRAY_SUPPORT
		    ? 0x7fffffff
		    : 0x3fffffff
		}

		function createBuffer (that, length) {
		  if (kMaxLength() < length) {
		    throw new RangeError('Invalid typed array length')
		  }
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = new Uint8Array(length)
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    if (that === null) {
		      that = new Buffer(length)
		    }
		    that.length = length
		  }

		  return that
		}

		/**
		 * The Buffer constructor returns instances of `Uint8Array` that have their
		 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		 * returns a single octet.
		 *
		 * The `Uint8Array` prototype remains unmodified.
		 */

		function Buffer (arg, encodingOrOffset, length) {
		  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
		    return new Buffer(arg, encodingOrOffset, length)
		  }

		  // Common case.
		  if (typeof arg === 'number') {
		    if (typeof encodingOrOffset === 'string') {
		      throw new Error(
		        'If encoding is specified then the first argument must be a string'
		      )
		    }
		    return allocUnsafe(this, arg)
		  }
		  return from(this, arg, encodingOrOffset, length)
		}

		Buffer.poolSize = 8192 // not used by this implementation

		// TODO: Legacy, not needed anymore. Remove in next major version.
		Buffer._augment = function (arr) {
		  arr.__proto__ = Buffer.prototype
		  return arr
		}

		function from (that, value, encodingOrOffset, length) {
		  if (typeof value === 'number') {
		    throw new TypeError('"value" argument must not be a number')
		  }

		  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		    return fromArrayBuffer(that, value, encodingOrOffset, length)
		  }

		  if (typeof value === 'string') {
		    return fromString(that, value, encodingOrOffset)
		  }

		  return fromObject(that, value)
		}

		/**
		 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		 * if value is a number.
		 * Buffer.from(str[, encoding])
		 * Buffer.from(array)
		 * Buffer.from(buffer)
		 * Buffer.from(arrayBuffer[, byteOffset[, length]])
		 **/
		Buffer.from = function (value, encodingOrOffset, length) {
		  return from(null, value, encodingOrOffset, length)
		}

		if (Buffer.TYPED_ARRAY_SUPPORT) {
		  Buffer.prototype.__proto__ = Uint8Array.prototype
		  Buffer.__proto__ = Uint8Array
		  if (typeof Symbol !== 'undefined' && Symbol.species &&
		      Buffer[Symbol.species] === Buffer) {
		    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
		    Object.defineProperty(Buffer, Symbol.species, {
		      value: null,
		      configurable: true
		    })
		  }
		}

		function assertSize (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('"size" argument must be a number')
		  } else if (size < 0) {
		    throw new RangeError('"size" argument must not be negative')
		  }
		}

		function alloc (that, size, fill, encoding) {
		  assertSize(size)
		  if (size <= 0) {
		    return createBuffer(that, size)
		  }
		  if (fill !== undefined) {
		    // Only pay attention to encoding if it's a string. This
		    // prevents accidentally sending in a number that would
		    // be interpretted as a start offset.
		    return typeof encoding === 'string'
		      ? createBuffer(that, size).fill(fill, encoding)
		      : createBuffer(that, size).fill(fill)
		  }
		  return createBuffer(that, size)
		}

		/**
		 * Creates a new filled Buffer instance.
		 * alloc(size[, fill[, encoding]])
		 **/
		Buffer.alloc = function (size, fill, encoding) {
		  return alloc(null, size, fill, encoding)
		}

		function allocUnsafe (that, size) {
		  assertSize(size)
		  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) {
		    for (var i = 0; i < size; ++i) {
		      that[i] = 0
		    }
		  }
		  return that
		}

		/**
		 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		 * */
		Buffer.allocUnsafe = function (size) {
		  return allocUnsafe(null, size)
		}
		/**
		 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		 */
		Buffer.allocUnsafeSlow = function (size) {
		  return allocUnsafe(null, size)
		}

		function fromString (that, string, encoding) {
		  if (typeof encoding !== 'string' || encoding === '') {
		    encoding = 'utf8'
		  }

		  if (!Buffer.isEncoding(encoding)) {
		    throw new TypeError('"encoding" must be a valid string encoding')
		  }

		  var length = byteLength(string, encoding) | 0
		  that = createBuffer(that, length)

		  var actual = that.write(string, encoding)

		  if (actual !== length) {
		    // Writing a hex string, for example, that contains invalid characters will
		    // cause everything after the first invalid character to be ignored. (e.g.
		    // 'abxxcd' will be treated as 'ab')
		    that = that.slice(0, actual)
		  }

		  return that
		}

		function fromArrayLike (that, array) {
		  var length = array.length < 0 ? 0 : checked(array.length) | 0
		  that = createBuffer(that, length)
		  for (var i = 0; i < length; i += 1) {
		    that[i] = array[i] & 255
		  }
		  return that
		}

		function fromArrayBuffer (that, array, byteOffset, length) {
		  array.byteLength // this throws if `array` is not a valid ArrayBuffer

		  if (byteOffset < 0 || array.byteLength < byteOffset) {
		    throw new RangeError('\'offset\' is out of bounds')
		  }

		  if (array.byteLength < byteOffset + (length || 0)) {
		    throw new RangeError('\'length\' is out of bounds')
		  }

		  if (byteOffset === undefined && length === undefined) {
		    array = new Uint8Array(array)
		  } else if (length === undefined) {
		    array = new Uint8Array(array, byteOffset)
		  } else {
		    array = new Uint8Array(array, byteOffset, length)
		  }

		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = array
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    that = fromArrayLike(that, array)
		  }
		  return that
		}

		function fromObject (that, obj) {
		  if (Buffer.isBuffer(obj)) {
		    var len = checked(obj.length) | 0
		    that = createBuffer(that, len)

		    if (that.length === 0) {
		      return that
		    }

		    obj.copy(that, 0, 0, len)
		    return that
		  }

		  if (obj) {
		    if ((typeof ArrayBuffer !== 'undefined' &&
		        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		      if (typeof obj.length !== 'number' || isnan(obj.length)) {
		        return createBuffer(that, 0)
		      }
		      return fromArrayLike(that, obj)
		    }

		    if (obj.type === 'Buffer' && isArray(obj.data)) {
		      return fromArrayLike(that, obj.data)
		    }
		  }

		  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		}

		function checked (length) {
		  // Note: cannot use `length < kMaxLength()` here because that fails when
		  // length is NaN (which is otherwise coerced to zero.)
		  if (length >= kMaxLength()) {
		    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
		  }
		  return length | 0
		}

		function SlowBuffer (length) {
		  if (+length != length) { // eslint-disable-line eqeqeq
		    length = 0
		  }
		  return Buffer.alloc(+length)
		}

		Buffer.isBuffer = function isBuffer (b) {
		  return !!(b != null && b._isBuffer)
		}

		Buffer.compare = function compare (a, b) {
		  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
		    throw new TypeError('Arguments must be Buffers')
		  }

		  if (a === b) return 0

		  var x = a.length
		  var y = b.length

		  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		    if (a[i] !== b[i]) {
		      x = a[i]
		      y = b[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		Buffer.isEncoding = function isEncoding (encoding) {
		  switch (String(encoding).toLowerCase()) {
		    case 'hex':
		    case 'utf8':
		    case 'utf-8':
		    case 'ascii':
		    case 'latin1':
		    case 'binary':
		    case 'base64':
		    case 'ucs2':
		    case 'ucs-2':
		    case 'utf16le':
		    case 'utf-16le':
		      return true
		    default:
		      return false
		  }
		}

		Buffer.concat = function concat (list, length) {
		  if (!isArray(list)) {
		    throw new TypeError('"list" argument must be an Array of Buffers')
		  }

		  if (list.length === 0) {
		    return Buffer.alloc(0)
		  }

		  var i
		  if (length === undefined) {
		    length = 0
		    for (i = 0; i < list.length; ++i) {
		      length += list[i].length
		    }
		  }

		  var buffer = Buffer.allocUnsafe(length)
		  var pos = 0
		  for (i = 0; i < list.length; ++i) {
		    var buf = list[i]
		    if (!Buffer.isBuffer(buf)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }
		    buf.copy(buffer, pos)
		    pos += buf.length
		  }
		  return buffer
		}

		function byteLength (string, encoding) {
		  if (Buffer.isBuffer(string)) {
		    return string.length
		  }
		  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		    return string.byteLength
		  }
		  if (typeof string !== 'string') {
		    string = '' + string
		  }

		  var len = string.length
		  if (len === 0) return 0

		  // Use a for loop to avoid recursion
		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		        return len
		      case 'utf8':
		      case 'utf-8':
		      case undefined:
		        return utf8ToBytes(string).length
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return len * 2
		      case 'hex':
		        return len >>> 1
		      case 'base64':
		        return base64ToBytes(string).length
		      default:
		        if (loweredCase) return utf8ToBytes(string).length // assume utf8
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}
		Buffer.byteLength = byteLength

		function slowToString (encoding, start, end) {
		  var loweredCase = false

		  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		  // property of a typed array.

		  // This behaves neither like String nor Uint8Array in that we set start/end
		  // to their upper/lower bounds if the value passed is out of range.
		  // undefined is handled specially as per ECMA-262 6th Edition,
		  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		  if (start === undefined || start < 0) {
		    start = 0
		  }
		  // Return early if start > this.length. Done here to prevent potential uint32
		  // coercion fail below.
		  if (start > this.length) {
		    return ''
		  }

		  if (end === undefined || end > this.length) {
		    end = this.length
		  }

		  if (end <= 0) {
		    return ''
		  }

		  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		  end >>>= 0
		  start >>>= 0

		  if (end <= start) {
		    return ''
		  }

		  if (!encoding) encoding = 'utf8'

		  while (true) {
		    switch (encoding) {
		      case 'hex':
		        return hexSlice(this, start, end)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Slice(this, start, end)

		      case 'ascii':
		        return asciiSlice(this, start, end)

		      case 'latin1':
		      case 'binary':
		        return latin1Slice(this, start, end)

		      case 'base64':
		        return base64Slice(this, start, end)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return utf16leSlice(this, start, end)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = (encoding + '').toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		// Buffer instances.
		Buffer.prototype._isBuffer = true

		function swap (b, n, m) {
		  var i = b[n]
		  b[n] = b[m]
		  b[m] = i
		}

		Buffer.prototype.swap16 = function swap16 () {
		  var len = this.length
		  if (len % 2 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 16-bits')
		  }
		  for (var i = 0; i < len; i += 2) {
		    swap(this, i, i + 1)
		  }
		  return this
		}

		Buffer.prototype.swap32 = function swap32 () {
		  var len = this.length
		  if (len % 4 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 32-bits')
		  }
		  for (var i = 0; i < len; i += 4) {
		    swap(this, i, i + 3)
		    swap(this, i + 1, i + 2)
		  }
		  return this
		}

		Buffer.prototype.swap64 = function swap64 () {
		  var len = this.length
		  if (len % 8 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 64-bits')
		  }
		  for (var i = 0; i < len; i += 8) {
		    swap(this, i, i + 7)
		    swap(this, i + 1, i + 6)
		    swap(this, i + 2, i + 5)
		    swap(this, i + 3, i + 4)
		  }
		  return this
		}

		Buffer.prototype.toString = function toString () {
		  var length = this.length | 0
		  if (length === 0) return ''
		  if (arguments.length === 0) return utf8Slice(this, 0, length)
		  return slowToString.apply(this, arguments)
		}

		Buffer.prototype.equals = function equals (b) {
		  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
		  if (this === b) return true
		  return Buffer.compare(this, b) === 0
		}

		Buffer.prototype.inspect = function inspect () {
		  var str = ''
		  var max = exports.INSPECT_MAX_BYTES
		  if (this.length > 0) {
		    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
		    if (this.length > max) str += ' ... '
		  }
		  return '<Buffer ' + str + '>'
		}

		Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		  if (!Buffer.isBuffer(target)) {
		    throw new TypeError('Argument must be a Buffer')
		  }

		  if (start === undefined) {
		    start = 0
		  }
		  if (end === undefined) {
		    end = target ? target.length : 0
		  }
		  if (thisStart === undefined) {
		    thisStart = 0
		  }
		  if (thisEnd === undefined) {
		    thisEnd = this.length
		  }

		  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		    throw new RangeError('out of range index')
		  }

		  if (thisStart >= thisEnd && start >= end) {
		    return 0
		  }
		  if (thisStart >= thisEnd) {
		    return -1
		  }
		  if (start >= end) {
		    return 1
		  }

		  start >>>= 0
		  end >>>= 0
		  thisStart >>>= 0
		  thisEnd >>>= 0

		  if (this === target) return 0

		  var x = thisEnd - thisStart
		  var y = end - start
		  var len = Math.min(x, y)

		  var thisCopy = this.slice(thisStart, thisEnd)
		  var targetCopy = target.slice(start, end)

		  for (var i = 0; i < len; ++i) {
		    if (thisCopy[i] !== targetCopy[i]) {
		      x = thisCopy[i]
		      y = targetCopy[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		//
		// Arguments:
		// - buffer - a Buffer to search
		// - val - a string, Buffer, or number
		// - byteOffset - an index into `buffer`; will be clamped to an int32
		// - encoding - an optional encoding, relevant is val is a string
		// - dir - true for indexOf, false for lastIndexOf
		function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		  // Empty buffer means no match
		  if (buffer.length === 0) return -1

		  // Normalize byteOffset
		  if (typeof byteOffset === 'string') {
		    encoding = byteOffset
		    byteOffset = 0
		  } else if (byteOffset > 0x7fffffff) {
		    byteOffset = 0x7fffffff
		  } else if (byteOffset < -0x80000000) {
		    byteOffset = -0x80000000
		  }
		  byteOffset = +byteOffset  // Coerce to Number.
		  if (isNaN(byteOffset)) {
		    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		    byteOffset = dir ? 0 : (buffer.length - 1)
		  }

		  // Normalize byteOffset: negative offsets start from the end of the buffer
		  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
		  if (byteOffset >= buffer.length) {
		    if (dir) return -1
		    else byteOffset = buffer.length - 1
		  } else if (byteOffset < 0) {
		    if (dir) byteOffset = 0
		    else return -1
		  }

		  // Normalize val
		  if (typeof val === 'string') {
		    val = Buffer.from(val, encoding)
		  }

		  // Finally, search either indexOf (if dir is true) or lastIndexOf
		  if (Buffer.isBuffer(val)) {
		    // Special case: looking for empty string/buffer always fails
		    if (val.length === 0) {
		      return -1
		    }
		    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		  } else if (typeof val === 'number') {
		    val = val & 0xFF // Search for a byte value [0-255]
		    if (Buffer.TYPED_ARRAY_SUPPORT &&
		        typeof Uint8Array.prototype.indexOf === 'function') {
		      if (dir) {
		        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		      } else {
		        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		      }
		    }
		    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		  }

		  throw new TypeError('val must be string, number or Buffer')
		}

		function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		  var indexSize = 1
		  var arrLength = arr.length
		  var valLength = val.length

		  if (encoding !== undefined) {
		    encoding = String(encoding).toLowerCase()
		    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		        encoding === 'utf16le' || encoding === 'utf-16le') {
		      if (arr.length < 2 || val.length < 2) {
		        return -1
		      }
		      indexSize = 2
		      arrLength /= 2
		      valLength /= 2
		      byteOffset /= 2
		    }
		  }

		  function read (buf, i) {
		    if (indexSize === 1) {
		      return buf[i]
		    } else {
		      return buf.readUInt16BE(i * indexSize)
		    }
		  }

		  var i
		  if (dir) {
		    var foundIndex = -1
		    for (i = byteOffset; i < arrLength; i++) {
		      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		        if (foundIndex === -1) foundIndex = i
		        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		      } else {
		        if (foundIndex !== -1) i -= i - foundIndex
		        foundIndex = -1
		      }
		    }
		  } else {
		    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
		    for (i = byteOffset; i >= 0; i--) {
		      var found = true
		      for (var j = 0; j < valLength; j++) {
		        if (read(arr, i + j) !== read(val, j)) {
		          found = false
		          break
		        }
		      }
		      if (found) return i
		    }
		  }

		  return -1
		}

		Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		  return this.indexOf(val, byteOffset, encoding) !== -1
		}

		Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		}

		Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		}

		function hexWrite (buf, string, offset, length) {
		  offset = Number(offset) || 0
		  var remaining = buf.length - offset
		  if (!length) {
		    length = remaining
		  } else {
		    length = Number(length)
		    if (length > remaining) {
		      length = remaining
		    }
		  }

		  // must be an even number of digits
		  var strLen = string.length
		  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		  if (length > strLen / 2) {
		    length = strLen / 2
		  }
		  for (var i = 0; i < length; ++i) {
		    var parsed = parseInt(string.substr(i * 2, 2), 16)
		    if (isNaN(parsed)) return i
		    buf[offset + i] = parsed
		  }
		  return i
		}

		function utf8Write (buf, string, offset, length) {
		  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		}

		function asciiWrite (buf, string, offset, length) {
		  return blitBuffer(asciiToBytes(string), buf, offset, length)
		}

		function latin1Write (buf, string, offset, length) {
		  return asciiWrite(buf, string, offset, length)
		}

		function base64Write (buf, string, offset, length) {
		  return blitBuffer(base64ToBytes(string), buf, offset, length)
		}

		function ucs2Write (buf, string, offset, length) {
		  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		}

		Buffer.prototype.write = function write (string, offset, length, encoding) {
		  // Buffer#write(string)
		  if (offset === undefined) {
		    encoding = 'utf8'
		    length = this.length
		    offset = 0
		  // Buffer#write(string, encoding)
		  } else if (length === undefined && typeof offset === 'string') {
		    encoding = offset
		    length = this.length
		    offset = 0
		  // Buffer#write(string, offset[, length][, encoding])
		  } else if (isFinite(offset)) {
		    offset = offset | 0
		    if (isFinite(length)) {
		      length = length | 0
		      if (encoding === undefined) encoding = 'utf8'
		    } else {
		      encoding = length
		      length = undefined
		    }
		  // legacy write(string, encoding, offset, length) - remove in v0.13
		  } else {
		    throw new Error(
		      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		    )
		  }

		  var remaining = this.length - offset
		  if (length === undefined || length > remaining) length = remaining

		  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		    throw new RangeError('Attempt to write outside buffer bounds')
		  }

		  if (!encoding) encoding = 'utf8'

		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'hex':
		        return hexWrite(this, string, offset, length)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Write(this, string, offset, length)

		      case 'ascii':
		        return asciiWrite(this, string, offset, length)

		      case 'latin1':
		      case 'binary':
		        return latin1Write(this, string, offset, length)

		      case 'base64':
		        // Warning: maxLength not taken into account in base64Write
		        return base64Write(this, string, offset, length)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return ucs2Write(this, string, offset, length)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		Buffer.prototype.toJSON = function toJSON () {
		  return {
		    type: 'Buffer',
		    data: Array.prototype.slice.call(this._arr || this, 0)
		  }
		}

		function base64Slice (buf, start, end) {
		  if (start === 0 && end === buf.length) {
		    return base64.fromByteArray(buf)
		  } else {
		    return base64.fromByteArray(buf.slice(start, end))
		  }
		}

		function utf8Slice (buf, start, end) {
		  end = Math.min(buf.length, end)
		  var res = []

		  var i = start
		  while (i < end) {
		    var firstByte = buf[i]
		    var codePoint = null
		    var bytesPerSequence = (firstByte > 0xEF) ? 4
		      : (firstByte > 0xDF) ? 3
		      : (firstByte > 0xBF) ? 2
		      : 1

		    if (i + bytesPerSequence <= end) {
		      var secondByte, thirdByte, fourthByte, tempCodePoint

		      switch (bytesPerSequence) {
		        case 1:
		          if (firstByte < 0x80) {
		            codePoint = firstByte
		          }
		          break
		        case 2:
		          secondByte = buf[i + 1]
		          if ((secondByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
		            if (tempCodePoint > 0x7F) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 3:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
		            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 4:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          fourthByte = buf[i + 3]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
		            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		              codePoint = tempCodePoint
		            }
		          }
		      }
		    }

		    if (codePoint === null) {
		      // we did not generate a valid codePoint so insert a
		      // replacement char (U+FFFD) and advance only 1 byte
		      codePoint = 0xFFFD
		      bytesPerSequence = 1
		    } else if (codePoint > 0xFFFF) {
		      // encode to utf16 (surrogate pair dance)
		      codePoint -= 0x10000
		      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
		      codePoint = 0xDC00 | codePoint & 0x3FF
		    }

		    res.push(codePoint)
		    i += bytesPerSequence
		  }

		  return decodeCodePointsArray(res)
		}

		// Based on http://stackoverflow.com/a/22747272/680742, the browser with
		// the lowest limit is Chrome, with 0x10000 args.
		// We go 1 magnitude less, for safety
		var MAX_ARGUMENTS_LENGTH = 0x1000

		function decodeCodePointsArray (codePoints) {
		  var len = codePoints.length
		  if (len <= MAX_ARGUMENTS_LENGTH) {
		    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		  }

		  // Decode in chunks to avoid "call stack size exceeded".
		  var res = ''
		  var i = 0
		  while (i < len) {
		    res += String.fromCharCode.apply(
		      String,
		      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		    )
		  }
		  return res
		}

		function asciiSlice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i] & 0x7F)
		  }
		  return ret
		}

		function latin1Slice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i])
		  }
		  return ret
		}

		function hexSlice (buf, start, end) {
		  var len = buf.length

		  if (!start || start < 0) start = 0
		  if (!end || end < 0 || end > len) end = len

		  var out = ''
		  for (var i = start; i < end; ++i) {
		    out += toHex(buf[i])
		  }
		  return out
		}

		function utf16leSlice (buf, start, end) {
		  var bytes = buf.slice(start, end)
		  var res = ''
		  for (var i = 0; i < bytes.length; i += 2) {
		    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
		  }
		  return res
		}

		Buffer.prototype.slice = function slice (start, end) {
		  var len = this.length
		  start = ~~start
		  end = end === undefined ? len : ~~end

		  if (start < 0) {
		    start += len
		    if (start < 0) start = 0
		  } else if (start > len) {
		    start = len
		  }

		  if (end < 0) {
		    end += len
		    if (end < 0) end = 0
		  } else if (end > len) {
		    end = len
		  }

		  if (end < start) end = start

		  var newBuf
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    newBuf = this.subarray(start, end)
		    newBuf.__proto__ = Buffer.prototype
		  } else {
		    var sliceLen = end - start
		    newBuf = new Buffer(sliceLen, undefined)
		    for (var i = 0; i < sliceLen; ++i) {
		      newBuf[i] = this[i + start]
		    }
		  }

		  return newBuf
		}

		/*
		 * Need to make sure that buffer isn't trying to write out of bounds.
		 */
		function checkOffset (offset, ext, length) {
		  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		}

		Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }

		  return val
		}

		Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    checkOffset(offset, byteLength, this.length)
		  }

		  var val = this[offset + --byteLength]
		  var mul = 1
		  while (byteLength > 0 && (mul *= 0x100)) {
		    val += this[offset + --byteLength] * mul
		  }

		  return val
		}

		Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  return this[offset]
		}

		Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return this[offset] | (this[offset + 1] << 8)
		}

		Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return (this[offset] << 8) | this[offset + 1]
		}

		Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return ((this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16)) +
		      (this[offset + 3] * 0x1000000)
		}

		Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] * 0x1000000) +
		    ((this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    this[offset + 3])
		}

		Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var i = byteLength
		  var mul = 1
		  var val = this[offset + --i]
		  while (i > 0 && (mul *= 0x100)) {
		    val += this[offset + --i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  if (!(this[offset] & 0x80)) return (this[offset])
		  return ((0xff - this[offset] + 1) * -1)
		}

		Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset] | (this[offset + 1] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset + 1] | (this[offset] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset]) |
		    (this[offset + 1] << 8) |
		    (this[offset + 2] << 16) |
		    (this[offset + 3] << 24)
		}

		Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] << 24) |
		    (this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    (this[offset + 3])
		}

		Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, true, 23, 4)
		}

		Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, false, 23, 4)
		}

		Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, true, 52, 8)
		}

		Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, false, 52, 8)
		}

		function checkInt (buf, value, offset, ext, max, min) {
		  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		}

		Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var mul = 1
		  var i = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		function objectWriteUInt16 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		      (littleEndian ? i : 1 - i) * 8
		  }
		}

		Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		function objectWriteUInt32 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffffffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
		  }
		}

		Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset + 3] = (value >>> 24)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 1] = (value >>> 8)
		    this[offset] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = 0
		  var mul = 1
		  var sub = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  var sub = 0
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  if (value < 0) value = 0xff + value + 1
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 3] = (value >>> 24)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (value < 0) value = 0xffffffff + value + 1
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		function checkIEEE754 (buf, value, offset, ext, max, min) {
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  if (offset < 0) throw new RangeError('Index out of range')
		}

		function writeFloat (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 23, 4)
		  return offset + 4
		}

		Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, false, noAssert)
		}

		function writeDouble (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 52, 8)
		  return offset + 8
		}

		Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, false, noAssert)
		}

		// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		  if (!start) start = 0
		  if (!end && end !== 0) end = this.length
		  if (targetStart >= target.length) targetStart = target.length
		  if (!targetStart) targetStart = 0
		  if (end > 0 && end < start) end = start

		  // Copy 0 bytes; we're done
		  if (end === start) return 0
		  if (target.length === 0 || this.length === 0) return 0

		  // Fatal error conditions
		  if (targetStart < 0) {
		    throw new RangeError('targetStart out of bounds')
		  }
		  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		  if (end < 0) throw new RangeError('sourceEnd out of bounds')

		  // Are we oob?
		  if (end > this.length) end = this.length
		  if (target.length - targetStart < end - start) {
		    end = target.length - targetStart + start
		  }

		  var len = end - start
		  var i

		  if (this === target && start < targetStart && targetStart < end) {
		    // descending copy from end
		    for (i = len - 1; i >= 0; --i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
		    // ascending copy from start
		    for (i = 0; i < len; ++i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else {
		    Uint8Array.prototype.set.call(
		      target,
		      this.subarray(start, start + len),
		      targetStart
		    )
		  }

		  return len
		}

		// Usage:
		//    buffer.fill(number[, offset[, end]])
		//    buffer.fill(buffer[, offset[, end]])
		//    buffer.fill(string[, offset[, end]][, encoding])
		Buffer.prototype.fill = function fill (val, start, end, encoding) {
		  // Handle string cases:
		  if (typeof val === 'string') {
		    if (typeof start === 'string') {
		      encoding = start
		      start = 0
		      end = this.length
		    } else if (typeof end === 'string') {
		      encoding = end
		      end = this.length
		    }
		    if (val.length === 1) {
		      var code = val.charCodeAt(0)
		      if (code < 256) {
		        val = code
		      }
		    }
		    if (encoding !== undefined && typeof encoding !== 'string') {
		      throw new TypeError('encoding must be a string')
		    }
		    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		      throw new TypeError('Unknown encoding: ' + encoding)
		    }
		  } else if (typeof val === 'number') {
		    val = val & 255
		  }

		  // Invalid ranges are not set to a default, so can range check early.
		  if (start < 0 || this.length < start || this.length < end) {
		    throw new RangeError('Out of range index')
		  }

		  if (end <= start) {
		    return this
		  }

		  start = start >>> 0
		  end = end === undefined ? this.length : end >>> 0

		  if (!val) val = 0

		  var i
		  if (typeof val === 'number') {
		    for (i = start; i < end; ++i) {
		      this[i] = val
		    }
		  } else {
		    var bytes = Buffer.isBuffer(val)
		      ? val
		      : utf8ToBytes(new Buffer(val, encoding).toString())
		    var len = bytes.length
		    for (i = 0; i < end - start; ++i) {
		      this[i + start] = bytes[i % len]
		    }
		  }

		  return this
		}

		// HELPER FUNCTIONS
		// ================

		var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

		function base64clean (str) {
		  // Node strips out invalid characters like \n and \t from the string, base64-js does not
		  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
		  // Node converts strings with length < 2 to ''
		  if (str.length < 2) return ''
		  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		  while (str.length % 4 !== 0) {
		    str = str + '='
		  }
		  return str
		}

		function stringtrim (str) {
		  if (str.trim) return str.trim()
		  return str.replace(/^\s+|\s+$/g, '')
		}

		function toHex (n) {
		  if (n < 16) return '0' + n.toString(16)
		  return n.toString(16)
		}

		function utf8ToBytes (string, units) {
		  units = units || Infinity
		  var codePoint
		  var length = string.length
		  var leadSurrogate = null
		  var bytes = []

		  for (var i = 0; i < length; ++i) {
		    codePoint = string.charCodeAt(i)

		    // is surrogate component
		    if (codePoint > 0xD7FF && codePoint < 0xE000) {
		      // last char was a lead
		      if (!leadSurrogate) {
		        // no lead yet
		        if (codePoint > 0xDBFF) {
		          // unexpected trail
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        } else if (i + 1 === length) {
		          // unpaired lead
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        }

		        // valid lead
		        leadSurrogate = codePoint

		        continue
		      }

		      // 2 leads in a row
		      if (codePoint < 0xDC00) {
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		        leadSurrogate = codePoint
		        continue
		      }

		      // valid surrogate pair
		      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
		    } else if (leadSurrogate) {
		      // valid bmp char, but last char was a lead
		      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		    }

		    leadSurrogate = null

		    // encode utf8
		    if (codePoint < 0x80) {
		      if ((units -= 1) < 0) break
		      bytes.push(codePoint)
		    } else if (codePoint < 0x800) {
		      if ((units -= 2) < 0) break
		      bytes.push(
		        codePoint >> 0x6 | 0xC0,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x10000) {
		      if ((units -= 3) < 0) break
		      bytes.push(
		        codePoint >> 0xC | 0xE0,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x110000) {
		      if ((units -= 4) < 0) break
		      bytes.push(
		        codePoint >> 0x12 | 0xF0,
		        codePoint >> 0xC & 0x3F | 0x80,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else {
		      throw new Error('Invalid code point')
		    }
		  }

		  return bytes
		}

		function asciiToBytes (str) {
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    // Node's code seems to be doing this and not & 0x7F..
		    byteArray.push(str.charCodeAt(i) & 0xFF)
		  }
		  return byteArray
		}

		function utf16leToBytes (str, units) {
		  var c, hi, lo
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    if ((units -= 2) < 0) break

		    c = str.charCodeAt(i)
		    hi = c >> 8
		    lo = c % 256
		    byteArray.push(lo)
		    byteArray.push(hi)
		  }

		  return byteArray
		}

		function base64ToBytes (str) {
		  return base64.toByteArray(base64clean(str))
		}

		function blitBuffer (src, dst, offset, length) {
		  for (var i = 0; i < length; ++i) {
		    if ((i + offset >= dst.length) || (i >= src.length)) break
		    dst[i + offset] = src[i]
		  }
		  return i
		}

		function isnan (val) {
		  return val !== val // eslint-disable-line no-self-compare
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34).Buffer, (function() { return this; }())))

	/***/ },
	/* 35 */
	/***/ function(module, exports) {

		'use strict'

		exports.byteLength = byteLength
		exports.toByteArray = toByteArray
		exports.fromByteArray = fromByteArray

		var lookup = []
		var revLookup = []
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

		var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
		for (var i = 0, len = code.length; i < len; ++i) {
		  lookup[i] = code[i]
		  revLookup[code.charCodeAt(i)] = i
		}

		revLookup['-'.charCodeAt(0)] = 62
		revLookup['_'.charCodeAt(0)] = 63

		function placeHoldersCount (b64) {
		  var len = b64.length
		  if (len % 4 > 0) {
		    throw new Error('Invalid string. Length must be a multiple of 4')
		  }

		  // the number of equal signs (place holders)
		  // if there are two placeholders, than the two characters before it
		  // represent one byte
		  // if there is only one, then the three characters before it represent 2 bytes
		  // this is just a cheap hack to not do indexOf twice
		  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
		}

		function byteLength (b64) {
		  // base64 is 4/3 + up to two characters of the original data
		  return b64.length * 3 / 4 - placeHoldersCount(b64)
		}

		function toByteArray (b64) {
		  var i, j, l, tmp, placeHolders, arr
		  var len = b64.length
		  placeHolders = placeHoldersCount(b64)

		  arr = new Arr(len * 3 / 4 - placeHolders)

		  // if there are placeholders, only get up to the last complete 4 chars
		  l = placeHolders > 0 ? len - 4 : len

		  var L = 0

		  for (i = 0, j = 0; i < l; i += 4, j += 3) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
		    arr[L++] = (tmp >> 16) & 0xFF
		    arr[L++] = (tmp >> 8) & 0xFF
		    arr[L++] = tmp & 0xFF
		  }

		  if (placeHolders === 2) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
		    arr[L++] = tmp & 0xFF
		  } else if (placeHolders === 1) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
		    arr[L++] = (tmp >> 8) & 0xFF
		    arr[L++] = tmp & 0xFF
		  }

		  return arr
		}

		function tripletToBase64 (num) {
		  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
		}

		function encodeChunk (uint8, start, end) {
		  var tmp
		  var output = []
		  for (var i = start; i < end; i += 3) {
		    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
		    output.push(tripletToBase64(tmp))
		  }
		  return output.join('')
		}

		function fromByteArray (uint8) {
		  var tmp
		  var len = uint8.length
		  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
		  var output = ''
		  var parts = []
		  var maxChunkLength = 16383 // must be multiple of 3

		  // go through the array every three bytes, we'll deal with trailing stuff later
		  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
		  }

		  // pad the end with zeros, but make sure to not forget the extra bytes
		  if (extraBytes === 1) {
		    tmp = uint8[len - 1]
		    output += lookup[tmp >> 2]
		    output += lookup[(tmp << 4) & 0x3F]
		    output += '=='
		  } else if (extraBytes === 2) {
		    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
		    output += lookup[tmp >> 10]
		    output += lookup[(tmp >> 4) & 0x3F]
		    output += lookup[(tmp << 2) & 0x3F]
		    output += '='
		  }

		  parts.push(output)

		  return parts.join('')
		}


	/***/ },
	/* 36 */
	/***/ function(module, exports) {

		exports.read = function (buffer, offset, isLE, mLen, nBytes) {
		  var e, m
		  var eLen = nBytes * 8 - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var nBits = -7
		  var i = isLE ? (nBytes - 1) : 0
		  var d = isLE ? -1 : 1
		  var s = buffer[offset + i]

		  i += d

		  e = s & ((1 << (-nBits)) - 1)
		  s >>= (-nBits)
		  nBits += eLen
		  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		  m = e & ((1 << (-nBits)) - 1)
		  e >>= (-nBits)
		  nBits += mLen
		  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		  if (e === 0) {
		    e = 1 - eBias
		  } else if (e === eMax) {
		    return m ? NaN : ((s ? -1 : 1) * Infinity)
		  } else {
		    m = m + Math.pow(2, mLen)
		    e = e - eBias
		  }
		  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		}

		exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
		  var e, m, c
		  var eLen = nBytes * 8 - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
		  var i = isLE ? 0 : (nBytes - 1)
		  var d = isLE ? 1 : -1
		  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

		  value = Math.abs(value)

		  if (isNaN(value) || value === Infinity) {
		    m = isNaN(value) ? 1 : 0
		    e = eMax
		  } else {
		    e = Math.floor(Math.log(value) / Math.LN2)
		    if (value * (c = Math.pow(2, -e)) < 1) {
		      e--
		      c *= 2
		    }
		    if (e + eBias >= 1) {
		      value += rt / c
		    } else {
		      value += rt * Math.pow(2, 1 - eBias)
		    }
		    if (value * c >= 2) {
		      e++
		      c /= 2
		    }

		    if (e + eBias >= eMax) {
		      m = 0
		      e = eMax
		    } else if (e + eBias >= 1) {
		      m = (value * c - 1) * Math.pow(2, mLen)
		      e = e + eBias
		    } else {
		      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
		      e = 0
		    }
		  }

		  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		  e = (e << mLen) | m
		  eLen += mLen
		  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		  buffer[offset + i - d] |= s * 128
		}


	/***/ },
	/* 37 */
	/***/ function(module, exports) {

		var toString = {}.toString;

		module.exports = Array.isArray || function (arr) {
		  return toString.call(arr) == '[object Array]';
		};


	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// NOTE: These type checking functions intentionally don't use `instanceof`
		// because it is fragile and can be easily faked with `Object.create()`.

		function isArray(arg) {
		  if (Array.isArray) {
		    return Array.isArray(arg);
		  }
		  return objectToString(arg) === '[object Array]';
		}
		exports.isArray = isArray;

		function isBoolean(arg) {
		  return typeof arg === 'boolean';
		}
		exports.isBoolean = isBoolean;

		function isNull(arg) {
		  return arg === null;
		}
		exports.isNull = isNull;

		function isNullOrUndefined(arg) {
		  return arg == null;
		}
		exports.isNullOrUndefined = isNullOrUndefined;

		function isNumber(arg) {
		  return typeof arg === 'number';
		}
		exports.isNumber = isNumber;

		function isString(arg) {
		  return typeof arg === 'string';
		}
		exports.isString = isString;

		function isSymbol(arg) {
		  return typeof arg === 'symbol';
		}
		exports.isSymbol = isSymbol;

		function isUndefined(arg) {
		  return arg === void 0;
		}
		exports.isUndefined = isUndefined;

		function isRegExp(re) {
		  return objectToString(re) === '[object RegExp]';
		}
		exports.isRegExp = isRegExp;

		function isObject(arg) {
		  return typeof arg === 'object' && arg !== null;
		}
		exports.isObject = isObject;

		function isDate(d) {
		  return objectToString(d) === '[object Date]';
		}
		exports.isDate = isDate;

		function isError(e) {
		  return (objectToString(e) === '[object Error]' || e instanceof Error);
		}
		exports.isError = isError;

		function isFunction(arg) {
		  return typeof arg === 'function';
		}
		exports.isFunction = isFunction;

		function isPrimitive(arg) {
		  return arg === null ||
		         typeof arg === 'boolean' ||
		         typeof arg === 'number' ||
		         typeof arg === 'string' ||
		         typeof arg === 'symbol' ||  // ES6 symbol
		         typeof arg === 'undefined';
		}
		exports.isPrimitive = isPrimitive;

		exports.isBuffer = Buffer.isBuffer;

		function objectToString(o) {
		  return Object.prototype.toString.call(o);
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34).Buffer))

	/***/ },
	/* 39 */
	/***/ function(module, exports) {

		if (typeof Object.create === 'function') {
		  // implementation from standard node.js 'util' module
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    ctor.prototype = Object.create(superCtor.prototype, {
		      constructor: {
		        value: ctor,
		        enumerable: false,
		        writable: true,
		        configurable: true
		      }
		    });
		  };
		} else {
		  // old school shim for old browsers
		  module.exports = function inherits(ctor, superCtor) {
		    ctor.super_ = superCtor
		    var TempCtor = function () {}
		    TempCtor.prototype = superCtor.prototype
		    ctor.prototype = new TempCtor()
		    ctor.prototype.constructor = ctor
		  }
		}


	/***/ },
	/* 40 */
	/***/ function(module, exports) {

		/* (ignored) */

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// a duplex stream is just a stream that is both readable and writable.
		// Since JS doesn't have multiple prototypal inheritance, this class
		// prototypally inherits from Readable, and then parasitically from
		// Writable.

		module.exports = Duplex;

		/*<replacement>*/
		var objectKeys = Object.keys || function (obj) {
		  var keys = [];
		  for (var key in obj) keys.push(key);
		  return keys;
		}
		/*</replacement>*/


		/*<replacement>*/
		var util = __webpack_require__(38);
		util.inherits = __webpack_require__(39);
		/*</replacement>*/

		var Readable = __webpack_require__(32);
		var Writable = __webpack_require__(42);

		util.inherits(Duplex, Readable);

		forEach(objectKeys(Writable.prototype), function(method) {
		  if (!Duplex.prototype[method])
		    Duplex.prototype[method] = Writable.prototype[method];
		});

		function Duplex(options) {
		  if (!(this instanceof Duplex))
		    return new Duplex(options);

		  Readable.call(this, options);
		  Writable.call(this, options);

		  if (options && options.readable === false)
		    this.readable = false;

		  if (options && options.writable === false)
		    this.writable = false;

		  this.allowHalfOpen = true;
		  if (options && options.allowHalfOpen === false)
		    this.allowHalfOpen = false;

		  this.once('end', onend);
		}

		// the no-half-open enforcer
		function onend() {
		  // if we allow half-open state, or if the writable side ended,
		  // then we're ok.
		  if (this.allowHalfOpen || this._writableState.ended)
		    return;

		  // no more data can be written.
		  // But allow more writes to happen in this tick.
		  process.nextTick(this.end.bind(this));
		}

		function forEach (xs, f) {
		  for (var i = 0, l = xs.length; i < l; i++) {
		    f(xs[i], i);
		  }
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// A bit simpler than readable streams.
		// Implement an async ._write(chunk, cb), and it'll handle all
		// the drain event emission and buffering.

		module.exports = Writable;

		/*<replacement>*/
		var Buffer = __webpack_require__(34).Buffer;
		/*</replacement>*/

		Writable.WritableState = WritableState;


		/*<replacement>*/
		var util = __webpack_require__(38);
		util.inherits = __webpack_require__(39);
		/*</replacement>*/

		var Stream = __webpack_require__(29);

		util.inherits(Writable, Stream);

		function WriteReq(chunk, encoding, cb) {
		  this.chunk = chunk;
		  this.encoding = encoding;
		  this.callback = cb;
		}

		function WritableState(options, stream) {
		  var Duplex = __webpack_require__(41);

		  options = options || {};

		  // the point at which write() starts returning false
		  // Note: 0 is a valid value, means that we always return false if
		  // the entire buffer is not flushed immediately on write()
		  var hwm = options.highWaterMark;
		  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
		  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

		  // object stream flag to indicate whether or not this stream
		  // contains buffers or objects.
		  this.objectMode = !!options.objectMode;

		  if (stream instanceof Duplex)
		    this.objectMode = this.objectMode || !!options.writableObjectMode;

		  // cast to ints.
		  this.highWaterMark = ~~this.highWaterMark;

		  this.needDrain = false;
		  // at the start of calling end()
		  this.ending = false;
		  // when end() has been called, and returned
		  this.ended = false;
		  // when 'finish' is emitted
		  this.finished = false;

		  // should we decode strings into buffers before passing to _write?
		  // this is here so that some node-core streams can optimize string
		  // handling at a lower level.
		  var noDecode = options.decodeStrings === false;
		  this.decodeStrings = !noDecode;

		  // Crypto is kind of old and crusty.  Historically, its default string
		  // encoding is 'binary' so we have to make this configurable.
		  // Everything else in the universe uses 'utf8', though.
		  this.defaultEncoding = options.defaultEncoding || 'utf8';

		  // not an actual buffer we keep track of, but a measurement
		  // of how much we're waiting to get pushed to some underlying
		  // socket or file.
		  this.length = 0;

		  // a flag to see when we're in the middle of a write.
		  this.writing = false;

		  // when true all writes will be buffered until .uncork() call
		  this.corked = 0;

		  // a flag to be able to tell if the onwrite cb is called immediately,
		  // or on a later tick.  We set this to true at first, because any
		  // actions that shouldn't happen until "later" should generally also
		  // not happen before the first write call.
		  this.sync = true;

		  // a flag to know if we're processing previously buffered items, which
		  // may call the _write() callback in the same tick, so that we don't
		  // end up in an overlapped onwrite situation.
		  this.bufferProcessing = false;

		  // the callback that's passed to _write(chunk,cb)
		  this.onwrite = function(er) {
		    onwrite(stream, er);
		  };

		  // the callback that the user supplies to write(chunk,encoding,cb)
		  this.writecb = null;

		  // the amount that is being written when _write is called.
		  this.writelen = 0;

		  this.buffer = [];

		  // number of pending user-supplied write callbacks
		  // this must be 0 before 'finish' can be emitted
		  this.pendingcb = 0;

		  // emit prefinish if the only thing we're waiting for is _write cbs
		  // This is relevant for synchronous Transform streams
		  this.prefinished = false;

		  // True if the error was already emitted and should not be thrown again
		  this.errorEmitted = false;
		}

		function Writable(options) {
		  var Duplex = __webpack_require__(41);

		  // Writable ctor is applied to Duplexes, though they're not
		  // instanceof Writable, they're instanceof Readable.
		  if (!(this instanceof Writable) && !(this instanceof Duplex))
		    return new Writable(options);

		  this._writableState = new WritableState(options, this);

		  // legacy.
		  this.writable = true;

		  Stream.call(this);
		}

		// Otherwise people can pipe Writable streams, which is just wrong.
		Writable.prototype.pipe = function() {
		  this.emit('error', new Error('Cannot pipe. Not readable.'));
		};


		function writeAfterEnd(stream, state, cb) {
		  var er = new Error('write after end');
		  // TODO: defer error events consistently everywhere, not just the cb
		  stream.emit('error', er);
		  process.nextTick(function() {
		    cb(er);
		  });
		}

		// If we get something that is not a buffer, string, null, or undefined,
		// and we're not in objectMode, then that's an error.
		// Otherwise stream chunks are all considered to be of length=1, and the
		// watermarks determine how many objects to keep in the buffer, rather than
		// how many bytes or characters.
		function validChunk(stream, state, chunk, cb) {
		  var valid = true;
		  if (!util.isBuffer(chunk) &&
		      !util.isString(chunk) &&
		      !util.isNullOrUndefined(chunk) &&
		      !state.objectMode) {
		    var er = new TypeError('Invalid non-string/buffer chunk');
		    stream.emit('error', er);
		    process.nextTick(function() {
		      cb(er);
		    });
		    valid = false;
		  }
		  return valid;
		}

		Writable.prototype.write = function(chunk, encoding, cb) {
		  var state = this._writableState;
		  var ret = false;

		  if (util.isFunction(encoding)) {
		    cb = encoding;
		    encoding = null;
		  }

		  if (util.isBuffer(chunk))
		    encoding = 'buffer';
		  else if (!encoding)
		    encoding = state.defaultEncoding;

		  if (!util.isFunction(cb))
		    cb = function() {};

		  if (state.ended)
		    writeAfterEnd(this, state, cb);
		  else if (validChunk(this, state, chunk, cb)) {
		    state.pendingcb++;
		    ret = writeOrBuffer(this, state, chunk, encoding, cb);
		  }

		  return ret;
		};

		Writable.prototype.cork = function() {
		  var state = this._writableState;

		  state.corked++;
		};

		Writable.prototype.uncork = function() {
		  var state = this._writableState;

		  if (state.corked) {
		    state.corked--;

		    if (!state.writing &&
		        !state.corked &&
		        !state.finished &&
		        !state.bufferProcessing &&
		        state.buffer.length)
		      clearBuffer(this, state);
		  }
		};

		function decodeChunk(state, chunk, encoding) {
		  if (!state.objectMode &&
		      state.decodeStrings !== false &&
		      util.isString(chunk)) {
		    chunk = new Buffer(chunk, encoding);
		  }
		  return chunk;
		}

		// if we're already writing something, then just put this
		// in the queue, and wait our turn.  Otherwise, call _write
		// If we return false, then we need a drain event, so set that flag.
		function writeOrBuffer(stream, state, chunk, encoding, cb) {
		  chunk = decodeChunk(state, chunk, encoding);
		  if (util.isBuffer(chunk))
		    encoding = 'buffer';
		  var len = state.objectMode ? 1 : chunk.length;

		  state.length += len;

		  var ret = state.length < state.highWaterMark;
		  // we must ensure that previous needDrain will not be reset to false.
		  if (!ret)
		    state.needDrain = true;

		  if (state.writing || state.corked)
		    state.buffer.push(new WriteReq(chunk, encoding, cb));
		  else
		    doWrite(stream, state, false, len, chunk, encoding, cb);

		  return ret;
		}

		function doWrite(stream, state, writev, len, chunk, encoding, cb) {
		  state.writelen = len;
		  state.writecb = cb;
		  state.writing = true;
		  state.sync = true;
		  if (writev)
		    stream._writev(chunk, state.onwrite);
		  else
		    stream._write(chunk, encoding, state.onwrite);
		  state.sync = false;
		}

		function onwriteError(stream, state, sync, er, cb) {
		  if (sync)
		    process.nextTick(function() {
		      state.pendingcb--;
		      cb(er);
		    });
		  else {
		    state.pendingcb--;
		    cb(er);
		  }

		  stream._writableState.errorEmitted = true;
		  stream.emit('error', er);
		}

		function onwriteStateUpdate(state) {
		  state.writing = false;
		  state.writecb = null;
		  state.length -= state.writelen;
		  state.writelen = 0;
		}

		function onwrite(stream, er) {
		  var state = stream._writableState;
		  var sync = state.sync;
		  var cb = state.writecb;

		  onwriteStateUpdate(state);

		  if (er)
		    onwriteError(stream, state, sync, er, cb);
		  else {
		    // Check if we're actually ready to finish, but don't emit yet
		    var finished = needFinish(stream, state);

		    if (!finished &&
		        !state.corked &&
		        !state.bufferProcessing &&
		        state.buffer.length) {
		      clearBuffer(stream, state);
		    }

		    if (sync) {
		      process.nextTick(function() {
		        afterWrite(stream, state, finished, cb);
		      });
		    } else {
		      afterWrite(stream, state, finished, cb);
		    }
		  }
		}

		function afterWrite(stream, state, finished, cb) {
		  if (!finished)
		    onwriteDrain(stream, state);
		  state.pendingcb--;
		  cb();
		  finishMaybe(stream, state);
		}

		// Must force callback to be called on nextTick, so that we don't
		// emit 'drain' before the write() consumer gets the 'false' return
		// value, and has a chance to attach a 'drain' listener.
		function onwriteDrain(stream, state) {
		  if (state.length === 0 && state.needDrain) {
		    state.needDrain = false;
		    stream.emit('drain');
		  }
		}


		// if there's something in the buffer waiting, then process it
		function clearBuffer(stream, state) {
		  state.bufferProcessing = true;

		  if (stream._writev && state.buffer.length > 1) {
		    // Fast case, write everything using _writev()
		    var cbs = [];
		    for (var c = 0; c < state.buffer.length; c++)
		      cbs.push(state.buffer[c].callback);

		    // count the one we are adding, as well.
		    // TODO(isaacs) clean this up
		    state.pendingcb++;
		    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
		      for (var i = 0; i < cbs.length; i++) {
		        state.pendingcb--;
		        cbs[i](err);
		      }
		    });

		    // Clear buffer
		    state.buffer = [];
		  } else {
		    // Slow case, write chunks one-by-one
		    for (var c = 0; c < state.buffer.length; c++) {
		      var entry = state.buffer[c];
		      var chunk = entry.chunk;
		      var encoding = entry.encoding;
		      var cb = entry.callback;
		      var len = state.objectMode ? 1 : chunk.length;

		      doWrite(stream, state, false, len, chunk, encoding, cb);

		      // if we didn't call the onwrite immediately, then
		      // it means that we need to wait until it does.
		      // also, that means that the chunk and cb are currently
		      // being processed, so move the buffer counter past them.
		      if (state.writing) {
		        c++;
		        break;
		      }
		    }

		    if (c < state.buffer.length)
		      state.buffer = state.buffer.slice(c);
		    else
		      state.buffer.length = 0;
		  }

		  state.bufferProcessing = false;
		}

		Writable.prototype._write = function(chunk, encoding, cb) {
		  cb(new Error('not implemented'));

		};

		Writable.prototype._writev = null;

		Writable.prototype.end = function(chunk, encoding, cb) {
		  var state = this._writableState;

		  if (util.isFunction(chunk)) {
		    cb = chunk;
		    chunk = null;
		    encoding = null;
		  } else if (util.isFunction(encoding)) {
		    cb = encoding;
		    encoding = null;
		  }

		  if (!util.isNullOrUndefined(chunk))
		    this.write(chunk, encoding);

		  // .end() fully uncorks
		  if (state.corked) {
		    state.corked = 1;
		    this.uncork();
		  }

		  // ignore unnecessary end() calls.
		  if (!state.ending && !state.finished)
		    endWritable(this, state, cb);
		};


		function needFinish(stream, state) {
		  return (state.ending &&
		          state.length === 0 &&
		          !state.finished &&
		          !state.writing);
		}

		function prefinish(stream, state) {
		  if (!state.prefinished) {
		    state.prefinished = true;
		    stream.emit('prefinish');
		  }
		}

		function finishMaybe(stream, state) {
		  var need = needFinish(stream, state);
		  if (need) {
		    if (state.pendingcb === 0) {
		      prefinish(stream, state);
		      state.finished = true;
		      stream.emit('finish');
		    } else
		      prefinish(stream, state);
		  }
		  return need;
		}

		function endWritable(stream, state, cb) {
		  state.ending = true;
		  finishMaybe(stream, state);
		  if (cb) {
		    if (state.finished)
		      process.nextTick(cb);
		    else
		      stream.once('finish', cb);
		  }
		  state.ended = true;
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		var Buffer = __webpack_require__(34).Buffer;

		var isBufferEncoding = Buffer.isEncoding
		  || function(encoding) {
		       switch (encoding && encoding.toLowerCase()) {
		         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
		         default: return false;
		       }
		     }


		function assertEncoding(encoding) {
		  if (encoding && !isBufferEncoding(encoding)) {
		    throw new Error('Unknown encoding: ' + encoding);
		  }
		}

		// StringDecoder provides an interface for efficiently splitting a series of
		// buffers into a series of JS strings without breaking apart multi-byte
		// characters. CESU-8 is handled as part of the UTF-8 encoding.
		//
		// @TODO Handling all encodings inside a single object makes it very difficult
		// to reason about this code, so it should be split up in the future.
		// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
		// points as used by CESU-8.
		var StringDecoder = exports.StringDecoder = function(encoding) {
		  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
		  assertEncoding(encoding);
		  switch (this.encoding) {
		    case 'utf8':
		      // CESU-8 represents each of Surrogate Pair by 3-bytes
		      this.surrogateSize = 3;
		      break;
		    case 'ucs2':
		    case 'utf16le':
		      // UTF-16 represents each of Surrogate Pair by 2-bytes
		      this.surrogateSize = 2;
		      this.detectIncompleteChar = utf16DetectIncompleteChar;
		      break;
		    case 'base64':
		      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
		      this.surrogateSize = 3;
		      this.detectIncompleteChar = base64DetectIncompleteChar;
		      break;
		    default:
		      this.write = passThroughWrite;
		      return;
		  }

		  // Enough space to store all bytes of a single character. UTF-8 needs 4
		  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
		  this.charBuffer = new Buffer(6);
		  // Number of bytes received for the current incomplete multi-byte character.
		  this.charReceived = 0;
		  // Number of bytes expected for the current incomplete multi-byte character.
		  this.charLength = 0;
		};


		// write decodes the given buffer and returns it as JS string that is
		// guaranteed to not contain any partial multi-byte characters. Any partial
		// character found at the end of the buffer is buffered up, and will be
		// returned when calling write again with the remaining bytes.
		//
		// Note: Converting a Buffer containing an orphan surrogate to a String
		// currently works, but converting a String to a Buffer (via `new Buffer`, or
		// Buffer#write) will replace incomplete surrogates with the unicode
		// replacement character. See https://codereview.chromium.org/121173009/ .
		StringDecoder.prototype.write = function(buffer) {
		  var charStr = '';
		  // if our last write ended with an incomplete multibyte character
		  while (this.charLength) {
		    // determine how many remaining bytes this buffer has to offer for this char
		    var available = (buffer.length >= this.charLength - this.charReceived) ?
		        this.charLength - this.charReceived :
		        buffer.length;

		    // add the new bytes to the char buffer
		    buffer.copy(this.charBuffer, this.charReceived, 0, available);
		    this.charReceived += available;

		    if (this.charReceived < this.charLength) {
		      // still not enough chars in this buffer? wait for more ...
		      return '';
		    }

		    // remove bytes belonging to the current character from the buffer
		    buffer = buffer.slice(available, buffer.length);

		    // get the character that was split
		    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

		    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		    var charCode = charStr.charCodeAt(charStr.length - 1);
		    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		      this.charLength += this.surrogateSize;
		      charStr = '';
		      continue;
		    }
		    this.charReceived = this.charLength = 0;

		    // if there are no more bytes in this buffer, just emit our char
		    if (buffer.length === 0) {
		      return charStr;
		    }
		    break;
		  }

		  // determine and set charLength / charReceived
		  this.detectIncompleteChar(buffer);

		  var end = buffer.length;
		  if (this.charLength) {
		    // buffer the incomplete character bytes we got
		    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
		    end -= this.charReceived;
		  }

		  charStr += buffer.toString(this.encoding, 0, end);

		  var end = charStr.length - 1;
		  var charCode = charStr.charCodeAt(end);
		  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
		  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
		    var size = this.surrogateSize;
		    this.charLength += size;
		    this.charReceived += size;
		    this.charBuffer.copy(this.charBuffer, size, 0, size);
		    buffer.copy(this.charBuffer, 0, 0, size);
		    return charStr.substring(0, end);
		  }

		  // or just emit the charStr
		  return charStr;
		};

		// detectIncompleteChar determines if there is an incomplete UTF-8 character at
		// the end of the given buffer. If so, it sets this.charLength to the byte
		// length that character, and sets this.charReceived to the number of bytes
		// that are available for this character.
		StringDecoder.prototype.detectIncompleteChar = function(buffer) {
		  // determine how many bytes we have to check at the end of this buffer
		  var i = (buffer.length >= 3) ? 3 : buffer.length;

		  // Figure out if one of the last i bytes of our buffer announces an
		  // incomplete char.
		  for (; i > 0; i--) {
		    var c = buffer[buffer.length - i];

		    // See http://en.wikipedia.org/wiki/UTF-8#Description

		    // 110XXXXX
		    if (i == 1 && c >> 5 == 0x06) {
		      this.charLength = 2;
		      break;
		    }

		    // 1110XXXX
		    if (i <= 2 && c >> 4 == 0x0E) {
		      this.charLength = 3;
		      break;
		    }

		    // 11110XXX
		    if (i <= 3 && c >> 3 == 0x1E) {
		      this.charLength = 4;
		      break;
		    }
		  }
		  this.charReceived = i;
		};

		StringDecoder.prototype.end = function(buffer) {
		  var res = '';
		  if (buffer && buffer.length)
		    res = this.write(buffer);

		  if (this.charReceived) {
		    var cr = this.charReceived;
		    var buf = this.charBuffer;
		    var enc = this.encoding;
		    res += buf.slice(0, cr).toString(enc);
		  }

		  return res;
		};

		function passThroughWrite(buffer) {
		  return buffer.toString(this.encoding);
		}

		function utf16DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 2;
		  this.charLength = this.charReceived ? 2 : 0;
		}

		function base64DetectIncompleteChar(buffer) {
		  this.charReceived = buffer.length % 3;
		  this.charLength = this.charReceived ? 3 : 0;
		}


	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.


		// a transform stream is a readable/writable stream where you do
		// something with the data.  Sometimes it's called a "filter",
		// but that's not a great name for it, since that implies a thing where
		// some bits pass through, and others are simply ignored.  (That would
		// be a valid example of a transform, of course.)
		//
		// While the output is causally related to the input, it's not a
		// necessarily symmetric or synchronous transformation.  For example,
		// a zlib stream might take multiple plain-text writes(), and then
		// emit a single compressed chunk some time in the future.
		//
		// Here's how this works:
		//
		// The Transform stream has all the aspects of the readable and writable
		// stream classes.  When you write(chunk), that calls _write(chunk,cb)
		// internally, and returns false if there's a lot of pending writes
		// buffered up.  When you call read(), that calls _read(n) until
		// there's enough pending readable data buffered up.
		//
		// In a transform stream, the written data is placed in a buffer.  When
		// _read(n) is called, it transforms the queued up data, calling the
		// buffered _write cb's as it consumes chunks.  If consuming a single
		// written chunk would result in multiple output chunks, then the first
		// outputted bit calls the readcb, and subsequent chunks just go into
		// the read buffer, and will cause it to emit 'readable' if necessary.
		//
		// This way, back-pressure is actually determined by the reading side,
		// since _read has to be called to start processing a new chunk.  However,
		// a pathological inflate type of transform can cause excessive buffering
		// here.  For example, imagine a stream where every byte of input is
		// interpreted as an integer from 0-255, and then results in that many
		// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
		// 1kb of data being output.  In this case, you could write a very small
		// amount of input, and end up with a very large amount of output.  In
		// such a pathological inflating mechanism, there'd be no way to tell
		// the system to stop doing the transform.  A single 4MB write could
		// cause the system to run out of memory.
		//
		// However, even in such a pathological case, only a single written chunk
		// would be consumed, and then the rest would wait (un-transformed) until
		// the results of the previous transformed chunk were consumed.

		module.exports = Transform;

		var Duplex = __webpack_require__(41);

		/*<replacement>*/
		var util = __webpack_require__(38);
		util.inherits = __webpack_require__(39);
		/*</replacement>*/

		util.inherits(Transform, Duplex);


		function TransformState(options, stream) {
		  this.afterTransform = function(er, data) {
		    return afterTransform(stream, er, data);
		  };

		  this.needTransform = false;
		  this.transforming = false;
		  this.writecb = null;
		  this.writechunk = null;
		}

		function afterTransform(stream, er, data) {
		  var ts = stream._transformState;
		  ts.transforming = false;

		  var cb = ts.writecb;

		  if (!cb)
		    return stream.emit('error', new Error('no writecb in Transform class'));

		  ts.writechunk = null;
		  ts.writecb = null;

		  if (!util.isNullOrUndefined(data))
		    stream.push(data);

		  if (cb)
		    cb(er);

		  var rs = stream._readableState;
		  rs.reading = false;
		  if (rs.needReadable || rs.length < rs.highWaterMark) {
		    stream._read(rs.highWaterMark);
		  }
		}


		function Transform(options) {
		  if (!(this instanceof Transform))
		    return new Transform(options);

		  Duplex.call(this, options);

		  this._transformState = new TransformState(options, this);

		  // when the writable side finishes, then flush out anything remaining.
		  var stream = this;

		  // start out asking for a readable event once data is transformed.
		  this._readableState.needReadable = true;

		  // we have implemented the _read method, and done the other things
		  // that Readable wants before the first _read call, so unset the
		  // sync guard flag.
		  this._readableState.sync = false;

		  this.once('prefinish', function() {
		    if (util.isFunction(this._flush))
		      this._flush(function(er) {
		        done(stream, er);
		      });
		    else
		      done(stream);
		  });
		}

		Transform.prototype.push = function(chunk, encoding) {
		  this._transformState.needTransform = false;
		  return Duplex.prototype.push.call(this, chunk, encoding);
		};

		// This is the part where you do stuff!
		// override this function in implementation classes.
		// 'chunk' is an input chunk.
		//
		// Call `push(newChunk)` to pass along transformed output
		// to the readable side.  You may call 'push' zero or more times.
		//
		// Call `cb(err)` when you are done with this chunk.  If you pass
		// an error, then that'll put the hurt on the whole operation.  If you
		// never call cb(), then you'll never get another chunk.
		Transform.prototype._transform = function(chunk, encoding, cb) {
		  throw new Error('not implemented');
		};

		Transform.prototype._write = function(chunk, encoding, cb) {
		  var ts = this._transformState;
		  ts.writecb = cb;
		  ts.writechunk = chunk;
		  ts.writeencoding = encoding;
		  if (!ts.transforming) {
		    var rs = this._readableState;
		    if (ts.needTransform ||
		        rs.needReadable ||
		        rs.length < rs.highWaterMark)
		      this._read(rs.highWaterMark);
		  }
		};

		// Doesn't matter what the args are here.
		// _transform does all the work.
		// That we got here means that the readable side wants more data.
		Transform.prototype._read = function(n) {
		  var ts = this._transformState;

		  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
		    ts.transforming = true;
		    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		  } else {
		    // mark that we need a transform, so that any data that comes in
		    // will get processed, now that we've asked for it.
		    ts.needTransform = true;
		  }
		};


		function done(stream, er) {
		  if (er)
		    return stream.emit('error', er);

		  // if there's nothing in the write buffer, then that means
		  // that nothing more will ever be provided
		  var ws = stream._writableState;
		  var ts = stream._transformState;

		  if (ws.length)
		    throw new Error('calling transform done when ws.length != 0');

		  if (ts.transforming)
		    throw new Error('calling transform done when still transforming');

		  return stream.push(null);
		}


	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

		// Copyright Joyent, Inc. and other Node contributors.
		//
		// Permission is hereby granted, free of charge, to any person obtaining a
		// copy of this software and associated documentation files (the
		// "Software"), to deal in the Software without restriction, including
		// without limitation the rights to use, copy, modify, merge, publish,
		// distribute, sublicense, and/or sell copies of the Software, and to permit
		// persons to whom the Software is furnished to do so, subject to the
		// following conditions:
		//
		// The above copyright notice and this permission notice shall be included
		// in all copies or substantial portions of the Software.
		//
		// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
		// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
		// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
		// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
		// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
		// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
		// USE OR OTHER DEALINGS IN THE SOFTWARE.

		// a passthrough stream.
		// basically just the most minimal sort of Transform stream.
		// Every written chunk gets output as-is.

		module.exports = PassThrough;

		var Transform = __webpack_require__(44);

		/*<replacement>*/
		var util = __webpack_require__(38);
		util.inherits = __webpack_require__(39);
		/*</replacement>*/

		util.inherits(PassThrough, Transform);

		function PassThrough(options) {
		  if (!(this instanceof PassThrough))
		    return new PassThrough(options);

		  Transform.call(this, options);
		}

		PassThrough.prototype._transform = function(chunk, encoding, cb) {
		  cb(null, chunk);
		};


	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(42)


	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(41)


	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(44)


	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(45)


	/***/ },
	/* 50 */
	/***/ function(module, exports) {

		/* (ignored) */

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = ProxyHandler;

		function ProxyHandler(cbs){
			this._cbs = cbs || {};
		}

		var EVENTS = __webpack_require__(14).EVENTS;
		Object.keys(EVENTS).forEach(function(name){
			if(EVENTS[name] === 0){
				name = "on" + name;
				ProxyHandler.prototype[name] = function(){
					if(this._cbs[name]) this._cbs[name]();
				};
			} else if(EVENTS[name] === 1){
				name = "on" + name;
				ProxyHandler.prototype[name] = function(a){
					if(this._cbs[name]) this._cbs[name](a);
				};
			} else if(EVENTS[name] === 2){
				name = "on" + name;
				ProxyHandler.prototype[name] = function(a, b){
					if(this._cbs[name]) this._cbs[name](a, b);
				};
			} else {
				throw Error("wrong number of arguments");
			}
		});

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

		var DomUtils = module.exports;

		[
			__webpack_require__(53),
			__webpack_require__(59),
			__webpack_require__(60),
			__webpack_require__(61),
			__webpack_require__(62),
			__webpack_require__(63)
		].forEach(function(ext){
			Object.keys(ext).forEach(function(key){
				DomUtils[key] = ext[key].bind(DomUtils);
			});
		});


	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {

		var ElementType = __webpack_require__(23),
		    getOuterHTML = __webpack_require__(54),
		    isTag = ElementType.isTag;

		module.exports = {
			getInnerHTML: getInnerHTML,
			getOuterHTML: getOuterHTML,
			getText: getText
		};

		function getInnerHTML(elem, opts){
			return elem.children ? elem.children.map(function(elem){
				return getOuterHTML(elem, opts);
			}).join("") : "";
		}

		function getText(elem){
			if(Array.isArray(elem)) return elem.map(getText).join("");
			if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
			if(elem.type === ElementType.Text) return elem.data;
			return "";
		}


	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		  Module dependencies
		*/
		var ElementType = __webpack_require__(55);
		var entities = __webpack_require__(56);

		/*
		  Boolean Attributes
		*/
		var booleanAttributes = {
		  __proto__: null,
		  allowfullscreen: true,
		  async: true,
		  autofocus: true,
		  autoplay: true,
		  checked: true,
		  controls: true,
		  default: true,
		  defer: true,
		  disabled: true,
		  hidden: true,
		  ismap: true,
		  loop: true,
		  multiple: true,
		  muted: true,
		  open: true,
		  readonly: true,
		  required: true,
		  reversed: true,
		  scoped: true,
		  seamless: true,
		  selected: true,
		  typemustmatch: true
		};

		var unencodedElements = {
		  __proto__: null,
		  style: true,
		  script: true,
		  xmp: true,
		  iframe: true,
		  noembed: true,
		  noframes: true,
		  plaintext: true,
		  noscript: true
		};

		/*
		  Format attributes
		*/
		function formatAttrs(attributes, opts) {
		  if (!attributes) return;

		  var output = '',
		      value;

		  // Loop through the attributes
		  for (var key in attributes) {
		    value = attributes[key];
		    if (output) {
		      output += ' ';
		    }

		    if (!value && booleanAttributes[key]) {
		      output += key;
		    } else {
		      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
		    }
		  }

		  return output;
		}

		/*
		  Self-enclosing tags (stolen from node-htmlparser)
		*/
		var singleTag = {
		  __proto__: null,
		  area: true,
		  base: true,
		  basefont: true,
		  br: true,
		  col: true,
		  command: true,
		  embed: true,
		  frame: true,
		  hr: true,
		  img: true,
		  input: true,
		  isindex: true,
		  keygen: true,
		  link: true,
		  meta: true,
		  param: true,
		  source: true,
		  track: true,
		  wbr: true,
		};


		var render = module.exports = function(dom, opts) {
		  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
		  opts = opts || {};

		  var output = '';

		  for(var i = 0; i < dom.length; i++){
		    var elem = dom[i];

		    if (elem.type === 'root')
		      output += render(elem.children, opts);
		    else if (ElementType.isTag(elem))
		      output += renderTag(elem, opts);
		    else if (elem.type === ElementType.Directive)
		      output += renderDirective(elem);
		    else if (elem.type === ElementType.Comment)
		      output += renderComment(elem);
		    else if (elem.type === ElementType.CDATA)
		      output += renderCdata(elem);
		    else
		      output += renderText(elem, opts);
		  }

		  return output;
		};

		function renderTag(elem, opts) {
		  // Handle SVG
		  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

		  var tag = '<' + elem.name,
		      attribs = formatAttrs(elem.attribs, opts);

		  if (attribs) {
		    tag += ' ' + attribs;
		  }

		  if (
		    opts.xmlMode
		    && (!elem.children || elem.children.length === 0)
		  ) {
		    tag += '/>';
		  } else {
		    tag += '>';
		    if (elem.children) {
		      tag += render(elem.children, opts);
		    }

		    if (!singleTag[elem.name] || opts.xmlMode) {
		      tag += '</' + elem.name + '>';
		    }
		  }

		  return tag;
		}

		function renderDirective(elem) {
		  return '<' + elem.data + '>';
		}

		function renderText(elem, opts) {
		  var data = elem.data || '';

		  // if entities weren't decoded, no need to encode them back
		  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
		    data = entities.encodeXML(data);
		  }

		  return data;
		}

		function renderCdata(elem) {
		  return '<![CDATA[' + elem.children[0].data + ']]>';
		}

		function renderComment(elem) {
		  return '<!--' + elem.data + '-->';
		}


	/***/ },
	/* 55 */
	/***/ function(module, exports) {

		//Types of elements found in the DOM
		module.exports = {
			Text: "text", //Text
			Directive: "directive", //<? ... ?>
			Comment: "comment", //<!-- ... -->
			Script: "script", //<script> tags
			Style: "style", //<style> tags
			Tag: "tag", //Any tag
			CDATA: "cdata", //<![CDATA[ ... ]]>

			isTag: function(elem){
				return elem.type === "tag" || elem.type === "script" || elem.type === "style";
			}
		};

	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {

		var encode = __webpack_require__(57),
		    decode = __webpack_require__(58);

		exports.decode = function(data, level){
			return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
		};

		exports.decodeStrict = function(data, level){
			return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
		};

		exports.encode = function(data, level){
			return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
		};

		exports.encodeXML = encode.XML;

		exports.encodeHTML4 =
		exports.encodeHTML5 =
		exports.encodeHTML  = encode.HTML;

		exports.decodeXML =
		exports.decodeXMLStrict = decode.XML;

		exports.decodeHTML4 =
		exports.decodeHTML5 =
		exports.decodeHTML = decode.HTML;

		exports.decodeHTML4Strict =
		exports.decodeHTML5Strict =
		exports.decodeHTMLStrict = decode.HTMLStrict;

		exports.escape = encode.escape;


	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

		var inverseXML = getInverseObj(__webpack_require__(21)),
		    xmlReplacer = getInverseReplacer(inverseXML);

		exports.XML = getInverse(inverseXML, xmlReplacer);

		var inverseHTML = getInverseObj(__webpack_require__(19)),
		    htmlReplacer = getInverseReplacer(inverseHTML);

		exports.HTML = getInverse(inverseHTML, htmlReplacer);

		function getInverseObj(obj){
			return Object.keys(obj).sort().reduce(function(inverse, name){
				inverse[obj[name]] = "&" + name + ";";
				return inverse;
			}, {});
		}

		function getInverseReplacer(inverse){
			var single = [],
			    multiple = [];

			Object.keys(inverse).forEach(function(k){
				if(k.length === 1){
					single.push("\\" + k);
				} else {
					multiple.push(k);
				}
			});

			//TODO add ranges
			multiple.unshift("[" + single.join("") + "]");

			return new RegExp(multiple.join("|"), "g");
		}

		var re_nonASCII = /[^\0-\x7F]/g,
		    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

		function singleCharReplacer(c){
			return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
		}

		function astralReplacer(c){
			// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
			var high = c.charCodeAt(0);
			var low  = c.charCodeAt(1);
			var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
			return "&#x" + codePoint.toString(16).toUpperCase() + ";";
		}

		function getInverse(inverse, re){
			function func(name){
				return inverse[name];
			}

			return function(data){
				return data
						.replace(re, func)
						.replace(re_astralSymbols, astralReplacer)
						.replace(re_nonASCII, singleCharReplacer);
			};
		}

		var re_xmlChars = getInverseReplacer(inverseXML);

		function escapeXML(data){
			return data
					.replace(re_xmlChars, singleCharReplacer)
					.replace(re_astralSymbols, astralReplacer)
					.replace(re_nonASCII, singleCharReplacer);
		}

		exports.escape = escapeXML;


	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

		var entityMap = __webpack_require__(19),
		    legacyMap = __webpack_require__(20),
		    xmlMap    = __webpack_require__(21),
		    decodeCodePoint = __webpack_require__(17);

		var decodeXMLStrict  = getStrictDecoder(xmlMap),
		    decodeHTMLStrict = getStrictDecoder(entityMap);

		function getStrictDecoder(map){
			var keys = Object.keys(map).join("|"),
			    replace = getReplacer(map);

			keys += "|#[xX][\\da-fA-F]+|#\\d+";

			var re = new RegExp("&(?:" + keys + ");", "g");

			return function(str){
				return String(str).replace(re, replace);
			};
		}

		var decodeHTML = (function(){
			var legacy = Object.keys(legacyMap)
				.sort(sorter);

			var keys = Object.keys(entityMap)
				.sort(sorter);

			for(var i = 0, j = 0; i < keys.length; i++){
				if(legacy[j] === keys[i]){
					keys[i] += ";?";
					j++;
				} else {
					keys[i] += ";";
				}
			}

			var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
			    replace = getReplacer(entityMap);

			function replacer(str){
				if(str.substr(-1) !== ";") str += ";";
				return replace(str);
			}

			//TODO consider creating a merged map
			return function(str){
				return String(str).replace(re, replacer);
			};
		}());

		function sorter(a, b){
			return a < b ? 1 : -1;
		}

		function getReplacer(map){
			return function replace(str){
				if(str.charAt(1) === "#"){
					if(str.charAt(2) === "X" || str.charAt(2) === "x"){
						return decodeCodePoint(parseInt(str.substr(3), 16));
					}
					return decodeCodePoint(parseInt(str.substr(2), 10));
				}
				return map[str.slice(1, -1)];
			};
		}

		module.exports = {
			XML: decodeXMLStrict,
			HTML: decodeHTML,
			HTMLStrict: decodeHTMLStrict
		};

	/***/ },
	/* 59 */
	/***/ function(module, exports) {

		var getChildren = exports.getChildren = function(elem){
			return elem.children;
		};

		var getParent = exports.getParent = function(elem){
			return elem.parent;
		};

		exports.getSiblings = function(elem){
			var parent = getParent(elem);
			return parent ? getChildren(parent) : [elem];
		};

		exports.getAttributeValue = function(elem, name){
			return elem.attribs && elem.attribs[name];
		};

		exports.hasAttrib = function(elem, name){
			return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
		};

		exports.getName = function(elem){
			return elem.name;
		};


	/***/ },
	/* 60 */
	/***/ function(module, exports) {

		exports.removeElement = function(elem){
			if(elem.prev) elem.prev.next = elem.next;
			if(elem.next) elem.next.prev = elem.prev;

			if(elem.parent){
				var childs = elem.parent.children;
				childs.splice(childs.lastIndexOf(elem), 1);
			}
		};

		exports.replaceElement = function(elem, replacement){
			var prev = replacement.prev = elem.prev;
			if(prev){
				prev.next = replacement;
			}

			var next = replacement.next = elem.next;
			if(next){
				next.prev = replacement;
			}

			var parent = replacement.parent = elem.parent;
			if(parent){
				var childs = parent.children;
				childs[childs.lastIndexOf(elem)] = replacement;
			}
		};

		exports.appendChild = function(elem, child){
			child.parent = elem;

			if(elem.children.push(child) !== 1){
				var sibling = elem.children[elem.children.length - 2];
				sibling.next = child;
				child.prev = sibling;
				child.next = null;
			}
		};

		exports.append = function(elem, next){
			var parent = elem.parent,
				currNext = elem.next;

			next.next = currNext;
			next.prev = elem;
			elem.next = next;
			next.parent = parent;

			if(currNext){
				currNext.prev = next;
				if(parent){
					var childs = parent.children;
					childs.splice(childs.lastIndexOf(currNext), 0, next);
				}
			} else if(parent){
				parent.children.push(next);
			}
		};

		exports.prepend = function(elem, prev){
			var parent = elem.parent;
			if(parent){
				var childs = parent.children;
				childs.splice(childs.lastIndexOf(elem), 0, prev);
			}

			if(elem.prev){
				elem.prev.next = prev;
			}
			
			prev.parent = parent;
			prev.prev = elem.prev;
			prev.next = elem;
			elem.prev = prev;
		};




	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

		var isTag = __webpack_require__(23).isTag;

		module.exports = {
			filter: filter,
			find: find,
			findOneChild: findOneChild,
			findOne: findOne,
			existsOne: existsOne,
			findAll: findAll
		};

		function filter(test, element, recurse, limit){
			if(!Array.isArray(element)) element = [element];

			if(typeof limit !== "number" || !isFinite(limit)){
				limit = Infinity;
			}
			return find(test, element, recurse !== false, limit);
		}

		function find(test, elems, recurse, limit){
			var result = [], childs;

			for(var i = 0, j = elems.length; i < j; i++){
				if(test(elems[i])){
					result.push(elems[i]);
					if(--limit <= 0) break;
				}

				childs = elems[i].children;
				if(recurse && childs && childs.length > 0){
					childs = find(test, childs, recurse, limit);
					result = result.concat(childs);
					limit -= childs.length;
					if(limit <= 0) break;
				}
			}

			return result;
		}

		function findOneChild(test, elems){
			for(var i = 0, l = elems.length; i < l; i++){
				if(test(elems[i])) return elems[i];
			}

			return null;
		}

		function findOne(test, elems){
			var elem = null;

			for(var i = 0, l = elems.length; i < l && !elem; i++){
				if(!isTag(elems[i])){
					continue;
				} else if(test(elems[i])){
					elem = elems[i];
				} else if(elems[i].children.length > 0){
					elem = findOne(test, elems[i].children);
				}
			}

			return elem;
		}

		function existsOne(test, elems){
			for(var i = 0, l = elems.length; i < l; i++){
				if(
					isTag(elems[i]) && (
						test(elems[i]) || (
							elems[i].children.length > 0 &&
							existsOne(test, elems[i].children)
						)
					)
				){
					return true;
				}
			}

			return false;
		}

		function findAll(test, elems){
			var result = [];
			for(var i = 0, j = elems.length; i < j; i++){
				if(!isTag(elems[i])) continue;
				if(test(elems[i])) result.push(elems[i]);

				if(elems[i].children.length > 0){
					result = result.concat(findAll(test, elems[i].children));
				}
			}
			return result;
		}


	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

		var ElementType = __webpack_require__(23);
		var isTag = exports.isTag = ElementType.isTag;

		exports.testElement = function(options, element){
			for(var key in options){
				if(!options.hasOwnProperty(key));
				else if(key === "tag_name"){
					if(!isTag(element) || !options.tag_name(element.name)){
						return false;
					}
				} else if(key === "tag_type"){
					if(!options.tag_type(element.type)) return false;
				} else if(key === "tag_contains"){
					if(isTag(element) || !options.tag_contains(element.data)){
						return false;
					}
				} else if(!element.attribs || !options[key](element.attribs[key])){
					return false;
				}
			}
			return true;
		};

		var Checks = {
			tag_name: function(name){
				if(typeof name === "function"){
					return function(elem){ return isTag(elem) && name(elem.name); };
				} else if(name === "*"){
					return isTag;
				} else {
					return function(elem){ return isTag(elem) && elem.name === name; };
				}
			},
			tag_type: function(type){
				if(typeof type === "function"){
					return function(elem){ return type(elem.type); };
				} else {
					return function(elem){ return elem.type === type; };
				}
			},
			tag_contains: function(data){
				if(typeof data === "function"){
					return function(elem){ return !isTag(elem) && data(elem.data); };
				} else {
					return function(elem){ return !isTag(elem) && elem.data === data; };
				}
			}
		};

		function getAttribCheck(attrib, value){
			if(typeof value === "function"){
				return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
			} else {
				return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
			}
		}

		function combineFuncs(a, b){
			return function(elem){
				return a(elem) || b(elem);
			};
		}

		exports.getElements = function(options, element, recurse, limit){
			var funcs = Object.keys(options).map(function(key){
				var value = options[key];
				return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
			});

			return funcs.length === 0 ? [] : this.filter(
				funcs.reduce(combineFuncs),
				element, recurse, limit
			);
		};

		exports.getElementById = function(id, element, recurse){
			if(!Array.isArray(element)) element = [element];
			return this.findOne(getAttribCheck("id", id), element, recurse !== false);
		};

		exports.getElementsByTagName = function(name, element, recurse, limit){
			return this.filter(Checks.tag_name(name), element, recurse, limit);
		};

		exports.getElementsByTagType = function(type, element, recurse, limit){
			return this.filter(Checks.tag_type(type), element, recurse, limit);
		};


	/***/ },
	/* 63 */
	/***/ function(module, exports) {

		// removeSubsets
		// Given an array of nodes, remove any member that is contained by another.
		exports.removeSubsets = function(nodes) {
			var idx = nodes.length, node, ancestor, replace;

			// Check if each node (or one of its ancestors) is already contained in the
			// array.
			while (--idx > -1) {
				node = ancestor = nodes[idx];

				// Temporarily remove the node under consideration
				nodes[idx] = null;
				replace = true;

				while (ancestor) {
					if (nodes.indexOf(ancestor) > -1) {
						replace = false;
						nodes.splice(idx, 1);
						break;
					}
					ancestor = ancestor.parent;
				}

				// If the node has been found to be unique, re-insert it.
				if (replace) {
					nodes[idx] = node;
				}
			}

			return nodes;
		};

		// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
		var POSITION = {
			DISCONNECTED: 1,
			PRECEDING: 2,
			FOLLOWING: 4,
			CONTAINS: 8,
			CONTAINED_BY: 16
		};

		// Compare the position of one node against another node in any other document.
		// The return value is a bitmask with the following values:
		//
		// document order:
		// > There is an ordering, document order, defined on all the nodes in the
		// > document corresponding to the order in which the first character of the
		// > XML representation of each node occurs in the XML representation of the
		// > document after expansion of general entities. Thus, the document element
		// > node will be the first node. Element nodes occur before their children.
		// > Thus, document order orders element nodes in order of the occurrence of
		// > their start-tag in the XML (after expansion of entities). The attribute
		// > nodes of an element occur after the element and before its children. The
		// > relative order of attribute nodes is implementation-dependent./
		// Source:
		// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
		//
		// @argument {Node} nodaA The first node to use in the comparison
		// @argument {Node} nodeB The second node to use in the comparison
		//
		// @return {Number} A bitmask describing the input nodes' relative position.
		//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
		//         a description of these values.
		var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
			var aParents = [];
			var bParents = [];
			var current, sharedParent, siblings, aSibling, bSibling, idx;

			if (nodeA === nodeB) {
				return 0;
			}

			current = nodeA;
			while (current) {
				aParents.unshift(current);
				current = current.parent;
			}
			current = nodeB;
			while (current) {
				bParents.unshift(current);
				current = current.parent;
			}

			idx = 0;
			while (aParents[idx] === bParents[idx]) {
				idx++;
			}

			if (idx === 0) {
				return POSITION.DISCONNECTED;
			}

			sharedParent = aParents[idx - 1];
			siblings = sharedParent.children;
			aSibling = aParents[idx];
			bSibling = bParents[idx];

			if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
				if (sharedParent === nodeB) {
					return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
				}
				return POSITION.FOLLOWING;
			} else {
				if (sharedParent === nodeA) {
					return POSITION.PRECEDING | POSITION.CONTAINS;
				}
				return POSITION.PRECEDING;
			}
		};

		// Sort an array of nodes based on their relative position in the document and
		// remove any duplicate nodes. If the array contains nodes that do not belong
		// to the same document, sort order is unspecified.
		//
		// @argument {Array} nodes Array of DOM nodes
		//
		// @returns {Array} collection of unique nodes, sorted in document order
		exports.uniqueSort = function(nodes) {
			var idx = nodes.length, node, position;

			nodes = nodes.slice();

			while (--idx > -1) {
				node = nodes[idx];
				position = nodes.indexOf(node);
				if (position > -1 && position < idx) {
					nodes.splice(idx, 1);
				}
			}
			nodes.sort(function(a, b) {
				var relative = comparePos(a, b);
				if (relative & POSITION.PRECEDING) {
					return -1;
				} else if (relative & POSITION.FOLLOWING) {
					return 1;
				}
				return 0;
			});

			return nodes;
		};


	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = CollectingHandler;

		function CollectingHandler(cbs){
			this._cbs = cbs || {};
			this.events = [];
		}

		var EVENTS = __webpack_require__(14).EVENTS;
		Object.keys(EVENTS).forEach(function(name){
			if(EVENTS[name] === 0){
				name = "on" + name;
				CollectingHandler.prototype[name] = function(){
					this.events.push([name]);
					if(this._cbs[name]) this._cbs[name]();
				};
			} else if(EVENTS[name] === 1){
				name = "on" + name;
				CollectingHandler.prototype[name] = function(a){
					this.events.push([name, a]);
					if(this._cbs[name]) this._cbs[name](a);
				};
			} else if(EVENTS[name] === 2){
				name = "on" + name;
				CollectingHandler.prototype[name] = function(a, b){
					this.events.push([name, a, b]);
					if(this._cbs[name]) this._cbs[name](a, b);
				};
			} else {
				throw Error("wrong number of arguments");
			}
		});

		CollectingHandler.prototype.onreset = function(){
			this.events = [];
			if(this._cbs.onreset) this._cbs.onreset();
		};

		CollectingHandler.prototype.restart = function(){
			if(this._cbs.onreset) this._cbs.onreset();

			for(var i = 0, len = this.events.length; i < len; i++){
				if(this._cbs[this.events[i][0]]){

					var num = this.events[i].length;

					if(num === 1){
						this._cbs[this.events[i][0]]();
					} else if(num === 2){
						this._cbs[this.events[i][0]](this.events[i][1]);
					} else {
						this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
					}
				}
			}
		};


	/***/ },
	/* 65 */
	/***/ function(module, exports) {

		/**
		 * Escape a string to be safe to use in XML content.
		 * CC-BY-SA: hgoebl
		 * https://stackoverflow.com/questions/7918868/
		 * how-to-escape-xml-entities-in-javascript
		 * @param {!string} unsafe Unsafe string.
		 * @return {string} XML-escaped string, for use within an XML tag.
		 */
		var xmlEscape = function (unsafe) {
		    return unsafe.replace(/[<>&'"]/g, function (c) {
		        switch (c) {
		        case '<': return '&lt;';
		        case '>': return '&gt;';
		        case '&': return '&amp;';
		        case '\'': return '&apos;';
		        case '"': return '&quot;';
		        }
		    });
		};

		module.exports = xmlEscape;


	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

		var Timer = __webpack_require__(8);

		function Clock () {
		    this._projectTimer = new Timer();
		    this._projectTimer.start();
		}

		Clock.prototype.projectTimer = function () {
		    return this._projectTimer.timeElapsed() / 1000;
		};

		Clock.prototype.resetProjectTimer = function () {
		    this._projectTimer.start();
		};

		module.exports = Clock;


	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Keyboard (runtime) {
		    /**
		     * List of currently pressed keys.
		     * @type{Array.<number>}
		     */
		    this._keysPressed = [];
		    /**
		     * Reference to the owning Runtime.
		     * Can be used, for example, to activate hats.
		     * @type{!Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Convert a Scratch key name to a DOM keyCode.
		 * @param {Any} keyName Scratch key argument.
		 * @return {number} Key code corresponding to a DOM event.
		 */
		Keyboard.prototype._scratchKeyToKeyCode = function (keyName) {
		    if (typeof keyName == 'number') {
		        // Key codes placed in with number blocks.
		        return keyName;
		    }
		    var keyString = Cast.toString(keyName);
		    switch (keyString) {
		    case 'space': return 32;
		    case 'left arrow': return 37;
		    case 'up arrow': return 38;
		    case 'right arrow': return 39;
		    case 'down arrow': return 40;
		    // @todo: Consider adding other special keys here.
		    }
		    // Keys reported by DOM keyCode are upper case.
		    return keyString.toUpperCase().charCodeAt(0);
		};

		Keyboard.prototype._keyCodeToScratchKey = function (keyCode) {
		    if (keyCode >= 48 && keyCode <= 90) {
		        // Standard letter.
		        return String.fromCharCode(keyCode).toLowerCase();
		    }
		    switch (keyCode) {
		    case 32: return 'space';
		    case 37: return 'left arrow';
		    case 38: return 'up arrow';
		    case 39: return 'right arrow';
		    case 40: return 'down arrow';
		    }
		    return null;
		};

		Keyboard.prototype.postData = function (data) {
		    if (data.keyCode) {
		        var index = this._keysPressed.indexOf(data.keyCode);
		        if (data.isDown) {
		            // If not already present, add to the list.
		            if (index < 0) {
		                this._keysPressed.push(data.keyCode);
		            }
		            // Always trigger hats, even if it was already pressed.
		            this.runtime.startHats('event_whenkeypressed', {
		                'KEY_OPTION': this._keyCodeToScratchKey(data.keyCode)
		            });
		            this.runtime.startHats('event_whenkeypressed', {
		                'KEY_OPTION': 'any'
		            });
		        } else if (index > -1) {
		            // If already present, remove from the list.
		            this._keysPressed.splice(index, 1);
		        }
		    }
		};

		Keyboard.prototype.getKeyIsDown = function (key) {
		    if (key == 'any') {
		        return this._keysPressed.length > 0;
		    }
		    var keyCode = this._scratchKeyToKeyCode(key);
		    return this._keysPressed.indexOf(keyCode) > -1;
		};

		module.exports = Keyboard;


	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {

		var Color = __webpack_require__(69);

		function Cast () {}

		/**
		 * @fileoverview
		 * Utilities for casting and comparing Scratch data-types.
		 * Scratch behaves slightly differently from JavaScript in many respects,
		 * and these differences should be encapsulated below.
		 * For example, in Scratch, add(1, join("hello", world")) -> 1.
		 * This is because "hello world" is cast to 0.
		 * In JavaScript, 1 + Number("hello" + "world") would give you NaN.
		 * Use when coercing a value before computation.
		 */

		/**
		 * Scratch cast to number.
		 * Treats NaN as 0.
		 * In Scratch 2.0, this is captured by `interp.numArg.`
		 * @param {*} value Value to cast to number.
		 * @return {number} The Scratch-casted number value.
		 */
		Cast.toNumber = function (value) {
		    var n = Number(value);
		    if (isNaN(n)) {
		        // Scratch treats NaN as 0, when needed as a number.
		        // E.g., 0 + NaN -> 0.
		        return 0;
		    }
		    return n;
		};

		/**
		 * Scratch cast to boolean.
		 * In Scratch 2.0, this is captured by `interp.boolArg.`
		 * Treats some string values differently from JavaScript.
		 * @param {*} value Value to cast to boolean.
		 * @return {boolean} The Scratch-casted boolean value.
		 */
		Cast.toBoolean = function (value) {
		    // Already a boolean?
		    if (typeof value === 'boolean') {
		        return value;
		    }
		    if (typeof value === 'string') {
		        // These specific strings are treated as false in Scratch.
		        if ((value == '') ||
		            (value == '0') ||
		            (value.toLowerCase() == 'false')) {
		            return false;
		        }
		        // All other strings treated as true.
		        return true;
		    }
		    // Coerce other values and numbers.
		    return Boolean(value);
		};

		/**
		 * Scratch cast to string.
		 * @param {*} value Value to cast to string.
		 * @return {string} The Scratch-casted string value.
		 */
		Cast.toString = function (value) {
		    return String(value);
		};

		/**
		 * Cast any Scratch argument to an RGB color object to be used for the renderer.
		 * @param {*} value Value to convert to RGB color object.
		 * @return {Array.<number>} [r,g,b], values between 0-255.
		 */
		Cast.toRgbColorList = function (value) {
		    var color;
		    if (typeof value == 'string' && value.substring(0, 1) == '#') {
		        color = Color.hexToRgb(value);
		    } else {
		        color = Color.decimalToRgb(Cast.toNumber(value));
		    }
		    return [color.r, color.g, color.b];
		};

		/**
		 * Compare two values, using Scratch cast, case-insensitive string compare, etc.
		 * In Scratch 2.0, this is captured by `interp.compare.`
		 * @param {*} v1 First value to compare.
		 * @param {*} v2 Second value to compare.
		 * @returns {Number} Negative number if v1 < v2; 0 if equal; positive otherwise.
		 */
		Cast.compare = function (v1, v2) {
		    var n1 = Number(v1);
		    var n2 = Number(v2);
		    if (isNaN(n1) || isNaN(n2)) {
		        // At least one argument can't be converted to a number.
		        // Scratch compares strings as case insensitive.
		        var s1 = String(v1).toLowerCase();
		        var s2 = String(v2).toLowerCase();
		        return s1.localeCompare(s2);
		    } else {
		        // Compare as numbers.
		        return n1 - n2;
		    }
		};

		/**
		 * Determine if a Scratch argument number represents a round integer.
		 * @param {*} val Value to check.
		 * @return {boolean} True if number looks like an integer.
		 */
		Cast.isInt = function (val) {
		    // Values that are already numbers.
		    if (typeof val === 'number') {
		        if (isNaN(val)) { // NaN is considered an integer.
		            return true;
		        }
		        // True if it's "round" (e.g., 2.0 and 2).
		        return val == parseInt(val);
		    } else if (typeof val === 'boolean') {
		        // `True` and `false` always represent integer after Scratch cast.
		        return true;
		    } else if (typeof val === 'string') {
		        // If it contains a decimal point, don't consider it an int.
		        return val.indexOf('.') < 0;
		    }
		    return false;
		};

		Cast.LIST_INVALID = 'INVALID';
		Cast.LIST_ALL = 'ALL';
		/**
		 * Compute a 1-based index into a list, based on a Scratch argument.
		 * Two special cases may be returned:
		 * LIST_ALL: if the block is referring to all of the items in the list.
		 * LIST_INVALID: if the index was invalid in any way.
		 * @param {*} index Scratch arg, including 1-based numbers or special cases.
		 * @param {number} length Length of the list.
		 * @return {(number|string)} 1-based index for list, LIST_ALL, or LIST_INVALID.
		 */
		Cast.toListIndex = function (index, length) {
		    if (typeof index !== 'number') {
		        if (index == 'all') {
		            return Cast.LIST_ALL;
		        }
		        if (index == 'last') {
		            if (length > 0) {
		                return length;
		            }
		            return Cast.LIST_INVALID;
		        } else if (index == 'random' || index == 'any') {
		            if (length > 0) {
		                return 1 + Math.floor(Math.random() * length);
		            }
		            return Cast.LIST_INVALID;
		        }
		    }
		    index = Math.floor(Cast.toNumber(index));
		    if (index < 1 || index > length) {
		        return Cast.LIST_INVALID;
		    }
		    return index;
		};

		module.exports = Cast;


	/***/ },
	/* 69 */
	/***/ function(module, exports) {

		function Color () {}

		/**
		 * Convert a Scratch decimal color to a hex string, #RRGGBB.
		 * @param {number} decimal RGB color as a decimal.
		 * @return {string} RGB color as #RRGGBB hex string.
		 */
		Color.decimalToHex = function (decimal) {
		    if (decimal < 0) {
		        decimal += 0xFFFFFF + 1;
		    }
		    var hex = Number(decimal).toString(16);
		    hex = '#' + '000000'.substr(0, 6 - hex.length) + hex;
		    return hex;
		};

		/**
		 * Convert a Scratch decimal color to an RGB color object.
		 * @param {number} decimal RGB color as decimal.
		 * @returns {Object} {r: R, g: G, b: B}, values between 0-255
		 */
		Color.decimalToRgb = function (decimal) {
		    var r = (decimal >> 16) & 0xFF;
		    var g = (decimal >> 8) & 0xFF;
		    var b = decimal & 0xFF;
		    return {r: r, g: g, b: b};
		};

		/**
		 * Convert a hex color (e.g., F00, #03F, #0033FF) to an RGB color object.
		 * CC-BY-SA Tim Down:
		 * https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
		 * @param {!string} hex Hex representation of the color.
		 * @return {Object} {r: R, g: G, b: B}, 0-255, or null.
		 */
		Color.hexToRgb = function (hex) {
		    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
		    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
		        return r + r + g + g + b + b;
		    });
		    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
		    return result ? {
		        r: parseInt(result[1], 16),
		        g: parseInt(result[2], 16),
		        b: parseInt(result[3], 16)
		    } : null;
		};

		/**
		 * Convert an RGB color object to a hex color.
		 * @param {Object} rgb {r: R, g: G, b: B}, values between 0-255.
		 * @return {!string} Hex representation of the color.
		 */
		Color.rgbToHex = function (rgb) {
		    return Color.decimalToHex(Color.rgbToDecimal(rgb));
		};

		/**
		 * Convert an RGB color object to a Scratch decimal color.
		 * @param {Object} rgb {r: R, g: G, b: B}, values between 0-255.
		 * @return {!number} Number representing the color.
		 */
		Color.rgbToDecimal = function (rgb) {
		    return (rgb.r << 16) + (rgb.g << 8) + rgb.b;
		};

		/**
		* Convert a hex color (e.g., F00, #03F, #0033FF) to a decimal color number.
		* @param {!string} hex Hex representation of the color.
		* @return {!number} Number representing the color.
		*/
		Color.hexToDecimal = function (hex) {
		    return Color.rgbToDecimal(Color.hexToRgb(hex));
		};

		module.exports = Color;


	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

		var MathUtil = __webpack_require__(71);

		function Mouse (runtime) {
		    this._x = 0;
		    this._y = 0;
		    this._isDown = false;
		    /**
		     * Reference to the owning Runtime.
		     * Can be used, for example, to activate hats.
		     * @type{!Runtime}
		     */
		    this.runtime = runtime;
		}

		Mouse.prototype.postData = function(data) {
		    if (data.x) {
		        this._x = data.x - data.canvasWidth / 2;
		    }
		    if (data.y) {
		        this._y = data.y - data.canvasHeight / 2;
		    }
		    if (typeof data.isDown !== 'undefined') {
		        this._isDown = data.isDown;
		        if (this._isDown) {
		            this._activateClickHats(data.x, data.y);
		        }
		    }
		};

		Mouse.prototype._activateClickHats = function (x, y) {
		    if (this.runtime.renderer) {
		        var drawableID = this.runtime.renderer.pick(x, y);
		        for (var i = 0; i < this.runtime.targets.length; i++) {
		            var target = this.runtime.targets[i];
		            if (target.hasOwnProperty('drawableID') &&
		                target.drawableID == drawableID) {
		                this.runtime.startHats('event_whenthisspriteclicked',
		                    null, target);
		                return;
		            }
		        }
		    }
		};

		Mouse.prototype.getX = function () {
		    return MathUtil.clamp(this._x, -240, 240);
		};

		Mouse.prototype.getY = function () {
		    return MathUtil.clamp(-this._y, -180, 180);
		};

		Mouse.prototype.getIsDown = function () {
		    return this._isDown;
		};

		module.exports = Mouse;


	/***/ },
	/* 71 */
	/***/ function(module, exports) {

		function MathUtil () {}

		/**
		 * Convert a value from degrees to radians.
		 * @param {!number} deg Value in degrees.
		 * @return {!number} Equivalent value in radians.
		 */
		MathUtil.degToRad = function (deg) {
		    return deg * Math.PI / 180;
		};

		/**
		 * Convert a value from radians to degrees.
		 * @param {!number} rad Value in radians.
		 * @return {!number} Equivalent value in degrees.
		 */
		MathUtil.radToDeg = function (rad) {
		    return rad * 180 / Math.PI;
		};

		/**
		 * Clamp a number between two limits.
		 * If n < min, return min. If n > max, return max. Else, return n.
		 * @param {!number} n Number to clamp.
		 * @param {!number} min Minimum limit.
		 * @param {!number} max Maximum limit.
		 * @return {!number} Value of n clamped to min and max.
		 */
		MathUtil.clamp = function (n, min, max) {
		    return Math.min(Math.max(n, min), max);
		};

		/**
		 * Keep a number between two limits, wrapping "extra" into the range.
		 * e.g., wrapClamp(7, 1, 5) == 2
		 * wrapClamp(0, 1, 5) == 5
		 * wrapClamp(-11, -10, 6) == 6, etc.
		 * @param {!number} n Number to wrap.
		 * @param {!number} min Minimum limit.
		 * @param {!number} max Maximum limit.
		 * @return {!number} Value of n wrapped between min and max.
		 */
		MathUtil.wrapClamp = function (n, min, max) {
		    var range = (max - min) + 1;
		    return n - Math.floor((n - min) / range) * range;
		};

		module.exports = MathUtil;


	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);
		var Promise = __webpack_require__(73);

		function Scratch3ControlBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3ControlBlocks.prototype.getPrimitives = function() {
		    return {
		        'control_repeat': this.repeat,
		        'control_repeat_until': this.repeatUntil,
		        'control_forever': this.forever,
		        'control_wait': this.wait,
		        'control_wait_until': this.waitUntil,
		        'control_if': this.if,
		        'control_if_else': this.ifElse,
		        'control_stop': this.stop,
		        'control_create_clone_of_menu': this.createCloneMenu,
		        'control_create_clone_of': this.createClone,
		        'control_delete_this_clone': this.deleteClone
		    };
		};

		Scratch3ControlBlocks.prototype.getHats = function () {
		    return {
		        'control_start_as_clone': {
		            restartExistingThreads: false
		        }
		    };
		};

		Scratch3ControlBlocks.prototype.repeat = function(args, util) {
		    var times = Math.floor(Cast.toNumber(args.TIMES));
		    // Initialize loop
		    if (util.stackFrame.loopCounter === undefined) {
		        util.stackFrame.loopCounter = times;
		    }
		    // Only execute once per frame.
		    // When the branch finishes, `repeat` will be executed again and
		    // the second branch will be taken, yielding for the rest of the frame.
		    if (!util.stackFrame.executedInFrame) {
		        util.stackFrame.executedInFrame = true;
		        // Decrease counter
		        util.stackFrame.loopCounter--;
		        // If we still have some left, start the branch.
		        if (util.stackFrame.loopCounter >= 0) {
		            util.startBranch();
		        }
		    } else {
		        util.stackFrame.executedInFrame = false;
		        util.yieldFrame();
		    }
		};

		Scratch3ControlBlocks.prototype.repeatUntil = function(args, util) {
		    var condition = Cast.toBoolean(args.CONDITION);
		    // Only execute once per frame.
		    // When the branch finishes, `repeat` will be executed again and
		    // the second branch will be taken, yielding for the rest of the frame.
		    if (!util.stackFrame.executedInFrame) {
		        util.stackFrame.executedInFrame = true;
		        // If the condition is true, start the branch.
		        if (!condition) {
		            util.startBranch();
		        }
		    } else {
		        util.stackFrame.executedInFrame = false;
		        util.yieldFrame();
		    }
		};

		Scratch3ControlBlocks.prototype.waitUntil = function(args, util) {
		    var condition = Cast.toBoolean(args.CONDITION);
		    // Only execute once per frame.
		    if (!condition) {
		        util.yieldFrame();
		    }
		};

		Scratch3ControlBlocks.prototype.forever = function(args, util) {
		    // Only execute once per frame.
		    // When the branch finishes, `forever` will be executed again and
		    // the second branch will be taken, yielding for the rest of the frame.
		    if (!util.stackFrame.executedInFrame) {
		        util.stackFrame.executedInFrame = true;
		        util.startBranch();
		    } else {
		        util.stackFrame.executedInFrame = false;
		        util.yieldFrame();
		    }
		};

		Scratch3ControlBlocks.prototype.wait = function(args) {
		    var duration = Cast.toNumber(args.DURATION);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            resolve();
		        }, 1000 * duration);
		    });
		};

		Scratch3ControlBlocks.prototype.if = function(args, util) {
		    var condition = Cast.toBoolean(args.CONDITION);
		    // Only execute one time. `if` will be returned to
		    // when the branch finishes, but it shouldn't execute again.
		    if (util.stackFrame.executedInFrame === undefined) {
		        util.stackFrame.executedInFrame = true;
		        if (condition) {
		            util.startBranch();
		        }
		    }
		};

		Scratch3ControlBlocks.prototype.ifElse = function(args, util) {
		    var condition = Cast.toBoolean(args.CONDITION);
		    // Only execute one time. `ifElse` will be returned to
		    // when the branch finishes, but it shouldn't execute again.
		    if (util.stackFrame.executedInFrame === undefined) {
		        util.stackFrame.executedInFrame = true;
		        if (condition) {
		            util.startBranch(1);
		        } else {
		            util.startBranch(2);
		        }
		    }
		};

		Scratch3ControlBlocks.prototype.stop = function(args, util) {
		    var option = args.STOP_OPTION;
		    if (option == 'all') {
		        util.stopAll();
		    } else if (option == 'other scripts in sprite' ||
		        option == 'other scripts in stage') {
		        util.stopOtherTargetThreads();
		    } else if (option == 'this script') {
		        util.stopThread();
		    }
		};

		// @todo (GH-146): remove.
		Scratch3ControlBlocks.prototype.createCloneMenu = function (args) {
		    return args.CLONE_OPTION;
		};

		Scratch3ControlBlocks.prototype.createClone = function (args, util) {
		    var cloneTarget;
		    if (args.CLONE_OPTION == '_myself_') {
		        cloneTarget = util.target;
		    } else {
		        cloneTarget = this.runtime.getSpriteTargetByName(args.CLONE_OPTION);
		    }
		    if (!cloneTarget) {
		        return;
		    }
		    var newClone = cloneTarget.makeClone();
		    if (newClone) {
		        this.runtime.targets.push(newClone);
		    }
		};

		Scratch3ControlBlocks.prototype.deleteClone = function (args, util) {
		    if (util.target.isOriginal) return;
		    this.runtime.disposeTarget(util.target);
		    this.runtime.stopForTarget(util.target);
		};

		module.exports = Scratch3ControlBlocks;


	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		module.exports = __webpack_require__(74)


	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		module.exports = __webpack_require__(75);
		__webpack_require__(77);
		__webpack_require__(78);
		__webpack_require__(79);
		__webpack_require__(80);
		__webpack_require__(82);


	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var asap = __webpack_require__(76);

		function noop() {}

		// States:
		//
		// 0 - pending
		// 1 - fulfilled with _value
		// 2 - rejected with _value
		// 3 - adopted the state of another promise, _value
		//
		// once the state is no longer pending (0) it is immutable

		// All `_` prefixed properties will be reduced to `_{random number}`
		// at build time to obfuscate them and discourage their use.
		// We don't use symbols or Object.defineProperty to fully hide them
		// because the performance isn't good enough.


		// to avoid using try/catch inside critical functions, we
		// extract them to here.
		var LAST_ERROR = null;
		var IS_ERROR = {};
		function getThen(obj) {
		  try {
		    return obj.then;
		  } catch (ex) {
		    LAST_ERROR = ex;
		    return IS_ERROR;
		  }
		}

		function tryCallOne(fn, a) {
		  try {
		    return fn(a);
		  } catch (ex) {
		    LAST_ERROR = ex;
		    return IS_ERROR;
		  }
		}
		function tryCallTwo(fn, a, b) {
		  try {
		    fn(a, b);
		  } catch (ex) {
		    LAST_ERROR = ex;
		    return IS_ERROR;
		  }
		}

		module.exports = Promise;

		function Promise(fn) {
		  if (typeof this !== 'object') {
		    throw new TypeError('Promises must be constructed via new');
		  }
		  if (typeof fn !== 'function') {
		    throw new TypeError('not a function');
		  }
		  this._45 = 0;
		  this._81 = 0;
		  this._65 = null;
		  this._54 = null;
		  if (fn === noop) return;
		  doResolve(fn, this);
		}
		Promise._10 = null;
		Promise._97 = null;
		Promise._61 = noop;

		Promise.prototype.then = function(onFulfilled, onRejected) {
		  if (this.constructor !== Promise) {
		    return safeThen(this, onFulfilled, onRejected);
		  }
		  var res = new Promise(noop);
		  handle(this, new Handler(onFulfilled, onRejected, res));
		  return res;
		};

		function safeThen(self, onFulfilled, onRejected) {
		  return new self.constructor(function (resolve, reject) {
		    var res = new Promise(noop);
		    res.then(resolve, reject);
		    handle(self, new Handler(onFulfilled, onRejected, res));
		  });
		};
		function handle(self, deferred) {
		  while (self._81 === 3) {
		    self = self._65;
		  }
		  if (Promise._10) {
		    Promise._10(self);
		  }
		  if (self._81 === 0) {
		    if (self._45 === 0) {
		      self._45 = 1;
		      self._54 = deferred;
		      return;
		    }
		    if (self._45 === 1) {
		      self._45 = 2;
		      self._54 = [self._54, deferred];
		      return;
		    }
		    self._54.push(deferred);
		    return;
		  }
		  handleResolved(self, deferred);
		}

		function handleResolved(self, deferred) {
		  asap(function() {
		    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
		    if (cb === null) {
		      if (self._81 === 1) {
		        resolve(deferred.promise, self._65);
		      } else {
		        reject(deferred.promise, self._65);
		      }
		      return;
		    }
		    var ret = tryCallOne(cb, self._65);
		    if (ret === IS_ERROR) {
		      reject(deferred.promise, LAST_ERROR);
		    } else {
		      resolve(deferred.promise, ret);
		    }
		  });
		}
		function resolve(self, newValue) {
		  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
		  if (newValue === self) {
		    return reject(
		      self,
		      new TypeError('A promise cannot be resolved with itself.')
		    );
		  }
		  if (
		    newValue &&
		    (typeof newValue === 'object' || typeof newValue === 'function')
		  ) {
		    var then = getThen(newValue);
		    if (then === IS_ERROR) {
		      return reject(self, LAST_ERROR);
		    }
		    if (
		      then === self.then &&
		      newValue instanceof Promise
		    ) {
		      self._81 = 3;
		      self._65 = newValue;
		      finale(self);
		      return;
		    } else if (typeof then === 'function') {
		      doResolve(then.bind(newValue), self);
		      return;
		    }
		  }
		  self._81 = 1;
		  self._65 = newValue;
		  finale(self);
		}

		function reject(self, newValue) {
		  self._81 = 2;
		  self._65 = newValue;
		  if (Promise._97) {
		    Promise._97(self, newValue);
		  }
		  finale(self);
		}
		function finale(self) {
		  if (self._45 === 1) {
		    handle(self, self._54);
		    self._54 = null;
		  }
		  if (self._45 === 2) {
		    for (var i = 0; i < self._54.length; i++) {
		      handle(self, self._54[i]);
		    }
		    self._54 = null;
		  }
		}

		function Handler(onFulfilled, onRejected, promise){
		  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
		  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
		  this.promise = promise;
		}

		/**
		 * Take a potentially misbehaving resolver function and make sure
		 * onFulfilled and onRejected are only called once.
		 *
		 * Makes no guarantees about asynchrony.
		 */
		function doResolve(fn, promise) {
		  var done = false;
		  var res = tryCallTwo(fn, function (value) {
		    if (done) return;
		    done = true;
		    resolve(promise, value);
		  }, function (reason) {
		    if (done) return;
		    done = true;
		    reject(promise, reason);
		  })
		  if (!done && res === IS_ERROR) {
		    done = true;
		    reject(promise, LAST_ERROR);
		  }
		}


	/***/ },
	/* 76 */
	/***/ function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {"use strict";

		// Use the fastest means possible to execute a task in its own turn, with
		// priority over other events including IO, animation, reflow, and redraw
		// events in browsers.
		//
		// An exception thrown by a task will permanently interrupt the processing of
		// subsequent tasks. The higher level `asap` function ensures that if an
		// exception is thrown by a task, that the task queue will continue flushing as
		// soon as possible, but if you use `rawAsap` directly, you are responsible to
		// either ensure that no exceptions are thrown from your task, or to manually
		// call `rawAsap.requestFlush` if an exception is thrown.
		module.exports = rawAsap;
		function rawAsap(task) {
		    if (!queue.length) {
		        requestFlush();
		        flushing = true;
		    }
		    // Equivalent to push, but avoids a function call.
		    queue[queue.length] = task;
		}

		var queue = [];
		// Once a flush has been requested, no further calls to `requestFlush` are
		// necessary until the next `flush` completes.
		var flushing = false;
		// `requestFlush` is an implementation-specific method that attempts to kick
		// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
		// the event queue before yielding to the browser's own event loop.
		var requestFlush;
		// The position of the next task to execute in the task queue. This is
		// preserved between calls to `flush` so that it can be resumed if
		// a task throws an exception.
		var index = 0;
		// If a task schedules additional tasks recursively, the task queue can grow
		// unbounded. To prevent memory exhaustion, the task queue will periodically
		// truncate already-completed tasks.
		var capacity = 1024;

		// The flush function processes all tasks that have been scheduled with
		// `rawAsap` unless and until one of those tasks throws an exception.
		// If a task throws an exception, `flush` ensures that its state will remain
		// consistent and will resume where it left off when called again.
		// However, `flush` does not make any arrangements to be called again if an
		// exception is thrown.
		function flush() {
		    while (index < queue.length) {
		        var currentIndex = index;
		        // Advance the index before calling the task. This ensures that we will
		        // begin flushing on the next task the task throws an error.
		        index = index + 1;
		        queue[currentIndex].call();
		        // Prevent leaking memory for long chains of recursive calls to `asap`.
		        // If we call `asap` within tasks scheduled by `asap`, the queue will
		        // grow, but to avoid an O(n) walk for every task we execute, we don't
		        // shift tasks off the queue after they have been executed.
		        // Instead, we periodically shift 1024 tasks off the queue.
		        if (index > capacity) {
		            // Manually shift all values starting at the index back to the
		            // beginning of the queue.
		            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
		                queue[scan] = queue[scan + index];
		            }
		            queue.length -= index;
		            index = 0;
		        }
		    }
		    queue.length = 0;
		    index = 0;
		    flushing = false;
		}

		// `requestFlush` is implemented using a strategy based on data collected from
		// every available SauceLabs Selenium web driver worker at time of writing.
		// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

		// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
		// have WebKitMutationObserver but not un-prefixed MutationObserver.
		// Must use `global` or `self` instead of `window` to work in both frames and web
		// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

		/* globals self */
		var scope = typeof global !== "undefined" ? global : self;
		var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

		// MutationObservers are desirable because they have high priority and work
		// reliably everywhere they are implemented.
		// They are implemented in all modern browsers.
		//
		// - Android 4-4.3
		// - Chrome 26-34
		// - Firefox 14-29
		// - Internet Explorer 11
		// - iPad Safari 6-7.1
		// - iPhone Safari 7-7.1
		// - Safari 6-7
		if (typeof BrowserMutationObserver === "function") {
		    requestFlush = makeRequestCallFromMutationObserver(flush);

		// MessageChannels are desirable because they give direct access to the HTML
		// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
		// 11-12, and in web workers in many engines.
		// Although message channels yield to any queued rendering and IO tasks, they
		// would be better than imposing the 4ms delay of timers.
		// However, they do not work reliably in Internet Explorer or Safari.

		// Internet Explorer 10 is the only browser that has setImmediate but does
		// not have MutationObservers.
		// Although setImmediate yields to the browser's renderer, it would be
		// preferrable to falling back to setTimeout since it does not have
		// the minimum 4ms penalty.
		// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
		// Desktop to a lesser extent) that renders both setImmediate and
		// MessageChannel useless for the purposes of ASAP.
		// https://github.com/kriskowal/q/issues/396

		// Timers are implemented universally.
		// We fall back to timers in workers in most engines, and in foreground
		// contexts in the following browsers.
		// However, note that even this simple case requires nuances to operate in a
		// broad spectrum of browsers.
		//
		// - Firefox 3-13
		// - Internet Explorer 6-9
		// - iPad Safari 4.3
		// - Lynx 2.8.7
		} else {
		    requestFlush = makeRequestCallFromTimer(flush);
		}

		// `requestFlush` requests that the high priority event queue be flushed as
		// soon as possible.
		// This is useful to prevent an error thrown in a task from stalling the event
		// queue if the exception handled by Node.js’s
		// `process.on("uncaughtException")` or by a domain.
		rawAsap.requestFlush = requestFlush;

		// To request a high priority event, we induce a mutation observer by toggling
		// the text of a text node between "1" and "-1".
		function makeRequestCallFromMutationObserver(callback) {
		    var toggle = 1;
		    var observer = new BrowserMutationObserver(callback);
		    var node = document.createTextNode("");
		    observer.observe(node, {characterData: true});
		    return function requestCall() {
		        toggle = -toggle;
		        node.data = toggle;
		    };
		}

		// The message channel technique was discovered by Malte Ubl and was the
		// original foundation for this library.
		// http://www.nonblocking.io/2011/06/windownexttick.html

		// Safari 6.0.5 (at least) intermittently fails to create message ports on a
		// page's first load. Thankfully, this version of Safari supports
		// MutationObservers, so we don't need to fall back in that case.

		// function makeRequestCallFromMessageChannel(callback) {
		//     var channel = new MessageChannel();
		//     channel.port1.onmessage = callback;
		//     return function requestCall() {
		//         channel.port2.postMessage(0);
		//     };
		// }

		// For reasons explained above, we are also unable to use `setImmediate`
		// under any circumstances.
		// Even if we were, there is another bug in Internet Explorer 10.
		// It is not sufficient to assign `setImmediate` to `requestFlush` because
		// `setImmediate` must be called *by name* and therefore must be wrapped in a
		// closure.
		// Never forget.

		// function makeRequestCallFromSetImmediate(callback) {
		//     return function requestCall() {
		//         setImmediate(callback);
		//     };
		// }

		// Safari 6.0 has a problem where timers will get lost while the user is
		// scrolling. This problem does not impact ASAP because Safari 6.0 supports
		// mutation observers, so that implementation is used instead.
		// However, if we ever elect to use timers in Safari, the prevalent work-around
		// is to add a scroll event listener that calls for a flush.

		// `setTimeout` does not call the passed callback if the delay is less than
		// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
		// even then.

		function makeRequestCallFromTimer(callback) {
		    return function requestCall() {
		        // We dispatch a timeout with a specified delay of 0 for engines that
		        // can reliably accommodate that request. This will usually be snapped
		        // to a 4 milisecond delay, but once we're flushing, there's no delay
		        // between events.
		        var timeoutHandle = setTimeout(handleTimer, 0);
		        // However, since this timer gets frequently dropped in Firefox
		        // workers, we enlist an interval handle that will try to fire
		        // an event 20 times per second until it succeeds.
		        var intervalHandle = setInterval(handleTimer, 50);

		        function handleTimer() {
		            // Whichever timer succeeds will cancel both timers and
		            // execute the callback.
		            clearTimeout(timeoutHandle);
		            clearInterval(intervalHandle);
		            callback();
		        }
		    };
		}

		// This is for `asap.js` only.
		// Its name will be periodically randomized to break any code that depends on
		// its existence.
		rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

		// ASAP was originally a nextTick shim included in Q. This was factored out
		// into this ASAP package. It was later adapted to RSVP which made further
		// amendments. These decisions, particularly to marginalize MessageChannel and
		// to capture the MutationObserver implementation in a closure, were integrated
		// back into ASAP proper.
		// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var Promise = __webpack_require__(75);

		module.exports = Promise;
		Promise.prototype.done = function (onFulfilled, onRejected) {
		  var self = arguments.length ? this.then.apply(this, arguments) : this;
		  self.then(null, function (err) {
		    setTimeout(function () {
		      throw err;
		    }, 0);
		  });
		};


	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var Promise = __webpack_require__(75);

		module.exports = Promise;
		Promise.prototype['finally'] = function (f) {
		  return this.then(function (value) {
		    return Promise.resolve(f()).then(function () {
		      return value;
		    });
		  }, function (err) {
		    return Promise.resolve(f()).then(function () {
		      throw err;
		    });
		  });
		};


	/***/ },
	/* 79 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		//This file contains the ES6 extensions to the core Promises/A+ API

		var Promise = __webpack_require__(75);

		module.exports = Promise;

		/* Static Functions */

		var TRUE = valuePromise(true);
		var FALSE = valuePromise(false);
		var NULL = valuePromise(null);
		var UNDEFINED = valuePromise(undefined);
		var ZERO = valuePromise(0);
		var EMPTYSTRING = valuePromise('');

		function valuePromise(value) {
		  var p = new Promise(Promise._61);
		  p._81 = 1;
		  p._65 = value;
		  return p;
		}
		Promise.resolve = function (value) {
		  if (value instanceof Promise) return value;

		  if (value === null) return NULL;
		  if (value === undefined) return UNDEFINED;
		  if (value === true) return TRUE;
		  if (value === false) return FALSE;
		  if (value === 0) return ZERO;
		  if (value === '') return EMPTYSTRING;

		  if (typeof value === 'object' || typeof value === 'function') {
		    try {
		      var then = value.then;
		      if (typeof then === 'function') {
		        return new Promise(then.bind(value));
		      }
		    } catch (ex) {
		      return new Promise(function (resolve, reject) {
		        reject(ex);
		      });
		    }
		  }
		  return valuePromise(value);
		};

		Promise.all = function (arr) {
		  var args = Array.prototype.slice.call(arr);

		  return new Promise(function (resolve, reject) {
		    if (args.length === 0) return resolve([]);
		    var remaining = args.length;
		    function res(i, val) {
		      if (val && (typeof val === 'object' || typeof val === 'function')) {
		        if (val instanceof Promise && val.then === Promise.prototype.then) {
		          while (val._81 === 3) {
		            val = val._65;
		          }
		          if (val._81 === 1) return res(i, val._65);
		          if (val._81 === 2) reject(val._65);
		          val.then(function (val) {
		            res(i, val);
		          }, reject);
		          return;
		        } else {
		          var then = val.then;
		          if (typeof then === 'function') {
		            var p = new Promise(then.bind(val));
		            p.then(function (val) {
		              res(i, val);
		            }, reject);
		            return;
		          }
		        }
		      }
		      args[i] = val;
		      if (--remaining === 0) {
		        resolve(args);
		      }
		    }
		    for (var i = 0; i < args.length; i++) {
		      res(i, args[i]);
		    }
		  });
		};

		Promise.reject = function (value) {
		  return new Promise(function (resolve, reject) {
		    reject(value);
		  });
		};

		Promise.race = function (values) {
		  return new Promise(function (resolve, reject) {
		    values.forEach(function(value){
		      Promise.resolve(value).then(resolve, reject);
		    });
		  });
		};

		/* Prototype Methods */

		Promise.prototype['catch'] = function (onRejected) {
		  return this.then(null, onRejected);
		};


	/***/ },
	/* 80 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		// This file contains then/promise specific extensions that are only useful
		// for node.js interop

		var Promise = __webpack_require__(75);
		var asap = __webpack_require__(81);

		module.exports = Promise;

		/* Static Functions */

		Promise.denodeify = function (fn, argumentCount) {
		  if (
		    typeof argumentCount === 'number' && argumentCount !== Infinity
		  ) {
		    return denodeifyWithCount(fn, argumentCount);
		  } else {
		    return denodeifyWithoutCount(fn);
		  }
		}

		var callbackFn = (
		  'function (err, res) {' +
		  'if (err) { rj(err); } else { rs(res); }' +
		  '}'
		);
		function denodeifyWithCount(fn, argumentCount) {
		  var args = [];
		  for (var i = 0; i < argumentCount; i++) {
		    args.push('a' + i);
		  }
		  var body = [
		    'return function (' + args.join(',') + ') {',
		    'var self = this;',
		    'return new Promise(function (rs, rj) {',
		    'var res = fn.call(',
		    ['self'].concat(args).concat([callbackFn]).join(','),
		    ');',
		    'if (res &&',
		    '(typeof res === "object" || typeof res === "function") &&',
		    'typeof res.then === "function"',
		    ') {rs(res);}',
		    '});',
		    '};'
		  ].join('');
		  return Function(['Promise', 'fn'], body)(Promise, fn);
		}
		function denodeifyWithoutCount(fn) {
		  var fnLength = Math.max(fn.length - 1, 3);
		  var args = [];
		  for (var i = 0; i < fnLength; i++) {
		    args.push('a' + i);
		  }
		  var body = [
		    'return function (' + args.join(',') + ') {',
		    'var self = this;',
		    'var args;',
		    'var argLength = arguments.length;',
		    'if (arguments.length > ' + fnLength + ') {',
		    'args = new Array(arguments.length + 1);',
		    'for (var i = 0; i < arguments.length; i++) {',
		    'args[i] = arguments[i];',
		    '}',
		    '}',
		    'return new Promise(function (rs, rj) {',
		    'var cb = ' + callbackFn + ';',
		    'var res;',
		    'switch (argLength) {',
		    args.concat(['extra']).map(function (_, index) {
		      return (
		        'case ' + (index) + ':' +
		        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
		        'break;'
		      );
		    }).join(''),
		    'default:',
		    'args[argLength] = cb;',
		    'res = fn.apply(self, args);',
		    '}',
		    
		    'if (res &&',
		    '(typeof res === "object" || typeof res === "function") &&',
		    'typeof res.then === "function"',
		    ') {rs(res);}',
		    '});',
		    '};'
		  ].join('');

		  return Function(
		    ['Promise', 'fn'],
		    body
		  )(Promise, fn);
		}

		Promise.nodeify = function (fn) {
		  return function () {
		    var args = Array.prototype.slice.call(arguments);
		    var callback =
		      typeof args[args.length - 1] === 'function' ? args.pop() : null;
		    var ctx = this;
		    try {
		      return fn.apply(this, arguments).nodeify(callback, ctx);
		    } catch (ex) {
		      if (callback === null || typeof callback == 'undefined') {
		        return new Promise(function (resolve, reject) {
		          reject(ex);
		        });
		      } else {
		        asap(function () {
		          callback.call(ctx, ex);
		        })
		      }
		    }
		  }
		}

		Promise.prototype.nodeify = function (callback, ctx) {
		  if (typeof callback != 'function') return this;

		  this.then(function (value) {
		    asap(function () {
		      callback.call(ctx, null, value);
		    });
		  }, function (err) {
		    asap(function () {
		      callback.call(ctx, err);
		    });
		  });
		}


	/***/ },
	/* 81 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";

		// rawAsap provides everything we need except exception management.
		var rawAsap = __webpack_require__(76);
		// RawTasks are recycled to reduce GC churn.
		var freeTasks = [];
		// We queue errors to ensure they are thrown in right order (FIFO).
		// Array-as-queue is good enough here, since we are just dealing with exceptions.
		var pendingErrors = [];
		var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

		function throwFirstError() {
		    if (pendingErrors.length) {
		        throw pendingErrors.shift();
		    }
		}

		/**
		 * Calls a task as soon as possible after returning, in its own event, with priority
		 * over other events like animation, reflow, and repaint. An error thrown from an
		 * event will not interrupt, nor even substantially slow down the processing of
		 * other events, but will be rather postponed to a lower priority event.
		 * @param {{call}} task A callable object, typically a function that takes no
		 * arguments.
		 */
		module.exports = asap;
		function asap(task) {
		    var rawTask;
		    if (freeTasks.length) {
		        rawTask = freeTasks.pop();
		    } else {
		        rawTask = new RawTask();
		    }
		    rawTask.task = task;
		    rawAsap(rawTask);
		}

		// We wrap tasks with recyclable task objects.  A task object implements
		// `call`, just like a function.
		function RawTask() {
		    this.task = null;
		}

		// The sole purpose of wrapping the task is to catch the exception and recycle
		// the task object after its single use.
		RawTask.prototype.call = function () {
		    try {
		        this.task.call();
		    } catch (error) {
		        if (asap.onerror) {
		            // This hook exists purely for testing purposes.
		            // Its name will be periodically randomized to break any code that
		            // depends on its existence.
		            asap.onerror(error);
		        } else {
		            // In a web browser, exceptions are not fatal. However, to avoid
		            // slowing down the queue of pending tasks, we rethrow the error in a
		            // lower priority turn.
		            pendingErrors.push(error);
		            requestErrorThrow();
		        }
		    } finally {
		        this.task = null;
		        freeTasks[freeTasks.length] = this;
		    }
		};


	/***/ },
	/* 82 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var Promise = __webpack_require__(75);

		module.exports = Promise;
		Promise.enableSynchronous = function () {
		  Promise.prototype.isPending = function() {
		    return this.getState() == 0;
		  };

		  Promise.prototype.isFulfilled = function() {
		    return this.getState() == 1;
		  };

		  Promise.prototype.isRejected = function() {
		    return this.getState() == 2;
		  };

		  Promise.prototype.getValue = function () {
		    if (this._81 === 3) {
		      return this._65.getValue();
		    }

		    if (!this.isFulfilled()) {
		      throw new Error('Cannot get a value of an unfulfilled promise.');
		    }

		    return this._65;
		  };

		  Promise.prototype.getReason = function () {
		    if (this._81 === 3) {
		      return this._65.getReason();
		    }

		    if (!this.isRejected()) {
		      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
		    }

		    return this._65;
		  };

		  Promise.prototype.getState = function () {
		    if (this._81 === 3) {
		      return this._65.getState();
		    }
		    if (this._81 === -1 || this._81 === -2) {
		      return 0;
		    }

		    return this._81;
		  };
		};

		Promise.disableSynchronous = function() {
		  Promise.prototype.isPending = undefined;
		  Promise.prototype.isFulfilled = undefined;
		  Promise.prototype.isRejected = undefined;
		  Promise.prototype.getValue = undefined;
		  Promise.prototype.getReason = undefined;
		  Promise.prototype.getState = undefined;
		};


	/***/ },
	/* 83 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Scratch3EventBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3EventBlocks.prototype.getPrimitives = function() {
		    return {
		        'event_broadcast': this.broadcast,
		        'event_broadcastandwait': this.broadcastAndWait,
		        'event_whengreaterthan': this.hatGreaterThanPredicate
		    };
		};

		Scratch3EventBlocks.prototype.getHats = function () {
		    return {
		        'event_whenflagclicked': {
		            restartExistingThreads: true
		        },
		        'event_whenkeypressed': {
		            restartExistingThreads: false
		        },
		        'event_whenthisspriteclicked': {
		            restartExistingThreads: true
		        },
		        'event_whenbackdropswitchesto': {
		            restartExistingThreads: true
		        },
		        'event_whengreaterthan': {
		            restartExistingThreads: false,
		            edgeActivated: true
		        },
		        'event_whenbroadcastreceived': {
		            restartExistingThreads: true
		        }
		    };
		};

		Scratch3EventBlocks.prototype.hatGreaterThanPredicate = function (args, util) {
		    var option = Cast.toString(args.WHENGREATERTHANMENU).toLowerCase();
		    var value = Cast.toNumber(args.VALUE);
		    // @todo: Other cases :)
		    if (option == 'timer') {
		        return util.ioQuery('clock', 'projectTimer') > value;
		    }
		    return false;
		};

		Scratch3EventBlocks.prototype.broadcast = function(args, util) {
		    var broadcastOption = Cast.toString(args.BROADCAST_OPTION);
		    util.startHats('event_whenbroadcastreceived', {
		        'BROADCAST_OPTION': broadcastOption
		    });
		};

		Scratch3EventBlocks.prototype.broadcastAndWait = function (args, util) {
		    var broadcastOption = Cast.toString(args.BROADCAST_OPTION);
		    // Have we run before, starting threads?
		    if (!util.stackFrame.startedThreads) {
		        // No - start hats for this broadcast.
		        util.stackFrame.startedThreads = util.startHats(
		            'event_whenbroadcastreceived', {
		                'BROADCAST_OPTION': broadcastOption
		            }
		        );
		        if (util.stackFrame.startedThreads.length == 0) {
		            // Nothing was started.
		            return;
		        }
		    }
		    // We've run before; check if the wait is still going on.
		    var instance = this;
		    var waiting = util.stackFrame.startedThreads.some(function(thread) {
		        return instance.runtime.isActiveThread(thread);
		    });
		    if (waiting) {
		        util.yieldFrame();
		    }
		};

		module.exports = Scratch3EventBlocks;


	/***/ },
	/* 84 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Scratch3LooksBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3LooksBlocks.prototype.getPrimitives = function() {
		    return {
		        'looks_say': this.say,
		        'looks_sayforsecs': this.sayforsecs,
		        'looks_think': this.think,
		        'looks_thinkforsecs': this.sayforsecs,
		        'looks_show': this.show,
		        'looks_hide': this.hide,
		        'looks_switchcostumeto': this.switchCostume,
		        'looks_switchbackdropto': this.switchBackdrop,
		        'looks_switchbackdroptoandwait': this.switchBackdropAndWait,
		        'looks_nextcostume': this.nextCostume,
		        'looks_nextbackdrop': this.nextBackdrop,
		        'looks_changeeffectby': this.changeEffect,
		        'looks_seteffectto': this.setEffect,
		        'looks_cleargraphiceffects': this.clearEffects,
		        'looks_changesizeby': this.changeSize,
		        'looks_setsizeto': this.setSize,
		        'looks_size': this.getSize,
		        'looks_costumeorder': this.getCostumeIndex,
		        'looks_backdroporder': this.getBackdropIndex,
		        'looks_backdropname': this.getBackdropName
		    };
		};

		Scratch3LooksBlocks.prototype.say = function (args, util) {
		    util.target.setSay('say', args.MESSAGE);
		};

		Scratch3LooksBlocks.prototype.sayforsecs = function (args, util) {
		    util.target.setSay('say', args.MESSAGE);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            // Clear say bubble and proceed.
		            util.target.setSay();
		            resolve();
		        }, 1000 * args.SECS);
		    });
		};

		Scratch3LooksBlocks.prototype.think = function (args, util) {
		    util.target.setSay('think', args.MESSAGE);
		};

		Scratch3LooksBlocks.prototype.thinkforsecs = function (args, util) {
		    util.target.setSay('think', args.MESSAGE);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            // Clear say bubble and proceed.
		            util.target.setSay();
		            resolve();
		        }, 1000 * args.SECS);
		    });
		};

		Scratch3LooksBlocks.prototype.show = function (args, util) {
		    util.target.setVisible(true);
		};

		Scratch3LooksBlocks.prototype.hide = function (args, util) {
		    util.target.setVisible(false);
		};

		/**
		 * Utility function to set the costume or backdrop of a target.
		 * Matches the behavior of Scratch 2.0 for different types of arguments.
		 * @param {!Target} target Target to set costume/backdrop to.
		 * @param {Any} requestedCostume Costume requested, e.g., 0, 'name', etc.
		 * @param {boolean=} opt_zeroIndex Set to zero-index the requestedCostume.
		 * @return {Array.<!Thread>} Any threads started by this switch.
		 */
		Scratch3LooksBlocks.prototype._setCostumeOrBackdrop = function (target,
		        requestedCostume, opt_zeroIndex) {
		    if (typeof requestedCostume === 'number') {
		        target.setCostume(opt_zeroIndex ?
		            requestedCostume : requestedCostume - 1);
		    } else {
		        var costumeIndex = target.getCostumeIndexByName(requestedCostume);
		        if (costumeIndex > -1) {
		            target.setCostume(costumeIndex);
		        } else if (costumeIndex == 'previous costume' ||
		                   costumeIndex == 'previous backdrop') {
		            target.setCostume(target.currentCostume - 1);
		        } else if (costumeIndex == 'next costume' ||
		                   costumeIndex == 'next backdrop') {
		            target.setCostume(target.currentCostume + 1);
		        } else {
		            var forcedNumber = Cast.toNumber(requestedCostume);
		            if (!isNaN(forcedNumber)) {
		                target.setCostume(opt_zeroIndex ?
		                    forcedNumber : forcedNumber - 1);
		            }
		        }
		    }
		    if (target == this.runtime.getTargetForStage()) {
		        // Target is the stage - start hats.
		        var newName = target.sprite.costumes[target.currentCostume].name;
		        return this.runtime.startHats('event_whenbackdropswitchesto', {
		            'BACKDROP': newName
		        });
		    }
		    return [];
		};

		Scratch3LooksBlocks.prototype.switchCostume = function (args, util) {
		    this._setCostumeOrBackdrop(util.target, args.COSTUME);
		};

		Scratch3LooksBlocks.prototype.nextCostume = function (args, util) {
		    this._setCostumeOrBackdrop(
		        util.target, util.target.currentCostume + 1, true
		    );
		};

		Scratch3LooksBlocks.prototype.switchBackdrop = function (args) {
		    this._setCostumeOrBackdrop(this.runtime.getTargetForStage(), args.BACKDROP);
		};

		Scratch3LooksBlocks.prototype.switchBackdropAndWait = function (args, util) {
		    // Have we run before, starting threads?
		    if (!util.stackFrame.startedThreads) {
		        // No - switch the backdrop.
		        util.stackFrame.startedThreads = (
		            this._setCostumeOrBackdrop(
		                this.runtime.getTargetForStage(),
		                args.BACKDROP
		            )
		        );
		        if (util.stackFrame.startedThreads.length == 0) {
		            // Nothing was started.
		            return;
		        }
		    }
		    // We've run before; check if the wait is still going on.
		    var instance = this;
		    var waiting = util.stackFrame.startedThreads.some(function(thread) {
		        return instance.runtime.isActiveThread(thread);
		    });
		    if (waiting) {
		        util.yieldFrame();
		    }
		};

		Scratch3LooksBlocks.prototype.nextBackdrop = function () {
		    var stage = this.runtime.getTargetForStage();
		    this._setCostumeOrBackdrop(
		        stage, stage.currentCostume + 1, true
		    );
		};

		Scratch3LooksBlocks.prototype.changeEffect = function (args, util) {
		    var effect = Cast.toString(args.EFFECT).toLowerCase();
		    var change = Cast.toNumber(args.CHANGE);
		    if (!util.target.effects.hasOwnProperty(effect)) return;
		    var newValue = change + util.target.effects[effect];
		    util.target.setEffect(effect, newValue);
		};

		Scratch3LooksBlocks.prototype.setEffect = function (args, util) {
		    var effect = Cast.toString(args.EFFECT).toLowerCase();
		    var value = Cast.toNumber(args.VALUE);
		    util.target.setEffect(effect, value);
		};

		Scratch3LooksBlocks.prototype.clearEffects = function (args, util) {
		    util.target.clearEffects();
		};

		Scratch3LooksBlocks.prototype.changeSize = function (args, util) {
		    var change = Cast.toNumber(args.CHANGE);
		    util.target.setSize(util.target.size + change);
		};

		Scratch3LooksBlocks.prototype.setSize = function (args, util) {
		    var size = Cast.toNumber(args.SIZE);
		    util.target.setSize(size);
		};

		Scratch3LooksBlocks.prototype.getSize = function (args, util) {
		    return util.target.size;
		};

		Scratch3LooksBlocks.prototype.getBackdropIndex = function () {
		    var stage = this.runtime.getTargetForStage();
		    return stage.currentCostume + 1;
		};

		Scratch3LooksBlocks.prototype.getBackdropName = function () {
		    var stage = this.runtime.getTargetForStage();
		    return stage.sprite.costumes[stage.currentCostume].name;
		};

		Scratch3LooksBlocks.prototype.getCostumeIndex = function (args, util) {
		    return util.target.currentCostume + 1;
		};

		module.exports = Scratch3LooksBlocks;


	/***/ },
	/* 85 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);
		var MathUtil = __webpack_require__(71);
		var Timer = __webpack_require__(8);

		function Scratch3MotionBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3MotionBlocks.prototype.getPrimitives = function() {
		    return {
		        'motion_movesteps': this.moveSteps,
		        'motion_gotoxy': this.goToXY,
		        'motion_goto': this.goTo,
		        'motion_turnright': this.turnRight,
		        'motion_turnleft': this.turnLeft,
		        'motion_pointindirection': this.pointInDirection,
		        'motion_pointtowards': this.pointTowards,
		        'motion_glidesecstoxy': this.glide,
		        'motion_setrotationstyle': this.setRotationStyle,
		        'motion_changexby': this.changeX,
		        'motion_setx': this.setX,
		        'motion_changeyby': this.changeY,
		        'motion_sety': this.setY,
		        'motion_xposition': this.getX,
		        'motion_yposition': this.getY,
		        'motion_direction': this.getDirection
		    };
		};

		Scratch3MotionBlocks.prototype.moveSteps = function (args, util) {
		    var steps = Cast.toNumber(args.STEPS);
		    var radians = MathUtil.degToRad(90 - util.target.direction);
		    var dx = steps * Math.cos(radians);
		    var dy = steps * Math.sin(radians);
		    util.target.setXY(util.target.x + dx, util.target.y + dy);
		};

		Scratch3MotionBlocks.prototype.goToXY = function (args, util) {
		    var x = Cast.toNumber(args.X);
		    var y = Cast.toNumber(args.Y);
		    util.target.setXY(x, y);
		};

		Scratch3MotionBlocks.prototype.goTo = function (args, util) {
		    var targetX = 0;
		    var targetY = 0;
		    if (args.TO === '_mouse_') {
		        targetX = util.ioQuery('mouse', 'getX');
		        targetY = util.ioQuery('mouse', 'getY');
		    } else if (args.TO === '_random_') {
		        var stageWidth = this.runtime.constructor.STAGE_WIDTH;
		        var stageHeight = this.runtime.constructor.STAGE_HEIGHT;
		        targetX = Math.round(stageWidth * (Math.random() - 0.5));
		        targetY = Math.round(stageHeight * (Math.random() - 0.5));
		    } else {
		        var goToTarget = this.runtime.getSpriteTargetByName(args.TO);
		        if (!goToTarget) return;
		        targetX = goToTarget.x;
		        targetY = goToTarget.y;
		    }
		    util.target.setXY(targetX, targetY);
		};

		Scratch3MotionBlocks.prototype.turnRight = function (args, util) {
		    var degrees = Cast.toNumber(args.DEGREES);
		    util.target.setDirection(util.target.direction + degrees);
		};

		Scratch3MotionBlocks.prototype.turnLeft = function (args, util) {
		    var degrees = Cast.toNumber(args.DEGREES);
		    util.target.setDirection(util.target.direction - degrees);
		};

		Scratch3MotionBlocks.prototype.pointInDirection = function (args, util) {
		    var direction = Cast.toNumber(args.DIRECTION);
		    util.target.setDirection(direction);
		};

		Scratch3MotionBlocks.prototype.pointTowards = function (args, util) {
		    var targetX = 0;
		    var targetY = 0;
		    if (args.TOWARDS === '_mouse_') {
		        targetX = util.ioQuery('mouse', 'getX');
		        targetY = util.ioQuery('mouse', 'getY');
		    } else {
		        var pointTarget = this.runtime.getSpriteTargetByName(args.TOWARDS);
		        if (!pointTarget) return;
		        targetX = pointTarget.x;
		        targetY = pointTarget.y;
		    }

		    var dx = targetX - util.target.x;
		    var dy = targetY - util.target.y;
		    var direction = 90 - MathUtil.radToDeg(Math.atan2(dy, dx));
		    util.target.setDirection(direction);
		};

		Scratch3MotionBlocks.prototype.glide = function (args, util) {
		    if (!util.stackFrame.timer) {
		        // First time: save data for future use.
		        util.stackFrame.timer = new Timer();
		        util.stackFrame.timer.start();
		        util.stackFrame.duration = Cast.toNumber(args.SECS);
		        util.stackFrame.startX = util.target.x;
		        util.stackFrame.startY = util.target.y;
		        util.stackFrame.endX = Cast.toNumber(args.X);
		        util.stackFrame.endY = Cast.toNumber(args.Y);
		        if (util.stackFrame.duration <= 0) {
		            // Duration too short to glide.
		            util.target.setXY(util.stackFrame.endX, util.stackFrame.endY);
		            return;
		        }
		        util.yieldFrame();
		    } else {
		        var timeElapsed = util.stackFrame.timer.timeElapsed();
		        if (timeElapsed < util.stackFrame.duration * 1000) {
		            // In progress: move to intermediate position.
		            var frac = timeElapsed / (util.stackFrame.duration * 1000);
		            var dx = frac * (util.stackFrame.endX - util.stackFrame.startX);
		            var dy = frac * (util.stackFrame.endY - util.stackFrame.startY);
		            util.target.setXY(
		                util.stackFrame.startX + dx,
		                util.stackFrame.startY + dy
		            );
		            util.yieldFrame();
		        } else {
		            // Finished: move to final position.
		            util.target.setXY(util.stackFrame.endX, util.stackFrame.endY);
		        }
		    }
		};

		Scratch3MotionBlocks.prototype.setRotationStyle = function (args, util) {
		    util.target.setRotationStyle(args.STYLE);
		};

		Scratch3MotionBlocks.prototype.changeX = function (args, util) {
		    var dx = Cast.toNumber(args.DX);
		    util.target.setXY(util.target.x + dx, util.target.y);
		};

		Scratch3MotionBlocks.prototype.setX = function (args, util) {
		    var x = Cast.toNumber(args.X);
		    util.target.setXY(x, util.target.y);
		};

		Scratch3MotionBlocks.prototype.changeY = function (args, util) {
		    var dy = Cast.toNumber(args.DY);
		    util.target.setXY(util.target.x, util.target.y + dy);
		};

		Scratch3MotionBlocks.prototype.setY = function (args, util) {
		    var y = Cast.toNumber(args.Y);
		    util.target.setXY(util.target.x, y);
		};

		Scratch3MotionBlocks.prototype.getX = function (args, util) {
		    return util.target.x;
		};

		Scratch3MotionBlocks.prototype.getY = function (args, util) {
		    return util.target.y;
		};

		Scratch3MotionBlocks.prototype.getDirection = function (args, util) {
		    return util.target.direction;
		};

		module.exports = Scratch3MotionBlocks;


	/***/ },
	/* 86 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Scratch3OperatorsBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3OperatorsBlocks.prototype.getPrimitives = function() {
		    return {
		        'operator_add': this.add,
		        'operator_subtract': this.subtract,
		        'operator_multiply': this.multiply,
		        'operator_divide': this.divide,
		        'operator_lt': this.lt,
		        'operator_equals': this.equals,
		        'operator_gt': this.gt,
		        'operator_and': this.and,
		        'operator_or': this.or,
		        'operator_not': this.not,
		        'operator_random': this.random,
		        'operator_join': this.join,
		        'operator_letter_of': this.letterOf,
		        'operator_length': this.length,
		        'operator_mod': this.mod,
		        'operator_round': this.round,
		        'operator_mathop': this.mathop
		    };
		};

		Scratch3OperatorsBlocks.prototype.add = function (args) {
		    return Cast.toNumber(args.NUM1) + Cast.toNumber(args.NUM2);
		};

		Scratch3OperatorsBlocks.prototype.subtract = function (args) {
		    return Cast.toNumber(args.NUM1) - Cast.toNumber(args.NUM2);
		};

		Scratch3OperatorsBlocks.prototype.multiply = function (args) {
		    return Cast.toNumber(args.NUM1) * Cast.toNumber(args.NUM2);
		};

		Scratch3OperatorsBlocks.prototype.divide = function (args) {
		    return Cast.toNumber(args.NUM1) / Cast.toNumber(args.NUM2);
		};

		Scratch3OperatorsBlocks.prototype.lt = function (args) {
		    return Cast.compare(args.OPERAND1, args.OPERAND2) < 0;
		};

		Scratch3OperatorsBlocks.prototype.equals = function (args) {
		    return Cast.compare(args.OPERAND1, args.OPERAND2) == 0;
		};

		Scratch3OperatorsBlocks.prototype.gt = function (args) {
		    return Cast.compare(args.OPERAND1, args.OPERAND2) > 0;
		};

		Scratch3OperatorsBlocks.prototype.and = function (args) {
		    return Cast.toBoolean(args.OPERAND1) && Cast.toBoolean(args.OPERAND2);
		};

		Scratch3OperatorsBlocks.prototype.or = function (args) {
		    return Cast.toBoolean(args.OPERAND1) || Cast.toBoolean(args.OPERAND2);
		};

		Scratch3OperatorsBlocks.prototype.not = function (args) {
		    return !Cast.toBoolean(args.OPERAND);
		};

		Scratch3OperatorsBlocks.prototype.random = function (args) {
		    var nFrom = Cast.toNumber(args.FROM);
		    var nTo = Cast.toNumber(args.TO);
		    var low = nFrom <= nTo ? nFrom : nTo;
		    var high = nFrom <= nTo ? nTo : nFrom;
		    if (low == high) return low;
		    // If both arguments are ints, truncate the result to an int.
		    if (Cast.isInt(args.FROM) && Cast.isInt(args.TO)) {
		        return low + parseInt(Math.random() * ((high + 1) - low));
		    }
		    return (Math.random() * (high - low)) + low;
		};

		Scratch3OperatorsBlocks.prototype.join = function (args) {
		    return Cast.toString(args.STRING1) + Cast.toString(args.STRING2);
		};

		Scratch3OperatorsBlocks.prototype.letterOf = function (args) {
		    var index = Cast.toNumber(args.LETTER) - 1;
		    var str = Cast.toString(args.STRING);
		    // Out of bounds?
		    if (index < 0 || index >= str.length) {
		        return '';
		    }
		    return str.charAt(index);
		};

		Scratch3OperatorsBlocks.prototype.length = function (args) {
		    return Cast.toString(args.STRING).length;
		};

		Scratch3OperatorsBlocks.prototype.mod = function (args) {
		    var n = Cast.toNumber(args.NUM1);
		    var modulus = Cast.toNumber(args.NUM2);
		    var result = n % modulus;
		    // Scratch mod is kept positive.
		    if (result / modulus < 0) result += modulus;
		    return result;
		};

		Scratch3OperatorsBlocks.prototype.round = function (args) {
		    return Math.round(Cast.toNumber(args.NUM));
		};

		Scratch3OperatorsBlocks.prototype.mathop = function (args) {
		    var operator = Cast.toString(args.OPERATOR).toLowerCase();
		    var n = Cast.toNumber(args.NUM);
		    switch (operator) {
		    case 'abs': return Math.abs(n);
		    case 'floor': return Math.floor(n);
		    case 'ceiling': return Math.ceil(n);
		    case 'sqrt': return Math.sqrt(n);
		    case 'sin': return Math.sin((Math.PI * n) / 180);
		    case 'cos': return Math.cos((Math.PI * n) / 180);
		    case 'tan': return Math.tan((Math.PI * n) / 180);
		    case 'asin': return (Math.asin(n) * 180) / Math.PI;
		    case 'acos': return (Math.acos(n) * 180) / Math.PI;
		    case 'atan': return (Math.atan(n) * 180) / Math.PI;
		    case 'ln': return Math.log(n);
		    case 'log': return Math.log(n) / Math.LN10;
		    case 'e ^': return Math.exp(n);
		    case '10 ^': return Math.pow(10, n);
		    }
		    return 0;
		};

		module.exports = Scratch3OperatorsBlocks;


	/***/ },
	/* 87 */
	/***/ function(module, exports, __webpack_require__) {

		var MathUtil = __webpack_require__(71);
		var Cast = __webpack_require__(68);
		var Promise = __webpack_require__(73);

		function Scratch3SoundBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3SoundBlocks.prototype.getPrimitives = function() {
		    return {
		        'sound_play': this.playSound,
		        'sound_playuntildone': this.playSoundAndWait,
		        'sound_stopallsounds': this.stopAllSounds,
		        'sound_playnoteforbeats': this.playNoteForBeats,
		        'sound_playthereminforbeats': this.playThereminForBeats,
		        'sound_playdrumforbeats': this.playDrumForBeats,
		        'sound_setinstrumentto': this.setInstrument,
		        'sound_seteffectto' : this.setEffect,
		        'sound_changeeffectby' : this.changeEffect,
		        'sound_cleareffects' : this.clearEffects,
		        'sound_sounds_menu' : this.soundsMenu,
		        'sound_beats_menu' : this.beatsMenu,
		        'sound_effects_menu' : this.effectsMenu
		    };
		};

		Scratch3SoundBlocks.prototype.playSound = function (args, util) {
		    var index = this._getSoundIndex(args.SOUND_MENU, util);
		    util.target.audioEngine.playSound(index);
		};

		Scratch3SoundBlocks.prototype.playSoundAndWait = function (args, util) {
		    var index = this._getSoundIndex(args.SOUND_MENU, util);
		    util.target.audioEngine.playSound(index);

		    var duration = util.target.audioEngine.getSoundDuration(index);

		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            resolve();
		        }, 1000*duration);
		    });
		};

		Scratch3SoundBlocks.prototype._getSoundIndex = function (soundName, util) {
		    if (util.target.sprite.sounds.length == 0) {
		        return 0;
		    }
		    var index;
		    if (typeof soundName === 'number') {
		        var len = util.target.sprite.sounds.length;
		        index = MathUtil.wrapClamp(soundName,0,len-1);
		    } else {
		        index = util.target.getSoundIndexByName(soundName);
		        if (index == -1) {
		            index = 0;
		        }
		    }
		    return index;
		};

		Scratch3SoundBlocks.prototype.stopAllSounds = function (args, util) {
		    util.target.audioEngine.stopAllSounds();
		};

		Scratch3SoundBlocks.prototype.playNoteForBeats = function (args, util) {
		    util.target.audioEngine.playNoteForBeats(args.NOTE, args.BEATS);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            resolve();
		        }, (1000 * args.BEATS) );
		    });
		};

		Scratch3SoundBlocks.prototype.playThereminForBeats = function (args, util) {
		    util.target.audioEngine.playThereminForBeats(args.NOTE, args.BEATS);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            resolve();
		        }, (1000 * args.BEATS) );
		    });
		};

		Scratch3SoundBlocks.prototype.playDrumForBeats = function (args, util) {
		    util.target.audioEngine.playDrumForBeats(args.DRUMTYPE, args.BEATS);
		    return new Promise(function(resolve) {
		        setTimeout(function() {
		            resolve();
		        }, (1000 * args.BEATS) );
		    });
		};

		Scratch3SoundBlocks.prototype.setInstrument = function (args, util) {
		    var instNum = Cast.toNumber(args.INSTRUMENT);
		    return util.target.audioEngine.setInstrument(instNum);
		};

		Scratch3SoundBlocks.prototype.setEffect = function (args, util) {
		    util.target.audioEngine.setEffect(args.EFFECT, args.VALUE);
		};

		Scratch3SoundBlocks.prototype.changeEffect = function (args, util) {
		    util.target.audioEngine.changeEffect(args.EFFECT, args.VALUE);
		};

		Scratch3SoundBlocks.prototype.clearEffects = function (args, util) {
		    util.target.audioEngine.clearEffects();
		};

		Scratch3SoundBlocks.prototype.soundsMenu = function (args) {
		    return args.SOUND_MENU;
		};

		Scratch3SoundBlocks.prototype.beatsMenu = function (args) {
		    return args.BEATS;
		};

		Scratch3SoundBlocks.prototype.effectsMenu = function (args) {
		    return args.EFFECT;
		};

		module.exports = Scratch3SoundBlocks;


	/***/ },
	/* 88 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Scratch3SensingBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3SensingBlocks.prototype.getPrimitives = function() {
		    return {
		        'sensing_touchingcolor': this.touchingColor,
		        'sensing_coloristouchingcolor': this.colorTouchingColor,
		        'sensing_distanceto': this.distanceTo,
		        'sensing_timer': this.getTimer,
		        'sensing_resettimer': this.resetTimer,
		        'sensing_mousex': this.getMouseX,
		        'sensing_mousey': this.getMouseY,
		        'sensing_mousedown': this.getMouseDown,
		        'sensing_keypressed': this.getKeyPressed,
		        'sensing_current': this.current,
		        'sensing_dayssince2000': this.daysSince2000
		    };
		};

		Scratch3SensingBlocks.prototype.touchingColor = function (args, util) {
		    var color = Cast.toRgbColorList(args.COLOR);
		    return util.target.isTouchingColor(color);
		};

		Scratch3SensingBlocks.prototype.colorTouchingColor = function (args, util) {
		    var maskColor = Cast.toRgbColorList(args.COLOR);
		    var targetColor = Cast.toRgbColorList(args.COLOR2);
		    return util.target.colorIsTouchingColor(targetColor, maskColor);
		};

		Scratch3SensingBlocks.prototype.distanceTo = function (args, util) {
		    if (util.target.isStage) return 10000;

		    var targetX = 0;
		    var targetY = 0;
		    if (args.DISTANCETOMENU === '_mouse_') {
		        targetX = util.ioQuery('mouse', 'getX');
		        targetY = util.ioQuery('mouse', 'getY');
		    } else {
		        var distTarget = this.runtime.getSpriteTargetByName(
		            args.DISTANCETOMENU
		        );
		        if (!distTarget) return 10000;
		        targetX = distTarget.x;
		        targetY = distTarget.y;
		    }

		    var dx = util.target.x - targetX;
		    var dy = util.target.y - targetY;
		    return Math.sqrt((dx * dx) + (dy * dy));
		};

		Scratch3SensingBlocks.prototype.getTimer = function (args, util) {
		    return util.ioQuery('clock', 'projectTimer');
		};

		Scratch3SensingBlocks.prototype.resetTimer = function (args, util) {
		    util.ioQuery('clock', 'resetProjectTimer');
		};

		Scratch3SensingBlocks.prototype.getMouseX = function (args, util) {
		    return util.ioQuery('mouse', 'getX');
		};

		Scratch3SensingBlocks.prototype.getMouseY = function (args, util) {
		    return util.ioQuery('mouse', 'getY');
		};

		Scratch3SensingBlocks.prototype.getMouseDown = function (args, util) {
		    return util.ioQuery('mouse', 'getIsDown');
		};

		Scratch3SensingBlocks.prototype.current = function (args) {
		    var menuOption = Cast.toString(args.CURRENTMENU).toLowerCase();
		    var date = new Date();
		    switch (menuOption) {
		    case 'year': return date.getFullYear();
		    case 'month': return date.getMonth() + 1; // getMonth is zero-based
		    case 'date': return date.getDate();
		    case 'dayofweek': return date.getDay() + 1; // getDay is zero-based, Sun=0
		    case 'hour': return date.getHours();
		    case 'minute': return date.getMinutes();
		    case 'second': return date.getSeconds();
		    }
		    return 0;
		};

		Scratch3SensingBlocks.prototype.getKeyPressed = function (args, util) {
		    return util.ioQuery('keyboard', 'getKeyIsDown', args.KEY_OPTION);
		};

		Scratch3SensingBlocks.prototype.daysSince2000 = function()
		{
		    var msPerDay = 24 * 60 * 60 * 1000;
		    var start = new Date(2000, 1-1, 1); 
		    var today = new Date(); 
		    var dstAdjust = today.getTimezoneOffset() - start.getTimezoneOffset();
		    var mSecsSinceStart = today.valueOf() - start.valueOf();
		    mSecsSinceStart += ((today.getTimezoneOffset() - dstAdjust) * 60 * 1000);
		    return mSecsSinceStart / msPerDay;
		};

		module.exports = Scratch3SensingBlocks;


	/***/ },
	/* 89 */
	/***/ function(module, exports, __webpack_require__) {

		var Cast = __webpack_require__(68);

		function Scratch3DataBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3DataBlocks.prototype.getPrimitives = function () {
		    return {
		        'data_variable': this.getVariable,
		        'data_setvariableto': this.setVariableTo,
		        'data_changevariableby': this.changeVariableBy,
		        'data_listcontents': this.getListContents,
		        'data_addtolist': this.addToList,
		        'data_deleteoflist': this.deleteOfList,
		        'data_insertatlist': this.insertAtList,
		        'data_replaceitemoflist': this.replaceItemOfList,
		        'data_itemoflist': this.getItemOfList,
		        'data_lengthoflist': this.lengthOfList,
		        'data_listcontainsitem': this.listContainsItem
		    };
		};

		Scratch3DataBlocks.prototype.getVariable = function (args, util) {
		    var variable = util.target.lookupOrCreateVariable(args.VARIABLE);
		    return variable.value;
		};

		Scratch3DataBlocks.prototype.setVariableTo = function (args, util) {
		    var variable = util.target.lookupOrCreateVariable(args.VARIABLE);
		    variable.value = args.VALUE;
		};

		Scratch3DataBlocks.prototype.changeVariableBy = function (args, util) {
		    var variable = util.target.lookupOrCreateVariable(args.VARIABLE);
		    var castedValue = Cast.toNumber(variable.value);
		    var dValue = Cast.toNumber(args.VALUE);
		    variable.value = castedValue + dValue;
		};

		Scratch3DataBlocks.prototype.getListContents = function (args, util) {
		    var list = util.target.lookupOrCreateList(args.LIST);
		    // Determine if the list is all single letters.
		    // If it is, report contents joined together with no separator.
		    // If it's not, report contents joined together with a space.
		    var allSingleLetters = true;
		    for (var i = 0; i < list.contents.length; i++) {
		        var listItem = list.contents[i];
		        if (!((typeof listItem === 'string') &&
		              (listItem.length == 1))) {
		            allSingleLetters = false;
		            break;
		        }
		    }
		    if (allSingleLetters) {
		        return list.contents.join('');
		    } else {
		        return list.contents.join(' ');
		    }
		};

		Scratch3DataBlocks.prototype.addToList = function (args, util) {
		    var list = util.target.lookupOrCreateList(args.LIST);
		    list.contents.push(args.ITEM);
		};

		Scratch3DataBlocks.prototype.deleteOfList = function (args, util) {
		    var list = util.target.lookupOrCreateList(args.LIST);
		    var index = Cast.toListIndex(args.INDEX, list.contents.length);
		    if (index === Cast.LIST_INVALID) {
		        return;
		    } else if (index === Cast.LIST_ALL) {
		        list.contents = [];
		        return;
		    }
		    list.contents.splice(index - 1, 1);
		};

		Scratch3DataBlocks.prototype.insertAtList = function (args, util) {
		    var item = args.ITEM;
		    var list = util.target.lookupOrCreateList(args.LIST);
		    var index = Cast.toListIndex(args.INDEX, list.contents.length + 1);
		    if (index === Cast.LIST_INVALID) {
		        return;
		    }
		    list.contents.splice(index - 1, 0, item);
		};

		Scratch3DataBlocks.prototype.replaceItemOfList = function (args, util) {
		    var item = args.ITEM;
		    var list = util.target.lookupOrCreateList(args.LIST);
		    var index = Cast.toListIndex(args.INDEX, list.contents.length);
		    if (index === Cast.LIST_INVALID) {
		        return;
		    }
		    list.contents.splice(index - 1, 1, item);
		};

		Scratch3DataBlocks.prototype.getItemOfList = function (args, util) {
		    var list = util.target.lookupOrCreateList(args.LIST);
		    var index = Cast.toListIndex(args.INDEX, list.contents.length);
		    if (index === Cast.LIST_INVALID) {
		        return '';
		    }
		    return list.contents[index - 1];
		};

		Scratch3DataBlocks.prototype.lengthOfList = function (args, util) {
		    var list = util.target.lookupOrCreateList(args.LIST);
		    return list.contents.length;
		};

		Scratch3DataBlocks.prototype.listContainsItem = function (args, util) {
		    var item = args.ITEM;
		    var list = util.target.lookupOrCreateList(args.LIST);
		    if (list.contents.indexOf(item) >= 0) {
		        return true;
		    }
		    // Try using Scratch comparison operator on each item.
		    // (Scratch considers the string '123' equal to the number 123).
		    for (var i = 0; i < list.contents.length; i++) {
		        if (Cast.compare(list.contents[i], item) == 0) {
		            return true;
		        }
		    }
		    return false;
		};

		module.exports = Scratch3DataBlocks;


	/***/ },
	/* 90 */
	/***/ function(module, exports) {

		function Scratch3ProcedureBlocks(runtime) {
		    /**
		     * The runtime instantiating this block package.
		     * @type {Runtime}
		     */
		    this.runtime = runtime;
		}

		/**
		 * Retrieve the block primitives implemented by this package.
		 * @return {Object.<string, Function>} Mapping of opcode to Function.
		 */
		Scratch3ProcedureBlocks.prototype.getPrimitives = function() {
		    return {
		        'procedures_defnoreturn': this.defNoReturn,
		        'procedures_callnoreturn': this.callNoReturn,
		        'procedures_param': this.param
		    };
		};

		Scratch3ProcedureBlocks.prototype.defNoReturn = function () {
		    // No-op: execute the blocks.
		};

		Scratch3ProcedureBlocks.prototype.callNoReturn = function (args, util) {
		    if (!util.stackFrame.executed) {
		        var procedureName = args.mutation.proccode;
		        var paramNames = util.getProcedureParamNames(procedureName);
		        for (var i = 0; i < paramNames.length; i++) {
		            if (args.hasOwnProperty('input' + i)) {
		                util.pushParam(paramNames[i], args['input' + i]);
		            }
		        }
		        util.stackFrame.executed = true;
		        util.startProcedure(procedureName);
		    }
		};

		Scratch3ProcedureBlocks.prototype.param = function (args, util) {
		    var value = util.getParam(args.mutation.paramname);
		    if (!value) {
		        return 0;
		    }
		    return value;
		};

		module.exports = Scratch3ProcedureBlocks;


	/***/ },
	/* 91 */
	/***/ function(module, exports, __webpack_require__) {

		/**
		 * @fileoverview
		 * Partial implementation of an SB2 JSON importer.
		 * Parses provided JSON and then generates all needed
		 * scratch-vm runtime structures.
		 */

		var Blocks = __webpack_require__(11);
		var Clone = __webpack_require__(92);
		var Sprite = __webpack_require__(98);
		var Color = __webpack_require__(69);
		var uid = __webpack_require__(96);
		var specMap = __webpack_require__(99);
		var Variable = __webpack_require__(94);
		var List = __webpack_require__(95);

		/**
		 * Top-level handler. Parse provided JSON,
		 * and process the top-level object (the stage object).
		 * @param {!string} json SB2-format JSON to load.
		 * @param {!Runtime} runtime Runtime object to load all structures into.
		 */
		function sb2import (json, runtime) {
		    parseScratchObject(
		        JSON.parse(json),
		        runtime,
		        true
		    );
		}

		/**
		 * Parse a single "Scratch object" and create all its in-memory VM objects.
		 * @param {!Object} object From-JSON "Scratch object:" sprite, stage, watcher.
		 * @param {!Runtime} runtime Runtime object to load all structures into.
		 * @param {boolean} topLevel Whether this is the top-level object (stage).
		 */
		function parseScratchObject (object, runtime, topLevel) {
		    if (!object.hasOwnProperty('objName')) {
		        // Watcher/monitor - skip this object until those are implemented in VM.
		        // @todo
		        return;
		    }
		    // Blocks container for this object.
		    var blocks = new Blocks();
		    // @todo: For now, load all Scratch objects (stage/sprites) as a Sprite.
		    var sprite = new Sprite(blocks, runtime);
		    // Sprite/stage name from JSON.
		    if (object.hasOwnProperty('objName')) {
		        sprite.name = object.objName;
		    }
		    // Costumes from JSON.
		    if (object.hasOwnProperty('costumes')) {
		        for (var i = 0; i < object.costumes.length; i++) {
		            var costume = object.costumes[i];
		            // @todo: Make sure all the relevant metadata is being pulled out.
		            sprite.costumes.push({
		                skin: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/'
		                    + costume.baseLayerMD5 + '/get/',
		                name: costume.costumeName,
		                bitmapResolution: costume.bitmapResolution,
		                rotationCenterX: costume.rotationCenterX,
		                rotationCenterY: costume.rotationCenterY
		            });
		        }
		    }
		    // Sounds from JSON
		    if (object.hasOwnProperty('sounds')) {
		        for (var s = 0; s < object.sounds.length; s++) {
		            var sound = object.sounds[s];
		            sprite.sounds.push({
		                format: sound.format,
		                fileUrl: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/'
		                    + sound.md5 + '/get/',
		                rate: sound.rate,
		                sampleCount: sound.sampleCount,
		                soundID: sound.soundID,
		                name: sound.soundName
		            });
		        }
		    }
		    // If included, parse any and all scripts/blocks on the object.
		    if (object.hasOwnProperty('scripts')) {
		        parseScripts(object.scripts, blocks);
		    }
		    // Create the first clone, and load its run-state from JSON.
		    var target = sprite.createClone();
		    // Add it to the runtime's list of targets.
		    runtime.targets.push(target);
		    // Load target properties from JSON.
		    if (object.hasOwnProperty('variables')) {
		        for (var j = 0; j < object.variables.length; j++) {
		            var variable = object.variables[j];
		            target.variables[variable.name] = new Variable(
		                variable.name,
		                variable.value,
		                variable.isPersistent
		            );
		        }
		    }
		    if (object.hasOwnProperty('lists')) {
		        for (var k = 0; k < object.lists.length; k++) {
		            var list = object.lists[k];
		            // @todo: monitor properties.
		            target.lists[list.listName] = new List(
		                list.listName,
		                list.contents
		            );
		        }
		    }
		    if (object.hasOwnProperty('scratchX')) {
		        target.x = object.scratchX;
		    }
		    if (object.hasOwnProperty('scratchY')) {
		        target.y = object.scratchY;
		    }
		    if (object.hasOwnProperty('direction')) {
		        target.direction = object.direction;
		    }
		    if (object.hasOwnProperty('scale')) {
		        // SB2 stores as 1.0 = 100%; we use % in the VM.
		        target.size = object.scale * 100;
		    }
		    if (object.hasOwnProperty('visible')) {
		        target.visible = object.visible;
		    }
		    if (object.hasOwnProperty('currentCostumeIndex')) {
		        target.currentCostume = Math.round(object.currentCostumeIndex);
		    }
		    if (object.hasOwnProperty('rotationStyle')) {
		        if (object.rotationStyle == 'none') {
		            target.rotationStyle = Clone.ROTATION_STYLE_NONE;
		        } else if (object.rotationStyle == 'leftRight') {
		            target.rotationStyle = Clone.ROTATION_STYLE_LEFT_RIGHT;
		        } else if (object.rotationStyle == 'normal') {
		            target.rotationStyle = Clone.ROTATION_STYLE_ALL_AROUND;
		        }
		    }
		    target.isStage = topLevel;
		    target.updateAllDrawableProperties();
		    // The stage will have child objects; recursively process them.
		    if (object.children) {
		        for (var m = 0; m < object.children.length; m++) {
		            parseScratchObject(object.children[m], runtime, false);
		        }
		    }
		}

		/**
		 * Parse a Scratch object's scripts into VM blocks.
		 * This should only handle top-level scripts that include X, Y coordinates.
		 * @param {!Object} scripts Scripts object from SB2 JSON.
		 * @param {!Blocks} blocks Blocks object to load parsed blocks into.
		 */
		function parseScripts (scripts, blocks) {
		    for (var i = 0; i < scripts.length; i++) {
		        var script = scripts[i];
		        var scriptX = script[0];
		        var scriptY = script[1];
		        var blockList = script[2];
		        var parsedBlockList = parseBlockList(blockList);
		        if (parsedBlockList[0]) {
		            // Adjust script coordinates to account for
		            // larger block size in scratch-blocks.
		            // @todo: Determine more precisely the right formulas here.
		            parsedBlockList[0].x = scriptX * 1.1;
		            parsedBlockList[0].y = scriptY * 1.1;
		            parsedBlockList[0].topLevel = true;
		            parsedBlockList[0].parent = null;
		        }
		        // Flatten children and create add the blocks.
		        var convertedBlocks = flatten(parsedBlockList);
		        for (var j = 0; j < convertedBlocks.length; j++) {
		            blocks.createBlock(convertedBlocks[j]);
		        }
		    }
		}

		/**
		 * Parse any list of blocks from SB2 JSON into a list of VM-format blocks.
		 * Could be used to parse a top-level script,
		 * a list of blocks in a branch (e.g., in forever),
		 * or a list of blocks in an argument (e.g., move [pick random...]).
		 * @param {Array.<Object>} blockList SB2 JSON-format block list.
		 * @return {Array.<Object>} Scratch VM-format block list.
		 */
		function parseBlockList (blockList) {
		    var resultingList = [];
		    var previousBlock = null; // For setting next.
		    for (var i = 0; i < blockList.length; i++) {
		        var block = blockList[i];
		        var parsedBlock = parseBlock(block);
		        if (previousBlock) {
		            parsedBlock.parent = previousBlock.id;
		            previousBlock.next = parsedBlock.id;
		        }
		        previousBlock = parsedBlock;
		        resultingList.push(parsedBlock);
		    }
		    return resultingList;
		}

		/**
		 * Flatten a block tree into a block list.
		 * Children are temporarily stored on the `block.children` property.
		 * @param {Array.<Object>} blocks list generated by `parseBlockList`.
		 * @return {Array.<Object>} Flattened list to be passed to `blocks.createBlock`.
		 */
		function flatten (blocks) {
		    var finalBlocks = [];
		    for (var i = 0; i < blocks.length; i++) {
		        var block = blocks[i];
		        finalBlocks.push(block);
		        if (block.children) {
		            finalBlocks = finalBlocks.concat(flatten(block.children));
		        }
		        delete block.children;
		    }
		    return finalBlocks;
		}

		/**
		 * Convert a Scratch 2.0 procedure string (e.g., "my_procedure %s %b %n")
		 * into an argument map. This allows us to provide the expected inputs
		 * to a mutated procedure call.
		 * @param {string} procCode Scratch 2.0 procedure string.
		 * @return {Object} Argument map compatible with those in sb2specmap.
		 */
		function parseProcedureArgMap (procCode) {
		    var argMap = [
		        {} // First item in list is op string.
		    ];
		    var INPUT_PREFIX = 'input';
		    var inputCount = 0;
		    // Split by %n, %b, %s.
		    var parts = procCode.split(/(?=[^\\]\%[nbs])/);
		    for (var i = 0; i < parts.length; i++) {
		        var part = parts[i].trim();
		        if (part.substring(0, 1) == '%') {
		            var argType = part.substring(1, 2);
		            var arg = {
		                type: 'input',
		                inputName: INPUT_PREFIX + (inputCount++)
		            };
		            if (argType == 'n') {
		                arg.inputOp = 'math_number';
		            } else if (argType == 's') {
		                arg.inputOp = 'text';
		            }
		            argMap.push(arg);
		        }
		    }
		    return argMap;
		}

		/**
		 * Parse a single SB2 JSON-formatted block and its children.
		 * @param {!Object} sb2block SB2 JSON-formatted block.
		 * @return {Object} Scratch VM format block.
		 */
		function parseBlock (sb2block) {
		    // First item in block object is the old opcode (e.g., 'forward:').
		    var oldOpcode = sb2block[0];
		    // Convert the block using the specMap. See sb2specmap.js.
		    if (!oldOpcode || !specMap[oldOpcode]) {
		        console.warn('Couldn\'t find SB2 block: ', oldOpcode);
		        return;
		    }
		    var blockMetadata = specMap[oldOpcode];
		    // Block skeleton.
		    var activeBlock = {
		        id: uid(), // Generate a new block unique ID.
		        opcode: blockMetadata.opcode, // Converted, e.g. "motion_movesteps".
		        inputs: {}, // Inputs to this block and the blocks they point to.
		        fields: {}, // Fields on this block and their values.
		        next: null, // Next block.
		        shadow: false, // No shadow blocks in an SB2 by default.
		        children: [] // Store any generated children, flattened in `flatten`.
		    };
		    // For a procedure call, generate argument map from proc string.
		    if (oldOpcode == 'call') {
		        blockMetadata.argMap = parseProcedureArgMap(sb2block[1]);
		    }
		    // Look at the expected arguments in `blockMetadata.argMap.`
		    // The basic problem here is to turn positional SB2 arguments into
		    // non-positional named Scratch VM arguments.
		    for (var i = 0; i < blockMetadata.argMap.length; i++) {
		        var expectedArg = blockMetadata.argMap[i];
		        var providedArg = sb2block[i + 1]; // (i = 0 is opcode)
		        // Whether the input is obscuring a shadow.
		        var shadowObscured = false;
		        // Positional argument is an input.
		        if (expectedArg.type == 'input') {
		            // Create a new block and input metadata.
		            var inputUid = uid();
		            activeBlock.inputs[expectedArg.inputName] = {
		                name: expectedArg.inputName,
		                block: null,
		                shadow: null
		            };
		            if (typeof providedArg == 'object' && providedArg) {
		                // Block or block list occupies the input.
		                var innerBlocks;
		                if (typeof providedArg[0] == 'object' && providedArg[0]) {
		                    // Block list occupies the input.
		                    innerBlocks = parseBlockList(providedArg);
		                } else {
		                    // Single block occupies the input.
		                    innerBlocks = [parseBlock(providedArg)];
		                }
		                var previousBlock = null;
		                for (var j = 0; j < innerBlocks.length; j++) {
		                    if (j == 0) {
		                        innerBlocks[j].parent = activeBlock.id;
		                    } else {
		                        innerBlocks[j].parent = previousBlock;
		                    }
		                    previousBlock = innerBlocks[j].id;
		                }
		                // Obscures any shadow.
		                shadowObscured = true;
		                activeBlock.inputs[expectedArg.inputName].block = (
		                    innerBlocks[0].id
		                );
		                activeBlock.children = (
		                    activeBlock.children.concat(innerBlocks)
		                );
		            }
		            // Generate a shadow block to occupy the input.
		            if (!expectedArg.inputOp) {
		                // No editable shadow input; e.g., for a boolean.
		                continue;
		            }
		            // Each shadow has a field generated for it automatically.
		            // Value to be filled in the field.
		            var fieldValue = providedArg;
		            // Shadows' field names match the input name, except for these:
		            var fieldName = expectedArg.inputName;
		            if (expectedArg.inputOp == 'math_number' ||
		                expectedArg.inputOp == 'math_whole_number' ||
		                expectedArg.inputOp == 'math_positive_number' ||
		                expectedArg.inputOp == 'math_integer' ||
		                expectedArg.inputOp == 'math_angle') {
		                fieldName = 'NUM';
		                // Fields are given Scratch 2.0 default values if obscured.
		                if (shadowObscured) {
		                    fieldValue = 10;
		                }
		            } else if (expectedArg.inputOp == 'text') {
		                fieldName = 'TEXT';
		                if (shadowObscured) {
		                    fieldValue = '';
		                }
		            } else if (expectedArg.inputOp == 'colour_picker') {
		                // Convert SB2 color to hex.
		                fieldValue = Color.decimalToHex(providedArg);
		                fieldName = 'COLOUR';
		                if (shadowObscured) {
		                    fieldValue = '#990000';
		                }
		            }
		            var fields = {};
		            fields[fieldName] = {
		                name: fieldName,
		                value: fieldValue
		            };
		            activeBlock.children.push({
		                id: inputUid,
		                opcode: expectedArg.inputOp,
		                inputs: {},
		                fields: fields,
		                next: null,
		                topLevel: false,
		                parent: activeBlock.id,
		                shadow: true
		            });
		            activeBlock.inputs[expectedArg.inputName].shadow = inputUid;
		            // If no block occupying the input, alias to the shadow.
		            if (!activeBlock.inputs[expectedArg.inputName].block) {
		                activeBlock.inputs[expectedArg.inputName].block = inputUid;
		            }
		        } else if (expectedArg.type == 'field') {
		            // Add as a field on this block.
		            activeBlock.fields[expectedArg.fieldName] = {
		                name: expectedArg.fieldName,
		                value: providedArg
		            };
		        }
		    }
		    // Special cases to generate mutations.
		    if (oldOpcode == 'stopScripts') {
		        // Mutation for stop block: if the argument is 'other scripts',
		        // the block needs a next connection.
		        if (sb2block[1] == 'other scripts in sprite' ||
		            sb2block[1] == 'other scripts in stage') {
		            activeBlock.mutation = {
		                tagName: 'mutation',
		                hasnext: 'true',
		                children: []
		            };
		        }
		    } else if (oldOpcode == 'procDef') {
		        // Mutation for procedure definition:
		        // store all 2.0 proc data.
		        var procData = sb2block.slice(1);
		        activeBlock.mutation = {
		            tagName: 'mutation',
		            proccode: procData[0], // e.g., "abc %n %b %s"
		            argumentnames: JSON.stringify(procData[1]), // e.g. ['arg1', 'arg2']
		            argumentdefaults: JSON.stringify(procData[2]), // e.g., [1, 'abc']
		            warp: procData[3], // Warp mode, e.g., true/false.
		            children: []
		        };
		    } else if (oldOpcode == 'call') {
		        // Mutation for procedure call:
		        // string for proc code (e.g., "abc %n %b %s").
		        activeBlock.mutation = {
		            tagName: 'mutation',
		            children: [],
		            proccode: sb2block[1]
		        };
		    } else if (oldOpcode == 'getParam') {
		        // Mutation for procedure parameter.
		        activeBlock.mutation = {
		            tagName: 'mutation',
		            children: [],
		            paramname: sb2block[1], // Name of parameter.
		            shape: sb2block[2] // Shape - in 2.0, 'r' or 'b'.
		        };
		    }
		    return activeBlock;
		}

		module.exports = sb2import;


	/***/ },
	/* 92 */
	/***/ function(module, exports, __webpack_require__) {

		var util = __webpack_require__(2);
		var MathUtil = __webpack_require__(71);
		var Target = __webpack_require__(93);
		var AudioEngine = __webpack_require__(97);

		/**
		 * Clone (instance) of a sprite.
		 * @param {!Sprite} sprite Reference to the sprite.
		 * @param {Runtime} runtime Reference to the runtime.
		 * @constructor
		 */
		function Clone(sprite, runtime) {
		    Target.call(this, sprite.blocks);
		    this.runtime = runtime;
		    /**
		     * Reference to the sprite that this is a clone of.
		     * @type {!Sprite}
		     */
		    this.sprite = sprite;
		    /**
		     * Reference to the global renderer for this VM, if one exists.
		     * @type {?RenderWebGLWorker}
		     */
		    this.renderer = null;
		    if (this.runtime) {
		        this.renderer = this.runtime.renderer;
		    }
		    /**
		     * ID of the drawable for this clone returned by the renderer, if rendered.
		     * @type {?Number}
		     */
		    this.drawableID = null;

		    /**
		     * Map of current graphic effect values.
		     * @type {!Object.<string, number>}
		     */
		    this.effects = {
		        'color': 0,
		        'fisheye': 0,
		        'whirl': 0,
		        'pixelate': 0,
		        'mosaic': 0,
		        'brightness': 0,
		        'ghost': 0
		    };

		    /**
		    * Audio engine
		    */
		    this.audioEngine = null;
		    if (this.runtime) {
		        this.audioEngine = new AudioEngine(this.sprite.sounds);
		    }
		}
		util.inherits(Clone, Target);

		/**
		 * Create a clone's drawable with the this.renderer.
		 */
		Clone.prototype.initDrawable = function () {
		    if (this.renderer) {
		        this.drawableID = this.renderer.createDrawable();
		    }
		    // If we're a clone, start the hats.
		    if (!this.isOriginal) {
		        this.runtime.startHats(
		            'control_start_as_clone', null, this
		        );
		    }
		};

		// Clone-level properties.
		/**
		 * Whether this represents an "original" clone, i.e., created by the editor
		 * and not clone blocks. In interface terms, this true for a "sprite."
		 * @type {boolean}
		 */
		Clone.prototype.isOriginal = true;

		/**
		 * Whether this clone represents the Scratch stage.
		 * @type {boolean}
		 */
		Clone.prototype.isStage = false;

		/**
		 * Scratch X coordinate. Currently should range from -240 to 240.
		 * @type {Number}
		 */
		Clone.prototype.x = 0;

		/**
		 * Scratch Y coordinate. Currently should range from -180 to 180.
		 * @type {number}
		 */
		Clone.prototype.y = 0;

		/**
		 * Scratch direction. Currently should range from -179 to 180.
		 * @type {number}
		 */
		Clone.prototype.direction = 90;

		/**
		 * Whether the clone is currently visible.
		 * @type {boolean}
		 */
		Clone.prototype.visible = true;

		/**
		 * Size of clone as a percent of costume size. Ranges from 5% to 535%.
		 * @type {number}
		 */
		Clone.prototype.size = 100;

		/**
		 * Currently selected costume index.
		 * @type {number}
		 */
		Clone.prototype.currentCostume = 0;

		/**
		 * Rotation style for "all around"/spinning.
		 * @enum
		 */
		Clone.ROTATION_STYLE_ALL_AROUND = 'all around';

		/**
		 * Rotation style for "left-right"/flipping.
		 * @enum
		 */
		Clone.ROTATION_STYLE_LEFT_RIGHT = 'left-right';

		/**
		 * Rotation style for "no rotation."
		 * @enum
		 */
		Clone.ROTATION_STYLE_NONE = 'don\'t rotate';

		/**
		 * Current rotation style.
		 * @type {!string}
		 */
		Clone.prototype.rotationStyle = Clone.ROTATION_STYLE_ALL_AROUND;

		// End clone-level properties.

		/**
		 * Set the X and Y coordinates of a clone.
		 * @param {!number} x New X coordinate of clone, in Scratch coordinates.
		 * @param {!number} y New Y coordinate of clone, in Scratch coordinates.
		 */
		Clone.prototype.setXY = function (x, y) {
		    if (this.isStage) {
		        return;
		    }
		    this.x = x;
		    this.y = y;
		    if (this.renderer) {
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            position: [this.x, this.y]
		        });
		    }
		};

		/**
		 * Get the rendered direction and scale, after applying rotation style.
		 * @return {Object<string, number>} Direction and scale to render.
		 */
		Clone.prototype._getRenderedDirectionAndScale = function () {
		    // Default: no changes to `this.direction` or `this.scale`.
		    var finalDirection = this.direction;
		    var finalScale = [this.size, this.size];
		    if (this.rotationStyle == Clone.ROTATION_STYLE_NONE) {
		        // Force rendered direction to be 90.
		        finalDirection = 90;
		    } else if (this.rotationStyle === Clone.ROTATION_STYLE_LEFT_RIGHT) {
		        // Force rendered direction to be 90, and flip drawable if needed.
		        finalDirection = 90;
		        var scaleFlip = (this.direction < 0) ? -1 : 1;
		        finalScale = [scaleFlip * this.size, this.size];
		    }
		    return {direction: finalDirection, scale: finalScale};
		};

		/**
		 * Set the direction of a clone.
		 * @param {!number} direction New direction of clone.
		 */
		Clone.prototype.setDirection = function (direction) {
		    if (this.isStage) {
		        return;
		    }
		    // Keep direction between -179 and +180.
		    this.direction = MathUtil.wrapClamp(direction, -179, 180);
		    if (this.renderer) {
		        var renderedDirectionScale = this._getRenderedDirectionAndScale();
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            direction: renderedDirectionScale.direction,
		            scale: renderedDirectionScale.scale
		        });
		    }
		};

		/**
		 * Set a say bubble on this clone.
		 * @param {?string} type Type of say bubble: "say", "think", or null.
		 * @param {?string} message Message to put in say bubble.
		 */
		Clone.prototype.setSay = function (type, message) {
		    if (this.isStage) {
		        return;
		    }
		    // @todo: Render to stage.
		    if (!type || !message) {
		        console.log('Clearing say bubble');
		        return;
		    }
		    console.log('Setting say bubble:', type, message);
		};

		/**
		 * Set visibility of the clone; i.e., whether it's shown or hidden.
		 * @param {!boolean} visible True if the sprite should be shown.
		 */
		Clone.prototype.setVisible = function (visible) {
		    if (this.isStage) {
		        return;
		    }
		    this.visible = visible;
		    if (this.renderer) {
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            visible: this.visible
		        });
		    }
		};

		/**
		 * Set size of the clone, as a percentage of the costume size.
		 * @param {!number} size Size of clone, from 5 to 535.
		 */
		Clone.prototype.setSize = function (size) {
		    if (this.isStage) {
		        return;
		    }
		    // Keep size between 5% and 535%.
		    this.size = MathUtil.clamp(size, 5, 535);
		    if (this.renderer) {
		        var renderedDirectionScale = this._getRenderedDirectionAndScale();
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            direction: renderedDirectionScale.direction,
		            scale: renderedDirectionScale.scale
		        });
		    }
		};

		/**
		 * Set a particular graphic effect on this clone.
		 * @param {!string} effectName Name of effect (see `Clone.prototype.effects`).
		 * @param {!number} value Numerical magnitude of effect.
		 */
		Clone.prototype.setEffect = function (effectName, value) {
		    if (!this.effects.hasOwnProperty(effectName)) return;
		    this.effects[effectName] = value;
		    if (this.renderer) {
		        var props = {};
		        props[effectName] = this.effects[effectName];
		        this.renderer.updateDrawableProperties(this.drawableID, props);
		    }
		};

		/**
		 * Clear all graphic effects on this clone.
		 */
		Clone.prototype.clearEffects = function () {
		    for (var effectName in this.effects) {
		        this.effects[effectName] = 0;
		    }
		    if (this.renderer) {
		        this.renderer.updateDrawableProperties(this.drawableID, this.effects);
		    }
		};

		/**
		 * Set the current costume of this clone.
		 * @param {number} index New index of costume.
		 */
		Clone.prototype.setCostume = function (index) {
		    // Keep the costume index within possible values.
		    index = Math.round(index);
		    this.currentCostume = MathUtil.wrapClamp(
		        index, 0, this.sprite.costumes.length - 1
		    );
		    if (this.renderer) {
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            skin: this.sprite.costumes[this.currentCostume].skin
		        });
		    }
		};

		/**
		 * Update the rotation style for this clone.
		 * @param {!string} rotationStyle New rotation style.
		 */
		Clone.prototype.setRotationStyle = function (rotationStyle) {
		    if (rotationStyle == Clone.ROTATION_STYLE_NONE) {
		        this.rotationStyle = Clone.ROTATION_STYLE_NONE;
		    } else if (rotationStyle == Clone.ROTATION_STYLE_ALL_AROUND) {
		        this.rotationStyle = Clone.ROTATION_STYLE_ALL_AROUND;
		    } else if (rotationStyle == Clone.ROTATION_STYLE_LEFT_RIGHT) {
		        this.rotationStyle = Clone.ROTATION_STYLE_LEFT_RIGHT;
		    }
		    if (this.renderer) {
		        var renderedDirectionScale = this._getRenderedDirectionAndScale();
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            direction: renderedDirectionScale.direction,
		            scale: renderedDirectionScale.scale
		        });
		    }
		};

		/**
		 * Get a costume index of this clone, by name of the costume.
		 * @param {?string} costumeName Name of a costume.
		 * @return {number} Index of the named costume, or -1 if not present.
		 */
		Clone.prototype.getCostumeIndexByName = function (costumeName) {
		    for (var i = 0; i < this.sprite.costumes.length; i++) {
		        if (this.sprite.costumes[i].name == costumeName) {
		            return i;
		        }
		    }
		    return -1;
		};

		/**
		 * Get a sound index of this clone, by name of the sound.
		 * @param {?string} soundName Name of a sound.
		 * @return {number} Index of the named sound, or -1 if not present.
		 */
		Clone.prototype.getSoundIndexByName = function (soundName) {
		    for (var i = 0; i < this.sprite.sounds.length; i++) {
		        if (this.sprite.sounds[i].name == soundName) {
		            return i;
		        }
		    }
		    return -1;
		};

		/**
		 * Update all drawable properties for this clone.
		 * Use when a batch has changed, e.g., when the drawable is first created.
		 */
		Clone.prototype.updateAllDrawableProperties = function () {
		    if (this.renderer) {
		        var renderedDirectionScale = this._getRenderedDirectionAndScale();
		        this.renderer.updateDrawableProperties(this.drawableID, {
		            position: [this.x, this.y],
		            direction: renderedDirectionScale.direction,
		            scale: renderedDirectionScale.scale,
		            visible: this.visible,
		            skin: this.sprite.costumes[this.currentCostume].skin
		        });
		    }
		};

		/**
		 * Return the human-readable name for this clone, i.e., the sprite's name.
		 * @override
		 * @returns {string} Human-readable name for the clone.
		 */
		Clone.prototype.getName = function () {
		    return this.sprite.name;
		};

		/**
		 * Return whether the clone is touching a color.
		 * @param {Array.<number>} rgb [r,g,b], values between 0-255.
		 * @return {Promise.<Boolean>} True iff the clone is touching the color.
		 */
		Clone.prototype.isTouchingColor = function (rgb) {
		    if (this.renderer) {
		        return this.renderer.isTouchingColor(this.drawableID, rgb);
		    }
		    return false;
		};

		/**
		 * Return whether the clone's color is touching a color.
		 * @param {Object} targetRgb {Array.<number>} [r,g,b], values between 0-255.
		 * @param {Object} maskRgb {Array.<number>} [r,g,b], values between 0-255.
		 * @return {Promise.<Boolean>} True iff the clone's color is touching the color.
		 */
		Clone.prototype.colorIsTouchingColor = function (targetRgb, maskRgb) {
		    if (this.renderer) {
		        return this.renderer.isTouchingColor(
		            this.drawableID,
		            targetRgb,
		            maskRgb
		        );
		    }
		    return false;
		};

		/**
		 * Make a clone of this clone, copying any run-time properties.
		 * If we've hit the global clone limit, returns null.
		 * @return {!Clone} New clone object.
		 */
		Clone.prototype.makeClone = function () {
		    if (!this.runtime.clonesAvailable()) {
		        return; // Hit max clone limit.
		    }
		    this.runtime.changeCloneCounter(1);
		    var newClone = this.sprite.createClone();
		    newClone.x = this.x;
		    newClone.y = this.y;
		    newClone.direction = this.direction;
		    newClone.visible = this.visible;
		    newClone.size = this.size;
		    newClone.currentCostume = this.currentCostume;
		    newClone.rotationStyle = this.rotationStyle;
		    newClone.effects = JSON.parse(JSON.stringify(this.effects));
		    newClone.variables = JSON.parse(JSON.stringify(this.variables));
		    newClone.lists = JSON.parse(JSON.stringify(this.lists));
		    newClone.initDrawable();
		    newClone.updateAllDrawableProperties();
		    return newClone;
		};

		/**
		 * Called when the project receives a "green flag."
		 * For a clone, this clears graphic effects.
		 */
		Clone.prototype.onGreenFlag = function () {
		    this.clearEffects();
		};

		/**
		 * Dispose of this clone, destroying any run-time properties.
		 */
		Clone.prototype.dispose = function () {
		    this.runtime.changeCloneCounter(-1);
		    if (this.renderer && this.drawableID !== null) {
		        this.renderer.destroyDrawable(this.drawableID);
		    }
		};

		module.exports = Clone;


	/***/ },
	/* 93 */
	/***/ function(module, exports, __webpack_require__) {

		var Blocks = __webpack_require__(11);
		var Variable = __webpack_require__(94);
		var List = __webpack_require__(95);
		var uid = __webpack_require__(96);

		/**
		 * @fileoverview
		 * A Target is an abstract "code-running" object for the Scratch VM.
		 * Examples include sprites/clones or potentially physical-world devices.
		 */

		/**
		 * @param {?Blocks} blocks Blocks instance for the blocks owned by this target.
		 * @constructor
		 */
		function Target (blocks) {
		    if (!blocks) {
		        blocks = new Blocks(this);
		    }
		    /**
		     * A unique ID for this target.
		     * @type {string}
		     */
		    this.id = uid();
		    /**
		     * Blocks run as code for this target.
		     * @type {!Blocks}
		     */
		    this.blocks = blocks;
		    /**
		     * Dictionary of variables and their values for this target.
		     * Key is the variable name.
		     * @type {Object.<string,*>}
		     */
		    this.variables = {};
		    /**
		     * Dictionary of lists and their contents for this target.
		     * Key is the list name.
		     * @type {Object.<string,*>}
		     */
		    this.lists = {};
		}

		/**
		 * Called when the project receives a "green flag."
		 * @abstract
		 */
		Target.prototype.onGreenFlag = function () {};

		/**
		 * Return a human-readable name for this target.
		 * Target implementations should override this.
		 * @abstract
		 * @returns {string} Human-readable name for the target.
		 */
		Target.prototype.getName = function () {
		    return this.id;
		};

		/**
		 * Look up a variable object, and create it if one doesn't exist.
		 * Search begins for local variables; then look for globals.
		 * @param {!string} name Name of the variable.
		 * @return {!Variable} Variable object.
		 */
		Target.prototype.lookupOrCreateVariable = function (name) {
		    // If we have a local copy, return it.
		    if (this.variables.hasOwnProperty(name)) {
		        return this.variables[name];
		    }
		    // If the stage has a global copy, return it.
		    if (this.runtime && !this.isStage) {
		        var stage = this.runtime.getTargetForStage();
		        if (stage.variables.hasOwnProperty(name)) {
		            return stage.variables[name];
		        }
		    }
		    // No variable with this name exists - create it locally.
		    var newVariable = new Variable(name, 0, false);
		    this.variables[name] = newVariable;
		    return newVariable;
		};

		/**
		* Look up a list object for this target, and create it if one doesn't exist.
		* Search begins for local lists; then look for globals.
		* @param {!string} name Name of the list.
		* @return {!List} List object.
		 */
		Target.prototype.lookupOrCreateList = function (name) {
		    // If we have a local copy, return it.
		    if (this.lists.hasOwnProperty(name)) {
		        return this.lists[name];
		    }
		    // If the stage has a global copy, return it.
		    if (this.runtime && !this.isStage) {
		        var stage = this.runtime.getTargetForStage();
		        if (stage.lists.hasOwnProperty(name)) {
		            return stage.lists[name];
		        }
		    }
		    // No list with this name exists - create it locally.
		    var newList = new List(name, []);
		    this.lists[name] = newList;
		    return newList;
		};

		/**
		 * Call to destroy a target.
		 * @abstract
		 */
		Target.prototype.dispose = function () {

		};

		module.exports = Target;


	/***/ },
	/* 94 */
	/***/ function(module, exports) {

		/**
		 * @fileoverview
		 * Object representing a Scratch variable.
		 */

		/**
		 * @param {!string} name Name of the variable.
		 * @param {(string|Number)} value Value of the variable.
		 * @param {boolean} isCloud Whether the variable is stored in the cloud.
		 * @constructor
		 */
		function Variable (name, value, isCloud) {
		    this.name = name;
		    this.value = value;
		    this.isCloud = isCloud;
		}

		module.exports = Variable;


	/***/ },
	/* 95 */
	/***/ function(module, exports) {

		/**
		 * @fileoverview
		 * Object representing a Scratch list.
		 */

		 /**
		  * @param {!string} name Name of the list.
		  * @param {Array} contents Contents of the list, as an array.
		  * @constructor
		  */
		function List (name, contents) {
		    this.name = name;
		    this.contents = contents;
		}

		module.exports = List;


	/***/ },
	/* 96 */
	/***/ function(module, exports) {

		/**
		 * @fileoverview UID generator, from Blockly.
		 */

		/**
		 * Legal characters for the unique ID.
		 * Should be all on a US keyboard.  No XML special characters or control codes.
		 * Removed $ due to issue 251.
		 * @private
		 */
		var soup_ = '!#%()*+,-./:;=?@[]^_`{|}~' +
		    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';

		/**
		 * Generate a unique ID, from Blockly.  This should be globally unique.
		 * 87 characters ^ 20 length > 128 bits (better than a UUID).
		 * @return {string} A globally unique ID string.
		 */
		var uid = function () {
		    var length = 20;
		    var soupLength = soup_.length;
		    var id = [];
		    for (var i = 0; i < length; i++) {
		        id[i] = soup_.charAt(Math.random() * soupLength);
		    }
		    return id.join('');
		};

		module.exports = uid;


	/***/ },
	/* 97 */
	/***/ function(module, exports) {

		module.exports =
		/******/ (function(modules) { // webpackBootstrap
		/******/ 	// The module cache
		/******/ 	var installedModules = {};

		/******/ 	// The require function
		/******/ 	function __webpack_require__(moduleId) {

		/******/ 		// Check if module is in cache
		/******/ 		if(installedModules[moduleId])
		/******/ 			return installedModules[moduleId].exports;

		/******/ 		// Create a new module (and put it into the cache)
		/******/ 		var module = installedModules[moduleId] = {
		/******/ 			exports: {},
		/******/ 			id: moduleId,
		/******/ 			loaded: false
		/******/ 		};

		/******/ 		// Execute the module function
		/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

		/******/ 		// Flag the module as loaded
		/******/ 		module.loaded = true;

		/******/ 		// Return the exports of the module
		/******/ 		return module.exports;
		/******/ 	}


		/******/ 	// expose the modules object (__webpack_modules__)
		/******/ 	__webpack_require__.m = modules;

		/******/ 	// expose the module cache
		/******/ 	__webpack_require__.c = installedModules;

		/******/ 	// __webpack_public_path__
		/******/ 	__webpack_require__.p = "";

		/******/ 	// Load entry module and return exports
		/******/ 	return __webpack_require__(0);
		/******/ })
		/************************************************************************/
		/******/ ([
		/* 0 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict';

			var Tone = __webpack_require__(1);
			var Soundfont = __webpack_require__(2);

			function AudioEngine(sounds) {

			    // tone setup

			    this.tone = new Tone();

			    // effects setup
			    // each effect has a single parameter controlled by the effects block

			    this.delay = new Tone.FeedbackDelay(0.25, 0.5);
			    this.panner = new Tone.Panner();
			    this.reverb = new Tone.Freeverb();
			    this.pitchShiftRatio;

			    // reset effects to their default parameters
			    this.clearEffects();

			    // the effects are chained to an effects node for this clone, then to the master output
			    // so audio is sent from each sampler or instrument, through the effects in order, then out
			    // note that the pitch effect works differently - it sets the playback rate for each sampler
			    this.effectsNode = new Tone.Gain();
			    this.effectsNode.chain(this.delay, this.panner, this.reverb, Tone.Master);

			    // drum sounds

			    // var drumFileNames = ['high_conga', 'small_cowbell',
			    // 'snare_drum', 'splash cymbal'];
			    // this.drumSamplers = this._loadSoundFiles(drumFileNames);

			    // sound urls - map each url to its tone.sampler
			    this.soundSamplers = [];
			    this.loadSounds(sounds);

			    // soundfont setup

			    // instrument names used by Musyng Kite soundfont, in order to
			    // match scratch instruments
			    this.instrumentNames = ['acoustic_grand_piano', 'electric_piano_1', 'drawbar_organ', 'acoustic_guitar_nylon', 'electric_guitar_clean', 'acoustic_bass', 'pizzicato_strings', 'cello', 'trombone', 'clarinet', 'tenor_sax', 'flute', 'pan_flute', 'bassoon', 'choir_aahs', 'vibraphone', 'music_box', 'steel_drums', 'marimba', 'lead_1_square', 'fx_4_atmosphere'];

			    this.setInstrument(0);

			    // theremin setup

			    this.theremin = new Tone.Synth();
			    this.portamentoTime = 0.25;
			    this.thereminVibrato = new Tone.Vibrato(4, 0.5);
			    this.theremin.chain(this.thereminVibrato, this.effectsNode);
			    this.thereminTimeout;
			    this.thereminIsPlaying = false;
			}

			AudioEngine.prototype.loadSounds = function (sounds) {
			    for (var i = 0; i < sounds.length; i++) {
			        var url = sounds[i].fileUrl;
			        // skip adpcm form sounds since we can't load them yet
			        if (sounds[i].format == 'adpcm') {
			            continue;
			        }
			        var sampler = new Tone.Sampler(url);
			        sampler.connect(this.effectsNode);
			        // this.soundSamplers.push(sampler);
			        this.soundSamplers[i] = sampler;
			    }
			};

			AudioEngine.prototype.playSound = function (index) {
			    this.soundSamplers[index].triggerAttack();
			    this.soundSamplers[index].player.playbackRate = 1 + this.pitchShiftRatio;
			};

			AudioEngine.prototype.getSoundDuration = function (index) {
			    return this.soundSamplers[index].player.buffer.duration;
			};

			AudioEngine.prototype.playNoteForBeats = function (note, beats) {
			    this.instrument.play(note, Tone.context.currentTime, { duration: Number(beats) });
			};

			AudioEngine.prototype.playThereminForBeats = function (note, beats) {
			    // if the theremin is playing
			    //      ramp to new frequency
			    // else
			    //      trigger attack
			    // create a timeout for slightly longer than the duration of the block
			    // that releases the theremin - so we can slide continuously between
			    // successive notes without releasing and attacking

			    var freq = this._midiToFreq(note);

			    if (this.thereminIsPlaying) {
			        this.theremin.frequency.rampTo(freq, this.portamentoTime);
			    } else {
			        this.theremin.triggerAttack(freq);
			        this.thereminIsPlaying = true;
			    }
			    clearTimeout(this.thereminTimeout);
			    this.thereminTimeout = setTimeout(function () {
			        this.theremin.triggerRelease();
			        this.thereminIsPlaying = false;
			    }.bind(this), 1000 * beats + 100);
			};

			AudioEngine.prototype._midiToFreq = function (midiNote) {
			    var freq = this.tone.intervalToFrequencyRatio(midiNote - 60) * 261.63; // 60 is C4
			    return freq;
			};

			AudioEngine.prototype.playDrumForBeats = function (drumNum) {
			    this.drumSamplers[drumNum].triggerAttack();
			};

			AudioEngine.prototype.stopAllSounds = function () {
			    // stop drum notes
			    // for (var i = 0; i<this.drumSamplers.length; i++) {
			    //     this.drumSamplers[i].triggerRelease();
			    // }
			    // stop sounds triggered with playSound (indexed by their urls)
			    for (var key in this.soundSamplers) {
			        this.soundSamplers[key].triggerRelease();
			    }
			    // stop soundfont notes
			    this.instrument.stop();
			};

			AudioEngine.prototype.setEffect = function (effect, value) {
			    switch (effect) {
			        case 'ECHO':
			            this.delay.wet.value = value / 100 / 2; // max 50% wet
			            break;
			        case 'PAN':
			            this.panner.pan.value = value / 100;
			            break;
			        case 'REVERB':
			            this.reverb.wet.value = value / 100;
			            break;
			        case 'PITCH':
			            this._setPitchShift(value / 20);
			            break;
			    }
			};

			AudioEngine.prototype.changeEffect = function (effect, value) {
			    switch (effect) {
			        case 'ECHO':
			            this.delay.wet.value += value / 100 / 2; // max 50% wet
			            this.delay.wet.value = this._clamp(this.delay.wet.value, 0, 0.5);
			            break;
			        case 'PAN':
			            this.panner.pan.value += value / 100;
			            this.panner.pan.value = this._clamp(this.panner.pan.value, -1, 1);
			            break;
			        case 'REVERB':
			            this.reverb.wet.value += value / 100;
			            this.reverb.wet.value = this._clamp(this.reverb.wet.value, 0, 1);
			            break;
			        case 'PITCH':
			            this._setPitchShift(this.pitchShiftRatio + value / 20);
			            break;
			    }
			};

			AudioEngine.prototype._setPitchShift = function (value) {
			    this.pitchShiftRatio = value;
			    for (var i in this.soundSamplers) {
			        this.soundSamplers[i].player.playbackRate = 1 + this.pitchShiftRatio;
			    }
			};

			AudioEngine.prototype.setInstrument = function (instrumentNum) {
			    return Soundfont.instrument(Tone.context, this.instrumentNames[instrumentNum]).then(function (inst) {
			        this.instrument = inst;
			        this.instrument.connect(this.effectsNode);
			    }.bind(this));
			};

			AudioEngine.prototype.clearEffects = function () {
			    this.delay.wet.value = 0;
			    this._setPitchShift(0);
			    this.panner.pan.value = 0;
			    this.reverb.wet.value = 0;
			};

			AudioEngine.prototype._clamp = function (input, min, max) {
			    return Math.min(Math.max(input, min), max);
			};

			module.exports = AudioEngine;

		/***/ },
		/* 1 */
		/***/ function(module, exports, __webpack_require__) {

			var __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){

				//UMD
				if ( true ) {
					!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
						return factory();
					}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
				} else if (typeof module === "object") {
					module.exports = factory();
			 	} else {
					root.Tone = factory();
				}

			}(this, function(){

				"use strict";
				
				var Tone;
				//constructs the main Tone object
				function Main(func){
					Tone = func();
				}
				//invokes each of the modules with the main Tone object as the argument
				function Module(func){
					func(Tone);
				}	/**
				 *  Tone.js
				 *  @author Yotam Mann
				 *  @license http://opensource.org/licenses/MIT MIT License
				 *  @copyright 2014-2016 Yotam Mann
				 */
				Main(function () {
				    
				    //////////////////////////////////////////////////////////////////////////
				    //	WEB AUDIO CONTEXT
				    ///////////////////////////////////////////////////////////////////////////
				    function isUndef(val) {
				        return typeof val === 'undefined';
				    }
				    function isFunction(val) {
				        return typeof val === 'function';
				    }
				    var audioContext;
				    //polyfill for AudioContext and OfflineAudioContext
				    if (isUndef(window.AudioContext)) {
				        window.AudioContext = window.webkitAudioContext;
				    }
				    if (isUndef(window.OfflineAudioContext)) {
				        window.OfflineAudioContext = window.webkitOfflineAudioContext;
				    }
				    if (!isUndef(AudioContext)) {
				        audioContext = new AudioContext();
				    } else {
				        throw new Error('Web Audio is not supported in this browser');
				    }
				    //SHIMS////////////////////////////////////////////////////////////////////
				    if (!isFunction(AudioContext.prototype.createGain)) {
				        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
				    }
				    if (!isFunction(AudioContext.prototype.createDelay)) {
				        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
				    }
				    if (!isFunction(AudioContext.prototype.createPeriodicWave)) {
				        AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
				    }
				    if (!isFunction(AudioBufferSourceNode.prototype.start)) {
				        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;
				    }
				    if (!isFunction(AudioBufferSourceNode.prototype.stop)) {
				        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;
				    }
				    if (!isFunction(OscillatorNode.prototype.start)) {
				        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;
				    }
				    if (!isFunction(OscillatorNode.prototype.stop)) {
				        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;
				    }
				    if (!isFunction(OscillatorNode.prototype.setPeriodicWave)) {
				        OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
				    }
				    //extend the connect function to include Tones
				    if (isUndef(AudioNode.prototype._nativeConnect)) {
				        AudioNode.prototype._nativeConnect = AudioNode.prototype.connect;
				        AudioNode.prototype.connect = function (B, outNum, inNum) {
				            if (B.input) {
				                if (Array.isArray(B.input)) {
				                    if (isUndef(inNum)) {
				                        inNum = 0;
				                    }
				                    this.connect(B.input[inNum]);
				                } else {
				                    this.connect(B.input, outNum, inNum);
				                }
				            } else {
				                try {
				                    if (B instanceof AudioNode) {
				                        this._nativeConnect(B, outNum, inNum);
				                    } else {
				                        this._nativeConnect(B, outNum);
				                    }
				                } catch (e) {
				                    throw new Error('error connecting to node: ' + B);
				                }
				            }
				        };
				    }
				    ///////////////////////////////////////////////////////////////////////////
				    //	TONE
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  @class  Tone is the base class of all other classes. It provides 
					 *          a lot of methods and functionality to all classes that extend
					 *          it. 
					 *  
					 *  @constructor
					 *  @alias Tone
					 *  @param {number} [inputs=1] the number of input nodes
					 *  @param {number} [outputs=1] the number of output nodes
					 */
				    var Tone = function (inputs, outputs) {
				        /**
						 *  the input node(s)
						 *  @type {GainNode|Array}
						 */
				        if (isUndef(inputs) || inputs === 1) {
				            this.input = this.context.createGain();
				        } else if (inputs > 1) {
				            this.input = new Array(inputs);
				        }
				        /**
						 *  the output node(s)
						 *  @type {GainNode|Array}
						 */
				        if (isUndef(outputs) || outputs === 1) {
				            this.output = this.context.createGain();
				        } else if (outputs > 1) {
				            this.output = new Array(inputs);
				        }
				    };
				    /**
					 *  Set the parameters at once. Either pass in an
					 *  object mapping parameters to values, or to set a
					 *  single parameter, by passing in a string and value.
					 *  The last argument is an optional ramp time which 
					 *  will ramp any signal values to their destination value
					 *  over the duration of the rampTime.
					 *  @param {Object|string} params
					 *  @param {number=} value
					 *  @param {Time=} rampTime
					 *  @returns {Tone} this
					 *  @example
					 * //set values using an object
					 * filter.set({
					 * 	"frequency" : 300,
					 * 	"type" : highpass
					 * });
					 *  @example
					 * filter.set("type", "highpass");
					 *  @example
					 * //ramp to the value 220 over 3 seconds. 
					 * oscillator.set({
					 * 	"frequency" : 220
					 * }, 3);
					 */
				    Tone.prototype.set = function (params, value, rampTime) {
				        if (this.isObject(params)) {
				            rampTime = value;
				        } else if (this.isString(params)) {
				            var tmpObj = {};
				            tmpObj[params] = value;
				            params = tmpObj;
				        }
				        for (var attr in params) {
				            value = params[attr];
				            var parent = this;
				            if (attr.indexOf('.') !== -1) {
				                var attrSplit = attr.split('.');
				                for (var i = 0; i < attrSplit.length - 1; i++) {
				                    parent = parent[attrSplit[i]];
				                }
				                attr = attrSplit[attrSplit.length - 1];
				            }
				            var param = parent[attr];
				            if (isUndef(param)) {
				                continue;
				            }
				            if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
				                if (param.value !== value) {
				                    if (isUndef(rampTime)) {
				                        param.value = value;
				                    } else {
				                        param.rampTo(value, rampTime);
				                    }
				                }
				            } else if (param instanceof AudioParam) {
				                if (param.value !== value) {
				                    param.value = value;
				                }
				            } else if (param instanceof Tone) {
				                param.set(value);
				            } else if (param !== value) {
				                parent[attr] = value;
				            }
				        }
				        return this;
				    };
				    /**
					 *  Get the object's attributes. Given no arguments get
					 *  will return all available object properties and their corresponding
					 *  values. Pass in a single attribute to retrieve or an array
					 *  of attributes. The attribute strings can also include a "."
					 *  to access deeper properties.
					 *  @example
					 * osc.get();
					 * //returns {"type" : "sine", "frequency" : 440, ...etc}
					 *  @example
					 * osc.get("type");
					 * //returns { "type" : "sine"}
					 * @example
					 * //use dot notation to access deep properties
					 * synth.get(["envelope.attack", "envelope.release"]);
					 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
					 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return 
					 *  					                  all available.
					 *  @returns {Object}
					 */
				    Tone.prototype.get = function (params) {
				        if (isUndef(params)) {
				            params = this._collectDefaults(this.constructor);
				        } else if (this.isString(params)) {
				            params = [params];
				        }
				        var ret = {};
				        for (var i = 0; i < params.length; i++) {
				            var attr = params[i];
				            var parent = this;
				            var subRet = ret;
				            if (attr.indexOf('.') !== -1) {
				                var attrSplit = attr.split('.');
				                for (var j = 0; j < attrSplit.length - 1; j++) {
				                    var subAttr = attrSplit[j];
				                    subRet[subAttr] = subRet[subAttr] || {};
				                    subRet = subRet[subAttr];
				                    parent = parent[subAttr];
				                }
				                attr = attrSplit[attrSplit.length - 1];
				            }
				            var param = parent[attr];
				            if (this.isObject(params[attr])) {
				                subRet[attr] = param.get();
				            } else if (Tone.Signal && param instanceof Tone.Signal) {
				                subRet[attr] = param.value;
				            } else if (Tone.Param && param instanceof Tone.Param) {
				                subRet[attr] = param.value;
				            } else if (param instanceof AudioParam) {
				                subRet[attr] = param.value;
				            } else if (param instanceof Tone) {
				                subRet[attr] = param.get();
				            } else if (!isFunction(param) && !isUndef(param)) {
				                subRet[attr] = param;
				            }
				        }
				        return ret;
				    };
				    /**
					 *  collect all of the default attributes in one
					 *  @private
					 *  @param {function} constr the constructor to find the defaults from
					 *  @return {Array} all of the attributes which belong to the class
					 */
				    Tone.prototype._collectDefaults = function (constr) {
				        var ret = [];
				        if (!isUndef(constr.defaults)) {
				            ret = Object.keys(constr.defaults);
				        }
				        if (!isUndef(constr._super)) {
				            var superDefs = this._collectDefaults(constr._super);
				            //filter out repeats
				            for (var i = 0; i < superDefs.length; i++) {
				                if (ret.indexOf(superDefs[i]) === -1) {
				                    ret.push(superDefs[i]);
				                }
				            }
				        }
				        return ret;
				    };
				    /**
					 *  @returns {string} returns the name of the class as a string
					 */
				    Tone.prototype.toString = function () {
				        for (var className in Tone) {
				            var isLetter = className[0].match(/^[A-Z]$/);
				            var sameConstructor = Tone[className] === this.constructor;
				            if (isFunction(Tone[className]) && isLetter && sameConstructor) {
				                return className;
				            }
				        }
				        return 'Tone';
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	CLASS VARS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  A static pointer to the audio context accessible as Tone.context. 
					 *  @type {AudioContext}
					 */
				    Tone.context = audioContext;
				    /**
					 *  The audio context.
					 *  @type {AudioContext}
					 */
				    Tone.prototype.context = Tone.context;
				    /**
					 *  the default buffer size
					 *  @type {number}
					 *  @static
					 *  @const
					 */
				    Tone.prototype.bufferSize = 2048;
				    /**
					 *  The delay time of a single frame (128 samples according to the spec). 
					 *  @type {number}
					 *  @static
					 *  @const
					 */
				    Tone.prototype.blockTime = 128 / Tone.context.sampleRate;
				    /**
					 *  The time of a single sample
					 *  @type {number}
					 *  @static
					 *  @const
					 */
				    Tone.prototype.sampleTime = 1 / Tone.context.sampleRate;
				    ///////////////////////////////////////////////////////////////////////////
				    //	CONNECTIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  disconnect and dispose
					 *  @returns {Tone} this
					 */
				    Tone.prototype.dispose = function () {
				        if (!this.isUndef(this.input)) {
				            if (this.input instanceof AudioNode) {
				                this.input.disconnect();
				            }
				            this.input = null;
				        }
				        if (!this.isUndef(this.output)) {
				            if (this.output instanceof AudioNode) {
				                this.output.disconnect();
				            }
				            this.output = null;
				        }
				        return this;
				    };
				    /**
					 *  a silent connection to the DesinationNode
					 *  which will ensure that anything connected to it
					 *  will not be garbage collected
					 *  
					 *  @private
					 */
				    var _silentNode = null;
				    /**
					 *  makes a connection to ensure that the node will not be garbage collected
					 *  until 'dispose' is explicitly called
					 *
					 *  use carefully. circumvents JS and WebAudio's normal Garbage Collection behavior
					 *  @returns {Tone} this
					 */
				    Tone.prototype.noGC = function () {
				        this.output.connect(_silentNode);
				        return this;
				    };
				    AudioNode.prototype.noGC = function () {
				        this.connect(_silentNode);
				        return this;
				    };
				    /**
					 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
					 *  @param  {Tone | AudioParam | AudioNode} unit 
					 *  @param {number} [outputNum=0] optionally which output to connect from
					 *  @param {number} [inputNum=0] optionally which input to connect to
					 *  @returns {Tone} this
					 */
				    Tone.prototype.connect = function (unit, outputNum, inputNum) {
				        if (Array.isArray(this.output)) {
				            outputNum = this.defaultArg(outputNum, 0);
				            this.output[outputNum].connect(unit, 0, inputNum);
				        } else {
				            this.output.connect(unit, outputNum, inputNum);
				        }
				        return this;
				    };
				    /**
					 *  disconnect the output
					 *  @param {Number|AudioNode} output Either the output index to disconnect
					 *                                   if the output is an array, or the
					 *                                   node to disconnect from.
					 *  @returns {Tone} this
					 */
				    Tone.prototype.disconnect = function (output) {
				        if (Array.isArray(this.output)) {
				            output = this.defaultArg(output, 0);
				            this.output[output].disconnect();
				        } else if (!this.isUndef(output)) {
				            this.output.disconnect(output);
				        } else {
				            this.output.disconnect();
				        }
				        return this;
				    };
				    /**
					 *  connect together all of the arguments in series
					 *  @param {...AudioParam|Tone|AudioNode} nodes
					 *  @returns {Tone} this
					 */
				    Tone.prototype.connectSeries = function () {
				        if (arguments.length > 1) {
				            var currentUnit = arguments[0];
				            for (var i = 1; i < arguments.length; i++) {
				                var toUnit = arguments[i];
				                currentUnit.connect(toUnit);
				                currentUnit = toUnit;
				            }
				        }
				        return this;
				    };
				    /**
					 *  Connect the output of this node to the rest of the nodes in series.
					 *  @example
					 *  //connect a node to an effect, panVol and then to the master output
					 *  node.chain(effect, panVol, Tone.Master);
					 *  @param {...AudioParam|Tone|AudioNode} nodes
					 *  @returns {Tone} this
					 */
				    Tone.prototype.chain = function () {
				        if (arguments.length > 0) {
				            var currentUnit = this;
				            for (var i = 0; i < arguments.length; i++) {
				                var toUnit = arguments[i];
				                currentUnit.connect(toUnit);
				                currentUnit = toUnit;
				            }
				        }
				        return this;
				    };
				    /**
					 *  connect the output of this node to the rest of the nodes in parallel.
					 *  @param {...AudioParam|Tone|AudioNode} nodes
					 *  @returns {Tone} this
					 */
				    Tone.prototype.fan = function () {
				        if (arguments.length > 0) {
				            for (var i = 0; i < arguments.length; i++) {
				                this.connect(arguments[i]);
				            }
				        }
				        return this;
				    };
				    //give native nodes chain and fan methods
				    AudioNode.prototype.chain = Tone.prototype.chain;
				    AudioNode.prototype.fan = Tone.prototype.fan;
				    ///////////////////////////////////////////////////////////////////////////
				    //	UTILITIES / HELPERS / MATHS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  If the `given` parameter is undefined, use the `fallback`. 
					 *  If both `given` and `fallback` are object literals, it will
					 *  return a deep copy which includes all of the parameters from both 
					 *  objects. If a parameter is undefined in given, it will return
					 *  the fallback property. 
					 *  <br><br>
					 *  WARNING: if object is self referential, it will go into an an 
					 *  infinite recursive loop.
					 *  
					 *  @param  {*} given    
					 *  @param  {*} fallback 
					 *  @return {*}          
					 */
				    Tone.prototype.defaultArg = function (given, fallback) {
				        if (this.isObject(given) && this.isObject(fallback)) {
				            var ret = {};
				            //make a deep copy of the given object
				            for (var givenProp in given) {
				                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);
				            }
				            for (var fallbackProp in fallback) {
				                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);
				            }
				            return ret;
				        } else {
				            return isUndef(given) ? fallback : given;
				        }
				    };
				    /**
					 *  returns the args as an options object with given arguments
					 *  mapped to the names provided. 
					 *
					 *  if the args given is an array containing only one object, it is assumed
					 *  that that's already the options object and will just return it. 
					 *  
					 *  @param  {Array} values  the 'arguments' object of the function
					 *  @param  {Array} keys the names of the arguments as they
					 *                                 should appear in the options object
					 *  @param {Object=} defaults optional defaults to mixin to the returned 
					 *                            options object                              
					 *  @return {Object}       the options object with the names mapped to the arguments
					 */
				    Tone.prototype.optionsObject = function (values, keys, defaults) {
				        var options = {};
				        if (values.length === 1 && this.isObject(values[0])) {
				            options = values[0];
				        } else {
				            for (var i = 0; i < keys.length; i++) {
				                options[keys[i]] = values[i];
				            }
				        }
				        if (!this.isUndef(defaults)) {
				            return this.defaultArg(options, defaults);
				        } else {
				            return options;
				        }
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    // TYPE CHECKING
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  test if the arg is undefined
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is undefined
					 *  @function
					 */
				    Tone.prototype.isUndef = isUndef;
				    /**
					 *  test if the arg is a function
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is a function
					 *  @function
					 */
				    Tone.prototype.isFunction = isFunction;
				    /**
					 *  Test if the argument is a number.
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is a number
					 */
				    Tone.prototype.isNumber = function (arg) {
				        return typeof arg === 'number';
				    };
				    /**
					 *  Test if the given argument is an object literal (i.e. `{}`);
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is an object literal.
					 */
				    Tone.prototype.isObject = function (arg) {
				        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;
				    };
				    /**
					 *  Test if the argument is a boolean.
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is a boolean
					 */
				    Tone.prototype.isBoolean = function (arg) {
				        return typeof arg === 'boolean';
				    };
				    /**
					 *  Test if the argument is an Array
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is an array
					 */
				    Tone.prototype.isArray = function (arg) {
				        return Array.isArray(arg);
				    };
				    /**
					 *  Test if the argument is a string.
					 *  @param {*} arg the argument to test
					 *  @returns {boolean} true if the arg is a string
					 */
				    Tone.prototype.isString = function (arg) {
				        return typeof arg === 'string';
				    };
				    /**
					 *  An empty function.
					 *  @static
					 */
				    Tone.noOp = function () {
				    };
				    /**
					 *  Make the property not writable. Internal use only. 
					 *  @private
					 *  @param  {string}  property  the property to make not writable
					 */
				    Tone.prototype._readOnly = function (property) {
				        if (Array.isArray(property)) {
				            for (var i = 0; i < property.length; i++) {
				                this._readOnly(property[i]);
				            }
				        } else {
				            Object.defineProperty(this, property, {
				                writable: false,
				                enumerable: true
				            });
				        }
				    };
				    /**
					 *  Make an attribute writeable. Interal use only. 
					 *  @private
					 *  @param  {string}  property  the property to make writable
					 */
				    Tone.prototype._writable = function (property) {
				        if (Array.isArray(property)) {
				            for (var i = 0; i < property.length; i++) {
				                this._writable(property[i]);
				            }
				        } else {
				            Object.defineProperty(this, property, { writable: true });
				        }
				    };
				    /**
					 * Possible play states. 
					 * @enum {string}
					 */
				    Tone.State = {
				        Started: 'started',
				        Stopped: 'stopped',
				        Paused: 'paused'
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    // GAIN CONVERSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Equal power gain scale. Good for cross-fading.
					 *  @param  {NormalRange} percent (0-1)
					 *  @return {Number}         output gain (0-1)
					 */
				    Tone.prototype.equalPowerScale = function (percent) {
				        var piFactor = 0.5 * Math.PI;
				        return Math.sin(percent * piFactor);
				    };
				    /**
					 *  Convert decibels into gain.
					 *  @param  {Decibels} db
					 *  @return {Number}   
					 */
				    Tone.prototype.dbToGain = function (db) {
				        return Math.pow(2, db / 6);
				    };
				    /**
					 *  Convert gain to decibels.
					 *  @param  {Number} gain (0-1)
					 *  @return {Decibels}   
					 */
				    Tone.prototype.gainToDb = function (gain) {
				        return 20 * (Math.log(gain) / Math.LN10);
				    };
				    /**
					 *  Convert an interval (in semitones) to a frequency ratio.
					 *  @param  {Interval} interval the number of semitones above the base note
					 *  @return {number}          the frequency ratio
					 *  @example
					 * tone.intervalToFrequencyRatio(0); // 1
					 * tone.intervalToFrequencyRatio(12); // 2
					 * tone.intervalToFrequencyRatio(-12); // 0.5
					 */
				    Tone.prototype.intervalToFrequencyRatio = function (interval) {
				        return Math.pow(2, interval / 12);
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	TIMING
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Return the current time of the AudioContext clock.
					 *  @return {Number} the currentTime from the AudioContext
					 */
				    Tone.prototype.now = function () {
				        return this.context.currentTime;
				    };
				    /**
					 *  Return the current time of the AudioContext clock.
					 *  @return {Number} the currentTime from the AudioContext
					 *  @static
					 */
				    Tone.now = function () {
				        return Tone.context.currentTime;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	INHERITANCE
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  have a child inherit all of Tone's (or a parent's) prototype
					 *  to inherit the parent's properties, make sure to call 
					 *  Parent.call(this) in the child's constructor
					 *
					 *  based on closure library's inherit function
					 *
					 *  @static
					 *  @param  {function} 	child  
					 *  @param  {function=} parent (optional) parent to inherit from
					 *                             if no parent is supplied, the child
					 *                             will inherit from Tone
					 */
				    Tone.extend = function (child, parent) {
				        if (isUndef(parent)) {
				            parent = Tone;
				        }
				        function TempConstructor() {
				        }
				        TempConstructor.prototype = parent.prototype;
				        child.prototype = new TempConstructor();
				        /** @override */
				        child.prototype.constructor = child;
				        child._super = parent;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	CONTEXT
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  array of callbacks to be invoked when a new context is added
					 *  @private 
					 *  @private
					 */
				    var newContextCallbacks = [];
				    /**
					 *  invoke this callback when a new context is added
					 *  will be invoked initially with the first context
					 *  @private 
					 *  @static
					 *  @param {function(AudioContext)} callback the callback to be invoked
					 *                                           with the audio context
					 */
				    Tone._initAudioContext = function (callback) {
				        //invoke the callback with the existing AudioContext
				        callback(Tone.context);
				        //add it to the array
				        newContextCallbacks.push(callback);
				    };
				    /**
					 *  Tone automatically creates a context on init, but if you are working
					 *  with other libraries which also create an AudioContext, it can be
					 *  useful to set your own. If you are going to set your own context, 
					 *  be sure to do it at the start of your code, before creating any objects.
					 *  @static
					 *  @param {AudioContext} ctx The new audio context to set
					 */
				    Tone.setContext = function (ctx) {
				        //set the prototypes
				        Tone.prototype.context = ctx;
				        Tone.context = ctx;
				        //invoke all the callbacks
				        for (var i = 0; i < newContextCallbacks.length; i++) {
				            newContextCallbacks[i](ctx);
				        }
				    };
				    //setup the context
				    Tone._initAudioContext(function (audioContext) {
				        //set the blockTime
				        Tone.prototype.blockTime = 128 / audioContext.sampleRate;
				        Tone.prototype.sampleTime = 1 / audioContext.sampleRate;
				        _silentNode = audioContext.createGain();
				        _silentNode.gain.value = 0;
				        _silentNode.connect(audioContext.destination);
				    });
				    Tone.version = 'r8';
				    // allow optional silencing of this log
				    if (!window.TONE_SILENCE_VERSION_LOGGING) {
				        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');
				    }
				    return Tone;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Base class for all Signals. Used Internally. 
					 *
					 *  @constructor
					 *  @extends {Tone}
					 */
				    Tone.SignalBase = function () {
				    };
				    Tone.extend(Tone.SignalBase);
				    /**
					 *  When signals connect to other signals or AudioParams, 
					 *  they take over the output value of that signal or AudioParam. 
					 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
					 *
					 *  @override
					 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
					 *  @param {number} [outputNumber=0] The output number to connect from.
					 *  @param {number} [inputNumber=0] The input number to connect to.
					 *  @returns {Tone.SignalBase} this
					 */
				    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
				        //zero it out so that the signal can have full control
				        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {
				            //cancel changes
				            node._param.cancelScheduledValues(0);
				            //reset the value
				            node._param.value = 0;
				            //mark the value as overridden
				            node.overridden = true;
				        } else if (node instanceof AudioParam) {
				            node.cancelScheduledValues(0);
				            node.value = 0;
				        }
				        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);
				        return this;
				    };
				    return Tone.SignalBase;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Wraps the native Web Audio API 
					 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @param {function|Array|Number} mapping The function used to define the values. 
					 *                                    The mapping function should take two arguments: 
					 *                                    the first is the value at the current position 
					 *                                    and the second is the array position. 
					 *                                    If the argument is an array, that array will be
					 *                                    set as the wave shaping function. The input
					 *                                    signal is an AudioRange [-1, 1] value and the output
					 *                                    signal can take on any numerical values. 
					 *                                    
					 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
					 *  @example
					 * var timesTwo = new Tone.WaveShaper(function(val){
					 * 	return val * 2;
					 * }, 2048);
					 *  @example
					 * //a waveshaper can also be constructed with an array of values
					 * var invert = new Tone.WaveShaper([1, -1]);
					 */
				    Tone.WaveShaper = function (mapping, bufferLen) {
				        /**
						 *  the waveshaper
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._shaper = this.input = this.output = this.context.createWaveShaper();
				        /**
						 *  the waveshapers curve
						 *  @type {Float32Array}
						 *  @private
						 */
				        this._curve = null;
				        if (Array.isArray(mapping)) {
				            this.curve = mapping;
				        } else if (isFinite(mapping) || this.isUndef(mapping)) {
				            this._curve = new Float32Array(this.defaultArg(mapping, 1024));
				        } else if (this.isFunction(mapping)) {
				            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));
				            this.setMap(mapping);
				        }
				    };
				    Tone.extend(Tone.WaveShaper, Tone.SignalBase);
				    /**
					 *  Uses a mapping function to set the value of the curve. 
					 *  @param {function} mapping The function used to define the values. 
					 *                            The mapping function take two arguments: 
					 *                            the first is the value at the current position 
					 *                            which goes from -1 to 1 over the number of elements
					 *                            in the curve array. The second argument is the array position. 
					 *  @returns {Tone.WaveShaper} this
					 *  @example
					 * //map the input signal from [-1, 1] to [0, 10]
					 * shaper.setMap(function(val, index){
					 * 	return (val + 1) * 5;
					 * })
					 */
				    Tone.WaveShaper.prototype.setMap = function (mapping) {
				        for (var i = 0, len = this._curve.length; i < len; i++) {
				            var normalized = i / (len - 1) * 2 - 1;
				            this._curve[i] = mapping(normalized, i);
				        }
				        this._shaper.curve = this._curve;
				        return this;
				    };
				    /**
					 * The array to set as the waveshaper curve. For linear curves
					 * array length does not make much difference, but for complex curves
					 * longer arrays will provide smoother interpolation. 
					 * @memberOf Tone.WaveShaper#
					 * @type {Array}
					 * @name curve
					 */
				    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {
				        get: function () {
				            return this._shaper.curve;
				        },
				        set: function (mapping) {
				            this._curve = new Float32Array(mapping);
				            this._shaper.curve = this._curve;
				        }
				    });
				    /**
					 * Specifies what type of oversampling (if any) should be used when 
					 * applying the shaping curve. Can either be "none", "2x" or "4x". 
					 * @memberOf Tone.WaveShaper#
					 * @type {string}
					 * @name oversample
					 */
				    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {
				        get: function () {
				            return this._shaper.oversample;
				        },
				        set: function (oversampling) {
				            if ([
				                    'none',
				                    '2x',
				                    '4x'
				                ].indexOf(oversampling) !== -1) {
				                this._shaper.oversample = oversampling;
				            } else {
				                throw new RangeError('Tone.WaveShaper: oversampling must be either \'none\', \'2x\', or \'4x\'');
				            }
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.WaveShaper} this
					 */
				    Tone.WaveShaper.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._shaper.disconnect();
				        this._shaper = null;
				        this._curve = null;
				        return this;
				    };
				    return Tone.WaveShaper;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.TimeBase is a flexible encoding of time
					 *         which can be evaluated to and from a string.
					 *         Parsing code modified from https://code.google.com/p/tapdigit/
					 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
					 *  @extends {Tone}
					 *  @param  {Time}  val    The time value as a number or string
					 *  @param  {String=}  units  Unit values
					 *  @example
					 * Tone.TimeBase(4, "n")
					 * Tone.TimeBase(2, "t")
					 * Tone.TimeBase("2t").add("1m")
					 * Tone.TimeBase("2t + 1m");
					 */
				    Tone.TimeBase = function (val, units) {
				        //allows it to be constructed with or without 'new'
				        if (this instanceof Tone.TimeBase) {
				            /**
							 *  Any expressions parsed from the Time
							 *  @type  {Array}
							 *  @private
							 */
				            this._expr = this._noOp;
				            if (val instanceof Tone.TimeBase) {
				                this.copy(val);
				            } else if (!this.isUndef(units) || this.isNumber(val)) {
				                //default units
				                units = this.defaultArg(units, this._defaultUnits);
				                var method = this._primaryExpressions[units].method;
				                this._expr = method.bind(this, val);
				            } else if (this.isString(val)) {
				                this.set(val);
				            } else if (this.isUndef(val)) {
				                //default expression
				                this._expr = this._defaultExpr();
				            }
				        } else {
				            return new Tone.TimeBase(val, units);
				        }
				    };
				    Tone.extend(Tone.TimeBase);
				    /**
					 *  Repalce the current time value with the value
					 *  given by the expression string.
					 *  @param  {String}  exprString
					 *  @return {Tone.TimeBase} this
					 */
				    Tone.TimeBase.prototype.set = function (exprString) {
				        this._expr = this._parseExprString(exprString);
				        return this;
				    };
				    /**
					 *  Return a clone of the TimeBase object.
					 *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase
					 */
				    Tone.TimeBase.prototype.clone = function () {
				        var instance = new this.constructor();
				        instance.copy(this);
				        return instance;
				    };
				    /**
					 *  Copies the value of time to this Time
					 *  @param {Tone.TimeBase} time
					 *  @return  {TimeBase}
					 */
				    Tone.TimeBase.prototype.copy = function (time) {
				        var val = time._expr();
				        return this.set(val);
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	ABSTRACT SYNTAX TREE PARSER
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  All the primary expressions.
					 *  @private
					 *  @type  {Object}
					 */
				    Tone.TimeBase.prototype._primaryExpressions = {
				        'n': {
				            regexp: /^(\d+)n/i,
				            method: function (value) {
				                value = parseInt(value);
				                if (value === 1) {
				                    return this._beatsToUnits(this._timeSignature());
				                } else {
				                    return this._beatsToUnits(4 / value);
				                }
				            }
				        },
				        't': {
				            regexp: /^(\d+)t/i,
				            method: function (value) {
				                value = parseInt(value);
				                return this._beatsToUnits(8 / (parseInt(value) * 3));
				            }
				        },
				        'm': {
				            regexp: /^(\d+)m/i,
				            method: function (value) {
				                return this._beatsToUnits(parseInt(value) * this._timeSignature());
				            }
				        },
				        'i': {
				            regexp: /^(\d+)i/i,
				            method: function (value) {
				                return this._ticksToUnits(parseInt(value));
				            }
				        },
				        'hz': {
				            regexp: /^(\d+(?:\.\d+)?)hz/i,
				            method: function (value) {
				                return this._frequencyToUnits(parseFloat(value));
				            }
				        },
				        'tr': {
				            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
				            method: function (m, q, s) {
				                var total = 0;
				                if (m && m !== '0') {
				                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));
				                }
				                if (q && q !== '0') {
				                    total += this._beatsToUnits(parseFloat(q));
				                }
				                if (s && s !== '0') {
				                    total += this._beatsToUnits(parseFloat(s) / 4);
				                }
				                return total;
				            }
				        },
				        's': {
				            regexp: /^(\d+(?:\.\d+)?s)/,
				            method: function (value) {
				                return this._secondsToUnits(parseFloat(value));
				            }
				        },
				        'samples': {
				            regexp: /^(\d+)samples/,
				            method: function (value) {
				                return parseInt(value) / this.context.sampleRate;
				            }
				        },
				        'default': {
				            regexp: /^(\d+(?:\.\d+)?)/,
				            method: function (value) {
				                return this._primaryExpressions[this._defaultUnits].method.call(this, value);
				            }
				        }
				    };
				    /**
					 *  All the binary expressions that TimeBase can accept.
					 *  @private
					 *  @type  {Object}
					 */
				    Tone.TimeBase.prototype._binaryExpressions = {
				        '+': {
				            regexp: /^\+/,
				            precedence: 2,
				            method: function (lh, rh) {
				                return lh() + rh();
				            }
				        },
				        '-': {
				            regexp: /^\-/,
				            precedence: 2,
				            method: function (lh, rh) {
				                return lh() - rh();
				            }
				        },
				        '*': {
				            regexp: /^\*/,
				            precedence: 1,
				            method: function (lh, rh) {
				                return lh() * rh();
				            }
				        },
				        '/': {
				            regexp: /^\//,
				            precedence: 1,
				            method: function (lh, rh) {
				                return lh() / rh();
				            }
				        }
				    };
				    /**
					 *  All the unary expressions.
					 *  @private
					 *  @type  {Object}
					 */
				    Tone.TimeBase.prototype._unaryExpressions = {
				        'neg': {
				            regexp: /^\-/,
				            method: function (lh) {
				                return -lh();
				            }
				        }
				    };
				    /**
					 *  Syntactic glue which holds expressions together
					 *  @private
					 *  @type  {Object}
					 */
				    Tone.TimeBase.prototype._syntaxGlue = {
				        '(': { regexp: /^\(/ },
				        ')': { regexp: /^\)/ }
				    };
				    /**
					 *  tokenize the expression based on the Expressions object
					 *  @param   {string} expr 
					 *  @return  {Object}      returns two methods on the tokenized list, next and peek
					 *  @private
					 */
				    Tone.TimeBase.prototype._tokenize = function (expr) {
				        var position = -1;
				        var tokens = [];
				        while (expr.length > 0) {
				            expr = expr.trim();
				            var token = getNextToken(expr, this);
				            tokens.push(token);
				            expr = expr.substr(token.value.length);
				        }
				        function getNextToken(expr, context) {
				            var expressions = [
				                '_binaryExpressions',
				                '_unaryExpressions',
				                '_primaryExpressions',
				                '_syntaxGlue'
				            ];
				            for (var i = 0; i < expressions.length; i++) {
				                var group = context[expressions[i]];
				                for (var opName in group) {
				                    var op = group[opName];
				                    var reg = op.regexp;
				                    var match = expr.match(reg);
				                    if (match !== null) {
				                        return {
				                            method: op.method,
				                            precedence: op.precedence,
				                            regexp: op.regexp,
				                            value: match[0]
				                        };
				                    }
				                }
				            }
				            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);
				        }
				        return {
				            next: function () {
				                return tokens[++position];
				            },
				            peek: function () {
				                return tokens[position + 1];
				            }
				        };
				    };
				    /**
					 *  Given a token, find the value within the groupName
					 *  @param {Object} token
					 *  @param {String} groupName
					 *  @param {Number} precedence
					 *  @private
					 */
				    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {
				        var ret = false;
				        if (!this.isUndef(token)) {
				            for (var opName in group) {
				                var op = group[opName];
				                if (op.regexp.test(token.value)) {
				                    if (!this.isUndef(prec)) {
				                        if (op.precedence === prec) {
				                            return op;
				                        }
				                    } else {
				                        return op;
				                    }
				                }
				            }
				        }
				        return ret;
				    };
				    /**
					 *  Match a binary expression given the token and the precedence
					 *  @param {Lexer} lexer
					 *  @param {Number} precedence
					 *  @private
					 */
				    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {
				        if (this.isUndef(precedence)) {
				            precedence = 2;
				        }
				        var expr;
				        if (precedence < 0) {
				            expr = this._parseUnary(lexer);
				        } else {
				            expr = this._parseBinary(lexer, precedence - 1);
				        }
				        var token = lexer.peek();
				        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {
				            token = lexer.next();
				            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));
				            token = lexer.peek();
				        }
				        return expr;
				    };
				    /**
					 *  Match a unary expression.
					 *  @param {Lexer} lexer
					 *  @private
					 */
				    Tone.TimeBase.prototype._parseUnary = function (lexer) {
				        var token, expr;
				        token = lexer.peek();
				        var op = this._matchGroup(token, this._unaryExpressions);
				        if (op) {
				            token = lexer.next();
				            expr = this._parseUnary(lexer);
				            return op.method.bind(this, expr);
				        }
				        return this._parsePrimary(lexer);
				    };
				    /**
					 *  Match a primary expression (a value).
					 *  @param {Lexer} lexer
					 *  @private
					 */
				    Tone.TimeBase.prototype._parsePrimary = function (lexer) {
				        var token, expr;
				        token = lexer.peek();
				        if (this.isUndef(token)) {
				            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');
				        }
				        if (this._matchGroup(token, this._primaryExpressions)) {
				            token = lexer.next();
				            var matching = token.value.match(token.regexp);
				            return token.method.bind(this, matching[1], matching[2], matching[3]);
				        }
				        if (token && token.value === '(') {
				            lexer.next();
				            expr = this._parseBinary(lexer);
				            token = lexer.next();
				            if (!(token && token.value === ')')) {
				                throw new SyntaxError('Expected )');
				            }
				            return expr;
				        }
				        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);
				    };
				    /**
					 *  Recursively parse the string expression into a syntax tree.
					 *  @param   {string} expr 
					 *  @return  {Function} the bound method to be evaluated later
					 *  @private
					 */
				    Tone.TimeBase.prototype._parseExprString = function (exprString) {
				        if (!this.isString(exprString)) {
				            exprString = exprString.toString();
				        }
				        var lexer = this._tokenize(exprString);
				        var tree = this._parseBinary(lexer);
				        return tree;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	DEFAULTS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  The initial expression value
					 *  @return  {Number}  The initial value 0
					 *  @private
					 */
				    Tone.TimeBase.prototype._noOp = function () {
				        return 0;
				    };
				    /**
					 *  The default expression value if no arguments are given
					 *  @private
					 */
				    Tone.TimeBase.prototype._defaultExpr = function () {
				        return this._noOp;
				    };
				    /**
					 *  The default units if none are given.
					 *  @private
					 */
				    Tone.TimeBase.prototype._defaultUnits = 's';
				    ///////////////////////////////////////////////////////////////////////////
				    //	UNIT CONVERSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Returns the value of a frequency in the current units
					 *  @param {Frequency} freq
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {
				        return 1 / freq;
				    };
				    /**
					 *  Return the value of the beats in the current units
					 *  @param {Number} beats
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.TimeBase.prototype._beatsToUnits = function (beats) {
				        return 60 / Tone.Transport.bpm.value * beats;
				    };
				    /**
					 *  Returns the value of a second in the current units
					 *  @param {Seconds} seconds
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {
				        return seconds;
				    };
				    /**
					 *  Returns the value of a tick in the current time units
					 *  @param {Ticks} ticks
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {
				        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);
				    };
				    /**
					 *  Return the time signature.
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.TimeBase.prototype._timeSignature = function () {
				        return Tone.Transport.timeSignature;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	EXPRESSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Push an expression onto the expression list
					 *  @param  {Time}  val
					 *  @param  {String}  type
					 *  @param  {String}  units
					 *  @return  {Tone.TimeBase} 
					 *  @private
					 */
				    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {
				        //create the expression
				        if (!(val instanceof Tone.TimeBase)) {
				            val = new this.constructor(val, units);
				        }
				        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);
				        return this;
				    };
				    /**
					 *  Add to the current value.
					 *  @param  {Time}  val    The value to add
					 *  @param  {String=}  units  Optional units to use with the value.
					 *  @return  {Tone.TimeBase}  this
					 *  @example
					 * Tone.TimeBase("2m").add("1m"); //"3m"
					 */
				    Tone.TimeBase.prototype.add = function (val, units) {
				        return this._pushExpr(val, '+', units);
				    };
				    /**
					 *  Subtract the value from the current time.
					 *  @param  {Time}  val    The value to subtract
					 *  @param  {String=}  units  Optional units to use with the value.
					 *  @return  {Tone.TimeBase}  this
					 *  @example
					 * Tone.TimeBase("2m").sub("1m"); //"1m"
					 */
				    Tone.TimeBase.prototype.sub = function (val, units) {
				        return this._pushExpr(val, '-', units);
				    };
				    /**
					 *  Multiply the current value by the given time.
					 *  @param  {Time}  val    The value to multiply
					 *  @param  {String=}  units  Optional units to use with the value.
					 *  @return  {Tone.TimeBase}  this
					 *  @example
					 * Tone.TimeBase("2m").mult("2"); //"4m"
					 */
				    Tone.TimeBase.prototype.mult = function (val, units) {
				        return this._pushExpr(val, '*', units);
				    };
				    /**
					 *  Divide the current value by the given time.
					 *  @param  {Time}  val    The value to divide by
					 *  @param  {String=}  units  Optional units to use with the value.
					 *  @return  {Tone.TimeBase}  this
					 *  @example
					 * Tone.TimeBase("2m").div(2); //"1m"
					 */
				    Tone.TimeBase.prototype.div = function (val, units) {
				        return this._pushExpr(val, '/', units);
				    };
				    /**
					 *  Evaluate the time value. Returns the time
					 *  in seconds.
					 *  @return  {Seconds} 
					 */
				    Tone.TimeBase.prototype.eval = function () {
				        return this._expr();
				    };
				    /**
					 *  Clean up
					 *  @return {Tone.TimeBase} this
					 */
				    Tone.TimeBase.prototype.dispose = function () {
				        this._expr = null;
				    };
				    return Tone.TimeBase;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.Time is a primitive type for encoding Time values. 
					 *         Eventually all time values are evaluated to seconds
					 *         using the `eval` method. Tone.Time can be constructed
					 *         with or without the `new` keyword. Tone.Time can be passed
					 *         into the parameter of any method which takes time as an argument. 
					 *  @constructor
					 *  @extends {Tone.TimeBase}
					 *  @param  {String|Number}  val    The time value.
					 *  @param  {String=}  units  The units of the value.
					 *  @example
					 * var t = Tone.Time("4n");//encodes a quarter note
					 * t.mult(4); // multiply that value by 4
					 * t.toNotation(); //returns "1m"
					 */
				    Tone.Time = function (val, units) {
				        if (this instanceof Tone.Time) {
				            /**
							 *  If the current clock time should
							 *  be added to the output
							 *  @type  {Boolean}
							 *  @private
							 */
				            this._plusNow = false;
				            Tone.TimeBase.call(this, val, units);
				        } else {
				            return new Tone.Time(val, units);
				        }
				    };
				    Tone.extend(Tone.Time, Tone.TimeBase);
				    //clone the expressions so that 
				    //we can add more without modifying the original
				    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);
				    /*
					 *  Adds an additional unary expression
					 *  which quantizes values to the next subdivision
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Time.prototype._unaryExpressions.quantize = {
				        regexp: /^@/,
				        method: function (rh) {
				            return Tone.Transport.nextSubdivision(rh());
				        }
				    };
				    /*
					 *  Adds an additional unary expression
					 *  which adds the current clock time.
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Time.prototype._unaryExpressions.now = {
				        regexp: /^\+/,
				        method: function (lh) {
				            this._plusNow = true;
				            return lh();
				        }
				    };
				    /**
					 *  Quantize the time by the given subdivision. Optionally add a
					 *  percentage which will move the time value towards the ideal
					 *  quantized value by that percentage. 
					 *  @param  {Number|Time}  val    The subdivision to quantize to
					 *  @param  {NormalRange}  [percent=1]  Move the time value
					 *                                   towards the quantized value by
					 *                                   a percentage.
					 *  @return  {Tone.Time}  this
					 *  @example
					 * Tone.Time(21).quantize(2).eval() //returns 22
					 * Tone.Time(0.6).quantize("4n", 0.5).eval() //returns 0.55
					 */
				    Tone.Time.prototype.quantize = function (subdiv, percent) {
				        percent = this.defaultArg(percent, 1);
				        this._expr = function (expr, subdivision, percent) {
				            expr = expr();
				            subdivision = subdivision.toSeconds();
				            var multiple = Math.round(expr / subdivision);
				            var ideal = multiple * subdivision;
				            var diff = ideal - expr;
				            return expr + diff * percent;
				        }.bind(this, this._expr, new this.constructor(subdiv), percent);
				        return this;
				    };
				    /**
					 *  Adds the clock time to the time expression at the 
					 *  moment of evaluation. 
					 *  @return  {Tone.Time}  this
					 */
				    Tone.Time.prototype.addNow = function () {
				        this._plusNow = true;
				        return this;
				    };
				    /**
					 *  @override
					 *  Override the default value return when no arguments are passed in.
					 *  The default value is 'now'
					 *  @private
					 */
				    Tone.Time.prototype._defaultExpr = function () {
				        this._plusNow = true;
				        return this._noOp;
				    };
				    /**
					 *  Copies the value of time to this Time
					 *  @param {Tone.Time} time
					 *  @return  {Time}
					 */
				    Tone.Time.prototype.copy = function (time) {
				        Tone.TimeBase.prototype.copy.call(this, time);
				        this._plusNow = time._plusNow;
				        return this;
				    };
				    //CONVERSIONS//////////////////////////////////////////////////////////////
				    /**
					 *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. 
					 *  @return {Notation} 
					 *  @example
					 * //if the Transport is at 120bpm:
					 * Tone.Time(2).toNotation();//returns "1m"
					 */
				    Tone.Time.prototype.toNotation = function () {
				        var time = this.toSeconds();
				        var testNotations = [
				            '1m',
				            '2n',
				            '4n',
				            '8n',
				            '16n',
				            '32n',
				            '64n',
				            '128n'
				        ];
				        var retNotation = this._toNotationHelper(time, testNotations);
				        //try the same thing but with tripelets
				        var testTripletNotations = [
				            '1m',
				            '2n',
				            '2t',
				            '4n',
				            '4t',
				            '8n',
				            '8t',
				            '16n',
				            '16t',
				            '32n',
				            '32t',
				            '64n',
				            '64t',
				            '128n'
				        ];
				        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);
				        //choose the simpler expression of the two
				        if (retTripletNotation.split('+').length < retNotation.split('+').length) {
				            return retTripletNotation;
				        } else {
				            return retNotation;
				        }
				    };
				    /**
					 *  Helper method for Tone.toNotation
					 *  @param {Number} units 
					 *  @param {Array} testNotations
					 *  @return {String}
					 *  @private
					 */
				    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {
				        //the threshold is the last value in the array
				        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);
				        var retNotation = '';
				        for (var i = 0; i < testNotations.length; i++) {
				            var notationTime = this._notationToUnits(testNotations[i]);
				            //account for floating point errors (i.e. round up if the value is 0.999999)
				            var multiple = units / notationTime;
				            var floatingPointError = 0.000001;
				            if (1 - multiple % 1 < floatingPointError) {
				                multiple += floatingPointError;
				            }
				            multiple = Math.floor(multiple);
				            if (multiple > 0) {
				                if (multiple === 1) {
				                    retNotation += testNotations[i];
				                } else {
				                    retNotation += multiple.toString() + '*' + testNotations[i];
				                }
				                units -= multiple * notationTime;
				                if (units < threshold) {
				                    break;
				                } else {
				                    retNotation += ' + ';
				                }
				            }
				        }
				        if (retNotation === '') {
				            retNotation = '0';
				        }
				        return retNotation;
				    };
				    /**
					 *  Convert a notation value to the current units
					 *  @param  {Notation}  notation 
					 *  @return  {Number} 
					 *  @private
					 */
				    Tone.Time.prototype._notationToUnits = function (notation) {
				        var primaryExprs = this._primaryExpressions;
				        var notationExprs = [
				            primaryExprs.n,
				            primaryExprs.t,
				            primaryExprs.m
				        ];
				        for (var i = 0; i < notationExprs.length; i++) {
				            var expr = notationExprs[i];
				            var match = notation.match(expr.regexp);
				            if (match) {
				                return expr.method.call(this, match[1]);
				            }
				        }
				    };
				    /**
					 *  Return the time encoded as Bars:Beats:Sixteenths.
					 *  @return  {BarsBeatsSixteenths}
					 */
				    Tone.Time.prototype.toBarsBeatsSixteenths = function () {
				        var quarterTime = this._beatsToUnits(1);
				        var quarters = this.toSeconds() / quarterTime;
				        var measures = Math.floor(quarters / this._timeSignature());
				        var sixteenths = quarters % 1 * 4;
				        quarters = Math.floor(quarters) % this._timeSignature();
				        sixteenths = sixteenths.toString();
				        if (sixteenths.length > 3) {
				            sixteenths = parseFloat(sixteenths).toFixed(3);
				        }
				        var progress = [
				            measures,
				            quarters,
				            sixteenths
				        ];
				        return progress.join(':');
				    };
				    /**
					 *  Return the time in ticks.
					 *  @return  {Ticks}
					 */
				    Tone.Time.prototype.toTicks = function () {
				        var quarterTime = this._beatsToUnits(1);
				        var quarters = this.eval() / quarterTime;
				        return Math.floor(quarters * Tone.Transport.PPQ);
				    };
				    /**
					 *  Return the time in samples
					 *  @return  {Samples}  
					 */
				    Tone.Time.prototype.toSamples = function () {
				        return this.toSeconds() * this.context.sampleRate;
				    };
				    /**
					 *  Return the time as a frequency value
					 *  @return  {Frequency} 
					 *  @example
					 * Tone.Time(2).toFrequency(); //0.5
					 */
				    Tone.Time.prototype.toFrequency = function () {
				        return 1 / this.toSeconds();
				    };
				    /**
					 *  Return the time in seconds.
					 *  @return  {Seconds} 
					 */
				    Tone.Time.prototype.toSeconds = function () {
				        return this.eval();
				    };
				    /**
					 *  Return the time in milliseconds.
					 *  @return  {Milliseconds} 
					 */
				    Tone.Time.prototype.toMilliseconds = function () {
				        return this.toSeconds() * 1000;
				    };
				    /**
					 *  Return the time in seconds.
					 *  @return  {Seconds} 
					 */
				    Tone.Time.prototype.eval = function () {
				        var val = this._expr();
				        return val + (this._plusNow ? this.now() : 0);
				    };
				    return Tone.Time;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.Frequency is a primitive type for encoding Frequency values. 
					 *         Eventually all time values are evaluated to hertz
					 *         using the `eval` method. 
					 *  @constructor
					 *  @extends {Tone.TimeBase}
					 *  @param  {String|Number}  val    The time value.
					 *  @param  {String=}  units  The units of the value.
					 *  @example
					 * Tone.Frequency("C3").eval() // 261
					 * Tone.Frequency(38, "midi").eval() //
					 * Tone.Frequency("C3").transpose(4).eval();
					 */
				    Tone.Frequency = function (val, units) {
				        if (this instanceof Tone.Frequency) {
				            Tone.TimeBase.call(this, val, units);
				        } else {
				            return new Tone.Frequency(val, units);
				        }
				    };
				    Tone.extend(Tone.Frequency, Tone.TimeBase);
				    ///////////////////////////////////////////////////////////////////////////
				    //	AUGMENT BASE EXPRESSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    //clone the expressions so that 
				    //we can add more without modifying the original
				    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);
				    /*
					 *  midi type primary expression
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Frequency.prototype._primaryExpressions.midi = {
				        regexp: /^(\d+(?:\.\d+)?midi)/,
				        method: function (value) {
				            return this.midiToFrequency(value);
				        }
				    };
				    /*
					 *  note type primary expression
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Frequency.prototype._primaryExpressions.note = {
				        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
				        method: function (pitch, octave) {
				            var index = noteToScaleIndex[pitch.toLowerCase()];
				            var noteNumber = index + (parseInt(octave) + 1) * 12;
				            return this.midiToFrequency(noteNumber);
				        }
				    };
				    /*
					 *  BeatsBarsSixteenths type primary expression
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Frequency.prototype._primaryExpressions.tr = {
				        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
				        method: function (m, q, s) {
				            var total = 1;
				            if (m && m !== '0') {
				                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));
				            }
				            if (q && q !== '0') {
				                total *= this._beatsToUnits(parseFloat(q));
				            }
				            if (s && s !== '0') {
				                total *= this._beatsToUnits(parseFloat(s) / 4);
				            }
				            return total;
				        }
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	EXPRESSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Transposes the frequency by the given number of semitones.
					 *  @param  {Interval}  interval
					 *  @return  {Tone.Frequency} this
					 *  @example
					 * Tone.Frequency("A4").transpose(3); //"C5"
					 */
				    Tone.Frequency.prototype.transpose = function (interval) {
				        this._expr = function (expr, interval) {
				            var val = expr();
				            return val * this.intervalToFrequencyRatio(interval);
				        }.bind(this, this._expr, interval);
				        return this;
				    };
				    /**
					 *  Takes an array of semitone intervals and returns
					 *  an array of frequencies transposed by those intervals.
					 *  @param  {Array}  intervals
					 *  @return  {Tone.Frequency} this
					 *  @example
					 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
					 */
				    Tone.Frequency.prototype.harmonize = function (intervals) {
				        this._expr = function (expr, intervals) {
				            var val = expr();
				            var ret = [];
				            for (var i = 0; i < intervals.length; i++) {
				                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);
				            }
				            return ret;
				        }.bind(this, this._expr, intervals);
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	UNIT CONVERSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Return the value of the frequency as a MIDI note
					 *  @return  {MIDI}
					 *  @example
					 * Tone.Frequency("C4").toMidi(); //60
					 */
				    Tone.Frequency.prototype.toMidi = function () {
				        return this.frequencyToMidi(this.eval());
				    };
				    /**
					 *  Return the value of the frequency in Scientific Pitch Notation
					 *  @return  {Note}
					 *  @example
					 * Tone.Frequency(69, "midi").toNote(); //"A4"
					 */
				    Tone.Frequency.prototype.toNote = function () {
				        var freq = this.eval();
				        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;
				        var noteNumber = Math.round(12 * log) + 57;
				        var octave = Math.floor(noteNumber / 12);
				        if (octave < 0) {
				            noteNumber += -12 * octave;
				        }
				        var noteName = scaleIndexToNote[noteNumber % 12];
				        return noteName + octave.toString();
				    };
				    /**
					 *  Return the duration of one cycle in seconds.
					 *  @return  {Seconds}
					 */
				    Tone.Frequency.prototype.toSeconds = function () {
				        return 1 / this.eval();
				    };
				    /**
					 *  Return the value in Hertz
					 *  @return  {Frequency}
					 */
				    Tone.Frequency.prototype.toFrequency = function () {
				        return this.eval();
				    };
				    /**
					 *  Return the duration of one cycle in ticks
					 *  @return  {Ticks}
					 */
				    Tone.Frequency.prototype.toTicks = function () {
				        var quarterTime = this._beatsToUnits(1);
				        var quarters = this.eval() / quarterTime;
				        return Math.floor(quarters * Tone.Transport.PPQ);
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	UNIT CONVERSIONS HELPERS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Returns the value of a frequency in the current units
					 *  @param {Frequency} freq
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.Frequency.prototype._frequencyToUnits = function (freq) {
				        return freq;
				    };
				    /**
					 *  Returns the value of a tick in the current time units
					 *  @param {Ticks} ticks
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.Frequency.prototype._ticksToUnits = function (ticks) {
				        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));
				    };
				    /**
					 *  Return the value of the beats in the current units
					 *  @param {Number} beats
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.Frequency.prototype._beatsToUnits = function (beats) {
				        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);
				    };
				    /**
					 *  Returns the value of a second in the current units
					 *  @param {Seconds} seconds
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.Frequency.prototype._secondsToUnits = function (seconds) {
				        return 1 / seconds;
				    };
				    /**
					 *  The default units if none are given.
					 *  @private
					 */
				    Tone.Frequency.prototype._defaultUnits = 'hz';
				    ///////////////////////////////////////////////////////////////////////////
				    //	FREQUENCY CONVERSIONS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Note to scale index
					 *  @type  {Object}
					 */
				    var noteToScaleIndex = {
				        'cbb': -2,
				        'cb': -1,
				        'c': 0,
				        'c#': 1,
				        'cx': 2,
				        'dbb': 0,
				        'db': 1,
				        'd': 2,
				        'd#': 3,
				        'dx': 4,
				        'ebb': 2,
				        'eb': 3,
				        'e': 4,
				        'e#': 5,
				        'ex': 6,
				        'fbb': 3,
				        'fb': 4,
				        'f': 5,
				        'f#': 6,
				        'fx': 7,
				        'gbb': 5,
				        'gb': 6,
				        'g': 7,
				        'g#': 8,
				        'gx': 9,
				        'abb': 7,
				        'ab': 8,
				        'a': 9,
				        'a#': 10,
				        'ax': 11,
				        'bbb': 9,
				        'bb': 10,
				        'b': 11,
				        'b#': 12,
				        'bx': 13
				    };
				    /**
					 *  scale index to note (sharps)
					 *  @type  {Array}
					 */
				    var scaleIndexToNote = [
				        'C',
				        'C#',
				        'D',
				        'D#',
				        'E',
				        'F',
				        'F#',
				        'G',
				        'G#',
				        'A',
				        'A#',
				        'B'
				    ];
				    /**
					 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
					 *  A4's values in Hertz. 
					 *  @type {Frequency}
					 *  @static
					 */
				    Tone.Frequency.A4 = 440;
				    /**
					 *  Convert a MIDI note to frequency value. 
					 *  @param  {MIDI} midi The midi number to convert.
					 *  @return {Frequency} the corresponding frequency value
					 *  @example
					 * tone.midiToFrequency(69); // returns 440
					 */
				    Tone.Frequency.prototype.midiToFrequency = function (midi) {
				        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);
				    };
				    /**
					 *  Convert a frequency value to a MIDI note.
					 *  @param {Frequency} frequency The value to frequency value to convert.
					 *  @returns  {MIDI}
					 *  @example
					 * tone.midiToFrequency(440); // returns 69
					 */
				    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {
				        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;
				    };
				    return Tone.Frequency;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.TransportTime is a the time along the Transport's
					 *         timeline. It is similar to Tone.Time, but instead of evaluating
					 *         against the AudioContext's clock, it is evaluated against
					 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
					 *  @constructor
					 *  @param  {Time}  val    The time value as a number or string
					 *  @param  {String=}  units  Unit values
					 *  @extends {Tone.Time}
					 */
				    Tone.TransportTime = function (val, units) {
				        if (this instanceof Tone.TransportTime) {
				            Tone.Time.call(this, val, units);
				        } else {
				            return new Tone.TransportTime(val, units);
				        }
				    };
				    Tone.extend(Tone.TransportTime, Tone.Time);
				    //clone the expressions so that 
				    //we can add more without modifying the original
				    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);
				    /**
					 *  Adds an additional unary expression
					 *  which quantizes values to the next subdivision
					 *  @type {Object}
					 *  @private
					 */
				    Tone.TransportTime.prototype._unaryExpressions.quantize = {
				        regexp: /^@/,
				        method: function (rh) {
				            var subdivision = this._secondsToTicks(rh());
				            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);
				            return this._ticksToUnits(multiple * subdivision);
				        }
				    };
				    /**
					 *  Convert seconds into ticks
					 *  @param {Seconds} seconds
					 *  @return  {Ticks}
					 *  @private
					 */
				    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {
				        var quarterTime = this._beatsToUnits(1);
				        var quarters = seconds / quarterTime;
				        return Math.round(quarters * Tone.Transport.PPQ);
				    };
				    /**
					 *  Evaluate the time expression. Returns values in ticks
					 *  @return {Ticks}
					 */
				    Tone.TransportTime.prototype.eval = function () {
				        var val = this._secondsToTicks(this._expr());
				        return val + (this._plusNow ? Tone.Transport.ticks : 0);
				    };
				    /**
					 *  Return the time in ticks.
					 *  @return  {Ticks}
					 */
				    Tone.TransportTime.prototype.toTicks = function () {
				        return this.eval();
				    };
				    /**
					 *  Return the time in seconds.
					 *  @return  {Seconds}
					 */
				    Tone.TransportTime.prototype.toSeconds = function () {
				        var val = this._expr();
				        return val + (this._plusNow ? Tone.Transport.seconds : 0);
				    };
				    /**
					 *  Return the time as a frequency value
					 *  @return  {Frequency} 
					 */
				    Tone.TransportTime.prototype.toFrequency = function () {
				        return 1 / this.toSeconds();
				    };
				    return Tone.TransportTime;
				});
				Module(function (Tone) {
				    ///////////////////////////////////////////////////////////////////////////
				    //	TYPES
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 * Units which a value can take on.
					 * @enum {String}
					 */
				    Tone.Type = {
				        /** 
						 *  Default units
						 *  @typedef {Default}
						 */
				        Default: 'number',
				        /**
						 *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
						 *
						 *  <ul>
						 *  <li>Numbers, which will be taken literally as the time (in seconds).</li>
						 *  <li>Notation, ("4n", "8t") describes time in BPM and time signature relative values.</li>
						 *  <li>TransportTime, ("4:3:2") will also provide tempo and time signature relative times 
						 *  in the form BARS:QUARTERS:SIXTEENTHS.</li>
						 *  <li>Frequency, ("8hz") is converted to the length of the cycle in seconds.</li>
						 *  <li>Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as 
						 *  "the current time plus whatever expression follows".</li>
						 *  <li>Expressions, ("3:0 + 2 - (1m / 7)") any of the above can also be combined 
						 *  into a mathematical expression which will be evaluated to compute the desired time.</li>
						 *  <li>No Argument, for methods which accept time, no argument will be interpreted as 
						 *  "now" (i.e. the currentTime).</li>
						 *  </ul>
						 *  
						 *  @typedef {Time}
						 */
				        Time: 'time',
				        /**
						 *  Frequency can be described similar to time, except ultimately the
						 *  values are converted to frequency instead of seconds. A number
						 *  is taken literally as the value in hertz. Additionally any of the 
						 *  Time encodings can be used. Note names in the form
						 *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
						 *  frequency value. 
						 *  @typedef {Frequency}
						 */
				        Frequency: 'frequency',
				        /**
						 *  TransportTime describes a position along the Transport's timeline. It is
						 *  similar to Time in that it uses all the same encodings, but TransportTime specifically
						 *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. 
						 *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
						 *  @typedef {TransportTime}
						 */
				        TransportTime: 'transportTime',
				        /** 
						 *  Ticks are the basic subunit of the Transport. They are
						 *  the smallest unit of time that the Transport supports.
						 *  @typedef {Ticks}
						 */
				        Ticks: 'ticks',
				        /** 
						 *  Normal values are within the range [0, 1].
						 *  @typedef {NormalRange}
						 */
				        NormalRange: 'normalRange',
				        /** 
						 *  AudioRange values are between [-1, 1].
						 *  @typedef {AudioRange}
						 */
				        AudioRange: 'audioRange',
				        /** 
						 *  Decibels are a logarithmic unit of measurement which is useful for volume
						 *  because of the logarithmic way that we perceive loudness. 0 decibels 
						 *  means no change in volume. -10db is approximately half as loud and 10db 
						 *  is twice is loud. 
						 *  @typedef {Decibels}
						 */
				        Decibels: 'db',
				        /** 
						 *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
						 *  @typedef {Interval}
						 */
				        Interval: 'interval',
				        /** 
						 *  Beats per minute. 
						 *  @typedef {BPM}
						 */
				        BPM: 'bpm',
				        /** 
						 *  The value must be greater than or equal to 0.
						 *  @typedef {Positive}
						 */
				        Positive: 'positive',
				        /** 
						 *  A cent is a hundredth of a semitone. 
						 *  @typedef {Cents}
						 */
				        Cents: 'cents',
				        /** 
						 *  Angle between 0 and 360. 
						 *  @typedef {Degrees}
						 */
				        Degrees: 'degrees',
				        /** 
						 *  A number representing a midi note.
						 *  @typedef {MIDI}
						 */
				        MIDI: 'midi',
				        /** 
						 *  A colon-separated representation of time in the form of
						 *  Bars:Beats:Sixteenths. 
						 *  @typedef {BarsBeatsSixteenths}
						 */
				        BarsBeatsSixteenths: 'barsBeatsSixteenths',
				        /** 
						 *  Sampling is the reduction of a continuous signal to a discrete signal.
						 *  Audio is typically sampled 44100 times per second. 
						 *  @typedef {Samples}
						 */
				        Samples: 'samples',
				        /** 
						 *  Hertz are a frequency representation defined as one cycle per second.
						 *  @typedef {Hertz}
						 */
				        Hertz: 'hertz',
				        /** 
						 *  A frequency represented by a letter name, 
						 *  accidental and octave. This system is known as
						 *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
						 *  @typedef {Note}
						 */
				        Note: 'note',
				        /** 
						 *  One millisecond is a thousandth of a second. 
						 *  @typedef {Milliseconds}
						 */
				        Milliseconds: 'milliseconds',
				        /** 
						 *  Seconds are the time unit of the AudioContext. In the end, 
						 *  all values need to be evaluated to seconds. 
						 *  @typedef {Seconds}
						 */
				        Seconds: 'seconds',
				        /** 
						 *  A string representing a duration relative to a measure. 
						 *  <ul>
						 *  	<li>"4n" = quarter note</li>
						 *   	<li>"2m" = two measures</li>
						 *    	<li>"8t" = eighth-note triplet</li>
						 *  </ul>
						 *  @typedef {Notation}
						 */
				        Notation: 'notation'
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    // AUGMENT TONE's PROTOTYPE
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Convert Time into seconds.
					 *  
					 *  Unlike the method which it overrides, this takes into account 
					 *  transporttime and musical notation.
					 *
					 *  Time : 1.40
					 *  Notation: 4n|1m|2t
					 *  Now Relative: +3n
					 *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)
					 *
					 *  @param  {Time} time 
					 *  @return {Seconds} 
					 */
				    Tone.prototype.toSeconds = function (time) {
				        if (this.isNumber(time)) {
				            return time;
				        } else if (this.isUndef(time)) {
				            return this.now();
				        } else if (this.isString(time)) {
				            return new Tone.Time(time).toSeconds();
				        } else if (time instanceof Tone.TimeBase) {
				            return time.toSeconds();
				        }
				    };
				    /**
					 *  Convert a frequency representation into a number.
					 *  @param  {Frequency} freq 
					 *  @return {Hertz}      the frequency in hertz
					 */
				    Tone.prototype.toFrequency = function (freq) {
				        if (this.isNumber(freq)) {
				            return freq;
				        } else if (this.isString(freq) || this.isUndef(freq)) {
				            return new Tone.Frequency(freq).eval();
				        } else if (freq instanceof Tone.TimeBase) {
				            return freq.toFrequency();
				        }
				    };
				    /**
					 *  Convert a time representation into ticks.
					 *  @param  {Time} time
					 *  @return {Ticks}  the time in ticks
					 */
				    Tone.prototype.toTicks = function (time) {
				        if (this.isNumber(time) || this.isString(time)) {
				            return new Tone.TransportTime(time).toTicks();
				        } else if (this.isUndef(time)) {
				            return Tone.Transport.ticks;
				        } else if (time instanceof Tone.TimeBase) {
				            return time.toTicks();
				        }
				    };
				    return Tone;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
					 *         additional unit conversion functionality. It also
					 *         serves as a base-class for classes which have a single,
					 *         automatable parameter. 
					 *  @extends {Tone}
					 *  @param  {AudioParam}  param  The parameter to wrap.
					 *  @param  {Tone.Type} units The units of the audio param.
					 *  @param  {Boolean} convert If the param should be converted.
					 */
				    Tone.Param = function () {
				        var options = this.optionsObject(arguments, [
				            'param',
				            'units',
				            'convert'
				        ], Tone.Param.defaults);
				        /**
						 *  The native parameter to control
						 *  @type  {AudioParam}
						 *  @private
						 */
				        this._param = this.input = options.param;
				        /**
						 *  The units of the parameter
						 *  @type {Tone.Type}
						 */
				        this.units = options.units;
				        /**
						 *  If the value should be converted or not
						 *  @type {Boolean}
						 */
				        this.convert = options.convert;
				        /**
						 *  True if the signal value is being overridden by 
						 *  a connected signal.
						 *  @readOnly
						 *  @type  {boolean}
						 *  @private
						 */
				        this.overridden = false;
				        /**
						 *  If there is an LFO, this is where it is held.
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._lfo = null;
				        if (this.isObject(options.lfo)) {
				            this.value = options.lfo;
				        } else if (!this.isUndef(options.value)) {
				            this.value = options.value;
				        }
				    };
				    Tone.extend(Tone.Param);
				    /**
					 *  Defaults
					 *  @type  {Object}
					 *  @const
					 */
				    Tone.Param.defaults = {
				        'units': Tone.Type.Default,
				        'convert': true,
				        'param': undefined
				    };
				    /**
					 * The current value of the parameter. 
					 * @memberOf Tone.Param#
					 * @type {Number}
					 * @name value
					 */
				    Object.defineProperty(Tone.Param.prototype, 'value', {
				        get: function () {
				            return this._toUnits(this._param.value);
				        },
				        set: function (value) {
				            if (this.isObject(value)) {
				                //throw an error if the LFO needs to be included
				                if (this.isUndef(Tone.LFO)) {
				                    throw new Error('Include \'Tone.LFO\' to use an LFO as a Param value.');
				                }
				                //remove the old one
				                if (this._lfo) {
				                    this._lfo.dispose();
				                }
				                this._lfo = new Tone.LFO(value).start();
				                this._lfo.connect(this.input);
				            } else {
				                var convertedVal = this._fromUnits(value);
				                this._param.cancelScheduledValues(0);
				                this._param.value = convertedVal;
				            }
				        }
				    });
				    /**
					 *  Convert the given value from the type specified by Tone.Param.units
					 *  into the destination value (such as Gain or Frequency).
					 *  @private
					 *  @param  {*} val the value to convert
					 *  @return {number}     the number which the value should be set to
					 */
				    Tone.Param.prototype._fromUnits = function (val) {
				        if (this.convert || this.isUndef(this.convert)) {
				            switch (this.units) {
				            case Tone.Type.Time:
				                return this.toSeconds(val);
				            case Tone.Type.Frequency:
				                return this.toFrequency(val);
				            case Tone.Type.Decibels:
				                return this.dbToGain(val);
				            case Tone.Type.NormalRange:
				                return Math.min(Math.max(val, 0), 1);
				            case Tone.Type.AudioRange:
				                return Math.min(Math.max(val, -1), 1);
				            case Tone.Type.Positive:
				                return Math.max(val, 0);
				            default:
				                return val;
				            }
				        } else {
				            return val;
				        }
				    };
				    /**
					 * Convert the parameters value into the units specified by Tone.Param.units.
					 * @private
					 * @param  {number} val the value to convert
					 * @return {number}
					 */
				    Tone.Param.prototype._toUnits = function (val) {
				        if (this.convert || this.isUndef(this.convert)) {
				            switch (this.units) {
				            case Tone.Type.Decibels:
				                return this.gainToDb(val);
				            default:
				                return val;
				            }
				        } else {
				            return val;
				        }
				    };
				    /**
					 *  the minimum output value
					 *  @type {Number}
					 *  @private
					 */
				    Tone.Param.prototype._minOutput = 0.00001;
				    /**
					 *  Schedules a parameter value change at the given time.
					 *  @param {*}	value The value to set the signal.
					 *  @param {Time}  time The time when the change should occur.
					 *  @returns {Tone.Param} this
					 *  @example
					 * //set the frequency to "G4" in exactly 1 second from now. 
					 * freq.setValueAtTime("G4", "+1");
					 */
				    Tone.Param.prototype.setValueAtTime = function (value, time) {
				        value = this._fromUnits(value);
				        time = this.toSeconds(time);
				        if (time <= this.now() + this.blockTime) {
				            this._param.value = value;
				        } else {
				            this._param.setValueAtTime(value, time);
				        }
				        return this;
				    };
				    /**
					 *  Creates a schedule point with the current value at the current time.
					 *  This is useful for creating an automation anchor point in order to 
					 *  schedule changes from the current value. 
					 *
					 *  @param {number=} now (Optionally) pass the now value in. 
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.setRampPoint = function (now) {
				        now = this.defaultArg(now, this.now());
				        var currentVal = this._param.value;
				        // exponentialRampToValueAt cannot ever ramp from or to 0
				        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2
				        if (currentVal === 0) {
				            currentVal = this._minOutput;
				        }
				        this._param.setValueAtTime(currentVal, now);
				        return this;
				    };
				    /**
					 *  Schedules a linear continuous change in parameter value from the 
					 *  previous scheduled parameter value to the given value.
					 *  
					 *  @param  {number} value   
					 *  @param  {Time} endTime 
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
				        value = this._fromUnits(value);
				        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));
				        return this;
				    };
				    /**
					 *  Schedules an exponential continuous change in parameter value from 
					 *  the previous scheduled parameter value to the given value.
					 *  
					 *  @param  {number} value   
					 *  @param  {Time} endTime 
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
				        value = this._fromUnits(value);
				        value = Math.max(this._minOutput, value);
				        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));
				        return this;
				    };
				    /**
					 *  Schedules an exponential continuous change in parameter value from 
					 *  the current time and current value to the given value over the 
					 *  duration of the rampTime.
					 *  
					 *  @param  {number} value   The value to ramp to.
					 *  @param  {Time} rampTime the time that it takes the 
					 *                               value to ramp from it's current value
					 *  @param {Time}	[startTime=now] 	When the ramp should start. 
					 *  @returns {Tone.Param} this
					 *  @example
					 * //exponentially ramp to the value 2 over 4 seconds. 
					 * signal.exponentialRampToValue(2, 4);
					 */
				    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {
				        startTime = this.toSeconds(startTime);
				        this.setRampPoint(startTime);
				        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
				        return this;
				    };
				    /**
					 *  Schedules an linear continuous change in parameter value from 
					 *  the current time and current value to the given value over the 
					 *  duration of the rampTime.
					 *  
					 *  @param  {number} value   The value to ramp to.
					 *  @param  {Time} rampTime the time that it takes the 
					 *                               value to ramp from it's current value
					 *  @param {Time}	[startTime=now] 	When the ramp should start. 
					 *  @returns {Tone.Param} this
					 *  @example
					 * //linearly ramp to the value 4 over 3 seconds. 
					 * signal.linearRampToValue(4, 3);
					 */
				    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {
				        startTime = this.toSeconds(startTime);
				        this.setRampPoint(startTime);
				        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
				        return this;
				    };
				    /**
					 *  Start exponentially approaching the target value at the given time with
					 *  a rate having the given time constant.
					 *  @param {number} value        
					 *  @param {Time} startTime    
					 *  @param {number} timeConstant 
					 *  @returns {Tone.Param} this 
					 */
				    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
				        value = this._fromUnits(value);
				        // The value will never be able to approach without timeConstant > 0.
				        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation
				        // is described. 0 results in a division by 0.
				        value = Math.max(this._minOutput, value);
				        timeConstant = Math.max(this._minOutput, timeConstant);
				        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);
				        return this;
				    };
				    /**
					 *  Sets an array of arbitrary parameter values starting at the given time
					 *  for the given duration.
					 *  	
					 *  @param {Array} values    
					 *  @param {Time} startTime 
					 *  @param {Time} duration  
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {
				        for (var i = 0; i < values.length; i++) {
				            values[i] = this._fromUnits(values[i]);
				        }
				        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));
				        return this;
				    };
				    /**
					 *  Cancels all scheduled parameter changes with times greater than or 
					 *  equal to startTime.
					 *  
					 *  @param  {Time} startTime
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.cancelScheduledValues = function (startTime) {
				        this._param.cancelScheduledValues(this.toSeconds(startTime));
				        return this;
				    };
				    /**
					 *  Ramps to the given value over the duration of the rampTime. 
					 *  Automatically selects the best ramp type (exponential or linear)
					 *  depending on the `units` of the signal
					 *  
					 *  @param  {number} value   
					 *  @param  {Time} rampTime 	The time that it takes the 
					 *                              value to ramp from it's current value
					 *  @param {Time}	[startTime=now] 	When the ramp should start. 
					 *  @returns {Tone.Param} this
					 *  @example
					 * //ramp to the value either linearly or exponentially 
					 * //depending on the "units" value of the signal
					 * signal.rampTo(0, 10);
					 *  @example
					 * //schedule it to ramp starting at a specific time
					 * signal.rampTo(0, 10, 5)
					 */
				    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {
				        rampTime = this.defaultArg(rampTime, 0);
				        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM) {
				            this.exponentialRampToValue(value, rampTime, startTime);
				        } else {
				            this.linearRampToValue(value, rampTime, startTime);
				        }
				        return this;
				    };
				    /**
					 *  The LFO created by the signal instance. If none
					 *  was created, this is null.
					 *  @type {Tone.LFO}
					 *  @readOnly
					 *  @memberOf Tone.Param#
					 *  @name lfo
					 */
				    Object.defineProperty(Tone.Param.prototype, 'lfo', {
				        get: function () {
				            return this._lfo;
				        }
				    });
				    /**
					 *  Clean up
					 *  @returns {Tone.Param} this
					 */
				    Tone.Param.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._param = null;
				        if (this._lfo) {
				            this._lfo.dispose();
				            this._lfo = null;
				        }
				        return this;
				    };
				    return Tone.Param;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A thin wrapper around the Native Web Audio GainNode.
					 *         The GainNode is a basic building block of the Web Audio
					 *         API and is useful for routing audio and adjusting gains. 
					 *  @extends {Tone}
					 *  @param  {Number=}  gain  The initial gain of the GainNode
					 *  @param {Tone.Type=} units The units of the gain parameter. 
					 */
				    Tone.Gain = function () {
				        var options = this.optionsObject(arguments, [
				            'gain',
				            'units'
				        ], Tone.Gain.defaults);
				        /**
						 *  The GainNode
						 *  @type  {GainNode}
						 *  @private
						 */
				        this.input = this.output = this._gainNode = this.context.createGain();
				        /**
						 *  The gain parameter of the gain node.
						 *  @type {Tone.Param}
						 *  @signal
						 */
				        this.gain = new Tone.Param({
				            'param': this._gainNode.gain,
				            'units': options.units,
				            'value': options.gain,
				            'convert': options.convert
				        });
				        this._readOnly('gain');
				    };
				    Tone.extend(Tone.Gain);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Gain.defaults = {
				        'gain': 1,
				        'convert': true
				    };
				    /**
					 *  Clean up.
					 *  @return  {Tone.Gain}  this
					 */
				    Tone.Gain.prototype.dispose = function () {
				        Tone.Param.prototype.dispose.call(this);
				        this._gainNode.disconnect();
				        this._gainNode = null;
				        this._writable('gain');
				        this.gain.dispose();
				        this.gain = null;
				    };
				    //STATIC///////////////////////////////////////////////////////////////////
				    /**
					 *  Create input and outputs for this object.
					 *  @param  {Number}  input   The number of inputs
					 *  @param  {Number=}  outputs  The number of outputs
					 *  @return  {Tone}  this
					 *  @internal
					 */
				    Tone.prototype.createInsOuts = function (inputs, outputs) {
				        if (inputs === 1) {
				            this.input = new Tone.Gain();
				        } else if (inputs > 1) {
				            this.input = new Array(inputs);
				        }
				        if (outputs === 1) {
				            this.output = new Tone.Gain();
				        } else if (outputs > 1) {
				            this.output = new Array(inputs);
				        }
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    return Tone.Gain;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
					 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
					 *          has all of the methods available to native Web Audio 
					 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
					 *          as well as additional conveniences. Read more about working with signals 
					 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
					 *
					 *  @constructor
					 *  @extends {Tone.Param}
					 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
					 *                                     is passed in, that parameter will be wrapped
					 *                                     and controlled by the Signal. 
					 *  @param {string} [units=Number] unit The units the signal is in. 
					 *  @example
					 * var signal = new Tone.Signal(10);
					 */
				    Tone.Signal = function () {
				        var options = this.optionsObject(arguments, [
				            'value',
				            'units'
				        ], Tone.Signal.defaults);
				        /**
						 * The node where the constant signal value is scaled.
						 * @type {GainNode}
						 * @private
						 */
				        this.output = this._gain = this.context.createGain();
				        options.param = this._gain.gain;
				        Tone.Param.call(this, options);
				        /**
						 * The node where the value is set.
						 * @type {Tone.Param}
						 * @private
						 */
				        this.input = this._param = this._gain.gain;
				        //connect the const output to the node output
				        Tone.Signal._constant.chain(this._gain);
				    };
				    Tone.extend(Tone.Signal, Tone.Param);
				    /**
					 *  The default values
					 *  @type  {Object}
					 *  @static
					 *  @const
					 */
				    Tone.Signal.defaults = {
				        'value': 0,
				        'units': Tone.Type.Default,
				        'convert': true
				    };
				    /**
					 *  When signals connect to other signals or AudioParams, 
					 *  they take over the output value of that signal or AudioParam. 
					 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
					 *
					 *  @override
					 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
					 *  @param {number} [outputNumber=0] The output number to connect from.
					 *  @param {number} [inputNumber=0] The input number to connect to.
					 *  @returns {Tone.SignalBase} this
					 *  @method
					 */
				    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;
				    /**
					 *  dispose and disconnect
					 *  @returns {Tone.Signal} this
					 */
				    Tone.Signal.prototype.dispose = function () {
				        Tone.Param.prototype.dispose.call(this);
				        this._param = null;
				        this._gain.disconnect();
				        this._gain = null;
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	STATIC
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Generates a constant output of 1.
					 *  @static
					 *  @private
					 *  @const
					 *  @type {AudioBufferSourceNode}
					 */
				    Tone.Signal._constant = null;
				    /**
					 *  initializer function
					 */
				    Tone._initAudioContext(function (audioContext) {
				        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
				        var arr = buffer.getChannelData(0);
				        for (var i = 0; i < arr.length; i++) {
				            arr[i] = 1;
				        }
				        Tone.Signal._constant = audioContext.createBufferSource();
				        Tone.Signal._constant.channelCount = 1;
				        Tone.Signal._constant.channelCountMode = 'explicit';
				        Tone.Signal._constant.buffer = buffer;
				        Tone.Signal._constant.loop = true;
				        Tone.Signal._constant.start(0);
				        Tone.Signal._constant.noGC();
				    });
				    return Tone.Signal;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A Timeline class for scheduling and maintaining state
					 *         along a timeline. All events must have a "time" property. 
					 *         Internally, events are stored in time order for fast 
					 *         retrieval.
					 *  @extends {Tone}
					 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
					 */
				    Tone.Timeline = function () {
				        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);
				        /**
						 *  The array of scheduled timeline events
						 *  @type  {Array}
						 *  @private
						 */
				        this._timeline = [];
				        /**
						 *  An array of items to remove from the list. 
						 *  @type {Array}
						 *  @private
						 */
				        this._toRemove = [];
				        /**
						 *  Flag if the tieline is mid iteration
						 *  @private
						 *  @type {Boolean}
						 */
				        this._iterating = false;
				        /**
						 *  The memory of the timeline, i.e.
						 *  how many events in the past it will retain
						 *  @type {Positive}
						 */
				        this.memory = options.memory;
				    };
				    Tone.extend(Tone.Timeline);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 */
				    Tone.Timeline.defaults = { 'memory': Infinity };
				    /**
					 *  The number of items in the timeline.
					 *  @type {Number}
					 *  @memberOf Tone.Timeline#
					 *  @name length
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Timeline.prototype, 'length', {
				        get: function () {
				            return this._timeline.length;
				        }
				    });
				    /**
					 *  Insert an event object onto the timeline. Events must have a "time" attribute.
					 *  @param  {Object}  event  The event object to insert into the 
					 *                           timeline. 
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.addEvent = function (event) {
				        //the event needs to have a time attribute
				        if (this.isUndef(event.time)) {
				            throw new Error('Tone.Timeline: events must have a time attribute');
				        }
				        if (this._timeline.length) {
				            var index = this._search(event.time);
				            this._timeline.splice(index + 1, 0, event);
				        } else {
				            this._timeline.push(event);
				        }
				        //if the length is more than the memory, remove the previous ones
				        if (this.length > this.memory) {
				            var diff = this.length - this.memory;
				            this._timeline.splice(0, diff);
				        }
				        return this;
				    };
				    /**
					 *  Remove an event from the timeline.
					 *  @param  {Object}  event  The event object to remove from the list.
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.removeEvent = function (event) {
				        if (this._iterating) {
				            this._toRemove.push(event);
				        } else {
				            var index = this._timeline.indexOf(event);
				            if (index !== -1) {
				                this._timeline.splice(index, 1);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Get the nearest event whose time is less than or equal to the given time.
					 *  @param  {Number}  time  The time to query.
					 *  @returns {Object} The event object set after that time.
					 */
				    Tone.Timeline.prototype.getEvent = function (time) {
				        var index = this._search(time);
				        if (index !== -1) {
				            return this._timeline[index];
				        } else {
				            return null;
				        }
				    };
				    /**
					 *  Get the event which is scheduled after the given time.
					 *  @param  {Number}  time  The time to query.
					 *  @returns {Object} The event object after the given time
					 */
				    Tone.Timeline.prototype.getEventAfter = function (time) {
				        var index = this._search(time);
				        if (index + 1 < this._timeline.length) {
				            return this._timeline[index + 1];
				        } else {
				            return null;
				        }
				    };
				    /**
					 *  Get the event before the event at the given time.
					 *  @param  {Number}  time  The time to query.
					 *  @returns {Object} The event object before the given time
					 */
				    Tone.Timeline.prototype.getEventBefore = function (time) {
				        var len = this._timeline.length;
				        //if it's after the last item, return the last item
				        if (len > 0 && this._timeline[len - 1].time < time) {
				            return this._timeline[len - 1];
				        }
				        var index = this._search(time);
				        if (index - 1 >= 0) {
				            return this._timeline[index - 1];
				        } else {
				            return null;
				        }
				    };
				    /**
					 *  Cancel events after the given time
					 *  @param  {Number}  time  The time to query.
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.cancel = function (after) {
				        if (this._timeline.length > 1) {
				            var index = this._search(after);
				            if (index >= 0) {
				                if (this._timeline[index].time === after) {
				                    //get the first item with that time
				                    for (var i = index; i >= 0; i--) {
				                        if (this._timeline[i].time === after) {
				                            index = i;
				                        } else {
				                            break;
				                        }
				                    }
				                    this._timeline = this._timeline.slice(0, index);
				                } else {
				                    this._timeline = this._timeline.slice(0, index + 1);
				                }
				            } else {
				                this._timeline = [];
				            }
				        } else if (this._timeline.length === 1) {
				            //the first item's time
				            if (this._timeline[0].time >= after) {
				                this._timeline = [];
				            }
				        }
				        return this;
				    };
				    /**
					 *  Cancel events before or equal to the given time.
					 *  @param  {Number}  time  The time to cancel before.
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.cancelBefore = function (time) {
				        if (this._timeline.length) {
				            var index = this._search(time);
				            if (index >= 0) {
				                this._timeline = this._timeline.slice(index + 1);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Does a binary serach on the timeline array and returns the 
					 *  nearest event index whose time is after or equal to the given time.
					 *  If a time is searched before the first index in the timeline, -1 is returned.
					 *  If the time is after the end, the index of the last item is returned.
					 *  @param  {Number}  time  
					 *  @return  {Number} the index in the timeline array 
					 *  @private
					 */
				    Tone.Timeline.prototype._search = function (time) {
				        var beginning = 0;
				        var len = this._timeline.length;
				        var end = len;
				        if (len > 0 && this._timeline[len - 1].time <= time) {
				            return len - 1;
				        }
				        while (beginning < end) {
				            // calculate the midpoint for roughly equal partition
				            var midPoint = Math.floor(beginning + (end - beginning) / 2);
				            var event = this._timeline[midPoint];
				            var nextEvent = this._timeline[midPoint + 1];
				            if (event.time === time) {
				                //choose the last one that has the same time
				                for (var i = midPoint; i < this._timeline.length; i++) {
				                    var testEvent = this._timeline[i];
				                    if (testEvent.time === time) {
				                        midPoint = i;
				                    }
				                }
				                return midPoint;
				            } else if (event.time < time && nextEvent.time > time) {
				                return midPoint;
				            } else if (event.time > time) {
				                //search lower
				                end = midPoint;
				            } else if (event.time < time) {
				                //search upper
				                beginning = midPoint + 1;
				            }
				        }
				        return -1;
				    };
				    /**
					 *  Internal iterator. Applies extra safety checks for 
					 *  removing items from the array. 
					 *  @param  {Function}  callback 
					 *  @param  {Number=}    lowerBound     
					 *  @param  {Number=}    upperBound    
					 *  @private
					 */
				    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
				        this._iterating = true;
				        lowerBound = this.defaultArg(lowerBound, 0);
				        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);
				        for (var i = lowerBound; i <= upperBound; i++) {
				            callback(this._timeline[i]);
				        }
				        this._iterating = false;
				        if (this._toRemove.length > 0) {
				            for (var j = 0; j < this._toRemove.length; j++) {
				                var index = this._timeline.indexOf(this._toRemove[j]);
				                if (index !== -1) {
				                    this._timeline.splice(index, 1);
				                }
				            }
				            this._toRemove = [];
				        }
				    };
				    /**
					 *  Iterate over everything in the array
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.forEach = function (callback) {
				        this._iterate(callback);
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array at or before the given time.
					 *  @param  {Number}  time The time to check if items are before
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.forEachBefore = function (time, callback) {
				        //iterate over the items in reverse so that removing an item doesn't break things
				        var upperBound = this._search(time);
				        if (upperBound !== -1) {
				            this._iterate(callback, 0, upperBound);
				        }
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array after the given time.
					 *  @param  {Number}  time The time to check if items are before
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.forEachAfter = function (time, callback) {
				        //iterate over the items in reverse so that removing an item doesn't break things
				        var lowerBound = this._search(time);
				        this._iterate(callback, lowerBound + 1);
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array at or after the given time. Similar to 
					 *  forEachAfter, but includes the item(s) at the given time.
					 *  @param  {Number}  time The time to check if items are before
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.forEachFrom = function (time, callback) {
				        //iterate over the items in reverse so that removing an item doesn't break things
				        var lowerBound = this._search(time);
				        //work backwards until the event time is less than time
				        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
				            lowerBound--;
				        }
				        this._iterate(callback, lowerBound + 1);
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array at the given time
					 *  @param  {Number}  time The time to check if items are before
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.Timeline} this
					 */
				    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {
				        //iterate over the items in reverse so that removing an item doesn't break things
				        var upperBound = this._search(time);
				        if (upperBound !== -1) {
				            this._iterate(function (event) {
				                if (event.time === time) {
				                    callback(event);
				                }
				            }, 0, upperBound);
				        }
				        return this;
				    };
				    /**
					 *  Clean up.
					 *  @return  {Tone.Timeline}  this
					 */
				    Tone.Timeline.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._timeline = null;
				        this._toRemove = null;
				    };
				    return Tone.Timeline;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A signal which adds the method getValueAtTime. 
					 *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline
					 *  @extends {Tone.Param}
					 *  @param {Number=} value The initial value of the signal
					 *  @param {String=} units The conversion units of the signal.
					 */
				    Tone.TimelineSignal = function () {
				        var options = this.optionsObject(arguments, [
				            'value',
				            'units'
				        ], Tone.Signal.defaults);
				        /**
						 *  The scheduled events
						 *  @type {Tone.Timeline}
						 *  @private
						 */
				        this._events = new Tone.Timeline(10);
				        //constructors
				        Tone.Signal.apply(this, options);
				        options.param = this._param;
				        Tone.Param.call(this, options);
				        /**
						 *  The initial scheduled value
						 *  @type {Number}
						 *  @private
						 */
				        this._initial = this._fromUnits(this._param.value);
				    };
				    Tone.extend(Tone.TimelineSignal, Tone.Param);
				    /**
					 *  The event types of a schedulable signal.
					 *  @enum {String}
					 *  @private
					 */
				    Tone.TimelineSignal.Type = {
				        Linear: 'linear',
				        Exponential: 'exponential',
				        Target: 'target',
				        Curve: 'curve',
				        Set: 'set'
				    };
				    /**
					 * The current value of the signal. 
					 * @memberOf Tone.TimelineSignal#
					 * @type {Number}
					 * @name value
					 */
				    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {
				        get: function () {
				            var now = this.now();
				            var val = this.getValueAtTime(now);
				            return this._toUnits(val);
				        },
				        set: function (value) {
				            var convertedVal = this._fromUnits(value);
				            this._initial = convertedVal;
				            this.cancelScheduledValues();
				            this._param.value = convertedVal;
				        }
				    });
				    ///////////////////////////////////////////////////////////////////////////
				    //	SCHEDULING
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Schedules a parameter value change at the given time.
					 *  @param {*}	value The value to set the signal.
					 *  @param {Time}  time The time when the change should occur.
					 *  @returns {Tone.TimelineSignal} this
					 *  @example
					 * //set the frequency to "G4" in exactly 1 second from now. 
					 * freq.setValueAtTime("G4", "+1");
					 */
				    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {
				        value = this._fromUnits(value);
				        startTime = this.toSeconds(startTime);
				        this._events.addEvent({
				            'type': Tone.TimelineSignal.Type.Set,
				            'value': value,
				            'time': startTime
				        });
				        //invoke the original event
				        this._param.setValueAtTime(value, startTime);
				        return this;
				    };
				    /**
					 *  Schedules a linear continuous change in parameter value from the 
					 *  previous scheduled parameter value to the given value.
					 *  
					 *  @param  {number} value   
					 *  @param  {Time} endTime 
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {
				        value = this._fromUnits(value);
				        endTime = this.toSeconds(endTime);
				        this._events.addEvent({
				            'type': Tone.TimelineSignal.Type.Linear,
				            'value': value,
				            'time': endTime
				        });
				        this._param.linearRampToValueAtTime(value, endTime);
				        return this;
				    };
				    /**
					 *  Schedules an exponential continuous change in parameter value from 
					 *  the previous scheduled parameter value to the given value.
					 *  
					 *  @param  {number} value   
					 *  @param  {Time} endTime 
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {
				        //get the previous event and make sure it's not starting from 0
				        endTime = this.toSeconds(endTime);
				        var beforeEvent = this._searchBefore(endTime);
				        if (beforeEvent && beforeEvent.value === 0) {
				            //reschedule that event
				            this.setValueAtTime(this._minOutput, beforeEvent.time);
				        }
				        value = this._fromUnits(value);
				        var setValue = Math.max(value, this._minOutput);
				        this._events.addEvent({
				            'type': Tone.TimelineSignal.Type.Exponential,
				            'value': setValue,
				            'time': endTime
				        });
				        //if the ramped to value is 0, make it go to the min output, and then set to 0.
				        if (value < this._minOutput) {
				            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);
				            this.setValueAtTime(0, endTime);
				        } else {
				            this._param.exponentialRampToValueAtTime(value, endTime);
				        }
				        return this;
				    };
				    /**
					 *  Start exponentially approaching the target value at the given time with
					 *  a rate having the given time constant.
					 *  @param {number} value        
					 *  @param {Time} startTime    
					 *  @param {number} timeConstant 
					 *  @returns {Tone.TimelineSignal} this 
					 */
				    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
				        value = this._fromUnits(value);
				        value = Math.max(this._minOutput, value);
				        timeConstant = Math.max(this._minOutput, timeConstant);
				        startTime = this.toSeconds(startTime);
				        this._events.addEvent({
				            'type': Tone.TimelineSignal.Type.Target,
				            'value': value,
				            'time': startTime,
				            'constant': timeConstant
				        });
				        this._param.setTargetAtTime(value, startTime, timeConstant);
				        return this;
				    };
				    /**
					 *  Set an array of arbitrary values starting at the given time for the given duration.
					 *  @param {Float32Array} values        
					 *  @param {Time} startTime    
					 *  @param {Time} duration
					 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
					 *  @returns {Tone.TimelineSignal} this 
					 */
				    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
				        scaling = this.defaultArg(scaling, 1);
				        //copy the array
				        var floats = new Array(values.length);
				        for (var i = 0; i < floats.length; i++) {
				            floats[i] = this._fromUnits(values[i]) * scaling;
				        }
				        startTime = this.toSeconds(startTime);
				        duration = this.toSeconds(duration);
				        this._events.addEvent({
				            'type': Tone.TimelineSignal.Type.Curve,
				            'value': floats,
				            'time': startTime,
				            'duration': duration
				        });
				        //set the first value
				        this._param.setValueAtTime(floats[0], startTime);
				        //schedule a lienar ramp for each of the segments
				        for (var j = 1; j < floats.length; j++) {
				            var segmentTime = startTime + j / (floats.length - 1) * duration;
				            this._param.linearRampToValueAtTime(floats[j], segmentTime);
				        }
				        return this;
				    };
				    /**
					 *  Cancels all scheduled parameter changes with times greater than or 
					 *  equal to startTime.
					 *  
					 *  @param  {Time} startTime
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {
				        after = this.toSeconds(after);
				        this._events.cancel(after);
				        this._param.cancelScheduledValues(after);
				        return this;
				    };
				    /**
					 *  Sets the computed value at the given time. This provides
					 *  a point from which a linear or exponential curve
					 *  can be scheduled after. Will cancel events after 
					 *  the given time and shorten the currently scheduled
					 *  linear or exponential ramp so that it ends at `time` .
					 *  This is to avoid discontinuities and clicks in envelopes. 
					 *  @param {Time} time When to set the ramp point
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.setRampPoint = function (time) {
				        time = this.toSeconds(time);
				        //get the value at the given time
				        var val = this._toUnits(this.getValueAtTime(time));
				        //if there is an event at the given time
				        //and that even is not a "set"
				        var before = this._searchBefore(time);
				        if (before && before.time === time) {
				            //remove everything after
				            this.cancelScheduledValues(time + this.sampleTime);
				        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {
				            //if the curve is still playing
				            //cancel the curve
				            this.cancelScheduledValues(time);
				            this.linearRampToValueAtTime(val, time);
				        } else {
				            //reschedule the next event to end at the given time
				            var after = this._searchAfter(time);
				            if (after) {
				                //cancel the next event(s)
				                this.cancelScheduledValues(time);
				                if (after.type === Tone.TimelineSignal.Type.Linear) {
				                    this.linearRampToValueAtTime(val, time);
				                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
				                    this.exponentialRampToValueAtTime(val, time);
				                }
				            }
				            this.setValueAtTime(val, time);
				        }
				        return this;
				    };
				    /**
					 *  Do a linear ramp to the given value between the start and finish times.
					 *  @param {Number} value The value to ramp to.
					 *  @param {Time} start The beginning anchor point to do the linear ramp
					 *  @param {Time} finish The ending anchor point by which the value of
					 *                       the signal will equal the given value.
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {
				        this.setRampPoint(start);
				        this.linearRampToValueAtTime(value, finish);
				        return this;
				    };
				    /**
					 *  Do a exponential ramp to the given value between the start and finish times.
					 *  @param {Number} value The value to ramp to.
					 *  @param {Time} start The beginning anchor point to do the exponential ramp
					 *  @param {Time} finish The ending anchor point by which the value of
					 *                       the signal will equal the given value.
					 *  @returns {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {
				        this.setRampPoint(start);
				        this.exponentialRampToValueAtTime(value, finish);
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	GETTING SCHEDULED VALUES
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Returns the value before or equal to the given time
					 *  @param  {Number}  time  The time to query
					 *  @return  {Object}  The event at or before the given time.
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._searchBefore = function (time) {
				        return this._events.getEvent(time);
				    };
				    /**
					 *  The event after the given time
					 *  @param  {Number}  time  The time to query.
					 *  @return  {Object}  The next event after the given time
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._searchAfter = function (time) {
				        return this._events.getEventAfter(time);
				    };
				    /**
					 *  Get the scheduled value at the given time. This will
					 *  return the unconverted (raw) value.
					 *  @param  {Number}  time  The time in seconds.
					 *  @return  {Number}  The scheduled value at the given time.
					 */
				    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {
				        time = this.toSeconds(time);
				        var after = this._searchAfter(time);
				        var before = this._searchBefore(time);
				        var value = this._initial;
				        //if it was set by
				        if (before === null) {
				            value = this._initial;
				        } else if (before.type === Tone.TimelineSignal.Type.Target) {
				            var previous = this._events.getEventBefore(before.time);
				            var previouVal;
				            if (previous === null) {
				                previouVal = this._initial;
				            } else {
				                previouVal = previous.value;
				            }
				            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);
				        } else if (before.type === Tone.TimelineSignal.Type.Curve) {
				            value = this._curveInterpolate(before.time, before.value, before.duration, time);
				        } else if (after === null) {
				            value = before.value;
				        } else if (after.type === Tone.TimelineSignal.Type.Linear) {
				            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
				        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
				            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
				        } else {
				            value = before.value;
				        }
				        return value;
				    };
				    /**
					 *  When signals connect to other signals or AudioParams, 
					 *  they take over the output value of that signal or AudioParam. 
					 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
					 *
					 *  @override
					 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
					 *  @param {number} [outputNumber=0] The output number to connect from.
					 *  @param {number} [inputNumber=0] The input number to connect to.
					 *  @returns {Tone.TimelineSignal} this
					 *  @method
					 */
				    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;
				    ///////////////////////////////////////////////////////////////////////////
				    //	AUTOMATION CURVE CALCULATIONS
				    //	MIT License, copyright (c) 2014 Jordan Santell
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Calculates the the value along the curve produced by setTargetAtTime
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
				        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
				    };
				    /**
					 *  Calculates the the value along the curve produced by linearRampToValueAtTime
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
				        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
				    };
				    /**
					 *  Calculates the the value along the curve produced by exponentialRampToValueAtTime
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
				        v0 = Math.max(this._minOutput, v0);
				        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
				    };
				    /**
					 *  Calculates the the value along the curve produced by setValueCurveAtTime
					 *  @private
					 */
				    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {
				        var len = curve.length;
				        // If time is after duration, return the last curve value
				        if (time >= start + duration) {
				            return curve[len - 1];
				        } else if (time <= start) {
				            return curve[0];
				        } else {
				            var progress = (time - start) / duration;
				            var lowerIndex = Math.floor((len - 1) * progress);
				            var upperIndex = Math.ceil((len - 1) * progress);
				            var lowerVal = curve[lowerIndex];
				            var upperVal = curve[upperIndex];
				            if (upperIndex === lowerIndex) {
				                return lowerVal;
				            } else {
				                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));
				            }
				        }
				    };
				    /**
					 *  Clean up.
					 *  @return {Tone.TimelineSignal} this
					 */
				    Tone.TimelineSignal.prototype.dispose = function () {
				        Tone.Signal.prototype.dispose.call(this);
				        Tone.Param.prototype.dispose.call(this);
				        this._events.dispose();
				        this._events = null;
				    };
				    return Tone.TimelineSignal;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Pow applies an exponent to the incoming signal. The incoming signal
					 *         must be AudioRange.
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
					 *  @example
					 * var pow = new Tone.Pow(2);
					 * var sig = new Tone.Signal(0.5).connect(pow);
					 * //output of pow is 0.25. 
					 */
				    Tone.Pow = function (exp) {
				        /**
						 * the exponent
						 * @private
						 * @type {number}
						 */
				        this._exp = this.defaultArg(exp, 1);
				        /**
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);
				    };
				    Tone.extend(Tone.Pow, Tone.SignalBase);
				    /**
					 * The value of the exponent.
					 * @memberOf Tone.Pow#
					 * @type {number}
					 * @name value
					 */
				    Object.defineProperty(Tone.Pow.prototype, 'value', {
				        get: function () {
				            return this._exp;
				        },
				        set: function (exp) {
				            this._exp = exp;
				            this._expScaler.setMap(this._expFunc(this._exp));
				        }
				    });
				    /**
					 *  the function which maps the waveshaper
					 *  @param   {number} exp
					 *  @return {function}
					 *  @private
					 */
				    Tone.Pow.prototype._expFunc = function (exp) {
				        return function (val) {
				            return Math.pow(Math.abs(val), exp);
				        };
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.Pow} this
					 */
				    Tone.Pow.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._expScaler.dispose();
				        this._expScaler = null;
				        return this;
				    };
				    return Tone.Pow;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
					 *          envelope generator. Tone.Envelope outputs a signal which 
					 *          can be connected to an AudioParam or Tone.Signal. 
					 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {Time} [attack] The amount of time it takes for the envelope to go from 
					 *                         0 to it's maximum value. 
					 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
					 *                       	to fall to the sustain value. 
					 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
					 *                                	the release is triggered. 
					 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
					 *  @example
					 * //an amplitude envelope
					 * var gainNode = Tone.context.createGain();
					 * var env = new Tone.Envelope({
					 * 	"attack" : 0.1,
					 * 	"decay" : 0.2,
					 * 	"sustain" : 1,
					 * 	"release" : 0.8,
					 * });
					 * env.connect(gainNode.gain);
					 */
				    Tone.Envelope = function () {
				        //get all of the defaults
				        var options = this.optionsObject(arguments, [
				            'attack',
				            'decay',
				            'sustain',
				            'release'
				        ], Tone.Envelope.defaults);
				        /** 
						 *  When triggerAttack is called, the attack time is the amount of
						 *  time it takes for the envelope to reach it's maximum value. 
						 *  @type {Time}
						 */
				        this.attack = options.attack;
				        /**
						 *  After the attack portion of the envelope, the value will fall
						 *  over the duration of the decay time to it's sustain value. 
						 *  @type {Time}
						 */
				        this.decay = options.decay;
				        /**
						 * 	The sustain value is the value 
						 * 	which the envelope rests at after triggerAttack is
						 * 	called, but before triggerRelease is invoked. 
						 *  @type {NormalRange}
						 */
				        this.sustain = options.sustain;
				        /**
						 *  After triggerRelease is called, the envelope's
						 *  value will fall to it's miminum value over the
						 *  duration of the release time. 
						 *  @type {Time}
						 */
				        this.release = options.release;
				        /**
						 *  the next time the envelope is at standby
						 *  @type {number}
						 *  @private
						 */
				        this._attackCurve = 'linear';
				        /**
						 *  the next time the envelope is at standby
						 *  @type {number}
						 *  @private
						 */
				        this._releaseCurve = 'exponential';
				        /**
						 *  the signal
						 *  @type {Tone.TimelineSignal}
						 *  @private
						 */
				        this._sig = this.output = new Tone.TimelineSignal();
				        this._sig.setValueAtTime(0, 0);
				        //set the attackCurve initially
				        this.attackCurve = options.attackCurve;
				        this.releaseCurve = options.releaseCurve;
				    };
				    Tone.extend(Tone.Envelope);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 */
				    Tone.Envelope.defaults = {
				        'attack': 0.01,
				        'decay': 0.1,
				        'sustain': 0.5,
				        'release': 1,
				        'attackCurve': 'linear',
				        'releaseCurve': 'exponential'
				    };
				    /**
					 * Read the current value of the envelope. Useful for 
					 * syncronizing visual output to the envelope. 
					 * @memberOf Tone.Envelope#
					 * @type {Number}
					 * @name value
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Envelope.prototype, 'value', {
				        get: function () {
				            return this.getValueAtTime(this.now());
				        }
				    });
				    /**
					 * The shape of the attack. 
					 * Can be any of these strings:
					 * <ul>
					 *   <li>linear</li>
					 *   <li>exponential</li>
					 *   <li>sine</li>
					 *   <li>ease</li>
					 *   <li>bounce</li>
					 *   <li>ripple</li>
					 *   <li>step</li>
					 * </ul>
					 * Can also be an array which describes the curve. Values
					 * in the array are evenly subdivided and linearly
					 * interpolated over the duration of the attack. 
					 * @memberOf Tone.Envelope#
					 * @type {String|Array}
					 * @name attackCurve
					 * @example
					 * env.attackCurve = "linear";
					 * @example
					 * //can also be an array
					 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
					 */
				    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {
				        get: function () {
				            if (this.isString(this._attackCurve)) {
				                return this._attackCurve;
				            } else if (this.isArray(this._attackCurve)) {
				                //look up the name in the curves array
				                for (var type in Tone.Envelope.Type) {
				                    if (Tone.Envelope.Type[type].In === this._attackCurve) {
				                        return type;
				                    }
				                }
				                //otherwise just return the array
				                return this._attackCurve;
				            }
				        },
				        set: function (curve) {
				            //check if it's a valid type
				            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
				                var curveDef = Tone.Envelope.Type[curve];
				                if (this.isObject(curveDef)) {
				                    this._attackCurve = curveDef.In;
				                } else {
				                    this._attackCurve = curveDef;
				                }
				            } else if (this.isArray(curve)) {
				                this._attackCurve = curve;
				            } else {
				                throw new Error('Tone.Envelope: invalid curve: ' + curve);
				            }
				        }
				    });
				    /**
					 * The shape of the release. See the attack curve types. 
					 * @memberOf Tone.Envelope#
					 * @type {String|Array}
					 * @name releaseCurve
					 * @example
					 * env.releaseCurve = "linear";
					 */
				    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {
				        get: function () {
				            if (this.isString(this._releaseCurve)) {
				                return this._releaseCurve;
				            } else if (this.isArray(this._releaseCurve)) {
				                //look up the name in the curves array
				                for (var type in Tone.Envelope.Type) {
				                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {
				                        return type;
				                    }
				                }
				                //otherwise just return the array
				                return this._releaseCurve;
				            }
				        },
				        set: function (curve) {
				            //check if it's a valid type
				            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
				                var curveDef = Tone.Envelope.Type[curve];
				                if (this.isObject(curveDef)) {
				                    this._releaseCurve = curveDef.Out;
				                } else {
				                    this._releaseCurve = curveDef;
				                }
				            } else if (this.isArray(curve)) {
				                this._releaseCurve = curve;
				            } else {
				                throw new Error('Tone.Envelope: invalid curve: ' + curve);
				            }
				        }
				    });
				    /**
					 *  Trigger the attack/decay portion of the ADSR envelope. 
					 *  @param  {Time} [time=now] When the attack should start.
					 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
					 *                               number between 0-1
					 *  @returns {Tone.Envelope} this
					 *  @example
					 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
					 *  env.triggerAttack("+0.5", 0.2);
					 */
				    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {
				        time = this.toSeconds(time);
				        var originalAttack = this.toSeconds(this.attack);
				        var attack = originalAttack;
				        var decay = this.toSeconds(this.decay);
				        velocity = this.defaultArg(velocity, 1);
				        //check if it's not a complete attack
				        var currentValue = this.getValueAtTime(time);
				        if (currentValue > 0) {
				            //subtract the current value from the attack time
				            var attackRate = 1 / attack;
				            var remainingDistance = 1 - currentValue;
				            //the attack is now the remaining time
				            attack = remainingDistance / attackRate;
				        }
				        //attack
				        if (this._attackCurve === 'linear') {
				            this._sig.linearRampToValue(velocity, attack, time);
				        } else if (this._attackCurve === 'exponential') {
				            this._sig.exponentialRampToValue(velocity, attack, time);
				        } else if (attack > 0) {
				            this._sig.setRampPoint(time);
				            var curve = this._attackCurve;
				            //take only a portion of the curve
				            if (attack < originalAttack) {
				                var percentComplete = 1 - attack / originalAttack;
				                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);
				                curve = this._attackCurve.slice(sliceIndex);
				                //the first index is the current value
				                curve[0] = currentValue;
				            }
				            this._sig.setValueCurveAtTime(curve, time, attack, velocity);
				        }
				        //decay
				        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);
				        return this;
				    };
				    /**
					 *  Triggers the release of the envelope.
					 *  @param  {Time} [time=now] When the release portion of the envelope should start. 
					 *  @returns {Tone.Envelope} this
					 *  @example
					 *  //trigger release immediately
					 *  env.triggerRelease();
					 */
				    Tone.Envelope.prototype.triggerRelease = function (time) {
				        time = this.toSeconds(time);
				        var currentValue = this.getValueAtTime(time);
				        if (currentValue > 0) {
				            var release = this.toSeconds(this.release);
				            if (this._releaseCurve === 'linear') {
				                this._sig.linearRampToValue(0, release, time);
				            } else if (this._releaseCurve === 'exponential') {
				                this._sig.exponentialRampToValue(0, release, time);
				            } else {
				                var curve = this._releaseCurve;
				                if (this.isArray(curve)) {
				                    this._sig.setRampPoint(time);
				                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Get the scheduled value at the given time. This will
					 *  return the unconverted (raw) value.
					 *  @param  {Number}  time  The time in seconds.
					 *  @return  {Number}  The scheduled value at the given time.
					 */
				    Tone.Envelope.prototype.getValueAtTime = function (time) {
				        return this._sig.getValueAtTime(time);
				    };
				    /**
					 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
					 *  some duration, then triggerRelease. 
					 *  @param {Time} duration The duration of the sustain.
					 *  @param {Time} [time=now] When the attack should be triggered.
					 *  @param {number} [velocity=1] The velocity of the envelope. 
					 *  @returns {Tone.Envelope} this
					 *  @example
					 * //trigger the attack and then the release after 0.6 seconds.
					 * env.triggerAttackRelease(0.6);
					 */
				    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {
				        time = this.toSeconds(time);
				        this.triggerAttack(time, velocity);
				        this.triggerRelease(time + this.toSeconds(duration));
				        return this;
				    };
				    /**
					 *  Cancels all scheduled envelope changes after the given time.
					 *  @param  {Time} after
					 *  @returns {Tone.Envelope} this
					 */
				    Tone.Envelope.prototype.cancel = function (after) {
				        this._sig.cancelScheduledValues(after);
				        return this;
				    };
				    /**
					 *  Borrows the connect method from Tone.Signal. 
					 *  @function
					 *  @private
					 */
				    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;
				    /**
				 	 *  Generate some complex envelope curves. 
				 	 */
				    (function _createCurves() {
				        var curveLen = 128;
				        var i, k;
				        //cosine curve
				        var cosineCurve = [];
				        for (i = 0; i < curveLen; i++) {
				            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
				        }
				        //ripple curve
				        var rippleCurve = [];
				        var rippleCurveFreq = 6.4;
				        for (i = 0; i < curveLen - 1; i++) {
				            k = i / (curveLen - 1);
				            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
				            rippleCurve[i] = sineWave / 10 + k * 0.83;
				        }
				        rippleCurve[curveLen - 1] = 1;
				        //stairs curve
				        var stairsCurve = [];
				        var steps = 5;
				        for (i = 0; i < curveLen; i++) {
				            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
				        }
				        //in-out easing curve
				        var sineCurve = [];
				        for (i = 0; i < curveLen; i++) {
				            k = i / (curveLen - 1);
				            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
				        }
				        //a bounce curve
				        var bounceCurve = [];
				        for (i = 0; i < curveLen; i++) {
				            k = i / (curveLen - 1);
				            var freq = Math.pow(k, 3) * 4 + 0.2;
				            var val = Math.cos(freq * Math.PI * 2 * k);
				            bounceCurve[i] = Math.abs(val * (1 - k));
				        }
				        /**
						 *  Invert a value curve to make it work for the release
						 *  @private
						 */
				        function invertCurve(curve) {
				            var out = new Array(curve.length);
				            for (var j = 0; j < curve.length; j++) {
				                out[j] = 1 - curve[j];
				            }
				            return out;
				        }
				        /**
						 *  reverse the curve
						 *  @private
						 */
				        function reverseCurve(curve) {
				            return curve.slice(0).reverse();
				        }
				        /**
						 *  attack and release curve arrays
						 *  @type  {Object}
						 *  @private
						 */
				        Tone.Envelope.Type = {
				            'linear': 'linear',
				            'exponential': 'exponential',
				            'bounce': {
				                In: invertCurve(bounceCurve),
				                Out: bounceCurve
				            },
				            'cosine': {
				                In: cosineCurve,
				                Out: reverseCurve(cosineCurve)
				            },
				            'step': {
				                In: stairsCurve,
				                Out: invertCurve(stairsCurve)
				            },
				            'ripple': {
				                In: rippleCurve,
				                Out: invertCurve(rippleCurve)
				            },
				            'sine': {
				                In: sineCurve,
				                Out: invertCurve(sineCurve)
				            }
				        };
				    }());
				    /**
					 *  Disconnect and dispose.
					 *  @returns {Tone.Envelope} this
					 */
				    Tone.Envelope.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._sig.dispose();
				        this._sig = null;
				        this._attackCurve = null;
				        this._releaseCurve = null;
				        return this;
				    };
				    return Tone.Envelope;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. 
					 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
					 *          an audio signal as the input and will apply the envelope to the amplitude
					 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
					 *  
					 *  @constructor
					 *  @extends {Tone.Envelope}
					 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from 
					 *                               0 to it's maximum value. 
					 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
					 *                       	to fall to the sustain value. 
					 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
					 *                                	the release is triggered. 
					 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
					 *  @example
					 * var ampEnv = new Tone.AmplitudeEnvelope({
					 * 	"attack": 0.1,
					 * 	"decay": 0.2,
					 * 	"sustain": 1.0,
					 * 	"release": 0.8
					 * }).toMaster();
					 * //create an oscillator and connect it
					 * var osc = new Tone.Oscillator().connect(ampEnv).start();
					 * //trigger the envelopes attack and release "8t" apart
					 * ampEnv.triggerAttackRelease("8t");
					 */
				    Tone.AmplitudeEnvelope = function () {
				        Tone.Envelope.apply(this, arguments);
				        /**
						 *  the input node
						 *  @type {GainNode}
						 *  @private
						 */
				        this.input = this.output = new Tone.Gain();
				        this._sig.connect(this.output.gain);
				    };
				    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);
				    /**
					 *  Clean up
					 *  @return  {Tone.AmplitudeEnvelope}  this
					 */
				    Tone.AmplitudeEnvelope.prototype.dispose = function () {
				        this.input.dispose();
				        this.input = null;
				        Tone.Envelope.prototype.dispose.call(this);
				        return this;
				    };
				    return Tone.AmplitudeEnvelope;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Wrapper around the native Web Audio's 
					 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
					 *          Extracts FFT or Waveform data from the incoming signal.
					 *  @extends {Tone}
					 *  @param {String=} type The return type of the analysis, either "fft", or "waveform". 
					 *  @param {Number=} size The size of the FFT. Value must be a power of 
					 *                       two in the range 32 to 32768.
					 */
				    Tone.Analyser = function () {
				        var options = this.optionsObject(arguments, [
				            'type',
				            'size'
				        ], Tone.Analyser.defaults);
				        /**
						 *  The analyser node.
						 *  @private
						 *  @type {AnalyserNode}
						 */
				        this._analyser = this.input = this.output = this.context.createAnalyser();
				        /**
						 *  The analysis type
						 *  @type {String}
						 *  @private
						 */
				        this._type = options.type;
				        /**
						 *  The return type of the analysis
						 *  @type {String}
						 *  @private
						 */
				        this._returnType = options.returnType;
				        /**
						 *  The buffer that the FFT data is written to
						 *  @type {TypedArray}
						 *  @private
						 */
				        this._buffer = null;
				        //set the values initially
				        this.size = options.size;
				        this.type = options.type;
				        this.returnType = options.returnType;
				        this.minDecibels = options.minDecibels;
				        this.maxDecibels = options.maxDecibels;
				    };
				    Tone.extend(Tone.Analyser);
				    /**
					 *  The default values.
					 *  @type {Object}
					 *  @const
					 */
				    Tone.Analyser.defaults = {
				        'size': 1024,
				        'returnType': 'byte',
				        'type': 'fft',
				        'smoothing': 0.8,
				        'maxDecibels': -30,
				        'minDecibels': -100
				    };
				    /**
					 *  Possible return types of Tone.Analyser.analyse()
					 *  @enum {String}
					 */
				    Tone.Analyser.Type = {
				        Waveform: 'waveform',
				        FFT: 'fft'
				    };
				    /**
					 *  Possible return types of Tone.Analyser.analyse(). 
					 *  byte values are between [0,255]. float values are between 
					 *  [-1, 1] when the type is set to "waveform" and between 
					 *  [minDecibels,maxDecibels] when the type is "fft".
					 *  @enum {String}
					 */
				    Tone.Analyser.ReturnType = {
				        Byte: 'byte',
				        Float: 'float'
				    };
				    /**
					 *  Run the analysis given the current settings and return the 
					 *  result as a TypedArray. 
					 *  @returns {TypedArray}
					 */
				    Tone.Analyser.prototype.analyse = function () {
				        if (this._type === Tone.Analyser.Type.FFT) {
				            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
				                this._analyser.getByteFrequencyData(this._buffer);
				            } else {
				                this._analyser.getFloatFrequencyData(this._buffer);
				            }
				        } else if (this._type === Tone.Analyser.Type.Waveform) {
				            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
				                this._analyser.getByteTimeDomainData(this._buffer);
				            } else {
				                if (this.isFunction(AnalyserNode.prototype.getFloatTimeDomainData)) {
				                    this._analyser.getFloatTimeDomainData(this._buffer);
				                } else {
				                    var uint8 = new Uint8Array(this._buffer.length);
				                    this._analyser.getByteTimeDomainData(uint8);
				                    //referenced https://github.com/mohayonao/get-float-time-domain-data 
				                    // POLYFILL
				                    for (var i = 0; i < uint8.length; i++) {
				                        this._buffer[i] = (uint8[i] - 128) * 0.0078125;
				                    }
				                }
				            }
				        }
				        return this._buffer;
				    };
				    /**
					 *  The size of analysis. This must be a power of two in the range 32 to 32768.
					 *  @memberOf Tone.Analyser#
					 *  @type {Number}
					 *  @name size
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'size', {
				        get: function () {
				            return this._analyser.frequencyBinCount;
				        },
				        set: function (size) {
				            this._analyser.fftSize = size * 2;
				            this.type = this._type;
				        }
				    });
				    /**
					 *  The return type of Tone.Analyser.analyse(), either "byte" or "float". 
					 *  When the type is set to "byte" the range of values returned in the array
					 *  are between 0-255. "float" values are between 
					 *  [-1, 1] when the type is set to "waveform" and between 
					 *  [minDecibels,maxDecibels] when the type is "fft".
					 *  @memberOf Tone.Analyser#
					 *  @type {String}
					 *  @name type
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {
				        get: function () {
				            return this._returnType;
				        },
				        set: function (type) {
				            if (type === Tone.Analyser.ReturnType.Byte) {
				                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);
				            } else if (type === Tone.Analyser.ReturnType.Float) {
				                this._buffer = new Float32Array(this._analyser.frequencyBinCount);
				            } else {
				                throw new TypeError('Tone.Analayser: invalid return type: ' + type);
				            }
				            this._returnType = type;
				        }
				    });
				    /**
					 *  The analysis function returned by Tone.Analyser.analyse(), either "fft" or "waveform". 
					 *  @memberOf Tone.Analyser#
					 *  @type {String}
					 *  @name type
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'type', {
				        get: function () {
				            return this._type;
				        },
				        set: function (type) {
				            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {
				                throw new TypeError('Tone.Analyser: invalid type: ' + type);
				            }
				            this._type = type;
				        }
				    });
				    /**
					 *  0 represents no time averaging with the last analysis frame.
					 *  @memberOf Tone.Analyser#
					 *  @type {NormalRange}
					 *  @name smoothing
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {
				        get: function () {
				            return this._analyser.smoothingTimeConstant;
				        },
				        set: function (val) {
				            this._analyser.smoothingTimeConstant = val;
				        }
				    });
				    /**
					 *  The smallest decibel value which is analysed by the FFT. 
					 *  @memberOf Tone.Analyser#
					 *  @type {Decibels}
					 *  @name minDecibels
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {
				        get: function () {
				            return this._analyser.minDecibels;
				        },
				        set: function (val) {
				            this._analyser.minDecibels = val;
				        }
				    });
				    /**
					 *  The largest decibel value which is analysed by the FFT. 
					 *  @memberOf Tone.Analyser#
					 *  @type {Decibels}
					 *  @name maxDecibels
					 */
				    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {
				        get: function () {
				            return this._analyser.maxDecibels;
				        },
				        set: function (val) {
				            this._analyser.maxDecibels = val;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return  {Tone.Analyser}  this
					 */
				    Tone.Analyser.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._analyser.disconnect();
				        this._analyser = null;
				        this._buffer = null;
				    };
				    return Tone.Analyser;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Compressor is a thin wrapper around the Web Audio 
					 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
					 *         Compression reduces the volume of loud sounds or amplifies quiet sounds 
					 *         by narrowing or "compressing" an audio signal's dynamic range. 
					 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
					 *  @param {Positive} [ratio] The gain reduction ratio.
					 *  @example
					 * var comp = new Tone.Compressor(-30, 3);
					 */
				    Tone.Compressor = function () {
				        var options = this.optionsObject(arguments, [
				            'threshold',
				            'ratio'
				        ], Tone.Compressor.defaults);
				        /**
						 *  the compressor node
						 *  @type {DynamicsCompressorNode}
						 *  @private
						 */
				        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();
				        /**
						 *  the threshold vaue
						 *  @type {Decibels}
						 *  @signal
						 */
				        this.threshold = this._compressor.threshold;
				        /**
						 *  The attack parameter
						 *  @type {Time}
						 *  @signal
						 */
				        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);
				        /**
						 *  The release parameter
						 *  @type {Time}
						 *  @signal
						 */
				        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);
				        /**
						 *  The knee parameter
						 *  @type {Decibels}
						 *  @signal
						 */
				        this.knee = this._compressor.knee;
				        /**
						 *  The ratio value
						 *  @type {Number}
						 *  @signal
						 */
				        this.ratio = this._compressor.ratio;
				        //set the defaults
				        this._readOnly([
				            'knee',
				            'release',
				            'attack',
				            'ratio',
				            'threshold'
				        ]);
				        this.set(options);
				    };
				    Tone.extend(Tone.Compressor);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Compressor.defaults = {
				        'ratio': 12,
				        'threshold': -24,
				        'release': 0.25,
				        'attack': 0.003,
				        'knee': 30
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.Compressor} this
					 */
				    Tone.Compressor.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'knee',
				            'release',
				            'attack',
				            'ratio',
				            'threshold'
				        ]);
				        this._compressor.disconnect();
				        this._compressor = null;
				        this.attack.dispose();
				        this.attack = null;
				        this.release.dispose();
				        this.release = null;
				        this.threshold = null;
				        this.ratio = null;
				        this.knee = null;
				        return this;
				    };
				    return Tone.Compressor;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Add a signal and a number or two signals. When no value is
					 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
					 *         and <code>input[1]</code>. If a value is passed into the constructor, 
					 *         the it will be added to the input.
					 *  
					 *  @constructor
					 *  @extends {Tone.Signal}
					 *  @param {number=} value If no value is provided, Tone.Add will sum the first
					 *                         and second inputs. 
					 *  @example
					 * var signal = new Tone.Signal(2);
					 * var add = new Tone.Add(2);
					 * signal.connect(add);
					 * //the output of add equals 4
					 *  @example
					 * //if constructed with no arguments
					 * //it will add the first and second inputs
					 * var add = new Tone.Add();
					 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
					 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
					 * //the output of add equals 7. 
					 */
				    Tone.Add = function (value) {
				        this.createInsOuts(2, 0);
				        /**
						 *  the summing node
						 *  @type {GainNode}
						 *  @private
						 */
				        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();
				        /**
						 *  @private
						 *  @type {Tone.Signal}
						 */
				        this._param = this.input[1] = new Tone.Signal(value);
				        this._param.connect(this._sum);
				    };
				    Tone.extend(Tone.Add, Tone.Signal);
				    /**
					 *  Clean up.
					 *  @returns {Tone.Add} this
					 */
				    Tone.Add.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._sum.dispose();
				        this._sum = null;
				        this._param.dispose();
				        this._param = null;
				        return this;
				    };
				    return Tone.Add;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, 
					 *          multiplies the incoming signal by that value. 
					 *
					 *  @constructor
					 *  @extends {Tone.Signal}
					 *  @param {number=} value Constant value to multiple. If no value is provided,
					 *                         it will return the product of the first and second inputs
					 *  @example
					 * var mult = new Tone.Multiply();
					 * var sigA = new Tone.Signal(3);
					 * var sigB = new Tone.Signal(4);
					 * sigA.connect(mult, 0, 0);
					 * sigB.connect(mult, 0, 1);
					 * //output of mult is 12.
					 *  @example
					 * var mult = new Tone.Multiply(10);
					 * var sig = new Tone.Signal(2).connect(mult);
					 * //the output of mult is 20. 
					 */
				    Tone.Multiply = function (value) {
				        this.createInsOuts(2, 0);
				        /**
						 *  the input node is the same as the output node
						 *  it is also the GainNode which handles the scaling of incoming signal
						 *  
						 *  @type {GainNode}
						 *  @private
						 */
				        this._mult = this.input[0] = this.output = new Tone.Gain();
				        /**
						 *  the scaling parameter
						 *  @type {AudioParam}
						 *  @private
						 */
				        this._param = this.input[1] = this.output.gain;
				        this._param.value = this.defaultArg(value, 0);
				    };
				    Tone.extend(Tone.Multiply, Tone.Signal);
				    /**
					 *  clean up
					 *  @returns {Tone.Multiply} this
					 */
				    Tone.Multiply.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._mult.dispose();
				        this._mult = null;
				        this._param = null;
				        return this;
				    };
				    return Tone.Multiply;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
					 *
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @example
					 * var neg = new Tone.Negate();
					 * var sig = new Tone.Signal(-2).connect(neg);
					 * //output of neg is positive 2. 
					 */
				    Tone.Negate = function () {
				        /**
						 *  negation is done by multiplying by -1
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._multiply = this.input = this.output = new Tone.Multiply(-1);
				    };
				    Tone.extend(Tone.Negate, Tone.SignalBase);
				    /**
					 *  clean up
					 *  @returns {Tone.Negate} this
					 */
				    Tone.Negate.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._multiply.dispose();
				        this._multiply = null;
				        return this;
				    };
				    return Tone.Negate;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
					 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
					 *         signals <code>.value</code> will be subtracted from the incoming signal.
					 *
					 *  @extends {Tone.Signal}
					 *  @constructor
					 *  @param {number=} value The value to subtract from the incoming signal. If the value
					 *                         is omitted, it will subtract the second signal from the first.
					 *  @example
					 * var sub = new Tone.Subtract(1);
					 * var sig = new Tone.Signal(4).connect(sub);
					 * //the output of sub is 3. 
					 *  @example
					 * var sub = new Tone.Subtract();
					 * var sigA = new Tone.Signal(10);
					 * var sigB = new Tone.Signal(2.5);
					 * sigA.connect(sub, 0, 0);
					 * sigB.connect(sub, 0, 1);
					 * //output of sub is 7.5
					 */
				    Tone.Subtract = function (value) {
				        this.createInsOuts(2, 0);
				        /**
						 *  the summing node
						 *  @type {GainNode}
						 *  @private
						 */
				        this._sum = this.input[0] = this.output = new Tone.Gain();
				        /**
						 *  negate the input of the second input before connecting it
						 *  to the summing node.
						 *  @type {Tone.Negate}
						 *  @private
						 */
				        this._neg = new Tone.Negate();
				        /**
						 *  the node where the value is set
						 *  @private
						 *  @type {Tone.Signal}
						 */
				        this._param = this.input[1] = new Tone.Signal(value);
				        this._param.chain(this._neg, this._sum);
				    };
				    Tone.extend(Tone.Subtract, Tone.Signal);
				    /**
					 *  Clean up.
					 *  @returns {Tone.SignalBase} this
					 */
				    Tone.Subtract.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._neg.dispose();
				        this._neg = null;
				        this._sum.disconnect();
				        this._sum = null;
				        this._param.dispose();
				        this._param = null;
				        return this;
				    };
				    return Tone.Subtract;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
					 *  
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @example
					 * var gt0 = new Tone.GreaterThanZero();
					 * var sig = new Tone.Signal(0.01).connect(gt0);
					 * //the output of gt0 is 1. 
					 * sig.value = 0;
					 * //the output of gt0 is 0. 
					 */
				    Tone.GreaterThanZero = function () {
				        /**
						 *  @type {Tone.WaveShaper}
						 *  @private
						 */
				        this._thresh = this.output = new Tone.WaveShaper(function (val) {
				            if (val <= 0) {
				                return 0;
				            } else {
				                return 1;
				            }
				        }, 127);
				        /**
						 *  scale the first thresholded signal by a large value.
						 *  this will help with values which are very close to 0
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._scale = this.input = new Tone.Multiply(10000);
				        //connections
				        this._scale.connect(this._thresh);
				    };
				    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);
				    /**
					 *  dispose method
					 *  @returns {Tone.GreaterThanZero} this
					 */
				    Tone.GreaterThanZero.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._scale.dispose();
				        this._scale = null;
				        this._thresh.dispose();
				        this._thresh = null;
				        return this;
				    };
				    return Tone.GreaterThanZero;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
					 *          can compare two signals or a signal and a number. 
					 *  
					 *  @constructor
					 *  @extends {Tone.Signal}
					 *  @param {number} [value=0] the value to compare to the incoming signal
					 *  @example
					 * var gt = new Tone.GreaterThan(2);
					 * var sig = new Tone.Signal(4).connect(gt);
					 * //output of gt is equal 1. 
					 */
				    Tone.GreaterThan = function (value) {
				        this.createInsOuts(2, 0);
				        /**
						 *  subtract the amount from the incoming signal
						 *  @type {Tone.Subtract}
						 *  @private
						 */
				        this._param = this.input[0] = new Tone.Subtract(value);
				        this.input[1] = this._param.input[1];
				        /**
						 *  compare that amount to zero
						 *  @type {Tone.GreaterThanZero}
						 *  @private
						 */
				        this._gtz = this.output = new Tone.GreaterThanZero();
				        //connect
				        this._param.connect(this._gtz);
				    };
				    Tone.extend(Tone.GreaterThan, Tone.Signal);
				    /**
					 *  dispose method
					 *  @returns {Tone.GreaterThan} this
					 */
				    Tone.GreaterThan.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._param.dispose();
				        this._param = null;
				        this._gtz.dispose();
				        this._gtz = null;
				        return this;
				    };
				    return Tone.GreaterThan;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Return the absolute value of an incoming signal. 
					 *  
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @example
					 * var signal = new Tone.Signal(-1);
					 * var abs = new Tone.Abs();
					 * signal.connect(abs);
					 * //the output of abs is 1. 
					 */
				    Tone.Abs = function () {
				        /**
						 *  @type {Tone.LessThan}
						 *  @private
						 */
				        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {
				            if (val === 0) {
				                return 0;
				            } else {
				                return Math.abs(val);
				            }
				        }, 127);
				    };
				    Tone.extend(Tone.Abs, Tone.SignalBase);
				    /**
					 *  dispose method
					 *  @returns {Tone.Abs} this
					 */
				    Tone.Abs.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._abs.dispose();
				        this._abs = null;
				        return this;
				    };
				    return Tone.Abs;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
					 *         values in the NormalRange. 
					 *
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @param {NormalRange} modulus The modulus to apply.
					 *  @example
					 * var mod = new Tone.Modulo(0.2)
					 * var sig = new Tone.Signal(0.5).connect(mod);
					 * //mod outputs 0.1
					 */
				    Tone.Modulo = function (modulus) {
				        this.createInsOuts(1, 0);
				        /**
						 *  A waveshaper gets the integer multiple of 
						 *  the input signal and the modulus.
						 *  @private
						 *  @type {Tone.WaveShaper}
						 */
				        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));
				        /**
						 *  the integer multiple is multiplied by the modulus
						 *  @type  {Tone.Multiply}
						 *  @private
						 */
				        this._multiply = new Tone.Multiply();
				        /**
						 *  and subtracted from the input signal
						 *  @type  {Tone.Subtract}
						 *  @private
						 */
				        this._subtract = this.output = new Tone.Subtract();
				        /**
						 *  the modulus signal
						 *  @type  {Tone.Signal}
						 *  @private
						 */
				        this._modSignal = new Tone.Signal(modulus);
				        //connections
				        this.input.fan(this._shaper, this._subtract);
				        this._modSignal.connect(this._multiply, 0, 0);
				        this._shaper.connect(this._multiply, 0, 1);
				        this._multiply.connect(this._subtract, 0, 1);
				        this._setWaveShaper(modulus);
				    };
				    Tone.extend(Tone.Modulo, Tone.SignalBase);
				    /**
					 *  @param  {number}  mod  the modulus to apply
					 *  @private
					 */
				    Tone.Modulo.prototype._setWaveShaper = function (mod) {
				        this._shaper.setMap(function (val) {
				            var multiple = Math.floor((val + 0.0001) / mod);
				            return multiple;
				        });
				    };
				    /**
					 * The modulus value.
					 * @memberOf Tone.Modulo#
					 * @type {NormalRange}
					 * @name value
					 */
				    Object.defineProperty(Tone.Modulo.prototype, 'value', {
				        get: function () {
				            return this._modSignal.value;
				        },
				        set: function (mod) {
				            this._modSignal.value = mod;
				            this._setWaveShaper(mod);
				        }
				    });
				    /**
					 * clean up
					 *  @returns {Tone.Modulo} this
					 */
				    Tone.Modulo.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._shaper.dispose();
				        this._shaper = null;
				        this._multiply.dispose();
				        this._multiply = null;
				        this._subtract.dispose();
				        this._subtract = null;
				        this._modSignal.dispose();
				        this._modSignal = null;
				        return this;
				    };
				    return Tone.Modulo;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
					 *         See Tone.GainToAudio.
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @example
					 *  var a2g = new Tone.AudioToGain();
					 */
				    Tone.AudioToGain = function () {
				        /**
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
				            return (x + 1) / 2;
				        });
				    };
				    Tone.extend(Tone.AudioToGain, Tone.SignalBase);
				    /**
					 *  clean up
					 *  @returns {Tone.AudioToGain} this
					 */
				    Tone.AudioToGain.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._norm.dispose();
				        this._norm = null;
				        return this;
				    };
				    return Tone.AudioToGain;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Evaluate an expression at audio rate. <br><br>
					 *         Parsing code modified from https://code.google.com/p/tapdigit/
					 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @param {string} expr the expression to generate
					 *  @example
					 * //adds the signals from input[0] and input[1].
					 * var expr = new Tone.Expr("$0 + $1");
					 */
				    Tone.Expr = function () {
				        var expr = this._replacements(Array.prototype.slice.call(arguments));
				        var inputCount = this._parseInputs(expr);
				        /**
						 *  hold onto all of the nodes for disposal
						 *  @type {Array}
						 *  @private
						 */
				        this._nodes = [];
				        /**
						 *  The inputs. The length is determined by the expression. 
						 *  @type {Array}
						 */
				        this.input = new Array(inputCount);
				        //create a gain for each input
				        for (var i = 0; i < inputCount; i++) {
				            this.input[i] = this.context.createGain();
				        }
				        //parse the syntax tree
				        var tree = this._parseTree(expr);
				        //evaluate the results
				        var result;
				        try {
				            result = this._eval(tree);
				        } catch (e) {
				            this._disposeNodes();
				            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);
				        }
				        /**
						 *  The output node is the result of the expression
						 *  @type {Tone}
						 */
				        this.output = result;
				    };
				    Tone.extend(Tone.Expr, Tone.SignalBase);
				    //some helpers to cut down the amount of code
				    function applyBinary(Constructor, args, self) {
				        var op = new Constructor();
				        self._eval(args[0]).connect(op, 0, 0);
				        self._eval(args[1]).connect(op, 0, 1);
				        return op;
				    }
				    function applyUnary(Constructor, args, self) {
				        var op = new Constructor();
				        self._eval(args[0]).connect(op, 0, 0);
				        return op;
				    }
				    function getNumber(arg) {
				        return arg ? parseFloat(arg) : undefined;
				    }
				    function literalNumber(arg) {
				        return arg && arg.args ? parseFloat(arg.args) : undefined;
				    }
				    /*
					 *  the Expressions that Tone.Expr can parse.
					 *
					 *  each expression belongs to a group and contains a regexp 
					 *  for selecting the operator as well as that operators method
					 *  
					 *  @type {Object}
					 *  @private
					 */
				    Tone.Expr._Expressions = {
				        //values
				        'value': {
				            'signal': {
				                regexp: /^\d+\.\d+|^\d+/,
				                method: function (arg) {
				                    var sig = new Tone.Signal(getNumber(arg));
				                    return sig;
				                }
				            },
				            'input': {
				                regexp: /^\$\d/,
				                method: function (arg, self) {
				                    return self.input[getNumber(arg.substr(1))];
				                }
				            }
				        },
				        //syntactic glue
				        'glue': {
				            '(': { regexp: /^\(/ },
				            ')': { regexp: /^\)/ },
				            ',': { regexp: /^,/ }
				        },
				        //functions
				        'func': {
				            'abs': {
				                regexp: /^abs/,
				                method: applyUnary.bind(this, Tone.Abs)
				            },
				            'mod': {
				                regexp: /^mod/,
				                method: function (args, self) {
				                    var modulus = literalNumber(args[1]);
				                    var op = new Tone.Modulo(modulus);
				                    self._eval(args[0]).connect(op);
				                    return op;
				                }
				            },
				            'pow': {
				                regexp: /^pow/,
				                method: function (args, self) {
				                    var exp = literalNumber(args[1]);
				                    var op = new Tone.Pow(exp);
				                    self._eval(args[0]).connect(op);
				                    return op;
				                }
				            },
				            'a2g': {
				                regexp: /^a2g/,
				                method: function (args, self) {
				                    var op = new Tone.AudioToGain();
				                    self._eval(args[0]).connect(op);
				                    return op;
				                }
				            }
				        },
				        //binary expressions
				        'binary': {
				            '+': {
				                regexp: /^\+/,
				                precedence: 1,
				                method: applyBinary.bind(this, Tone.Add)
				            },
				            '-': {
				                regexp: /^\-/,
				                precedence: 1,
				                method: function (args, self) {
				                    //both unary and binary op
				                    if (args.length === 1) {
				                        return applyUnary(Tone.Negate, args, self);
				                    } else {
				                        return applyBinary(Tone.Subtract, args, self);
				                    }
				                }
				            },
				            '*': {
				                regexp: /^\*/,
				                precedence: 0,
				                method: applyBinary.bind(this, Tone.Multiply)
				            }
				        },
				        //unary expressions
				        'unary': {
				            '-': {
				                regexp: /^\-/,
				                method: applyUnary.bind(this, Tone.Negate)
				            },
				            '!': {
				                regexp: /^\!/,
				                method: applyUnary.bind(this, Tone.NOT)
				            }
				        }
				    };
				    /**
					 *  @param   {string} expr the expression string
					 *  @return  {number}      the input count
					 *  @private
					 */
				    Tone.Expr.prototype._parseInputs = function (expr) {
				        var inputArray = expr.match(/\$\d/g);
				        var inputMax = 0;
				        if (inputArray !== null) {
				            for (var i = 0; i < inputArray.length; i++) {
				                var inputNum = parseInt(inputArray[i].substr(1)) + 1;
				                inputMax = Math.max(inputMax, inputNum);
				            }
				        }
				        return inputMax;
				    };
				    /**
					 *  @param   {Array} args 	an array of arguments
					 *  @return  {string} the results of the replacements being replaced
					 *  @private
					 */
				    Tone.Expr.prototype._replacements = function (args) {
				        var expr = args.shift();
				        for (var i = 0; i < args.length; i++) {
				            expr = expr.replace(/\%/i, args[i]);
				        }
				        return expr;
				    };
				    /**
					 *  tokenize the expression based on the Expressions object
					 *  @param   {string} expr 
					 *  @return  {Object}      returns two methods on the tokenized list, next and peek
					 *  @private
					 */
				    Tone.Expr.prototype._tokenize = function (expr) {
				        var position = -1;
				        var tokens = [];
				        while (expr.length > 0) {
				            expr = expr.trim();
				            var token = getNextToken(expr);
				            tokens.push(token);
				            expr = expr.substr(token.value.length);
				        }
				        function getNextToken(expr) {
				            for (var type in Tone.Expr._Expressions) {
				                var group = Tone.Expr._Expressions[type];
				                for (var opName in group) {
				                    var op = group[opName];
				                    var reg = op.regexp;
				                    var match = expr.match(reg);
				                    if (match !== null) {
				                        return {
				                            type: type,
				                            value: match[0],
				                            method: op.method
				                        };
				                    }
				                }
				            }
				            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);
				        }
				        return {
				            next: function () {
				                return tokens[++position];
				            },
				            peek: function () {
				                return tokens[position + 1];
				            }
				        };
				    };
				    /**
					 *  recursively parse the string expression into a syntax tree
					 *  
					 *  @param   {string} expr 
					 *  @return  {Object}
					 *  @private
					 */
				    Tone.Expr.prototype._parseTree = function (expr) {
				        var lexer = this._tokenize(expr);
				        var isUndef = this.isUndef.bind(this);
				        function matchSyntax(token, syn) {
				            return !isUndef(token) && token.type === 'glue' && token.value === syn;
				        }
				        function matchGroup(token, groupName, prec) {
				            var ret = false;
				            var group = Tone.Expr._Expressions[groupName];
				            if (!isUndef(token)) {
				                for (var opName in group) {
				                    var op = group[opName];
				                    if (op.regexp.test(token.value)) {
				                        if (!isUndef(prec)) {
				                            if (op.precedence === prec) {
				                                return true;
				                            }
				                        } else {
				                            return true;
				                        }
				                    }
				                }
				            }
				            return ret;
				        }
				        function parseExpression(precedence) {
				            if (isUndef(precedence)) {
				                precedence = 5;
				            }
				            var expr;
				            if (precedence < 0) {
				                expr = parseUnary();
				            } else {
				                expr = parseExpression(precedence - 1);
				            }
				            var token = lexer.peek();
				            while (matchGroup(token, 'binary', precedence)) {
				                token = lexer.next();
				                expr = {
				                    operator: token.value,
				                    method: token.method,
				                    args: [
				                        expr,
				                        parseExpression(precedence - 1)
				                    ]
				                };
				                token = lexer.peek();
				            }
				            return expr;
				        }
				        function parseUnary() {
				            var token, expr;
				            token = lexer.peek();
				            if (matchGroup(token, 'unary')) {
				                token = lexer.next();
				                expr = parseUnary();
				                return {
				                    operator: token.value,
				                    method: token.method,
				                    args: [expr]
				                };
				            }
				            return parsePrimary();
				        }
				        function parsePrimary() {
				            var token, expr;
				            token = lexer.peek();
				            if (isUndef(token)) {
				                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');
				            }
				            if (token.type === 'func') {
				                token = lexer.next();
				                return parseFunctionCall(token);
				            }
				            if (token.type === 'value') {
				                token = lexer.next();
				                return {
				                    method: token.method,
				                    args: token.value
				                };
				            }
				            if (matchSyntax(token, '(')) {
				                lexer.next();
				                expr = parseExpression();
				                token = lexer.next();
				                if (!matchSyntax(token, ')')) {
				                    throw new SyntaxError('Expected )');
				                }
				                return expr;
				            }
				            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);
				        }
				        function parseFunctionCall(func) {
				            var token, args = [];
				            token = lexer.next();
				            if (!matchSyntax(token, '(')) {
				                throw new SyntaxError('Tone.Expr: Expected ( in a function call "' + func.value + '"');
				            }
				            token = lexer.peek();
				            if (!matchSyntax(token, ')')) {
				                args = parseArgumentList();
				            }
				            token = lexer.next();
				            if (!matchSyntax(token, ')')) {
				                throw new SyntaxError('Tone.Expr: Expected ) in a function call "' + func.value + '"');
				            }
				            return {
				                method: func.method,
				                args: args,
				                name: name
				            };
				        }
				        function parseArgumentList() {
				            var token, expr, args = [];
				            while (true) {
				                expr = parseExpression();
				                if (isUndef(expr)) {
				                    // TODO maybe throw exception?
				                    break;
				                }
				                args.push(expr);
				                token = lexer.peek();
				                if (!matchSyntax(token, ',')) {
				                    break;
				                }
				                lexer.next();
				            }
				            return args;
				        }
				        return parseExpression();
				    };
				    /**
					 *  recursively evaluate the expression tree
					 *  @param   {Object} tree 
					 *  @return  {AudioNode}      the resulting audio node from the expression
					 *  @private
					 */
				    Tone.Expr.prototype._eval = function (tree) {
				        if (!this.isUndef(tree)) {
				            var node = tree.method(tree.args, this);
				            this._nodes.push(node);
				            return node;
				        }
				    };
				    /**
					 *  dispose all the nodes
					 *  @private
					 */
				    Tone.Expr.prototype._disposeNodes = function () {
				        for (var i = 0; i < this._nodes.length; i++) {
				            var node = this._nodes[i];
				            if (this.isFunction(node.dispose)) {
				                node.dispose();
				            } else if (this.isFunction(node.disconnect)) {
				                node.disconnect();
				            }
				            node = null;
				            this._nodes[i] = null;
				        }
				        this._nodes = null;
				    };
				    /**
					 *  clean up
					 */
				    Tone.Expr.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._disposeNodes();
				    };
				    return Tone.Expr;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @example
					 * var eqPowGain = new Tone.EqualPowerGain();
					 */
				    Tone.EqualPowerGain = function () {
				        /**
						 *  @type {Tone.WaveShaper}
						 *  @private
						 */
				        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {
				            if (Math.abs(val) < 0.001) {
				                //should output 0 when input is 0
				                return 0;
				            } else {
				                return this.equalPowerScale(val);
				            }
				        }.bind(this), 4096);
				    };
				    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);
				    /**
					 *  clean up
					 *  @returns {Tone.EqualPowerGain} this
					 */
				    Tone.EqualPowerGain.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._eqPower.dispose();
				        this._eqPower = null;
				        return this;
				    };
				    return Tone.EqualPowerGain;
				});
				Module(function (Tone) {
				    
				    /**
					 * @class  Tone.Crossfade provides equal power fading between two inputs. 
					 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
					 *
					 * @constructor
					 * @extends {Tone}
					 * @param {NormalRange} [initialFade=0.5]
					 * @example
					 * var crossFade = new Tone.CrossFade(0.5);
					 * //connect effect A to crossfade from
					 * //effect output 0 to crossfade input 0
					 * effectA.connect(crossFade, 0, 0);
					 * //connect effect B to crossfade from
					 * //effect output 0 to crossfade input 1
					 * effectB.connect(crossFade, 0, 1);
					 * crossFade.fade.value = 0;
					 * // ^ only effectA is output
					 * crossFade.fade.value = 1;
					 * // ^ only effectB is output
					 * crossFade.fade.value = 0.5;
					 * // ^ the two signals are mixed equally. 
					 */
				    Tone.CrossFade = function (initialFade) {
				        this.createInsOuts(2, 1);
				        /**
						 *  Alias for <code>input[0]</code>. 
						 *  @type {Tone.Gain}
						 */
				        this.a = this.input[0] = new Tone.Gain();
				        /**
						 *  Alias for <code>input[1]</code>. 
						 *  @type {Tone.Gain}
						 */
				        this.b = this.input[1] = new Tone.Gain();
				        /**
						 * 	The mix between the two inputs. A fade value of 0
						 * 	will output 100% <code>input[0]</code> and 
						 * 	a value of 1 will output 100% <code>input[1]</code>. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);
				        /**
						 *  equal power gain cross fade
						 *  @private
						 *  @type {Tone.EqualPowerGain}
						 */
				        this._equalPowerA = new Tone.EqualPowerGain();
				        /**
						 *  equal power gain cross fade
						 *  @private
						 *  @type {Tone.EqualPowerGain}
						 */
				        this._equalPowerB = new Tone.EqualPowerGain();
				        /**
						 *  invert the incoming signal
						 *  @private
						 *  @type {Tone}
						 */
				        this._invert = new Tone.Expr('1 - $0');
				        //connections
				        this.a.connect(this.output);
				        this.b.connect(this.output);
				        this.fade.chain(this._equalPowerB, this.b.gain);
				        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);
				        this._readOnly('fade');
				    };
				    Tone.extend(Tone.CrossFade);
				    /**
					 *  clean up
					 *  @returns {Tone.CrossFade} this
					 */
				    Tone.CrossFade.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable('fade');
				        this._equalPowerA.dispose();
				        this._equalPowerA = null;
				        this._equalPowerB.dispose();
				        this._equalPowerB = null;
				        this.fade.dispose();
				        this.fade = null;
				        this._invert.dispose();
				        this._invert = null;
				        this.a.dispose();
				        this.a = null;
				        this.b.dispose();
				        this.b = null;
				        return this;
				    };
				    return Tone.CrossFade;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Filter is a filter which allows for all of the same native methods
					 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). 
					 *          Tone.Filter has the added ability to set the filter rolloff at -12 
					 *          (default), -24 and -48. 
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
					 *  @param {string=} type The type of filter.
					 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
					 *                            3 choices: -12, -24, and -48
					 *  @example
					 *  var filter = new Tone.Filter(200, "highpass");
					 */
				    Tone.Filter = function () {
				        this.createInsOuts(1, 1);
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type',
				            'rolloff'
				        ], Tone.Filter.defaults);
				        /**
						 *  the filter(s)
						 *  @type {Array}
						 *  @private
						 */
				        this._filters = [];
				        /**
						 *  The cutoff frequency of the filter. 
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The detune parameter
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(0, Tone.Type.Cents);
				        /**
						 *  The gain of the filter, only used in certain filter types
						 *  @type {Number}
						 *  @signal
						 */
				        this.gain = new Tone.Signal({
				            'value': options.gain,
				            'convert': false
				        });
				        /**
						 *  The Q or Quality of the filter
						 *  @type {Positive}
						 *  @signal
						 */
				        this.Q = new Tone.Signal(options.Q);
				        /**
						 *  the type of the filter
						 *  @type {string}
						 *  @private
						 */
				        this._type = options.type;
				        /**
						 *  the rolloff value of the filter
						 *  @type {number}
						 *  @private
						 */
				        this._rolloff = options.rolloff;
				        //set the rolloff;
				        this.rolloff = options.rolloff;
				        this._readOnly([
				            'detune',
				            'frequency',
				            'gain',
				            'Q'
				        ]);
				    };
				    Tone.extend(Tone.Filter);
				    /**
					 *  the default parameters
					 *
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Filter.defaults = {
				        'type': 'lowpass',
				        'frequency': 350,
				        'rolloff': -12,
				        'Q': 1,
				        'gain': 0
				    };
				    /**
					 * The type of the filter. Types: "lowpass", "highpass", 
					 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking". 
					 * @memberOf Tone.Filter#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.Filter.prototype, 'type', {
				        get: function () {
				            return this._type;
				        },
				        set: function (type) {
				            var types = [
				                'lowpass',
				                'highpass',
				                'bandpass',
				                'lowshelf',
				                'highshelf',
				                'notch',
				                'allpass',
				                'peaking'
				            ];
				            if (types.indexOf(type) === -1) {
				                throw new TypeError('Tone.Filter: invalid type ' + type);
				            }
				            this._type = type;
				            for (var i = 0; i < this._filters.length; i++) {
				                this._filters[i].type = type;
				            }
				        }
				    });
				    /**
					 * The rolloff of the filter which is the drop in db
					 * per octave. Implemented internally by cascading filters.
					 * Only accepts the values -12, -24, -48 and -96.
					 * @memberOf Tone.Filter#
					 * @type {number}
					 * @name rolloff
					 */
				    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {
				        get: function () {
				            return this._rolloff;
				        },
				        set: function (rolloff) {
				            rolloff = parseInt(rolloff, 10);
				            var possibilities = [
				                -12,
				                -24,
				                -48,
				                -96
				            ];
				            var cascadingCount = possibilities.indexOf(rolloff);
				            //check the rolloff is valid
				            if (cascadingCount === -1) {
				                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');
				            }
				            cascadingCount += 1;
				            this._rolloff = rolloff;
				            //first disconnect the filters and throw them away
				            this.input.disconnect();
				            for (var i = 0; i < this._filters.length; i++) {
				                this._filters[i].disconnect();
				                this._filters[i] = null;
				            }
				            this._filters = new Array(cascadingCount);
				            for (var count = 0; count < cascadingCount; count++) {
				                var filter = this.context.createBiquadFilter();
				                filter.type = this._type;
				                this.frequency.connect(filter.frequency);
				                this.detune.connect(filter.detune);
				                this.Q.connect(filter.Q);
				                this.gain.connect(filter.gain);
				                this._filters[count] = filter;
				            }
				            //connect them up
				            var connectionChain = [this.input].concat(this._filters).concat([this.output]);
				            this.connectSeries.apply(this, connectionChain);
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @return {Tone.Filter} this
					 */
				    Tone.Filter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        for (var i = 0; i < this._filters.length; i++) {
				            this._filters[i].disconnect();
				            this._filters[i] = null;
				        }
				        this._filters = null;
				        this._writable([
				            'detune',
				            'frequency',
				            'gain',
				            'Q'
				        ]);
				        this.frequency.dispose();
				        this.Q.dispose();
				        this.frequency = null;
				        this.Q = null;
				        this.detune.dispose();
				        this.detune = null;
				        this.gain.dispose();
				        this.gain = null;
				        return this;
				    };
				    return Tone.Filter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Split the incoming signal into three bands (low, mid, high)
					 *         with two crossover frequency controls. 
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
					 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
					 */
				    Tone.MultibandSplit = function () {
				        var options = this.optionsObject(arguments, [
				            'lowFrequency',
				            'highFrequency'
				        ], Tone.MultibandSplit.defaults);
				        /**
						 *  the input
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this.input = new Tone.Gain();
				        /**
						 *  the outputs
						 *  @type {Array}
						 *  @private
						 */
				        this.output = new Array(3);
				        /**
						 *  The low band. Alias for <code>output[0]</code>
						 *  @type {Tone.Filter}
						 */
				        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');
				        /**
						 *  the lower filter of the mid band
						 *  @type {Tone.Filter}
						 *  @private
						 */
				        this._lowMidFilter = new Tone.Filter(0, 'highpass');
				        /**
						 *  The mid band output. Alias for <code>output[1]</code>
						 *  @type {Tone.Filter}
						 */
				        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');
				        /**
						 *  The high band output. Alias for <code>output[2]</code>
						 *  @type {Tone.Filter}
						 */
				        this.high = this.output[2] = new Tone.Filter(0, 'highpass');
				        /**
						 *  The low/mid crossover frequency.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);
				        /**
						 *  The mid/high crossover frequency.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);
				        /**
						 *  The quality of all the filters
						 *  @type {Number}
						 *  @signal
						 */
				        this.Q = new Tone.Signal(options.Q);
				        this.input.fan(this.low, this.high);
				        this.input.chain(this._lowMidFilter, this.mid);
				        //the frequency control signal
				        this.lowFrequency.connect(this.low.frequency);
				        this.lowFrequency.connect(this._lowMidFilter.frequency);
				        this.highFrequency.connect(this.mid.frequency);
				        this.highFrequency.connect(this.high.frequency);
				        //the Q value
				        this.Q.connect(this.low.Q);
				        this.Q.connect(this._lowMidFilter.Q);
				        this.Q.connect(this.mid.Q);
				        this.Q.connect(this.high.Q);
				        this._readOnly([
				            'high',
				            'mid',
				            'low',
				            'highFrequency',
				            'lowFrequency'
				        ]);
				    };
				    Tone.extend(Tone.MultibandSplit);
				    /**
					 *  @private
					 *  @static
					 *  @type {Object}
					 */
				    Tone.MultibandSplit.defaults = {
				        'lowFrequency': 400,
				        'highFrequency': 2500,
				        'Q': 1
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.MultibandSplit} this
					 */
				    Tone.MultibandSplit.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'high',
				            'mid',
				            'low',
				            'highFrequency',
				            'lowFrequency'
				        ]);
				        this.low.dispose();
				        this.low = null;
				        this._lowMidFilter.dispose();
				        this._lowMidFilter = null;
				        this.mid.dispose();
				        this.mid = null;
				        this.high.dispose();
				        this.high = null;
				        this.lowFrequency.dispose();
				        this.lowFrequency = null;
				        this.highFrequency.dispose();
				        this.highFrequency = null;
				        this.Q.dispose();
				        this.Q = null;
				        return this;
				    };
				    return Tone.MultibandSplit;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
					 *         well as the low and high crossover frequencies.
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  
					 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
					 *  @param {Decibels} [midLevel] The gain applied to the mid.
					 *  @param {Decibels} [highLevel] The gain applied to the high.
					 *  @example
					 * var eq = new Tone.EQ3(-10, 3, -20);
					 */
				    Tone.EQ3 = function () {
				        var options = this.optionsObject(arguments, [
				            'low',
				            'mid',
				            'high'
				        ], Tone.EQ3.defaults);
				        /**
						 *  the output node
						 *  @type {GainNode}
						 *  @private
						 */
				        this.output = new Tone.Gain();
				        /**
						 *  the multiband split
						 *  @type {Tone.MultibandSplit}
						 *  @private
						 */
				        this._multibandSplit = this.input = new Tone.MultibandSplit({
				            'lowFrequency': options.lowFrequency,
				            'highFrequency': options.highFrequency
				        });
				        /**
						 *  The gain for the lower signals
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);
				        /**
						 *  The gain for the mid signals
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);
				        /**
						 * The gain in decibels of the high part
						 * @type {Tone.Gain}
						 * @private
						 */
				        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);
				        /**
						 * The gain in decibels of the low part
						 * @type {Decibels}
						 * @signal
						 */
				        this.low = this._lowGain.gain;
				        /**
						 * The gain in decibels of the mid part
						 * @type {Decibels}
						 * @signal
						 */
				        this.mid = this._midGain.gain;
				        /**
						 * The gain in decibels of the high part
						 * @type {Decibels}
						 * @signal
						 */
				        this.high = this._highGain.gain;
				        /**
						 *  The Q value for all of the filters. 
						 *  @type {Positive}
						 *  @signal
						 */
				        this.Q = this._multibandSplit.Q;
				        /**
						 *  The low/mid crossover frequency. 
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.lowFrequency = this._multibandSplit.lowFrequency;
				        /**
						 *  The mid/high crossover frequency. 
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.highFrequency = this._multibandSplit.highFrequency;
				        //the frequency bands
				        this._multibandSplit.low.chain(this._lowGain, this.output);
				        this._multibandSplit.mid.chain(this._midGain, this.output);
				        this._multibandSplit.high.chain(this._highGain, this.output);
				        this._readOnly([
				            'low',
				            'mid',
				            'high',
				            'lowFrequency',
				            'highFrequency'
				        ]);
				    };
				    Tone.extend(Tone.EQ3);
				    /**
					 *  the default values
					 */
				    Tone.EQ3.defaults = {
				        'low': 0,
				        'mid': 0,
				        'high': 0,
				        'lowFrequency': 400,
				        'highFrequency': 2500
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.EQ3} this
					 */
				    Tone.EQ3.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'low',
				            'mid',
				            'high',
				            'lowFrequency',
				            'highFrequency'
				        ]);
				        this._multibandSplit.dispose();
				        this._multibandSplit = null;
				        this.lowFrequency = null;
				        this.highFrequency = null;
				        this._lowGain.dispose();
				        this._lowGain = null;
				        this._midGain.dispose();
				        this._midGain = null;
				        this._highGain.dispose();
				        this._highGain = null;
				        this.low = null;
				        this.mid = null;
				        this.high = null;
				        this.Q = null;
				        return this;
				    };
				    return Tone.EQ3;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Performs a linear scaling on an input signal.
					 *          Scales a NormalRange input to between
					 *          outputMin and outputMax.
					 *
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @param {number} [outputMin=0] The output value when the input is 0. 
					 *  @param {number} [outputMax=1]	The output value when the input is 1. 
					 *  @example
					 * var scale = new Tone.Scale(50, 100);
					 * var signal = new Tone.Signal(0.5).connect(scale);
					 * //the output of scale equals 75
					 */
				    Tone.Scale = function (outputMin, outputMax) {
				        /** 
						 *  @private
						 *  @type {number}
						 */
				        this._outputMin = this.defaultArg(outputMin, 0);
				        /** 
						 *  @private
						 *  @type {number}
						 */
				        this._outputMax = this.defaultArg(outputMax, 1);
				        /** 
						 *  @private
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._scale = this.input = new Tone.Multiply(1);
				        /** 
						 *  @private
						 *  @type {Tone.Add}
						 *  @private
						 */
				        this._add = this.output = new Tone.Add(0);
				        this._scale.connect(this._add);
				        this._setRange();
				    };
				    Tone.extend(Tone.Scale, Tone.SignalBase);
				    /**
					 * The minimum output value. This number is output when 
					 * the value input value is 0. 
					 * @memberOf Tone.Scale#
					 * @type {number}
					 * @name min
					 */
				    Object.defineProperty(Tone.Scale.prototype, 'min', {
				        get: function () {
				            return this._outputMin;
				        },
				        set: function (min) {
				            this._outputMin = min;
				            this._setRange();
				        }
				    });
				    /**
					 * The maximum output value. This number is output when 
					 * the value input value is 1. 
					 * @memberOf Tone.Scale#
					 * @type {number}
					 * @name max
					 */
				    Object.defineProperty(Tone.Scale.prototype, 'max', {
				        get: function () {
				            return this._outputMax;
				        },
				        set: function (max) {
				            this._outputMax = max;
				            this._setRange();
				        }
				    });
				    /**
					 *  set the values
					 *  @private
					 */
				    Tone.Scale.prototype._setRange = function () {
				        this._add.value = this._outputMin;
				        this._scale.value = this._outputMax - this._outputMin;
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.Scale} this
					 */
				    Tone.Scale.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._add.dispose();
				        this._add = null;
				        this._scale.dispose();
				        this._scale = null;
				        return this;
				    };
				    return Tone.Scale;
				});
				Module(function (Tone) {
				    /**
					 *  @class  Performs an exponential scaling on an input signal.
					 *          Scales a NormalRange value [0,1] exponentially
					 *          to the output range of outputMin to outputMax.
					 *
					 *  @constructor
					 *  @extends {Tone.SignalBase}
					 *  @param {number} [outputMin=0] The output value when the input is 0. 
					 *  @param {number} [outputMax=1]	The output value when the input is 1. 
					 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
					 *  @example
					 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
					 * var signal = new Tone.Signal(0.5).connect(scaleExp);
					 */
				    Tone.ScaleExp = function (outputMin, outputMax, exponent) {
				        /**
						 *  scale the input to the output range
						 *  @type {Tone.Scale}
						 *  @private
						 */
				        this._scale = this.output = new Tone.Scale(outputMin, outputMax);
				        /**
						 *  @private
						 *  @type {Tone.Pow}
						 *  @private
						 */
				        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));
				        this._exp.connect(this._scale);
				    };
				    Tone.extend(Tone.ScaleExp, Tone.SignalBase);
				    /**
					 * Instead of interpolating linearly between the <code>min</code> and 
					 * <code>max</code> values, setting the exponent will interpolate between
					 * the two values with an exponential curve. 
					 * @memberOf Tone.ScaleExp#
					 * @type {number}
					 * @name exponent
					 */
				    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {
				        get: function () {
				            return this._exp.value;
				        },
				        set: function (exp) {
				            this._exp.value = exp;
				        }
				    });
				    /**
					 * The minimum output value. This number is output when 
					 * the value input value is 0. 
					 * @memberOf Tone.ScaleExp#
					 * @type {number}
					 * @name min
					 */
				    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {
				        get: function () {
				            return this._scale.min;
				        },
				        set: function (min) {
				            this._scale.min = min;
				        }
				    });
				    /**
					 * The maximum output value. This number is output when 
					 * the value input value is 1. 
					 * @memberOf Tone.ScaleExp#
					 * @type {number}
					 * @name max
					 */
				    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {
				        get: function () {
				            return this._scale.max;
				        },
				        set: function (max) {
				            this._scale.max = max;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.ScaleExp} this
					 */
				    Tone.ScaleExp.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._scale.dispose();
				        this._scale = null;
				        this._exp.dispose();
				        this._exp = null;
				        return this;
				    };
				    return Tone.ScaleExp;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). 
					 *  @extends {Tone}
					 *  @param {Time=} delayTime The delay applied to the incoming signal.
					 *  @param {Time=} maxDelay The maximum delay time. 
					 */
				    Tone.Delay = function () {
				        var options = this.optionsObject(arguments, [
				            'delayTime',
				            'maxDelay'
				        ], Tone.Delay.defaults);
				        /**
						 *  The native delay node
						 *  @type {DelayNode}
						 *  @private
						 */
				        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));
				        /**
						 *  The amount of time the incoming signal is
						 *  delayed. 
						 *  @type {Tone.Param}
						 *  @signal
						 */
				        this.delayTime = new Tone.Param({
				            'param': this._delayNode.delayTime,
				            'units': Tone.Type.Time,
				            'value': options.delayTime
				        });
				        this._readOnly('delayTime');
				    };
				    Tone.extend(Tone.Delay);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Delay.defaults = {
				        'maxDelay': 1,
				        'delayTime': 0
				    };
				    /**
					 *  Clean up.
					 *  @return  {Tone.Delay}  this
					 */
				    Tone.Delay.prototype.dispose = function () {
				        Tone.Param.prototype.dispose.call(this);
				        this._delayNode.disconnect();
				        this._delayNode = null;
				        this._writable('delayTime');
				        this.delayTime = null;
				        return this;
				    };
				    return Tone.Delay;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Comb filters are basic building blocks for physical modeling. Read more
					 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Time|Object} [delayTime] The delay time of the filter. 
					 *  @param {NormalRange=} resonance The amount of feedback the filter has. 
					 */
				    Tone.FeedbackCombFilter = function () {
				        var options = this.optionsObject(arguments, [
				            'delayTime',
				            'resonance'
				        ], Tone.FeedbackCombFilter.defaults);
				        /**
						 *  the delay node
						 *  @type {DelayNode}
						 *  @private
						 */
				        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);
				        /**
						 *  The amount of delay of the comb filter. 
						 *  @type {Time}
						 *  @signal
						 */
				        this.delayTime = this._delay.delayTime;
				        /**
						 *  the feedback node
						 *  @type {GainNode}
						 *  @private
						 */
				        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
				        /**
						 *  The amount of feedback of the delayed signal. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.resonance = this._feedback.gain;
				        this._delay.chain(this._feedback, this._delay);
				        this._readOnly([
				            'resonance',
				            'delayTime'
				        ]);
				    };
				    Tone.extend(Tone.FeedbackCombFilter);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.FeedbackCombFilter.defaults = {
				        'delayTime': 0.1,
				        'resonance': 0.5
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.FeedbackCombFilter} this
					 */
				    Tone.FeedbackCombFilter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'resonance',
				            'delayTime'
				        ]);
				        this._delay.dispose();
				        this._delay = null;
				        this.delayTime = null;
				        this._feedback.dispose();
				        this._feedback = null;
				        this.resonance = null;
				        return this;
				    };
				    return Tone.FeedbackCombFilter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Follower is a  crude envelope follower which will follow 
					 *          the amplitude of an incoming signal. 
					 *          Take care with small (< 0.02) attack or decay values 
					 *          as follower has some ripple which is exaggerated
					 *          at these values. Read more about envelope followers (also known 
					 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {Time|Object} [attack] The rate at which the follower rises.
					 *  @param {Time=} release The rate at which the folower falls. 
					 *  @example
					 * var follower = new Tone.Follower(0.2, 0.4);
					 */
				    Tone.Follower = function () {
				        this.createInsOuts(1, 1);
				        var options = this.optionsObject(arguments, [
				            'attack',
				            'release'
				        ], Tone.Follower.defaults);
				        /**
						 *  @type {Tone.Abs}
						 *  @private
						 */
				        this._abs = new Tone.Abs();
				        /**
						 *  the lowpass filter which smooths the input
						 *  @type {BiquadFilterNode}
						 *  @private
						 */
				        this._filter = this.context.createBiquadFilter();
				        this._filter.type = 'lowpass';
				        this._filter.frequency.value = 0;
				        this._filter.Q.value = -100;
				        /**
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._frequencyValues = new Tone.WaveShaper();
				        /**
						 *  @type {Tone.Subtract}
						 *  @private
						 */
				        this._sub = new Tone.Subtract();
				        /**
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._delay = new Tone.Delay(this.blockTime);
				        /**
						 *  this keeps it far from 0, even for very small differences
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._mult = new Tone.Multiply(10000);
				        /**
						 *  @private
						 *  @type {number}
						 */
				        this._attack = options.attack;
				        /**
						 *  @private
						 *  @type {number}
						 */
				        this._release = options.release;
				        //the smoothed signal to get the values
				        this.input.chain(this._abs, this._filter, this.output);
				        //the difference path
				        this._abs.connect(this._sub, 0, 1);
				        this._filter.chain(this._delay, this._sub);
				        //threshold the difference and use the thresh to set the frequency
				        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);
				        //set the attack and release values in the table
				        this._setAttackRelease(this._attack, this._release);
				    };
				    Tone.extend(Tone.Follower);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Follower.defaults = {
				        'attack': 0.05,
				        'release': 0.5
				    };
				    /**
					 *  sets the attack and release times in the wave shaper
					 *  @param   {Time} attack  
					 *  @param   {Time} release 
					 *  @private
					 */
				    Tone.Follower.prototype._setAttackRelease = function (attack, release) {
				        var minTime = this.blockTime;
				        attack = Tone.Time(attack).toFrequency();
				        release = Tone.Time(release).toFrequency();
				        attack = Math.max(attack, minTime);
				        release = Math.max(release, minTime);
				        this._frequencyValues.setMap(function (val) {
				            if (val <= 0) {
				                return attack;
				            } else {
				                return release;
				            }
				        });
				    };
				    /**
					 * The attack time.
					 * @memberOf Tone.Follower#
					 * @type {Time}
					 * @name attack
					 */
				    Object.defineProperty(Tone.Follower.prototype, 'attack', {
				        get: function () {
				            return this._attack;
				        },
				        set: function (attack) {
				            this._attack = attack;
				            this._setAttackRelease(this._attack, this._release);
				        }
				    });
				    /**
					 * The release time.
					 * @memberOf Tone.Follower#
					 * @type {Time}
					 * @name release
					 */
				    Object.defineProperty(Tone.Follower.prototype, 'release', {
				        get: function () {
				            return this._release;
				        },
				        set: function (release) {
				            this._release = release;
				            this._setAttackRelease(this._attack, this._release);
				        }
				    });
				    /**
					 *  Borrows the connect method from Signal so that the output can be used
					 *  as a Tone.Signal control signal.
					 *  @function
					 */
				    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;
				    /**
					 *  dispose
					 *  @returns {Tone.Follower} this
					 */
				    Tone.Follower.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._filter.disconnect();
				        this._filter = null;
				        this._frequencyValues.disconnect();
				        this._frequencyValues = null;
				        this._delay.dispose();
				        this._delay = null;
				        this._sub.disconnect();
				        this._sub = null;
				        this._abs.dispose();
				        this._abs = null;
				        this._mult.dispose();
				        this._mult = null;
				        this._curve = null;
				        return this;
				    };
				    return Tone.Follower;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.ScaledEnvelop is an envelope which can be scaled 
					 *         to any range. It's useful for applying an envelope 
					 *         to a frequency or any other non-NormalRange signal 
					 *         parameter. 
					 *
					 *  @extends {Tone.Envelope}
					 *  @constructor
					 *  @param {Time|Object} [attack]	the attack time in seconds
					 *  @param {Time} [decay]	the decay time in seconds
					 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
					 *  @param {Time} [release]	the release time in seconds
					 *  @example
					 *  var scaledEnv = new Tone.ScaledEnvelope({
					 *  	"attack" : 0.2,
					 *  	"min" : 200,
					 *  	"max" : 2000
					 *  });
					 *  scaledEnv.connect(oscillator.frequency);
					 */
				    Tone.ScaledEnvelope = function () {
				        //get all of the defaults
				        var options = this.optionsObject(arguments, [
				            'attack',
				            'decay',
				            'sustain',
				            'release'
				        ], Tone.Envelope.defaults);
				        Tone.Envelope.call(this, options);
				        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);
				        /** 
						 *  scale the incoming signal by an exponent
						 *  @type {Tone.Pow}
						 *  @private
						 */
				        this._exp = this.output = new Tone.Pow(options.exponent);
				        /**
						 *  scale the signal to the desired range
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._scale = this.output = new Tone.Scale(options.min, options.max);
				        this._sig.chain(this._exp, this._scale);
				    };
				    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);
				    /**
					 *  the default parameters
					 *  @static
					 */
				    Tone.ScaledEnvelope.defaults = {
				        'min': 0,
				        'max': 1,
				        'exponent': 1
				    };
				    /**
					 * The envelope's min output value. This is the value which it
					 * starts at. 
					 * @memberOf Tone.ScaledEnvelope#
					 * @type {number}
					 * @name min
					 */
				    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {
				        get: function () {
				            return this._scale.min;
				        },
				        set: function (min) {
				            this._scale.min = min;
				        }
				    });
				    /**
					 * The envelope's max output value. In other words, the value
					 * at the peak of the attack portion of the envelope. 
					 * @memberOf Tone.ScaledEnvelope#
					 * @type {number}
					 * @name max
					 */
				    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {
				        get: function () {
				            return this._scale.max;
				        },
				        set: function (max) {
				            this._scale.max = max;
				        }
				    });
				    /**
					 * The envelope's exponent value. 
					 * @memberOf Tone.ScaledEnvelope#
					 * @type {number}
					 * @name exponent
					 */
				    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {
				        get: function () {
				            return this._exp.value;
				        },
				        set: function (exp) {
				            this._exp.value = exp;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.ScaledEnvelope} this
					 */
				    Tone.ScaledEnvelope.prototype.dispose = function () {
				        Tone.Envelope.prototype.dispose.call(this);
				        this._scale.dispose();
				        this._scale = null;
				        this._exp.dispose();
				        this._exp = null;
				        return this;
				    };
				    return Tone.ScaledEnvelope;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
					 *         it's got a `baseFrequency` and `octaves` parameter. 
					 *
					 *  @extends {Tone.Envelope}
					 *  @constructor
					 *  @param {Time|Object} [attack]	the attack time in seconds
					 *  @param {Time} [decay]	the decay time in seconds
					 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
					 *  @param {Time} [release]	the release time in seconds
					 *  @example
					 *  var env = new Tone.FrequencyEnvelope({
					 *  	"attack" : 0.2,
					 *  	"baseFrequency" : "C2",
					 *  	"octaves" : 4
					 *  });
					 *  scaledEnv.connect(oscillator.frequency);
					 */
				    Tone.FrequencyEnvelope = function () {
				        var options = this.optionsObject(arguments, [
				            'attack',
				            'decay',
				            'sustain',
				            'release'
				        ], Tone.Envelope.defaults);
				        Tone.ScaledEnvelope.call(this, options);
				        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);
				        /**
						 *  Stores the octave value
						 *  @type {Positive}
						 *  @private
						 */
				        this._octaves = options.octaves;
				        //setup
				        this.baseFrequency = options.baseFrequency;
				        this.octaves = options.octaves;
				    };
				    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);
				    /**
					 *  the default parameters
					 *  @static
					 */
				    Tone.FrequencyEnvelope.defaults = {
				        'baseFrequency': 200,
				        'octaves': 4,
				        'exponent': 2
				    };
				    /**
					 * The envelope's mininum output value. This is the value which it
					 * starts at. 
					 * @memberOf Tone.FrequencyEnvelope#
					 * @type {Frequency}
					 * @name baseFrequency
					 */
				    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {
				        get: function () {
				            return this._scale.min;
				        },
				        set: function (min) {
				            this._scale.min = this.toFrequency(min);
				            //also update the octaves
				            this.octaves = this._octaves;
				        }
				    });
				    /**
					 * The number of octaves above the baseFrequency that the
					 * envelope will scale to.
					 * @memberOf Tone.FrequencyEnvelope#
					 * @type {Positive}
					 * @name octaves
					 */
				    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {
				        get: function () {
				            return this._octaves;
				        },
				        set: function (octaves) {
				            this._octaves = octaves;
				            this._scale.max = this.baseFrequency * Math.pow(2, octaves);
				        }
				    });
				    /**
					 * The envelope's exponent value. 
					 * @memberOf Tone.FrequencyEnvelope#
					 * @type {number}
					 * @name exponent
					 */
				    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {
				        get: function () {
				            return this._exp.value;
				        },
				        set: function (exp) {
				            this._exp.value = exp;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.FrequencyEnvelope} this
					 */
				    Tone.FrequencyEnvelope.prototype.dispose = function () {
				        Tone.ScaledEnvelope.prototype.dispose.call(this);
				        return this;
				    };
				    return Tone.FrequencyEnvelope;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Gate only passes a signal through when the incoming 
					 *          signal exceeds a specified threshold. To do this, Gate uses 
					 *          a Tone.Follower to follow the amplitude of the incoming signal. 
					 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. 
					 *  @param {Time=} attack The follower's attack time
					 *  @param {Time=} release The follower's release time
					 *  @example
					 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
					 * var mic = new Tone.Microphone().connect(gate);
					 * //the gate will only pass through the incoming 
					 * //signal when it's louder than -30db
					 */
				    Tone.Gate = function () {
				        this.createInsOuts(1, 1);
				        var options = this.optionsObject(arguments, [
				            'threshold',
				            'attack',
				            'release'
				        ], Tone.Gate.defaults);
				        /**
						 *  @type {Tone.Follower}
						 *  @private
						 */
				        this._follower = new Tone.Follower(options.attack, options.release);
				        /**
						 *  @type {Tone.GreaterThan}
						 *  @private
						 */
				        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));
				        //the connections
				        this.input.connect(this.output);
				        //the control signal
				        this.input.chain(this._gt, this._follower, this.output.gain);
				    };
				    Tone.extend(Tone.Gate);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Gate.defaults = {
				        'attack': 0.1,
				        'release': 0.1,
				        'threshold': -40
				    };
				    /**
					 * The threshold of the gate in decibels
					 * @memberOf Tone.Gate#
					 * @type {Decibels}
					 * @name threshold
					 */
				    Object.defineProperty(Tone.Gate.prototype, 'threshold', {
				        get: function () {
				            return this.gainToDb(this._gt.value);
				        },
				        set: function (thresh) {
				            this._gt.value = this.dbToGain(thresh);
				        }
				    });
				    /**
					 * The attack speed of the gate
					 * @memberOf Tone.Gate#
					 * @type {Time}
					 * @name attack
					 */
				    Object.defineProperty(Tone.Gate.prototype, 'attack', {
				        get: function () {
				            return this._follower.attack;
				        },
				        set: function (attackTime) {
				            this._follower.attack = attackTime;
				        }
				    });
				    /**
					 * The release speed of the gate
					 * @memberOf Tone.Gate#
					 * @type {Time}
					 * @name release
					 */
				    Object.defineProperty(Tone.Gate.prototype, 'release', {
				        get: function () {
				            return this._follower.release;
				        },
				        set: function (releaseTime) {
				            this._follower.release = releaseTime;
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Gate} this
					 */
				    Tone.Gate.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._follower.dispose();
				        this._gt.dispose();
				        this._follower = null;
				        this._gt = null;
				        return this;
				    };
				    return Tone.Gate;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
					 *          and <code>getStateAtTime(time)</code>.
					 *
					 *  @extends {Tone.Timeline}
					 *  @param {String} initial The initial state of the TimelineState. 
					 *                          Defaults to <code>undefined</code>
					 */
				    Tone.TimelineState = function (initial) {
				        Tone.Timeline.call(this);
				        /**
						 *  The initial state
						 *  @private
						 *  @type {String}
						 */
				        this._initial = initial;
				    };
				    Tone.extend(Tone.TimelineState, Tone.Timeline);
				    /**
					 *  Returns the scheduled state scheduled before or at
					 *  the given time.
					 *  @param  {Number}  time  The time to query.
					 *  @return  {String}  The name of the state input in setStateAtTime.
					 */
				    Tone.TimelineState.prototype.getStateAtTime = function (time) {
				        var event = this.getEvent(time);
				        if (event !== null) {
				            return event.state;
				        } else {
				            return this._initial;
				        }
				    };
				    /**
					 *  Returns the scheduled state scheduled before or at
					 *  the given time.
					 *  @param  {String}  state The name of the state to set.
					 *  @param  {Number}  time  The time to query.
					 */
				    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {
				        this.addEvent({
				            'state': state,
				            'time': time
				        });
				    };
				    return Tone.TimelineState;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Emitter gives classes which extend it
					 *         the ability to listen for and emit events. 
					 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
					 *         MIT (c) 2011 Jerome Etienne.
					 *         
					 *  @extends {Tone}
					 */
				    Tone.Emitter = function () {
				        /**
						 *  Contains all of the events.
						 *  @private
						 *  @type  {Object}
						 */
				        this._events = {};
				    };
				    Tone.extend(Tone.Emitter);
				    /**
					 *  Bind a callback to a specific event.
					 *  @param  {String}    event     The name of the event to listen for.
					 *  @param  {Function}  callback  The callback to invoke when the
					 *                                event is emitted
					 *  @return  {Tone.Emitter}    this
					 */
				    Tone.Emitter.prototype.on = function (event, callback) {
				        //split the event
				        var events = event.split(/\W+/);
				        for (var i = 0; i < events.length; i++) {
				            var eventName = events[i];
				            if (!this._events.hasOwnProperty(eventName)) {
				                this._events[eventName] = [];
				            }
				            this._events[eventName].push(callback);
				        }
				        return this;
				    };
				    /**
					 *  Remove the event listener.
					 *  @param  {String}    event     The event to stop listening to.
					 *  @param  {Function=}  callback  The callback which was bound to 
					 *                                the event with Tone.Emitter.on.
					 *                                If no callback is given, all callbacks
					 *                                events are removed.
					 *  @return  {Tone.Emitter}    this
					 */
				    Tone.Emitter.prototype.off = function (event, callback) {
				        var events = event.split(/\W+/);
				        for (var ev = 0; ev < events.length; ev++) {
				            event = events[ev];
				            if (this._events.hasOwnProperty(event)) {
				                if (Tone.prototype.isUndef(callback)) {
				                    this._events[event] = [];
				                } else {
				                    var eventList = this._events[event];
				                    for (var i = 0; i < eventList.length; i++) {
				                        if (eventList[i] === callback) {
				                            eventList.splice(i, 1);
				                        }
				                    }
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Invoke all of the callbacks bound to the event
					 *  with any arguments passed in. 
					 *  @param  {String}  event  The name of the event.
					 *  @param {*...} args The arguments to pass to the functions listening.
					 *  @return  {Tone.Emitter}  this
					 */
				    Tone.Emitter.prototype.emit = function (event) {
				        if (this._events) {
				            var args = Array.prototype.slice.call(arguments, 1);
				            if (this._events.hasOwnProperty(event)) {
				                var eventList = this._events[event];
				                for (var i = 0, len = eventList.length; i < len; i++) {
				                    eventList[i].apply(this, args);
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Add Emitter functions (on/off/emit) to the object
					 *  @param  {Object|Function}  object  The object or class to extend.
					 */
				    Tone.Emitter.mixin = function (object) {
				        var functions = [
				            'on',
				            'off',
				            'emit'
				        ];
				        object._events = {};
				        for (var i = 0; i < functions.length; i++) {
				            var func = functions[i];
				            var emitterFunc = Tone.Emitter.prototype[func];
				            object[func] = emitterFunc;
				        }
				    };
				    /**
					 *  Clean up
					 *  @return  {Tone.Emitter}  this
					 */
				    Tone.Emitter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._events = null;
				        return this;
				    };
				    return Tone.Emitter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  A sample accurate clock which provides a callback at the given rate. 
					 *          While the callback is not sample-accurate (it is still susceptible to
					 *          loose JS timing), the time passed in as the argument to the callback
					 *          is precise. For most applications, it is better to use Tone.Transport
					 *          instead of the Clock by itself since you can synchronize multiple callbacks.
					 *
					 * 	@constructor
					 *  @extends {Tone.Emitter}
					 * 	@param {function} callback The callback to be invoked with the time of the audio event
					 * 	@param {Frequency} frequency The rate of the callback
					 * 	@example
					 * //the callback will be invoked approximately once a second
					 * //and will print the time exactly once a second apart.
					 * var clock = new Tone.Clock(function(time){
					 * 	console.log(time);
					 * }, 1);
					 */
				    Tone.Clock = function () {
				        Tone.Emitter.call(this);
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'frequency'
				        ], Tone.Clock.defaults);
				        /**
						 *  The callback function to invoke at the scheduled tick.
						 *  @type  {Function}
						 */
				        this.callback = options.callback;
				        /**
						 *  The internal lookahead value
						 *  @type {Number|String}
						 *  @private
						 */
				        this._lookAhead = 'auto';
				        /**
						 *  The lookahead value which was automatically
						 *  computed using a time-based averaging.
						 *  @type {Number}
						 *  @private
						 */
				        this._computedLookAhead = UPDATE_RATE / 1000;
				        /**
						 *  The next time the callback is scheduled.
						 *  @type {Number}
						 *  @private
						 */
				        this._nextTick = -1;
				        /**
						 *  The last time the callback was invoked
						 *  @type  {Number}
						 *  @private
						 */
				        this._lastUpdate = -1;
				        /**
						 *  The rate the callback function should be invoked. 
						 *  @type  {BPM}
						 *  @signal
						 */
				        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The number of times the callback was invoked. Starts counting at 0
						 *  and increments after the callback was invoked. 
						 *  @type {Ticks}
						 *  @readOnly
						 */
				        this.ticks = 0;
				        /**
						 *  The state timeline
						 *  @type {Tone.TimelineState}
						 *  @private
						 */
				        this._state = new Tone.TimelineState(Tone.State.Stopped);
				        /**
						 *  The loop function bound to its context. 
						 *  This is necessary to remove the event in the end.
						 *  @type {Function}
						 *  @private
						 */
				        this._boundLoop = this._loop.bind(this);
				        //bind a callback to the worker thread
				        Tone.Clock._worker.addEventListener('message', this._boundLoop);
				        this._readOnly('frequency');
				    };
				    Tone.extend(Tone.Clock, Tone.Emitter);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Clock.defaults = {
				        'callback': Tone.noOp,
				        'frequency': 1,
				        'lookAhead': 'auto'
				    };
				    /**
					 *  Returns the playback state of the source, either "started", "stopped" or "paused".
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.Clock#
					 *  @name state
					 */
				    Object.defineProperty(Tone.Clock.prototype, 'state', {
				        get: function () {
				            return this._state.getStateAtTime(this.now());
				        }
				    });
				    /**
					 *  The time which the clock will schedule events in advance
					 *  of the current time. Scheduling notes in advance improves
					 *  performance and decreases the chance for clicks caused
					 *  by scheduling events in the past. If set to "auto",
					 *  this value will be automatically computed based on the 
					 *  rate of the update (~0.02 seconds). Larger values
					 *  will yeild better performance, but at the cost of latency. 
					 *  Values less than 0.016 are not recommended.
					 *  @type {Number|String}
					 *  @memberOf Tone.Clock#
					 *  @name lookAhead
					 */
				    Object.defineProperty(Tone.Clock.prototype, 'lookAhead', {
				        get: function () {
				            return this._lookAhead;
				        },
				        set: function (val) {
				            if (val === 'auto') {
				                this._lookAhead = 'auto';
				            } else {
				                this._lookAhead = this.toSeconds(val);
				            }
				        }
				    });
				    /**
					 *  Start the clock at the given time. Optionally pass in an offset
					 *  of where to start the tick counter from.
					 *  @param  {Time}  time    The time the clock should start
					 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
					 *  @return  {Tone.Clock}  this
					 */
				    Tone.Clock.prototype.start = function (time, offset) {
				        time = this.toSeconds(time);
				        if (this._state.getStateAtTime(time) !== Tone.State.Started) {
				            this._state.addEvent({
				                'state': Tone.State.Started,
				                'time': time,
				                'offset': offset
				            });
				        }
				        return this;
				    };
				    /**
					 *  Stop the clock. Stopping the clock resets the tick counter to 0.
					 *  @param {Time} [time=now] The time when the clock should stop.
					 *  @returns {Tone.Clock} this
					 *  @example
					 * clock.stop();
					 */
				    Tone.Clock.prototype.stop = function (time) {
				        time = this.toSeconds(time);
				        this._state.cancel(time);
				        this._state.setStateAtTime(Tone.State.Stopped, time);
				        return this;
				    };
				    /**
					 *  Pause the clock. Pausing does not reset the tick counter.
					 *  @param {Time} [time=now] The time when the clock should stop.
					 *  @returns {Tone.Clock} this
					 */
				    Tone.Clock.prototype.pause = function (time) {
				        time = this.toSeconds(time);
				        if (this._state.getStateAtTime(time) === Tone.State.Started) {
				            this._state.setStateAtTime(Tone.State.Paused, time);
				        }
				        return this;
				    };
				    /**
					 *  The scheduling loop.
					 *  @param  {Number}  time  The current page time starting from 0
					 *                          when the page was loaded.
					 *  @private
					 */
				    Tone.Clock.prototype._loop = function () {
				        //compute the look ahead
				        if (this._lookAhead === 'auto') {
				            var time = this.now();
				            if (this._lastUpdate !== -1) {
				                var diff = time - this._lastUpdate;
				                //max size on the diff
				                diff = Math.min(10 * UPDATE_RATE / 1000, diff);
				                //averaging
				                this._computedLookAhead = (9 * this._computedLookAhead + diff) / 10;
				            }
				            this._lastUpdate = time;
				        } else {
				            this._computedLookAhead = this._lookAhead;
				        }
				        //get the frequency value to compute the value of the next loop
				        var now = this.now();
				        //if it's started
				        var lookAhead = this._computedLookAhead * 2;
				        var event = this._state.getEvent(now + lookAhead);
				        var state = Tone.State.Stopped;
				        if (event) {
				            state = event.state;
				            //if it was stopped and now started
				            if (this._nextTick === -1 && state === Tone.State.Started) {
				                this._nextTick = event.time;
				                if (!this.isUndef(event.offset)) {
				                    this.ticks = event.offset;
				                }
				                this.emit('start', event.time, this.ticks);
				            }
				        }
				        if (state === Tone.State.Started) {
				            while (now + lookAhead > this._nextTick) {
				                var tickTime = this._nextTick;
				                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);
				                this.callback(tickTime);
				                this.ticks++;
				            }
				        } else if (state === Tone.State.Stopped) {
				            if (event && this.ticks !== 0) {
				                this.emit('stop', event.time);
				            }
				            this._nextTick = -1;
				            this.ticks = 0;
				        } else if (state === Tone.State.Paused) {
				            if (this._nextTick !== -1) {
				                this.emit('pause', event.time);
				            }
				            this._nextTick = -1;
				        }
				    };
				    /**
					 *  Returns the scheduled state at the given time.
					 *  @param  {Time}  time  The time to query.
					 *  @return  {String}  The name of the state input in setStateAtTime.
					 *  @example
					 * clock.start("+0.1");
					 * clock.getStateAtTime("+0.1"); //returns "started"
					 */
				    Tone.Clock.prototype.getStateAtTime = function (time) {
				        time = this.toSeconds(time);
				        return this._state.getStateAtTime(time);
				    };
				    /**
					 *  Clean up
					 *  @returns {Tone.Clock} this
					 */
				    Tone.Clock.prototype.dispose = function () {
				        Tone.Emitter.prototype.dispose.call(this);
				        Tone.TimelineState.prototype.dispose.call(this);
				        Tone.Clock._worker.removeEventListener('message', this._boundLoop);
				        this._writable('frequency');
				        this.frequency.dispose();
				        this.frequency = null;
				        this._boundLoop = null;
				        this._nextTick = Infinity;
				        this.callback = null;
				        this._state.dispose();
				        this._state = null;
				    };
				    //URL Shim
				    window.URL = window.URL || window.webkitURL;
				    /**
					 *  The update rate in Milliseconds
					 *  @const
					 *  @type  {Number}
					 *  @private
					 */
				    var UPDATE_RATE = 20;
				    /**
					 *  The script which runs in a web worker
					 *  @type {Blob}
					 *  @private
					 */
				    var blob = new Blob(['setInterval(function(){self.postMessage(\'tick\')}, ' + UPDATE_RATE + ')']);
				    /**
					 *  Create a blob url from the Blob
					 *  @type  {URL}
					 *  @private
					 */
				    var blobUrl = URL.createObjectURL(blob);
				    /**
					 *  The Worker which generates a regular callback
					 *  @type {Worker}
					 *  @private
					 *  @static
					 */
				    Tone.Clock._worker = new Worker(blobUrl);
				    return Tone.Clock;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Similar to Tone.Timeline, but all events represent
					 *         intervals with both "time" and "duration" times. The 
					 *         events are placed in a tree structure optimized
					 *         for querying an intersection point with the timeline
					 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
					 *         to represent the data.
					 *  @extends {Tone}
					 */
				    Tone.IntervalTimeline = function () {
				        /**
						 *  The root node of the inteval tree
						 *  @type  {IntervalNode}
						 *  @private
						 */
				        this._root = null;
				        /**
						 *  Keep track of the length of the timeline.
						 *  @type  {Number}
						 *  @private
						 */
				        this._length = 0;
				    };
				    Tone.extend(Tone.IntervalTimeline);
				    /**
					 *  The event to add to the timeline. All events must 
					 *  have a time and duration value
					 *  @param  {Object}  event  The event to add to the timeline
					 *  @return  {Tone.IntervalTimeline}  this
					 */
				    Tone.IntervalTimeline.prototype.addEvent = function (event) {
				        if (this.isUndef(event.time) || this.isUndef(event.duration)) {
				            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');
				        }
				        var node = new IntervalNode(event.time, event.time + event.duration, event);
				        if (this._root === null) {
				            this._root = node;
				        } else {
				            this._root.insert(node);
				        }
				        this._length++;
				        // Restructure tree to be balanced
				        while (node !== null) {
				            node.updateHeight();
				            node.updateMax();
				            this._rebalance(node);
				            node = node.parent;
				        }
				        return this;
				    };
				    /**
					 *  Remove an event from the timeline.
					 *  @param  {Object}  event  The event to remove from the timeline
					 *  @return  {Tone.IntervalTimeline}  this
					 */
				    Tone.IntervalTimeline.prototype.removeEvent = function (event) {
				        if (this._root !== null) {
				            var results = [];
				            this._root.search(event.time, results);
				            for (var i = 0; i < results.length; i++) {
				                var node = results[i];
				                if (node.event === event) {
				                    this._removeNode(node);
				                    this._length--;
				                    break;
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  The number of items in the timeline.
					 *  @type {Number}
					 *  @memberOf Tone.IntervalTimeline#
					 *  @name length
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {
				        get: function () {
				            return this._length;
				        }
				    });
				    /**
					 *  Remove events whose time time is after the given time
					 *  @param  {Number}  time  The time to query.
					 *  @returns {Tone.IntervalTimeline} this
					 */
				    Tone.IntervalTimeline.prototype.cancel = function (after) {
				        this.forEachAfter(after, function (event) {
				            this.removeEvent(event);
				        }.bind(this));
				        return this;
				    };
				    /**
					 *  Set the root node as the given node
					 *  @param {IntervalNode} node
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._setRoot = function (node) {
				        this._root = node;
				        if (this._root !== null) {
				            this._root.parent = null;
				        }
				    };
				    /**
					 *  Replace the references to the node in the node's parent
					 *  with the replacement node.
					 *  @param  {IntervalNode}  node        
					 *  @param  {IntervalNode}  replacement 
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {
				        if (node.parent !== null) {
				            if (node.isLeftChild()) {
				                node.parent.left = replacement;
				            } else {
				                node.parent.right = replacement;
				            }
				            this._rebalance(node.parent);
				        } else {
				            this._setRoot(replacement);
				        }
				    };
				    /**
					 *  Remove the node from the tree and replace it with 
					 *  a successor which follows the schema.
					 *  @param  {IntervalNode}  node
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._removeNode = function (node) {
				        if (node.left === null && node.right === null) {
				            this._replaceNodeInParent(node, null);
				        } else if (node.right === null) {
				            this._replaceNodeInParent(node, node.left);
				        } else if (node.left === null) {
				            this._replaceNodeInParent(node, node.right);
				        } else {
				            var balance = node.getBalance();
				            var replacement, temp;
				            if (balance > 0) {
				                if (node.left.right === null) {
				                    replacement = node.left;
				                    replacement.right = node.right;
				                    temp = replacement;
				                } else {
				                    replacement = node.left.right;
				                    while (replacement.right !== null) {
				                        replacement = replacement.right;
				                    }
				                    replacement.parent.right = replacement.left;
				                    temp = replacement.parent;
				                    replacement.left = node.left;
				                    replacement.right = node.right;
				                }
				            } else {
				                if (node.right.left === null) {
				                    replacement = node.right;
				                    replacement.left = node.left;
				                    temp = replacement;
				                } else {
				                    replacement = node.right.left;
				                    while (replacement.left !== null) {
				                        replacement = replacement.left;
				                    }
				                    replacement.parent = replacement.parent;
				                    replacement.parent.left = replacement.right;
				                    temp = replacement.parent;
				                    replacement.left = node.left;
				                    replacement.right = node.right;
				                }
				            }
				            if (node.parent !== null) {
				                if (node.isLeftChild()) {
				                    node.parent.left = replacement;
				                } else {
				                    node.parent.right = replacement;
				                }
				            } else {
				                this._setRoot(replacement);
				            }
				            // this._replaceNodeInParent(node, replacement);
				            this._rebalance(temp);
				        }
				        node.dispose();
				    };
				    /**
					 *  Rotate the tree to the left
					 *  @param  {IntervalNode}  node
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {
				        var parent = node.parent;
				        var isLeftChild = node.isLeftChild();
				        // Make node.right the new root of this sub tree (instead of node)
				        var pivotNode = node.right;
				        node.right = pivotNode.left;
				        pivotNode.left = node;
				        if (parent !== null) {
				            if (isLeftChild) {
				                parent.left = pivotNode;
				            } else {
				                parent.right = pivotNode;
				            }
				        } else {
				            this._setRoot(pivotNode);
				        }
				    };
				    /**
					 *  Rotate the tree to the right
					 *  @param  {IntervalNode}  node
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._rotateRight = function (node) {
				        var parent = node.parent;
				        var isLeftChild = node.isLeftChild();
				        // Make node.left the new root of this sub tree (instead of node)
				        var pivotNode = node.left;
				        node.left = pivotNode.right;
				        pivotNode.right = node;
				        if (parent !== null) {
				            if (isLeftChild) {
				                parent.left = pivotNode;
				            } else {
				                parent.right = pivotNode;
				            }
				        } else {
				            this._setRoot(pivotNode);
				        }
				    };
				    /**
					 *  Balance the BST
					 *  @param  {IntervalNode}  node
					 *  @private
					 */
				    Tone.IntervalTimeline.prototype._rebalance = function (node) {
				        var balance = node.getBalance();
				        if (balance > 1) {
				            if (node.left.getBalance() < 0) {
				                this._rotateLeft(node.left);
				            } else {
				                this._rotateRight(node);
				            }
				        } else if (balance < -1) {
				            if (node.right.getBalance() > 0) {
				                this._rotateRight(node.right);
				            } else {
				                this._rotateLeft(node);
				            }
				        }
				    };
				    /**
					 *  Get an event whose time and duration span the give time. Will
					 *  return the match whose "time" value is closest to the given time.
					 *  @param  {Object}  event  The event to add to the timeline
					 *  @return  {Object}  The event which spans the desired time
					 */
				    Tone.IntervalTimeline.prototype.getEvent = function (time) {
				        if (this._root !== null) {
				            var results = [];
				            this._root.search(time, results);
				            if (results.length > 0) {
				                var max = results[0];
				                for (var i = 1; i < results.length; i++) {
				                    if (results[i].low > max.low) {
				                        max = results[i];
				                    }
				                }
				                return max.event;
				            }
				        }
				        return null;
				    };
				    /**
					 *  Iterate over everything in the timeline.
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.IntervalTimeline} this
					 */
				    Tone.IntervalTimeline.prototype.forEach = function (callback) {
				        if (this._root !== null) {
				            var allNodes = [];
				            if (this._root !== null) {
				                this._root.traverse(function (node) {
				                    allNodes.push(node);
				                });
				            }
				            for (var i = 0; i < allNodes.length; i++) {
				                var ev = allNodes[i].event;
				                if (ev) {
				                    callback(ev);
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array in which the given time
					 *  overlaps with the time and duration time of the event.
					 *  @param  {Number}  time The time to check if items are overlapping
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.IntervalTimeline} this
					 */
				    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {
				        if (this._root !== null) {
				            var results = [];
				            this._root.search(time, results);
				            for (var i = results.length - 1; i >= 0; i--) {
				                var ev = results[i].event;
				                if (ev) {
				                    callback(ev);
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Iterate over everything in the array in which the time is greater
					 *  than the given time.
					 *  @param  {Number}  time The time to check if items are before
					 *  @param  {Function}  callback The callback to invoke with every item
					 *  @returns {Tone.IntervalTimeline} this
					 */
				    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {
				        if (this._root !== null) {
				            var results = [];
				            this._root.searchAfter(time, results);
				            for (var i = results.length - 1; i >= 0; i--) {
				                var ev = results[i].event;
				                if (ev) {
				                    callback(ev);
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Clean up
					 *  @return  {Tone.IntervalTimeline}  this
					 */
				    Tone.IntervalTimeline.prototype.dispose = function () {
				        var allNodes = [];
				        if (this._root !== null) {
				            this._root.traverse(function (node) {
				                allNodes.push(node);
				            });
				        }
				        for (var i = 0; i < allNodes.length; i++) {
				            allNodes[i].dispose();
				        }
				        allNodes = null;
				        this._root = null;
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	INTERVAL NODE HELPER
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Represents a node in the binary search tree, with the addition
					 *  of a "high" value which keeps track of the highest value of
					 *  its children. 
					 *  References: 
					 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
					 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
					 *  @param {Number} low
					 *  @param {Number} high
					 *  @private
					 */
				    var IntervalNode = function (low, high, event) {
				        //the event container
				        this.event = event;
				        //the low value
				        this.low = low;
				        //the high value
				        this.high = high;
				        //the high value for this and all child nodes
				        this.max = this.high;
				        //the nodes to the left
				        this._left = null;
				        //the nodes to the right
				        this._right = null;
				        //the parent node
				        this.parent = null;
				        //the number of child nodes
				        this.height = 0;
				    };
				    /** 
					 *  Insert a node into the correct spot in the tree
					 *  @param  {IntervalNode}  node
					 */
				    IntervalNode.prototype.insert = function (node) {
				        if (node.low <= this.low) {
				            if (this.left === null) {
				                this.left = node;
				            } else {
				                this.left.insert(node);
				            }
				        } else {
				            if (this.right === null) {
				                this.right = node;
				            } else {
				                this.right.insert(node);
				            }
				        }
				    };
				    /**
					 *  Search the tree for nodes which overlap 
					 *  with the given point
					 *  @param  {Number}  point  The point to query
					 *  @param  {Array}  results  The array to put the results
					 */
				    IntervalNode.prototype.search = function (point, results) {
				        // If p is to the right of the rightmost point of any interval
				        // in this node and all children, there won't be any matches.
				        if (point > this.max) {
				            return;
				        }
				        // Search left children
				        if (this.left !== null) {
				            this.left.search(point, results);
				        }
				        // Check this node
				        if (this.low <= point && this.high > point) {
				            results.push(this);
				        }
				        // If p is to the left of the time of this interval,
				        // then it can't be in any child to the right.
				        if (this.low > point) {
				            return;
				        }
				        // Search right children
				        if (this.right !== null) {
				            this.right.search(point, results);
				        }
				    };
				    /**
					 *  Search the tree for nodes which are less 
					 *  than the given point
					 *  @param  {Number}  point  The point to query
					 *  @param  {Array}  results  The array to put the results
					 */
				    IntervalNode.prototype.searchAfter = function (point, results) {
				        // Check this node
				        if (this.low >= point) {
				            results.push(this);
				            if (this.left !== null) {
				                this.left.searchAfter(point, results);
				            }
				        }
				        // search the right side
				        if (this.right !== null) {
				            this.right.searchAfter(point, results);
				        }
				    };
				    /**
					 *  Invoke the callback on this element and both it's branches
					 *  @param  {Function}  callback
					 */
				    IntervalNode.prototype.traverse = function (callback) {
				        callback(this);
				        if (this.left !== null) {
				            this.left.traverse(callback);
				        }
				        if (this.right !== null) {
				            this.right.traverse(callback);
				        }
				    };
				    /**
					 *  Update the height of the node
					 */
				    IntervalNode.prototype.updateHeight = function () {
				        if (this.left !== null && this.right !== null) {
				            this.height = Math.max(this.left.height, this.right.height) + 1;
				        } else if (this.right !== null) {
				            this.height = this.right.height + 1;
				        } else if (this.left !== null) {
				            this.height = this.left.height + 1;
				        } else {
				            this.height = 0;
				        }
				    };
				    /**
					 *  Update the height of the node
					 */
				    IntervalNode.prototype.updateMax = function () {
				        this.max = this.high;
				        if (this.left !== null) {
				            this.max = Math.max(this.max, this.left.max);
				        }
				        if (this.right !== null) {
				            this.max = Math.max(this.max, this.right.max);
				        }
				    };
				    /**
					 *  The balance is how the leafs are distributed on the node
					 *  @return  {Number}  Negative numbers are balanced to the right
					 */
				    IntervalNode.prototype.getBalance = function () {
				        var balance = 0;
				        if (this.left !== null && this.right !== null) {
				            balance = this.left.height - this.right.height;
				        } else if (this.left !== null) {
				            balance = this.left.height + 1;
				        } else if (this.right !== null) {
				            balance = -(this.right.height + 1);
				        }
				        return balance;
				    };
				    /**
					 *  @returns {Boolean} true if this node is the left child
					 *  of its parent
					 */
				    IntervalNode.prototype.isLeftChild = function () {
				        return this.parent !== null && this.parent.left === this;
				    };
				    /**
					 *  get/set the left node
					 *  @type {IntervalNode}
					 */
				    Object.defineProperty(IntervalNode.prototype, 'left', {
				        get: function () {
				            return this._left;
				        },
				        set: function (node) {
				            this._left = node;
				            if (node !== null) {
				                node.parent = this;
				            }
				            this.updateHeight();
				            this.updateMax();
				        }
				    });
				    /**
					 *  get/set the right node
					 *  @type {IntervalNode}
					 */
				    Object.defineProperty(IntervalNode.prototype, 'right', {
				        get: function () {
				            return this._right;
				        },
				        set: function (node) {
				            this._right = node;
				            if (node !== null) {
				                node.parent = this;
				            }
				            this.updateHeight();
				            this.updateMax();
				        }
				    });
				    /**
					 *  null out references.
					 */
				    IntervalNode.prototype.dispose = function () {
				        this.parent = null;
				        this._left = null;
				        this._right = null;
				        this.event = null;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	END INTERVAL NODE HELPER
				    ///////////////////////////////////////////////////////////////////////////
				    return Tone.IntervalTimeline;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Transport for timing musical events.
					 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
					 *          Tone.Transport timing events pass in the exact time of the scheduled event
					 *          in the argument of the callback function. Pass that time value to the object
					 *          you're scheduling. <br><br>
					 *          A single transport is created for you when the library is initialized. 
					 *          <br><br>
					 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
					 *          called with the time of that event as the argument. 
					 *
					 *  @extends {Tone.Emitter}
					 *  @singleton
					 *  @example
					 * //repeated event every 8th note
					 * Tone.Transport.scheduleRepeat(function(time){
					 * 	//do something with the time
					 * }, "8n");
					 *  @example
					 * //schedule an event on the 16th measure
					 * Tone.Transport.schedule(function(time){
					 * 	//do something with the time
					 * }, "16:0:0");
					 */
				    Tone.Transport = function () {
				        Tone.Emitter.call(this);
				        ///////////////////////////////////////////////////////////////////////
				        //	LOOPING
				        //////////////////////////////////////////////////////////////////////
				        /** 
						 * 	If the transport loops or not.
						 *  @type {boolean}
						 */
				        this.loop = false;
				        /** 
						 * 	The loop start position in ticks
						 *  @type {Ticks}
						 *  @private
						 */
				        this._loopStart = 0;
				        /** 
						 * 	The loop end position in ticks
						 *  @type {Ticks}
						 *  @private
						 */
				        this._loopEnd = 0;
				        ///////////////////////////////////////////////////////////////////////
				        //	CLOCK/TEMPO
				        //////////////////////////////////////////////////////////////////////
				        /**
						 *  Pulses per quarter is the number of ticks per quarter note.
						 *  @private
						 *  @type  {Number}
						 */
				        this._ppq = TransportConstructor.defaults.PPQ;
				        /**
						 *  watches the main oscillator for timing ticks
						 *  initially starts at 120bpm
						 *  @private
						 *  @type {Tone.Clock}
						 */
				        this._clock = new Tone.Clock({
				            'callback': this._processTick.bind(this),
				            'frequency': 0
				        });
				        this._bindClockEvents();
				        /**
						 *  The Beats Per Minute of the Transport. 
						 *  @type {BPM}
						 *  @signal
						 *  @example
						 * Tone.Transport.bpm.value = 80;
						 * //ramp the bpm to 120 over 10 seconds
						 * Tone.Transport.bpm.rampTo(120, 10);
						 */
				        this.bpm = this._clock.frequency;
				        this.bpm._toUnits = this._toUnits.bind(this);
				        this.bpm._fromUnits = this._fromUnits.bind(this);
				        this.bpm.units = Tone.Type.BPM;
				        this.bpm.value = TransportConstructor.defaults.bpm;
				        this._readOnly('bpm');
				        /**
						 *  The time signature, or more accurately the numerator
						 *  of the time signature over a denominator of 4. 
						 *  @type {Number}
						 *  @private
						 */
				        this._timeSignature = TransportConstructor.defaults.timeSignature;
				        ///////////////////////////////////////////////////////////////////////
				        //	TIMELINE EVENTS
				        //////////////////////////////////////////////////////////////////////
				        /**
						 *  All the events in an object to keep track by ID
						 *  @type {Object}
						 *  @private
						 */
				        this._scheduledEvents = {};
				        /**
						 *  The event ID counter
						 *  @type {Number}
						 *  @private
						 */
				        this._eventID = 0;
				        /**
						 * 	The scheduled events.
						 *  @type {Tone.Timeline}
						 *  @private
						 */
				        this._timeline = new Tone.Timeline();
				        /**
						 *  Repeated events
						 *  @type {Array}
						 *  @private
						 */
				        this._repeatedEvents = new Tone.IntervalTimeline();
				        /**
						 *  Events that occur once
						 *  @type {Array}
						 *  @private
						 */
				        this._onceEvents = new Tone.Timeline();
				        /** 
						 *  All of the synced Signals
						 *  @private 
						 *  @type {Array}
						 */
				        this._syncedSignals = [];
				        ///////////////////////////////////////////////////////////////////////
				        //	SWING
				        //////////////////////////////////////////////////////////////////////
				        /**
						 *  The subdivision of the swing
						 *  @type  {Ticks}
						 *  @private
						 */
				        this._swingTicks = TransportConstructor.defaults.PPQ / 2;
				        //8n
				        /**
						 *  The swing amount
						 *  @type {NormalRange}
						 *  @private
						 */
				        this._swingAmount = 0;
				    };
				    Tone.extend(Tone.Transport, Tone.Emitter);
				    /**
					 *  the defaults
					 *  @type {Object}
					 *  @const
					 *  @static
					 */
				    Tone.Transport.defaults = {
				        'bpm': 120,
				        'swing': 0,
				        'swingSubdivision': '8n',
				        'timeSignature': 4,
				        'loopStart': 0,
				        'loopEnd': '4m',
				        'PPQ': 192
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	TICKS
				    ///////////////////////////////////////////////////////////////////////////////
				    /**
					 *  called on every tick
					 *  @param   {number} tickTime clock relative tick time
					 *  @private
					 */
				    Tone.Transport.prototype._processTick = function (tickTime) {
				        var ticks = this._clock.ticks;
				        //handle swing
				        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat
				            ticks % (this._swingTicks * 2) !== 0) {
				            //add some swing
				            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);
				            var amount = Math.sin(progress * Math.PI) * this._swingAmount;
				            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i').eval() * amount;
				        }
				        //do the loop test
				        if (this.loop) {
				            if (ticks === this._loopEnd) {
				                this.emit('stop', tickTime);
				                this._clock.ticks = this._loopStart;
				                ticks = this._loopStart;
				                this.emit('start', tickTime, this.seconds);
				                this.emit('loop', tickTime);
				            }
				        }
				        //process the single occurrence events
				        this._onceEvents.forEachBefore(ticks, function (event) {
				            event.callback(tickTime);
				        });
				        //and clear the single occurrence timeline
				        this._onceEvents.cancelBefore(ticks);
				        //fire the next tick events if their time has come
				        this._timeline.forEachAtTime(ticks, function (event) {
				            event.callback(tickTime);
				        });
				        //process the repeated events
				        this._repeatedEvents.forEachAtTime(ticks, function (event) {
				            if ((ticks - event.time) % event.interval === 0) {
				                event.callback(tickTime);
				            }
				        });
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	SCHEDULABLE EVENTS
				    ///////////////////////////////////////////////////////////////////////////////
				    /**
					 *  Schedule an event along the timeline.
					 *  @param {Function} callback The callback to be invoked at the time.
					 *  @param {TransportTime}  time The time to invoke the callback at.
					 *  @return {Number} The id of the event which can be used for canceling the event. 
					 *  @example
					 * //trigger the callback when the Transport reaches the desired time
					 * Tone.Transport.schedule(function(time){
					 * 	envelope.triggerAttack(time);
					 * }, "128i");
					 */
				    Tone.Transport.prototype.schedule = function (callback, time) {
				        var event = {
				            'time': this.toTicks(time),
				            'callback': callback
				        };
				        var id = this._eventID++;
				        this._scheduledEvents[id.toString()] = {
				            'event': event,
				            'timeline': this._timeline
				        };
				        this._timeline.addEvent(event);
				        return id;
				    };
				    /**
					 *  Schedule a repeated event along the timeline. The event will fire
					 *  at the `interval` starting at the `startTime` and for the specified
					 *  `duration`. 
					 *  @param  {Function}  callback   The callback to invoke.
					 *  @param  {Time}    interval   The duration between successive
					 *                               callbacks.
					 *  @param  {TimelinePosition=}    startTime  When along the timeline the events should
					 *                               start being invoked.
					 *  @param {Time} [duration=Infinity] How long the event should repeat. 
					 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
					 *                           the event. 
					 *  @example
					 * //a callback invoked every eighth note after the first measure
					 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
					 */
				    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {
				        if (interval <= 0) {
				            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');
				        }
				        var event = {
				            'time': this.toTicks(startTime),
				            'duration': this.toTicks(this.defaultArg(duration, Infinity)),
				            'interval': this.toTicks(interval),
				            'callback': callback
				        };
				        var id = this._eventID++;
				        this._scheduledEvents[id.toString()] = {
				            'event': event,
				            'timeline': this._repeatedEvents
				        };
				        this._repeatedEvents.addEvent(event);
				        return id;
				    };
				    /**
					 *  Schedule an event that will be removed after it is invoked. 
					 *  Note that if the given time is less than the current transport time, 
					 *  the event will be invoked immediately. 
					 *  @param {Function} callback The callback to invoke once.
					 *  @param {TransportTime} time The time the callback should be invoked.
					 *  @returns {Number} The ID of the scheduled event. 
					 */
				    Tone.Transport.prototype.scheduleOnce = function (callback, time) {
				        var event = {
				            'time': this.toTicks(time),
				            'callback': callback
				        };
				        var id = this._eventID++;
				        this._scheduledEvents[id.toString()] = {
				            'event': event,
				            'timeline': this._onceEvents
				        };
				        this._onceEvents.addEvent(event);
				        return id;
				    };
				    /**
					 *  Clear the passed in event id from the timeline
					 *  @param {Number} eventId The id of the event.
					 *  @returns {Tone.Transport} this
					 */
				    Tone.Transport.prototype.clear = function (eventId) {
				        if (this._scheduledEvents.hasOwnProperty(eventId)) {
				            var item = this._scheduledEvents[eventId.toString()];
				            item.timeline.removeEvent(item.event);
				            delete this._scheduledEvents[eventId.toString()];
				        }
				        return this;
				    };
				    /**
					 *  Remove scheduled events from the timeline after
					 *  the given time. Repeated events will be removed
					 *  if their startTime is after the given time
					 *  @param {TransportTime} [after=0] Clear all events after
					 *                          this time. 
					 *  @returns {Tone.Transport} this
					 */
				    Tone.Transport.prototype.cancel = function (after) {
				        after = this.defaultArg(after, 0);
				        after = this.toTicks(after);
				        this._timeline.cancel(after);
				        this._onceEvents.cancel(after);
				        this._repeatedEvents.cancel(after);
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	START/STOP/PAUSE
				    ///////////////////////////////////////////////////////////////////////////////
				    /**
					 *  Bind start/stop/pause events from the clock and emit them.
					 */
				    Tone.Transport.prototype._bindClockEvents = function () {
				        this._clock.on('start', function (time, offset) {
				            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();
				            this.emit('start', time, offset);
				        }.bind(this));
				        this._clock.on('stop', function (time) {
				            this.emit('stop', time);
				        }.bind(this));
				        this._clock.on('pause', function (time) {
				            this.emit('pause', time);
				        }.bind(this));
				    };
				    /**
					 *  Returns the playback state of the source, either "started", "stopped", or "paused"
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.Transport#
					 *  @name state
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'state', {
				        get: function () {
				            return this._clock.getStateAtTime(this.now());
				        }
				    });
				    /**
					 *  Start the transport and all sources synced to the transport.
					 *  @param  {Time} [time=now] The time when the transport should start.
					 *  @param  {TransportTime=} offset The timeline offset to start the transport.
					 *  @returns {Tone.Transport} this
					 *  @example
					 * //start the transport in one second starting at beginning of the 5th measure. 
					 * Tone.Transport.start("+1", "4:0:0");
					 */
				    Tone.Transport.prototype.start = function (time, offset) {
				        //start the clock
				        if (!this.isUndef(offset)) {
				            offset = this.toTicks(offset);
				        }
				        this._clock.start(time, offset);
				        return this;
				    };
				    /**
					 *  Stop the transport and all sources synced to the transport.
					 *  @param  {Time} [time=now] The time when the transport should stop. 
					 *  @returns {Tone.Transport} this
					 *  @example
					 * Tone.Transport.stop();
					 */
				    Tone.Transport.prototype.stop = function (time) {
				        this._clock.stop(time);
				        return this;
				    };
				    /**
					 *  Pause the transport and all sources synced to the transport.
					 *  @param  {Time} [time=now]
					 *  @returns {Tone.Transport} this
					 */
				    Tone.Transport.prototype.pause = function (time) {
				        this._clock.pause(time);
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	SETTERS/GETTERS
				    ///////////////////////////////////////////////////////////////////////////////
				    /**
					 *  The time signature as just the numerator over 4. 
					 *  For example 4/4 would be just 4 and 6/8 would be 3.
					 *  @memberOf Tone.Transport#
					 *  @type {Number|Array}
					 *  @name timeSignature
					 *  @example
					 * //common time
					 * Tone.Transport.timeSignature = 4;
					 * // 7/8
					 * Tone.Transport.timeSignature = [7, 8];
					 * //this will be reduced to a single number
					 * Tone.Transport.timeSignature; //returns 3.5
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {
				        get: function () {
				            return this._timeSignature;
				        },
				        set: function (timeSig) {
				            if (this.isArray(timeSig)) {
				                timeSig = timeSig[0] / timeSig[1] * 4;
				            }
				            this._timeSignature = timeSig;
				        }
				    });
				    /**
					 * When the Tone.Transport.loop = true, this is the starting position of the loop.
					 * @memberOf Tone.Transport#
					 * @type {TransportTime}
					 * @name loopStart
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {
				        get: function () {
				            return Tone.TransportTime(this._loopStart, 'i').toSeconds();
				        },
				        set: function (startPosition) {
				            this._loopStart = this.toTicks(startPosition);
				        }
				    });
				    /**
					 * When the Tone.Transport.loop = true, this is the ending position of the loop.
					 * @memberOf Tone.Transport#
					 * @type {TransportTime}
					 * @name loopEnd
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {
				        get: function () {
				            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();
				        },
				        set: function (endPosition) {
				            this._loopEnd = this.toTicks(endPosition);
				        }
				    });
				    /**
					 *  Set the loop start and stop at the same time. 
					 *  @param {TransportTime} startPosition 
					 *  @param {TransportTime} endPosition   
					 *  @returns {Tone.Transport} this
					 *  @example
					 * //loop over the first measure
					 * Tone.Transport.setLoopPoints(0, "1m");
					 * Tone.Transport.loop = true;
					 */
				    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {
				        this.loopStart = startPosition;
				        this.loopEnd = endPosition;
				        return this;
				    };
				    /**
					 *  The swing value. Between 0-1 where 1 equal to 
					 *  the note + half the subdivision.
					 *  @memberOf Tone.Transport#
					 *  @type {NormalRange}
					 *  @name swing
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'swing', {
				        get: function () {
				            return this._swingAmount;
				        },
				        set: function (amount) {
				            //scale the values to a normal range
				            this._swingAmount = amount;
				        }
				    });
				    /**
					 *  Set the subdivision which the swing will be applied to. 
					 *  The default values is a 16th note. Value must be less 
					 *  than a quarter note.
					 *  
					 *  @memberOf Tone.Transport#
					 *  @type {Time}
					 *  @name swingSubdivision
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {
				        get: function () {
				            return Tone.Time(this._swingTicks, 'i').toNotation();
				        },
				        set: function (subdivision) {
				            this._swingTicks = this.toTicks(subdivision);
				        }
				    });
				    /**
					 *  The Transport's position in Bars:Beats:Sixteenths.
					 *  Setting the value will jump to that position right away. 
					 *  @memberOf Tone.Transport#
					 *  @type {BarsBeatsSixteenths}
					 *  @name position
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'position', {
				        get: function () {
				            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();
				        },
				        set: function (progress) {
				            var ticks = this.toTicks(progress);
				            this.ticks = ticks;
				        }
				    });
				    /**
					 *  The Transport's position in seconds
					 *  Setting the value will jump to that position right away. 
					 *  @memberOf Tone.Transport#
					 *  @type {Seconds}
					 *  @name seconds
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'seconds', {
				        get: function () {
				            return Tone.TransportTime(this.ticks, 'i').toSeconds();
				        },
				        set: function (progress) {
				            var ticks = this.toTicks(progress);
				            this.ticks = ticks;
				        }
				    });
				    /**
					 *  The Transport's loop position as a normalized value. Always
					 *  returns 0 if the transport if loop is not true. 
					 *  @memberOf Tone.Transport#
					 *  @name progress
					 *  @type {NormalRange}
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'progress', {
				        get: function () {
				            if (this.loop) {
				                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);
				            } else {
				                return 0;
				            }
				        }
				    });
				    /**
					 *  The transports current tick position.
					 *  
					 *  @memberOf Tone.Transport#
					 *  @type {Ticks}
					 *  @name ticks
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'ticks', {
				        get: function () {
				            return this._clock.ticks;
				        },
				        set: function (t) {
				            var now = this.now();
				            //stop everything synced to the transport
				            if (this.state === Tone.State.Started) {
				                this.emit('stop', now);
				                this._clock.ticks = t;
				                //restart it with the new time
				                this.emit('start', now, this.seconds);
				            } else {
				                this._clock.ticks = t;
				            }
				        }
				    });
				    /**
					 *  Pulses Per Quarter note. This is the smallest resolution
					 *  the Transport timing supports. This should be set once
					 *  on initialization and not set again. Changing this value 
					 *  after other objects have been created can cause problems. 
					 *  
					 *  @memberOf Tone.Transport#
					 *  @type {Number}
					 *  @name PPQ
					 */
				    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {
				        get: function () {
				            return this._ppq;
				        },
				        set: function (ppq) {
				            var bpm = this.bpm.value;
				            this._ppq = ppq;
				            this.bpm.value = bpm;
				        }
				    });
				    /**
					 *  Convert from BPM to frequency (factoring in PPQ)
					 *  @param  {BPM}  bpm The BPM value to convert to frequency
					 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
					 *  @private
					 */
				    Tone.Transport.prototype._fromUnits = function (bpm) {
				        return 1 / (60 / bpm / this.PPQ);
				    };
				    /**
					 *  Convert from frequency (with PPQ) into BPM
					 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
					 *  @return  {BPM}  The frequency value as BPM.
					 *  @private
					 */
				    Tone.Transport.prototype._toUnits = function (freq) {
				        return freq / this.PPQ * 60;
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	SYNCING
				    ///////////////////////////////////////////////////////////////////////////////
				    /**
					 *  Returns the time aligned to the next subdivision
					 *  of the Transport. If the Transport is not started,
					 *  it will return 0.
					 *  Note: this will not work precisely during tempo ramps.
					 *  @param  {Time}  subdivision  The subdivision to quantize to
					 *  @return  {Number}  The context time of the next subdivision.
					 *  @example
					 * Tone.Transport.start(); //the transport must be started
					 * Tone.Transport.nextSubdivision("4n");
					 */
				    Tone.Transport.prototype.nextSubdivision = function (subdivision) {
				        subdivision = this.toSeconds(subdivision);
				        //if the transport's not started, return 0
				        var now;
				        if (this.state === Tone.State.Started) {
				            now = this._clock._nextTick;
				        } else {
				            return 0;
				        }
				        var transportPos = Tone.Time(this.ticks, 'i').eval();
				        var remainingTime = subdivision - transportPos % subdivision;
				        if (remainingTime === 0) {
				            remainingTime = subdivision;
				        }
				        return now + remainingTime;
				    };
				    /**
					 *  Attaches the signal to the tempo control signal so that 
					 *  any changes in the tempo will change the signal in the same
					 *  ratio. 
					 *  
					 *  @param  {Tone.Signal} signal 
					 *  @param {number=} ratio Optionally pass in the ratio between
					 *                         the two signals. Otherwise it will be computed
					 *                         based on their current values. 
					 *  @returns {Tone.Transport} this
					 */
				    Tone.Transport.prototype.syncSignal = function (signal, ratio) {
				        if (!ratio) {
				            //get the sync ratio
				            if (signal._param.value !== 0) {
				                ratio = signal._param.value / this.bpm._param.value;
				            } else {
				                ratio = 0;
				            }
				        }
				        var ratioSignal = new Tone.Gain(ratio);
				        this.bpm.chain(ratioSignal, signal._param);
				        this._syncedSignals.push({
				            'ratio': ratioSignal,
				            'signal': signal,
				            'initial': signal._param.value
				        });
				        signal._param.value = 0;
				        return this;
				    };
				    /**
					 *  Unsyncs a previously synced signal from the transport's control. 
					 *  See Tone.Transport.syncSignal.
					 *  @param  {Tone.Signal} signal 
					 *  @returns {Tone.Transport} this
					 */
				    Tone.Transport.prototype.unsyncSignal = function (signal) {
				        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {
				            var syncedSignal = this._syncedSignals[i];
				            if (syncedSignal.signal === signal) {
				                syncedSignal.ratio.dispose();
				                syncedSignal.signal._param.value = syncedSignal.initial;
				                this._syncedSignals.splice(i, 1);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Transport} this
					 *  @private
					 */
				    Tone.Transport.prototype.dispose = function () {
				        Tone.Emitter.prototype.dispose.call(this);
				        this._clock.dispose();
				        this._clock = null;
				        this._writable('bpm');
				        this.bpm = null;
				        this._timeline.dispose();
				        this._timeline = null;
				        this._onceEvents.dispose();
				        this._onceEvents = null;
				        this._repeatedEvents.dispose();
				        this._repeatedEvents = null;
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////////
				    //	INITIALIZATION
				    ///////////////////////////////////////////////////////////////////////////////
				    var TransportConstructor = Tone.Transport;
				    Tone._initAudioContext(function () {
				        if (typeof Tone.Transport === 'function') {
				            //a single transport object
				            Tone.Transport = new Tone.Transport();
				        } else {
				            //stop the clock
				            Tone.Transport.stop();
				            //get the previous values
				            var prevSettings = Tone.Transport.get();
				            //destory the old transport
				            Tone.Transport.dispose();
				            //make new Transport insides
				            TransportConstructor.call(Tone.Transport);
				            //set the previous config
				            Tone.Transport.set(prevSettings);
				        }
				    });
				    return Tone.Transport;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. 
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Decibels} [volume=0] the initial volume
					 *  @example
					 * var vol = new Tone.Volume(-12);
					 * instrument.chain(vol, Tone.Master);
					 */
				    Tone.Volume = function () {
				        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);
				        /**
						 * the output node
						 * @type {GainNode}
						 * @private
						 */
				        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);
				        /**
						 * The unmuted volume
						 * @type {Decibels}
						 * @private
						 */
				        this._unmutedVolume = 0;
				        /**
						 *  if the volume is muted
						 *  @type {Boolean}
						 *  @private
						 */
				        this._muted = false;
				        /**
						 *  The volume control in decibels. 
						 *  @type {Decibels}
						 *  @signal
						 */
				        this.volume = this.output.gain;
				        this._readOnly('volume');
				        //set the mute initially
				        this.mute = options.mute;
				    };
				    Tone.extend(Tone.Volume);
				    /**
					 *  Defaults
					 *  @type  {Object}
					 *  @const
					 *  @static
					 */
				    Tone.Volume.defaults = {
				        'volume': 0,
				        'mute': false
				    };
				    /**
					 * Mute the output. 
					 * @memberOf Tone.Volume#
					 * @type {boolean}
					 * @name mute
					 * @example
					 * //mute the output
					 * volume.mute = true;
					 */
				    Object.defineProperty(Tone.Volume.prototype, 'mute', {
				        get: function () {
				            return this._muted;
				        },
				        set: function (mute) {
				            if (!this._muted && mute) {
				                this._unmutedVolume = this.volume.value;
				                //maybe it should ramp here?
				                this.volume.value = -Infinity;
				            } else if (this._muted && !mute) {
				                this.volume.value = this._unmutedVolume;
				            }
				            this._muted = mute;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.Volume} this
					 */
				    Tone.Volume.prototype.dispose = function () {
				        this.input.dispose();
				        Tone.prototype.dispose.call(this);
				        this._writable('volume');
				        this.volume.dispose();
				        this.volume = null;
				        return this;
				    };
				    return Tone.Volume;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  A single master output which is connected to the
					 *          AudioDestinationNode (aka your speakers). 
					 *          It provides useful conveniences such as the ability 
					 *          to set the volume and mute the entire application. 
					 *          It also gives you the ability to apply master effects to your application. 
					 *          <br><br>
					 *          Like Tone.Transport, A single Tone.Master is created
					 *          on initialization and you do not need to explicitly construct one.
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @singleton
					 *  @example
					 * //the audio will go from the oscillator to the speakers
					 * oscillator.connect(Tone.Master);
					 * //a convenience for connecting to the master output is also provided:
					 * oscillator.toMaster();
					 * //the above two examples are equivalent.
					 */
				    Tone.Master = function () {
				        this.createInsOuts(1, 1);
				        /**
						 *  The private volume node
						 *  @type  {Tone.Volume}
						 *  @private
						 */
				        this._volume = this.output = new Tone.Volume();
				        /**
						 * The volume of the master output.
						 * @type {Decibels}
						 * @signal
						 */
				        this.volume = this._volume.volume;
				        this._readOnly('volume');
				        //connections
				        this.input.chain(this.output, this.context.destination);
				    };
				    Tone.extend(Tone.Master);
				    /**
					 *  @type {Object}
					 *  @const
					 */
				    Tone.Master.defaults = {
				        'volume': 0,
				        'mute': false
				    };
				    /**
					 * Mute the output. 
					 * @memberOf Tone.Master#
					 * @type {boolean}
					 * @name mute
					 * @example
					 * //mute the output
					 * Tone.Master.mute = true;
					 */
				    Object.defineProperty(Tone.Master.prototype, 'mute', {
				        get: function () {
				            return this._volume.mute;
				        },
				        set: function (mute) {
				            this._volume.mute = mute;
				        }
				    });
				    /**
					 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously 
					 *  chained in the master effects chain. 
					 *  @param {AudioNode|Tone...} args All arguments will be connected in a row
					 *                                  and the Master will be routed through it.
					 *  @return  {Tone.Master}  this
					 *  @example
					 * //some overall compression to keep the levels in check
					 * var masterCompressor = new Tone.Compressor({
					 * 	"threshold" : -6,
					 * 	"ratio" : 3,
					 * 	"attack" : 0.5,
					 * 	"release" : 0.1
					 * });
					 * //give a little boost to the lows
					 * var lowBump = new Tone.Filter(200, "lowshelf");
					 * //route everything through the filter 
					 * //and compressor before going to the speakers
					 * Tone.Master.chain(lowBump, masterCompressor);
					 */
				    Tone.Master.prototype.chain = function () {
				        this.input.disconnect();
				        this.input.chain.apply(this.input, arguments);
				        arguments[arguments.length - 1].connect(this.output);
				    };
				    /**
					 *  Clean up
					 *  @return  {Tone.Master}  this
					 */
				    Tone.Master.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable('volume');
				        this._volume.dispose();
				        this._volume = null;
				        this.volume = null;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    //	AUGMENT TONE's PROTOTYPE
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
					 *  @returns {Tone} this
					 *  @example
					 * //connect an oscillator to the master output
					 * var osc = new Tone.Oscillator().toMaster();
					 */
				    Tone.prototype.toMaster = function () {
				        this.connect(Tone.Master);
				        return this;
				    };
				    /**
					 *  Also augment AudioNode's prototype to include toMaster
					 *  as a convenience
					 *  @returns {AudioNode} this
					 */
				    AudioNode.prototype.toMaster = function () {
				        this.connect(Tone.Master);
				        return this;
				    };
				    var MasterConstructor = Tone.Master;
				    /**
					 *  initialize the module and listen for new audio contexts
					 */
				    Tone._initAudioContext(function () {
				        //a single master output
				        if (!Tone.prototype.isUndef(Tone.Master)) {
				            Tone.Master = new MasterConstructor();
				        } else {
				            MasterConstructor.prototype.dispose.call(Tone.Master);
				            MasterConstructor.call(Tone.Master);
				        }
				    });
				    return Tone.Master;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Base class for sources. Sources have start/stop methods
					 *          and the ability to be synced to the 
					 *          start/stop of Tone.Transport. 
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @example
					 * //Multiple state change events can be chained together,
					 * //but must be set in the correct order and with ascending times
					 * 
					 * // OK
					 * state.start().stop("+0.2");
					 * // AND
					 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
					 *
					 * // BAD
					 * state.stop("+0.2").start();
					 * // OR
					 * state.start("+0.3").stop("+0.2");
					 * 
					 */
				    Tone.Source = function (options) {
				        // this.createInsOuts(0, 1);
				        options = this.defaultArg(options, Tone.Source.defaults);
				        /**
						 *  The output volume node
						 *  @type  {Tone.Volume}
						 *  @private
						 */
				        this._volume = this.output = new Tone.Volume(options.volume);
				        /**
						 * The volume of the output in decibels.
						 * @type {Decibels}
						 * @signal
						 * @example
						 * source.volume.value = -6;
						 */
				        this.volume = this._volume.volume;
				        this._readOnly('volume');
				        /**
						 * 	Keep track of the scheduled state.
						 *  @type {Tone.TimelineState}
						 *  @private
						 */
				        this._state = new Tone.TimelineState(Tone.State.Stopped);
				        this._state.memory = 10;
				        /**
						 *  The synced `start` callback function from the transport
						 *  @type {Function}
						 *  @private
						 */
				        this._synced = false;
				        /**
						 *  Keep track of all of the scheduled event ids
						 *  @type  {Array}
						 *  @private
						 */
				        this._scheduled = [];
				        //make the output explicitly stereo
				        this._volume.output.output.channelCount = 2;
				        this._volume.output.output.channelCountMode = 'explicit';
				        //mute initially
				        this.mute = options.mute;
				    };
				    Tone.extend(Tone.Source);
				    /**
					 *  The default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Source.defaults = {
				        'volume': 0,
				        'mute': false
				    };
				    /**
					 *  Returns the playback state of the source, either "started" or "stopped".
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.Source#
					 *  @name state
					 */
				    Object.defineProperty(Tone.Source.prototype, 'state', {
				        get: function () {
				            if (this._synced) {
				                if (Tone.Transport.state === Tone.State.Started) {
				                    return this._state.getStateAtTime(Tone.Transport.seconds);
				                } else {
				                    return Tone.State.Stopped;
				                }
				            } else {
				                return this._state.getStateAtTime(this.now());
				            }
				        }
				    });
				    /**
					 * Mute the output. 
					 * @memberOf Tone.Source#
					 * @type {boolean}
					 * @name mute
					 * @example
					 * //mute the output
					 * source.mute = true;
					 */
				    Object.defineProperty(Tone.Source.prototype, 'mute', {
				        get: function () {
				            return this._volume.mute;
				        },
				        set: function (mute) {
				            this._volume.mute = mute;
				        }
				    });
				    //overwrite these functions
				    Tone.Source.prototype._start = Tone.noOp;
				    Tone.Source.prototype._stop = Tone.noOp;
				    /**
					 *  Start the source at the specified time. If no time is given, 
					 *  start the source now.
					 *  @param  {Time} [time=now] When the source should be started.
					 *  @returns {Tone.Source} this
					 *  @example
					 * source.start("+0.5"); //starts the source 0.5 seconds from now
					 */
				    Tone.Source.prototype.start = function (time, offset, duration) {
				        if (this.isUndef(time) && this._synced) {
				            time = Tone.Transport.seconds;
				        } else {
				            time = this.toSeconds(time);
				        }
				        //if it's started, stop it and restart it
				        if (this._state.getStateAtTime(time) === Tone.State.Started) {
				            this.stop(time);
				        }
				        this._state.setStateAtTime(Tone.State.Started, time);
				        if (this._synced) {
				            // add the offset time to the event
				            var event = this._state.getEvent(time);
				            event.offset = this.defaultArg(offset, 0);
				            event.duration = duration;
				            var sched = Tone.Transport.schedule(function (t) {
				                this._start(t, offset, duration);
				            }.bind(this), time);
				            this._scheduled.push(sched);
				        } else {
				            this._start.apply(this, arguments);
				        }
				        return this;
				    };
				    /**
					 *  Stop the source at the specified time. If no time is given, 
					 *  stop the source now.
					 *  @param  {Time} [time=now] When the source should be stopped. 
					 *  @returns {Tone.Source} this
					 *  @example
					 * source.stop(); // stops the source immediately
					 */
				    Tone.Source.prototype.stop = function (time) {
				        if (this.isUndef(time) && this._synced) {
				            time = Tone.Transport.seconds;
				        } else {
				            time = this.toSeconds(time);
				        }
				        this._state.cancel(time);
				        this._state.setStateAtTime(Tone.State.Stopped, time);
				        if (!this._synced) {
				            this._stop.apply(this, arguments);
				        } else {
				            var sched = Tone.Transport.schedule(this._stop.bind(this), time);
				            this._scheduled.push(sched);
				        }
				        return this;
				    };
				    /**
					 *  Sync the source to the Transport so that all subsequent
					 *  calls to `start` and `stop` are synced to the TransportTime
					 *  instead of the AudioContext time. 
					 *
					 *  @returns {Tone.Source} this
					 *  @example
					 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
					 * source.sync().start(0).stop(0.3);
					 * //start the transport.
					 * Tone.Transport.start();
					 *
					 *  @example
					 * //start the transport with an offset and the sync'ed sources
					 * //will start in the correct position
					 * source.sync().start(0.1);
					 * //the source will be invoked with an offset of 0.4
					 * Tone.Transport.start("+0.5", 0.5);
					 */
				    Tone.Source.prototype.sync = function () {
				        this._synced = true;
				        Tone.Transport.on('start', function (time, offset) {
				            if (offset > 0) {
				                // get the playback state at that time
				                var stateEvent = this._state.getEvent(offset);
				                // listen for start events which may occur in the middle of the sync'ed time
				                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {
				                    // get the offset
				                    var startOffset = offset - this.toSeconds(stateEvent.time);
				                    var duration;
				                    if (stateEvent.duration) {
				                        duration = this.toSeconds(stateEvent.duration) - startOffset;
				                    }
				                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
				                }
				            }
				        }.bind(this));
				        Tone.Transport.on('stop pause', function (time) {
				            if (this._state.getStateAtTime(Tone.Transport.seconds) === Tone.State.Started) {
				                this._stop(time);
				            }
				        }.bind(this));
				        return this;
				    };
				    /**
					 *  Unsync the source to the Transport. See Tone.Source.sync
					 *  @returns {Tone.Source} this
					 */
				    Tone.Source.prototype.unsync = function () {
				        this._synced = false;
				        Tone.Transport.off('start stop pause');
				        // clear all of the scheduled ids
				        for (var i = 0; i < this._scheduled.length; i++) {
				            var id = this._scheduled[i];
				            Tone.Transport.clear(id);
				        }
				        this._scheduled = [];
				        this._state.cancel(0);
				        return this;
				    };
				    /**
					 *	Clean up.
					 *  @return {Tone.Source} this
					 */
				    Tone.Source.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this.unsync();
				        this._scheduled = null;
				        this._writable('volume');
				        this._volume.dispose();
				        this._volume = null;
				        this.volume = null;
				        this._state.dispose();
				        this._state = null;
				    };
				    return Tone.Source;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Oscillator supports a number of features including
					 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), 
					 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
					 *
					 *  @constructor
					 *  @extends {Tone.Source}
					 *  @param {Frequency} [frequency] Starting frequency
					 *  @param {string} [type] The oscillator type. Read more about type below.
					 *  @example
					 * //make and start a 440hz sine tone
					 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
					 */
				    Tone.Oscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type'
				        ], Tone.Oscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  the main oscillator
						 *  @type {OscillatorNode}
						 *  @private
						 */
				        this._oscillator = null;
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The detune control signal.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        /**
						 *  the periodic wave
						 *  @type {PeriodicWave}
						 *  @private
						 */
				        this._wave = null;
				        /**
						 *  The partials of the oscillator
						 *  @type {Array}
						 *  @private
						 */
				        this._partials = this.defaultArg(options.partials, [1]);
				        /**
						 *  the phase of the oscillator
						 *  between 0 - 360
						 *  @type {number}
						 *  @private
						 */
				        this._phase = options.phase;
				        /**
						 *  the type of the oscillator
						 *  @type {string}
						 *  @private
						 */
				        this._type = null;
				        //setup
				        this.type = options.type;
				        this.phase = this._phase;
				        this._readOnly([
				            'frequency',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.Oscillator, Tone.Source);
				    /**
					 *  the default parameters
					 *  @type {Object}
					 */
				    Tone.Oscillator.defaults = {
				        'type': 'sine',
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'partials': []
				    };
				    /**
					 *  The Oscillator types
					 *  @enum {String}
					 */
				    Tone.Oscillator.Type = {
				        Sine: 'sine',
				        Triangle: 'triangle',
				        Sawtooth: 'sawtooth',
				        Square: 'square',
				        Custom: 'custom'
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} [time=now] 
					 *  @private
					 */
				    Tone.Oscillator.prototype._start = function (time) {
				        //new oscillator with previous values
				        this._oscillator = this.context.createOscillator();
				        this._oscillator.setPeriodicWave(this._wave);
				        //connect the control signal to the oscillator frequency & detune
				        this._oscillator.connect(this.output);
				        this.frequency.connect(this._oscillator.frequency);
				        this.detune.connect(this._oscillator.detune);
				        //start the oscillator
				        this._oscillator.start(this.toSeconds(time));
				    };
				    /**
					 *  stop the oscillator
					 *  @private
					 *  @param  {Time} [time=now] (optional) timing parameter
					 *  @returns {Tone.Oscillator} this
					 */
				    Tone.Oscillator.prototype._stop = function (time) {
				        if (this._oscillator) {
				            this._oscillator.stop(this.toSeconds(time));
				            this._oscillator = null;
				        }
				        return this;
				    };
				    /**
					 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
					 *  will also affect the oscillators frequency. 
					 *  @returns {Tone.Oscillator} this
					 *  @example
					 * Tone.Transport.bpm.value = 120;
					 * osc.frequency.value = 440;
					 * //the ration between the bpm and the frequency will be maintained
					 * osc.syncFrequency();
					 * Tone.Transport.bpm.value = 240; 
					 * // the frequency of the oscillator is doubled to 880
					 */
				    Tone.Oscillator.prototype.syncFrequency = function () {
				        Tone.Transport.syncSignal(this.frequency);
				        return this;
				    };
				    /**
					 *  Unsync the oscillator's frequency from the Transport. 
					 *  See Tone.Oscillator.syncFrequency
					 *  @returns {Tone.Oscillator} this
					 */
				    Tone.Oscillator.prototype.unsyncFrequency = function () {
				        Tone.Transport.unsyncSignal(this.frequency);
				        return this;
				    };
				    /**
					 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
					 * setting the first x number of partials of the oscillator. For example: "sine4" would
					 * set be the first 4 partials of the sine wave and "triangle8" would set the first
					 * 8 partials of the triangle wave.
					 * <br><br> 
					 * Uses PeriodicWave internally even for native types so that it can set the phase. 
					 * PeriodicWave equations are from the 
					 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
					 *  
					 * @memberOf Tone.Oscillator#
					 * @type {string}
					 * @name type
					 * @example
					 * //set it to a square wave
					 * osc.type = "square";
					 * @example
					 * //set the first 6 partials of a sawtooth wave
					 * osc.type = "sawtooth6";
					 */
				    Object.defineProperty(Tone.Oscillator.prototype, 'type', {
				        get: function () {
				            return this._type;
				        },
				        set: function (type) {
				            var coefs = this._getRealImaginary(type, this._phase);
				            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);
				            this._wave = periodicWave;
				            if (this._oscillator !== null) {
				                this._oscillator.setPeriodicWave(this._wave);
				            }
				            this._type = type;
				        }
				    });
				    /**
					 *  Returns the real and imaginary components based 
					 *  on the oscillator type.
					 *  @returns {Array} [real, imaginary]
					 *  @private
					 */
				    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {
				        var fftSize = 4096;
				        var periodicWaveSize = fftSize / 2;
				        var real = new Float32Array(periodicWaveSize);
				        var imag = new Float32Array(periodicWaveSize);
				        var partialCount = 1;
				        if (type === Tone.Oscillator.Type.Custom) {
				            partialCount = this._partials.length + 1;
				            periodicWaveSize = partialCount;
				        } else {
				            var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);
				            if (partial) {
				                partialCount = parseInt(partial[2]) + 1;
				                type = partial[1];
				                partialCount = Math.max(partialCount, 2);
				                periodicWaveSize = partialCount;
				            }
				        }
				        for (var n = 1; n < periodicWaveSize; ++n) {
				            var piFactor = 2 / (n * Math.PI);
				            var b;
				            switch (type) {
				            case Tone.Oscillator.Type.Sine:
				                b = n <= partialCount ? 1 : 0;
				                break;
				            case Tone.Oscillator.Type.Square:
				                b = n & 1 ? 2 * piFactor : 0;
				                break;
				            case Tone.Oscillator.Type.Sawtooth:
				                b = piFactor * (n & 1 ? 1 : -1);
				                break;
				            case Tone.Oscillator.Type.Triangle:
				                if (n & 1) {
				                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
				                } else {
				                    b = 0;
				                }
				                break;
				            case Tone.Oscillator.Type.Custom:
				                b = this._partials[n - 1];
				                break;
				            default:
				                throw new TypeError('Tone.Oscillator: invalid type: ' + type);
				            }
				            if (b !== 0) {
				                real[n] = -b * Math.sin(phase * n);
				                imag[n] = b * Math.cos(phase * n);
				            } else {
				                real[n] = 0;
				                imag[n] = 0;
				            }
				        }
				        return [
				            real,
				            imag
				        ];
				    };
				    /**
					 *  Compute the inverse FFT for a given phase.	
					 *  @param  {Float32Array}  real
					 *  @param  {Float32Array}  imag 
					 *  @param  {NormalRange}  phase 
					 *  @return  {AudioRange}
					 *  @private
					 */
				    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {
				        var sum = 0;
				        var len = real.length;
				        for (var i = 0; i < len; i++) {
				            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
				        }
				        return sum;
				    };
				    /**
					 *  Returns the initial value of the oscillator.
					 *  @return  {AudioRange}
					 *  @private
					 */
				    Tone.Oscillator.prototype._getInitialValue = function () {
				        var coefs = this._getRealImaginary(this._type, 0);
				        var real = coefs[0];
				        var imag = coefs[1];
				        var maxValue = 0;
				        var twoPi = Math.PI * 2;
				        //check for peaks in 8 places
				        for (var i = 0; i < 8; i++) {
				            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);
				        }
				        return -this._inverseFFT(real, imag, this._phase) / maxValue;
				    };
				    /**
					 * The partials of the waveform. A partial represents 
					 * the amplitude at a harmonic. The first harmonic is the 
					 * fundamental frequency, the second is the octave and so on
					 * following the harmonic series. 
					 * Setting this value will automatically set the type to "custom". 
					 * The value is an empty array when the type is not "custom". 
					 * @memberOf Tone.Oscillator#
					 * @type {Array}
					 * @name partials
					 * @example
					 * osc.partials = [1, 0.2, 0.01];
					 */
				    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {
				        get: function () {
				            if (this._type !== Tone.Oscillator.Type.Custom) {
				                return [];
				            } else {
				                return this._partials;
				            }
				        },
				        set: function (partials) {
				            this._partials = partials;
				            this.type = Tone.Oscillator.Type.Custom;
				        }
				    });
				    /**
					 * The phase of the oscillator in degrees. 
					 * @memberOf Tone.Oscillator#
					 * @type {Degrees}
					 * @name phase
					 * @example
					 * osc.phase = 180; //flips the phase of the oscillator
					 */
				    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {
				        get: function () {
				            return this._phase * (180 / Math.PI);
				        },
				        set: function (phase) {
				            this._phase = phase * Math.PI / 180;
				            //reset the type
				            this.type = this._type;
				        }
				    });
				    /**
					 *  Dispose and disconnect.
					 *  @return {Tone.Oscillator} this
					 */
				    Tone.Oscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        if (this._oscillator !== null) {
				            this._oscillator.disconnect();
				            this._oscillator = null;
				        }
				        this._wave = null;
				        this._writable([
				            'frequency',
				            'detune'
				        ]);
				        this.frequency.dispose();
				        this.frequency = null;
				        this.detune.dispose();
				        this.detune = null;
				        this._partials = null;
				        return this;
				    };
				    return Tone.Oscillator;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
					 *         it's own class is that many browsers optimize out Tone.Signal
					 *         with a value of 0 and will not process nodes further down the graph. 
					 *  @extends {Tone}
					 */
				    Tone.Zero = function () {
				        /**
						 *  The gain node
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._gain = this.input = this.output = new Tone.Gain();
				        Tone.Zero._zeros.connect(this._gain);
				    };
				    Tone.extend(Tone.Zero);
				    /**
					 *  clean up
					 *  @return  {Tone.Zero}  this
					 */
				    Tone.Zero.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._gain.dispose();
				        this._gain = null;
				        return this;
				    };
				    /**
					 *  Generates a constant output of 0. This is so 
					 *  the processing graph doesn't optimize out this
					 *  segment of the graph. 
					 *  @static
					 *  @private
					 *  @const
					 *  @type {AudioBufferSourceNode}
					 */
				    Tone.Zero._zeros = null;
				    /**
					 *  initializer function
					 */
				    Tone._initAudioContext(function (audioContext) {
				        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
				        var arr = buffer.getChannelData(0);
				        for (var i = 0; i < arr.length; i++) {
				            arr[i] = 0;
				        }
				        Tone.Zero._zeros = audioContext.createBufferSource();
				        Tone.Zero._zeros.channelCount = 1;
				        Tone.Zero._zeros.channelCountMode = 'explicit';
				        Tone.Zero._zeros.buffer = buffer;
				        Tone.Zero._zeros.loop = true;
				        Tone.Zero._zeros.start(0);
				        Tone.Zero._zeros.noGC();
				    });
				    return Tone.Zero;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal 
					 *          which can be attached to an AudioParam or Tone.Signal 
					 *          in order to modulate that parameter with an oscillator. The LFO can 
					 *          also be synced to the transport to start/stop and change when the tempo changes.
					 *
					 *  @constructor
					 *  @extends {Tone.Oscillator}
					 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
					 *                               in the frequency range of 0.1 to 10 hertz. 
					 *  @param {number=} min The minimum output value of the LFO. 
					 *  @param {number=} max The maximum value of the LFO. 
					 *  @example
					 * var lfo = new Tone.LFO("4n", 400, 4000);
					 * lfo.connect(filter.frequency);
					 */
				    Tone.LFO = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'min',
				            'max'
				        ], Tone.LFO.defaults);
				        /** 
						 *  The oscillator. 
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._oscillator = new Tone.Oscillator({
				            'frequency': options.frequency,
				            'type': options.type
				        });
				        /**
						 *  the lfo's frequency
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this._oscillator.frequency;
				        /**
						 * The amplitude of the LFO, which controls the output range between
						 * the min and max output. For example if the min is -10 and the max 
						 * is 10, setting the amplitude to 0.5 would make the LFO modulate
						 * between -5 and 5. 
						 * @type {Number}
						 * @signal
						 */
				        this.amplitude = this._oscillator.volume;
				        this.amplitude.units = Tone.Type.NormalRange;
				        this.amplitude.value = options.amplitude;
				        /**
						 *  The signal which is output when the LFO is stopped
						 *  @type  {Tone.Signal}
						 *  @private
						 */
				        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);
				        /**
						 *  Just outputs zeros.
						 *  @type {Tone.Zero}
						 *  @private
						 */
				        this._zeros = new Tone.Zero();
				        /**
						 *  The value that the LFO outputs when it's stopped
						 *  @type {AudioRange}
						 *  @private
						 */
				        this._stoppedValue = 0;
				        /**
						 *  @type {Tone.AudioToGain} 
						 *  @private
						 */
				        this._a2g = new Tone.AudioToGain();
				        /**
						 *  @type {Tone.Scale} 
						 *  @private
						 */
				        this._scaler = this.output = new Tone.Scale(options.min, options.max);
				        /**
						 *  the units of the LFO (used for converting)
						 *  @type {Tone.Type} 
						 *  @private
						 */
				        this._units = Tone.Type.Default;
				        this.units = options.units;
				        //connect it up
				        this._oscillator.chain(this._a2g, this._scaler);
				        this._zeros.connect(this._a2g);
				        this._stoppedSignal.connect(this._a2g);
				        this._readOnly([
				            'amplitude',
				            'frequency'
				        ]);
				        this.phase = options.phase;
				    };
				    Tone.extend(Tone.LFO, Tone.Oscillator);
				    /**
					 *  the default parameters
					 *
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.LFO.defaults = {
				        'type': 'sine',
				        'min': 0,
				        'max': 1,
				        'phase': 0,
				        'frequency': '4n',
				        'amplitude': 1,
				        'units': Tone.Type.Default
				    };
				    /**
					 *  Start the LFO. 
					 *  @param  {Time} [time=now] the time the LFO will start
					 *  @returns {Tone.LFO} this
					 */
				    Tone.LFO.prototype.start = function (time) {
				        time = this.toSeconds(time);
				        this._stoppedSignal.setValueAtTime(0, time);
				        this._oscillator.start(time);
				        return this;
				    };
				    /**
					 *  Stop the LFO. 
					 *  @param  {Time} [time=now] the time the LFO will stop
					 *  @returns {Tone.LFO} this
					 */
				    Tone.LFO.prototype.stop = function (time) {
				        time = this.toSeconds(time);
				        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);
				        this._oscillator.stop(time);
				        return this;
				    };
				    /**
					 *  Sync the start/stop/pause to the transport 
					 *  and the frequency to the bpm of the transport
					 *  @returns {Tone.LFO} this
					 *  @example
					 *  lfo.frequency.value = "8n";
					 *  lfo.sync().start(0)
					 *  //the rate of the LFO will always be an eighth note, 
					 *  //even as the tempo changes
					 */
				    Tone.LFO.prototype.sync = function () {
				        this._oscillator.sync();
				        this._oscillator.syncFrequency();
				        return this;
				    };
				    /**
					 *  unsync the LFO from transport control
					 *  @returns {Tone.LFO} this
					 */
				    Tone.LFO.prototype.unsync = function () {
				        this._oscillator.unsync();
				        this._oscillator.unsyncFrequency();
				        return this;
				    };
				    /**
					 * The miniumum output of the LFO.
					 * @memberOf Tone.LFO#
					 * @type {number}
					 * @name min
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'min', {
				        get: function () {
				            return this._toUnits(this._scaler.min);
				        },
				        set: function (min) {
				            min = this._fromUnits(min);
				            this._scaler.min = min;
				        }
				    });
				    /**
					 * The maximum output of the LFO.
					 * @memberOf Tone.LFO#
					 * @type {number}
					 * @name max
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'max', {
				        get: function () {
				            return this._toUnits(this._scaler.max);
				        },
				        set: function (max) {
				            max = this._fromUnits(max);
				            this._scaler.max = max;
				        }
				    });
				    /**
					 * The type of the oscillator: sine, square, sawtooth, triangle. 
					 * @memberOf Tone.LFO#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'type', {
				        get: function () {
				            return this._oscillator.type;
				        },
				        set: function (type) {
				            this._oscillator.type = type;
				            this._stoppedValue = this._oscillator._getInitialValue();
				            this._stoppedSignal.value = this._stoppedValue;
				        }
				    });
				    /**
					 * The phase of the LFO.
					 * @memberOf Tone.LFO#
					 * @type {number}
					 * @name phase
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'phase', {
				        get: function () {
				            return this._oscillator.phase;
				        },
				        set: function (phase) {
				            this._oscillator.phase = phase;
				            this._stoppedValue = this._oscillator._getInitialValue();
				            this._stoppedSignal.value = this._stoppedValue;
				        }
				    });
				    /**
					 * The output units of the LFO.
					 * @memberOf Tone.LFO#
					 * @type {Tone.Type}
					 * @name units
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'units', {
				        get: function () {
				            return this._units;
				        },
				        set: function (val) {
				            var currentMin = this.min;
				            var currentMax = this.max;
				            //convert the min and the max
				            this._units = val;
				            this.min = currentMin;
				            this.max = currentMax;
				        }
				    });
				    /**
					 * Mute the output. 
					 * @memberOf Tone.LFO#
					 * @type {Boolean}
					 * @name mute
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'mute', {
				        get: function () {
				            return this._oscillator.mute;
				        },
				        set: function (mute) {
				            this._oscillator.mute = mute;
				        }
				    });
				    /**
					 *  Returns the playback state of the source, either "started" or "stopped".
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.LFO#
					 *  @name state
					 */
				    Object.defineProperty(Tone.LFO.prototype, 'state', {
				        get: function () {
				            return this._oscillator.state;
				        }
				    });
				    /**
					 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. 
					 *  Tone.LFO will automatically convert to the destination units of the 
					 *  will get the units from the connected node.
					 *  @param  {Tone | AudioParam | AudioNode} node 
					 *  @param {number} [outputNum=0] optionally which output to connect from
					 *  @param {number} [inputNum=0] optionally which input to connect to
					 *  @returns {Tone.LFO} this
					 *  @private
					 */
				    Tone.LFO.prototype.connect = function (node) {
				        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {
				            this.convert = node.convert;
				            this.units = node.units;
				        }
				        Tone.Signal.prototype.connect.apply(this, arguments);
				        return this;
				    };
				    /**
					 *  private method borrowed from Param converts 
					 *  units from their destination value
					 *  @function
					 *  @private
					 */
				    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;
				    /**
					 *  private method borrowed from Param converts 
					 *  units to their destination value
					 *  @function
					 *  @private
					 */
				    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;
				    /**
					 *  disconnect and dispose
					 *  @returns {Tone.LFO} this
					 */
				    Tone.LFO.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'amplitude',
				            'frequency'
				        ]);
				        this._oscillator.dispose();
				        this._oscillator = null;
				        this._stoppedSignal.dispose();
				        this._stoppedSignal = null;
				        this._zeros.dispose();
				        this._zeros = null;
				        this._scaler.dispose();
				        this._scaler = null;
				        this._a2g.dispose();
				        this._a2g = null;
				        this.frequency = null;
				        this.amplitude = null;
				        return this;
				    };
				    return Tone.LFO;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Limiter will limit the loudness of an incoming signal. 
					 *         It is composed of a Tone.Compressor with a fast attack 
					 *         and release. Limiters are commonly used to safeguard against 
					 *         signal clipping. Unlike a compressor, limiters do not provide 
					 *         smooth gain reduction and almost completely prevent 
					 *         additional gain above the threshold.
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {number} threshold The theshold above which the limiting is applied. 
					 *  @example
					 *  var limiter = new Tone.Limiter(-6);
					 */
				    Tone.Limiter = function () {
				        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);
				        /**
						 *  the compressor
						 *  @private
						 *  @type {Tone.Compressor}
						 */
				        this._compressor = this.input = this.output = new Tone.Compressor({
				            'attack': 0.001,
				            'decay': 0.001,
				            'threshold': options.threshold
				        });
				        /**
						 * The threshold of of the limiter
						 * @type {Decibel}
						 * @signal
						 */
				        this.threshold = this._compressor.threshold;
				        this._readOnly('threshold');
				    };
				    Tone.extend(Tone.Limiter);
				    /**
					 *  The default value
					 *  @type {Object}
					 *  @const
					 *  @static
					 */
				    Tone.Limiter.defaults = { 'threshold': -12 };
				    /**
					 *  Clean up.
					 *  @returns {Tone.Limiter} this
					 */
				    Tone.Limiter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._compressor.dispose();
				        this._compressor = null;
				        this._writable('threshold');
				        this.threshold = null;
				        return this;
				    };
				    return Tone.Limiter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to 
					 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Time|Object} [delayTime] The delay time of the comb filter
					 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
					 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
					 *                                signal as it is fedback. 
					 */
				    Tone.LowpassCombFilter = function () {
				        this.createInsOuts(1, 1);
				        var options = this.optionsObject(arguments, [
				            'delayTime',
				            'resonance',
				            'dampening'
				        ], Tone.LowpassCombFilter.defaults);
				        /**
						 *  the delay node
						 *  @type {DelayNode}
						 *  @private
						 */
				        this._delay = this.input = new Tone.Delay(options.delayTime);
				        /**
						 *  The delayTime of the comb filter. 
						 *  @type {Time}
						 *  @signal
						 */
				        this.delayTime = this._delay.delayTime;
				        /**
						 *  the lowpass filter
						 *  @type  {BiquadFilterNode}
						 *  @private
						 */
				        this._lowpass = this.output = this.context.createBiquadFilter();
				        this._lowpass.Q.value = -3.0102999566398125;
				        this._lowpass.type = 'lowpass';
				        /**
						 *  The dampening control of the feedback
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.dampening = new Tone.Param({
				            'param': this._lowpass.frequency,
				            'units': Tone.Type.Frequency,
				            'value': options.dampening
				        });
				        /**
						 *  the feedback gain
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
				        /**
						 *  The amount of feedback of the delayed signal. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.resonance = this._feedback.gain;
				        //connections
				        this._delay.chain(this._lowpass, this._feedback, this._delay);
				        this._readOnly([
				            'dampening',
				            'resonance',
				            'delayTime'
				        ]);
				    };
				    Tone.extend(Tone.LowpassCombFilter);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.LowpassCombFilter.defaults = {
				        'delayTime': 0.1,
				        'resonance': 0.5,
				        'dampening': 3000
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.LowpassCombFilter} this
					 */
				    Tone.LowpassCombFilter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'dampening',
				            'resonance',
				            'delayTime'
				        ]);
				        this.dampening.dispose();
				        this.dampening = null;
				        this.resonance.dispose();
				        this.resonance = null;
				        this._delay.dispose();
				        this._delay = null;
				        this.delayTime = null;
				        this._lowpass.disconnect();
				        this._lowpass = null;
				        this._feedback.disconnect();
				        this._feedback = null;
				        return this;
				    };
				    return Tone.LowpassCombFilter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Merge brings two signals into the left and right 
					 *          channels of a single stereo channel.
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @example
					 * var merge = new Tone.Merge().toMaster();
					 * //routing a sine tone in the left channel
					 * //and noise in the right channel
					 * var osc = new Tone.Oscillator().connect(merge.left);
					 * var noise = new Tone.Noise().connect(merge.right);
					 * //starting our oscillators
					 * noise.start();
					 * osc.start();
					 */
				    Tone.Merge = function () {
				        this.createInsOuts(2, 0);
				        /**
						 *  The left input channel.
						 *  Alias for <code>input[0]</code>
						 *  @type {GainNode}
						 */
				        this.left = this.input[0] = new Tone.Gain();
				        /**
						 *  The right input channel.
						 *  Alias for <code>input[1]</code>.
						 *  @type {GainNode}
						 */
				        this.right = this.input[1] = new Tone.Gain();
				        /**
						 *  the merger node for the two channels
						 *  @type {ChannelMergerNode}
						 *  @private
						 */
				        this._merger = this.output = this.context.createChannelMerger(2);
				        //connections
				        this.left.connect(this._merger, 0, 0);
				        this.right.connect(this._merger, 0, 1);
				        this.left.channelCount = 1;
				        this.right.channelCount = 1;
				        this.left.channelCountMode = 'explicit';
				        this.right.channelCountMode = 'explicit';
				    };
				    Tone.extend(Tone.Merge);
				    /**
					 *  Clean up.
					 *  @returns {Tone.Merge} this
					 */
				    Tone.Merge.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this.left.dispose();
				        this.left = null;
				        this.right.dispose();
				        this.right = null;
				        this._merger.disconnect();
				        this._merger = null;
				        return this;
				    };
				    return Tone.Merge;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
					 *          of an input signal with some averaging applied. It can also get the raw 
					 *          value of the input signal.
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {String} type Either "level" or "signal". 
					 *  @param {Number} smoothing The amount of smoothing applied between frames.
					 *  @example
					 * var meter = new Tone.Meter();
					 * var mic = new Tone.Microphone().start();
					 * //connect mic to the meter
					 * mic.connect(meter);
					 * //the current level of the mic input
					 * var level = meter.value;
					 */
				    Tone.Meter = function () {
				        var options = this.optionsObject(arguments, [
				            'type',
				            'smoothing'
				        ], Tone.Meter.defaults);
				        /**
						 *  The type of the meter, either "level" or "signal". 
						 *  A "level" meter will return the volume level (rms) of the 
						 *  input signal and a "signal" meter will return
						 *  the signal value of the input. 
						 *  @type  {String}
						 */
				        this.type = options.type;
				        /**
						 *  The analyser node which computes the levels.
						 *  @private
						 *  @type  {Tone.Analyser}
						 */
				        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);
				        this._analyser.returnType = 'float';
				        /**
						 *  The amount of carryover between the current and last frame. 
						 *  Only applied meter for "level" type.
						 *  @type  {Number}
						 */
				        this.smoothing = options.smoothing;
				        /**
						 *  The last computed value
						 *  @type {Number}
						 *  @private
						 */
				        this._lastValue = 0;
				    };
				    Tone.extend(Tone.Meter);
				    /**
					 *  @private
					 *  @enum {String}
					 */
				    Tone.Meter.Type = {
				        Level: 'level',
				        Signal: 'signal'
				    };
				    /**
					 *  The defaults
					 *  @type {Object}
					 *  @static
					 *  @const
					 */
				    Tone.Meter.defaults = {
				        'smoothing': 0.8,
				        'type': Tone.Meter.Type.Level
				    };
				    /**
					 * The current value of the meter. A value of 1 is
					 * "unity".
					 * @memberOf Tone.Meter#
					 * @type {Number}
					 * @name value
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Meter.prototype, 'value', {
				        get: function () {
				            var signal = this._analyser.analyse();
				            if (this.type === Tone.Meter.Type.Level) {
				                //rms
				                var sum = 0;
				                for (var i = 0; i < signal.length; i++) {
				                    sum += Math.pow(signal[i], 2);
				                }
				                var rms = Math.sqrt(sum / signal.length);
				                //smooth it
				                rms = Math.max(rms, this._lastValue * this.smoothing);
				                this._lastValue = rms;
				                //scale it
				                var unity = 0.35;
				                var val = rms / unity;
				                //scale the output curve
				                return Math.sqrt(val);
				            } else {
				                return signal[0];
				            }
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.Meter} this
					 */
				    Tone.Meter.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._analyser.dispose();
				        this._analyser = null;
				        return this;
				    };
				    return Tone.Meter;
				});
				Module(function (Tone) {
				    
				    /**
					 *	@class  Tone.Split splits an incoming signal into left and right channels.
					 *	
					 *  @constructor
					 *  @extends {Tone}
					 *  @example
					 * var split = new Tone.Split();
					 * stereoSignal.connect(split);
					 */
				    Tone.Split = function () {
				        this.createInsOuts(0, 2);
				        /** 
						 *  @type {ChannelSplitterNode}
						 *  @private
						 */
				        this._splitter = this.input = this.context.createChannelSplitter(2);
				        /** 
						 *  Left channel output. 
						 *  Alias for <code>output[0]</code>
						 *  @type {Tone.Gain}
						 */
				        this.left = this.output[0] = new Tone.Gain();
				        /**
						 *  Right channel output.
						 *  Alias for <code>output[1]</code>
						 *  @type {Tone.Gain}
						 */
				        this.right = this.output[1] = new Tone.Gain();
				        //connections
				        this._splitter.connect(this.left, 0, 0);
				        this._splitter.connect(this.right, 1, 0);
				    };
				    Tone.extend(Tone.Split);
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Split} this
					 */
				    Tone.Split.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._splitter.disconnect();
				        this.left.dispose();
				        this.left = null;
				        this.right.dispose();
				        this.right = null;
				        this._splitter = null;
				        return this;
				    };
				    return Tone.Split;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Mid/Side processing separates the the 'mid' signal 
					 *         (which comes out of both the left and the right channel) 
					 *         and the 'side' (which only comes out of the the side channels). <br><br>
					 *         <code>
					 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
					 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
					 *         </code>
					 *
					 *  @extends {Tone}
					 *  @constructor
					 */
				    Tone.MidSideSplit = function () {
				        this.createInsOuts(0, 2);
				        /**
						 *  split the incoming signal into left and right channels
						 *  @type  {Tone.Split}
						 *  @private
						 */
				        this._split = this.input = new Tone.Split();
				        /**
						 *  The mid send. Connect to mid processing. Alias for
						 *  <code>output[0]</code>
						 *  @type {Tone.Expr}
						 */
				        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');
				        /**
						 *  The side output. Connect to side processing. Alias for
						 *  <code>output[1]</code>
						 *  @type {Tone.Expr}
						 */
				        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');
				        this._split.connect(this.mid, 0, 0);
				        this._split.connect(this.mid, 1, 1);
				        this._split.connect(this.side, 0, 0);
				        this._split.connect(this.side, 1, 1);
				        sqrtTwo.connect(this.mid, 0, 2);
				        sqrtTwo.connect(this.side, 0, 2);
				    };
				    Tone.extend(Tone.MidSideSplit);
				    /**
					 *  a constant signal equal to 1 / sqrt(2)
					 *  @type {Number}
					 *  @signal
					 *  @private
					 *  @static
					 */
				    var sqrtTwo = null;
				    Tone._initAudioContext(function () {
				        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.MidSideSplit} this
					 */
				    Tone.MidSideSplit.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this.mid.dispose();
				        this.mid = null;
				        this.side.dispose();
				        this.side = null;
				        this._split.dispose();
				        this._split = null;
				        return this;
				    };
				    return Tone.MidSideSplit;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Mid/Side processing separates the the 'mid' signal 
					 *         (which comes out of both the left and the right channel) 
					 *         and the 'side' (which only comes out of the the side channels). 
					 *         MidSideMerge merges the mid and side signal after they've been seperated
					 *         by Tone.MidSideSplit.<br><br>
					 *         <code>
					 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
					 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
					 *         </code>
					 *
					 *  @extends {Tone.StereoEffect}
					 *  @constructor
					 */
				    Tone.MidSideMerge = function () {
				        this.createInsOuts(2, 0);
				        /**
						 *  The mid signal input. Alias for
						 *  <code>input[0]</code>
						 *  @type  {Tone.Gain}
						 */
				        this.mid = this.input[0] = new Tone.Gain();
				        /**
						 *  recombine the mid/side into Left
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this._left = new Tone.Expr('($0 + $1) * $2');
				        /**
						 *  The side signal input. Alias for
						 *  <code>input[1]</code>
						 *  @type  {Tone.Gain}
						 */
				        this.side = this.input[1] = new Tone.Gain();
				        /**
						 *  recombine the mid/side into Right
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this._right = new Tone.Expr('($0 - $1) * $2');
				        /**
						 *  Merge the left/right signal back into a stereo signal.
						 *  @type {Tone.Merge}
						 *  @private
						 */
				        this._merge = this.output = new Tone.Merge();
				        this.mid.connect(this._left, 0, 0);
				        this.side.connect(this._left, 0, 1);
				        this.mid.connect(this._right, 0, 0);
				        this.side.connect(this._right, 0, 1);
				        this._left.connect(this._merge, 0, 0);
				        this._right.connect(this._merge, 0, 1);
				        sqrtTwo.connect(this._left, 0, 2);
				        sqrtTwo.connect(this._right, 0, 2);
				    };
				    Tone.extend(Tone.MidSideMerge);
				    /**
					 *  A constant signal equal to 1 / sqrt(2).
					 *  @type {Number}
					 *  @signal
					 *  @private
					 *  @static
					 */
				    var sqrtTwo = null;
				    Tone._initAudioContext(function () {
				        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.MidSideMerge} this
					 */
				    Tone.MidSideMerge.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this.mid.dispose();
				        this.mid = null;
				        this.side.dispose();
				        this.side = null;
				        this._left.dispose();
				        this._left = null;
				        this._right.dispose();
				        this._right = null;
				        this._merge.dispose();
				        this._merge = null;
				        return this;
				    };
				    return Tone.MidSideMerge;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.MidSideCompressor applies two different compressors to the mid
					 *         and side signal components. See Tone.MidSideSplit. 
					 *
					 *  @extends {Tone}
					 *  @param {Object} options The options that are passed to the mid and side
					 *                          compressors. 
					 *  @constructor
					 */
				    Tone.MidSideCompressor = function (options) {
				        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);
				        /**
						 *  the mid/side split
						 *  @type  {Tone.MidSideSplit}
						 *  @private
						 */
				        this._midSideSplit = this.input = new Tone.MidSideSplit();
				        /**
						 *  the mid/side recombination
						 *  @type  {Tone.MidSideMerge}
						 *  @private
						 */
				        this._midSideMerge = this.output = new Tone.MidSideMerge();
				        /**
						 *  The compressor applied to the mid signal
						 *  @type  {Tone.Compressor}
						 */
				        this.mid = new Tone.Compressor(options.mid);
				        /**
						 *  The compressor applied to the side signal
						 *  @type  {Tone.Compressor}
						 */
				        this.side = new Tone.Compressor(options.side);
				        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);
				        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);
				        this._readOnly([
				            'mid',
				            'side'
				        ]);
				    };
				    Tone.extend(Tone.MidSideCompressor);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.MidSideCompressor.defaults = {
				        'mid': {
				            'ratio': 3,
				            'threshold': -24,
				            'release': 0.03,
				            'attack': 0.02,
				            'knee': 16
				        },
				        'side': {
				            'ratio': 6,
				            'threshold': -30,
				            'release': 0.25,
				            'attack': 0.03,
				            'knee': 10
				        }
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.MidSideCompressor} this
					 */
				    Tone.MidSideCompressor.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'mid',
				            'side'
				        ]);
				        this.mid.dispose();
				        this.mid = null;
				        this.side.dispose();
				        this.side = null;
				        this._midSideSplit.dispose();
				        this._midSideSplit = null;
				        this._midSideMerge.dispose();
				        this._midSideMerge = null;
				        return this;
				    };
				    return Tone.MidSideCompressor;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
					 *         where both left and right channels have the same value. This can be useful 
					 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
					 *
					 *  @extends {Tone}
					 *  @constructor
					 */
				    Tone.Mono = function () {
				        this.createInsOuts(1, 0);
				        /**
						 *  merge the signal
						 *  @type {Tone.Merge}
						 *  @private
						 */
				        this._merge = this.output = new Tone.Merge();
				        this.input.connect(this._merge, 0, 0);
				        this.input.connect(this._merge, 0, 1);
				        this.input.gain.value = this.dbToGain(-10);
				    };
				    Tone.extend(Tone.Mono);
				    /**
					 *  clean up
					 *  @returns {Tone.Mono} this
					 */
				    Tone.Mono.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._merge.dispose();
				        this._merge = null;
				        return this;
				    };
				    return Tone.Mono;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A compressor with seperate controls over low/mid/high dynamics
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {Object} options The low/mid/high compressor settings.
					 *  @example
					 *  var multiband = new Tone.MultibandCompressor({
					 *  	"lowFrequency" : 200,
					 *  	"highFrequency" : 1300
					 *  	"low" : {
					 *  		"threshold" : -12
					 *  	}
					 *  })
					 */
				    Tone.MultibandCompressor = function (options) {
				        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);
				        /**
						 *  split the incoming signal into high/mid/low
						 *  @type {Tone.MultibandSplit}
						 *  @private
						 */
				        this._splitter = this.input = new Tone.MultibandSplit({
				            'lowFrequency': options.lowFrequency,
				            'highFrequency': options.highFrequency
				        });
				        /**
						 *  low/mid crossover frequency.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.lowFrequency = this._splitter.lowFrequency;
				        /**
						 *  mid/high crossover frequency.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.highFrequency = this._splitter.highFrequency;
				        /**
						 *  the output
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this.output = new Tone.Gain();
				        /**
						 *  The compressor applied to the low frequencies.
						 *  @type {Tone.Compressor}
						 */
				        this.low = new Tone.Compressor(options.low);
				        /**
						 *  The compressor applied to the mid frequencies.
						 *  @type {Tone.Compressor}
						 */
				        this.mid = new Tone.Compressor(options.mid);
				        /**
						 *  The compressor applied to the high frequencies.
						 *  @type {Tone.Compressor}
						 */
				        this.high = new Tone.Compressor(options.high);
				        //connect the compressor
				        this._splitter.low.chain(this.low, this.output);
				        this._splitter.mid.chain(this.mid, this.output);
				        this._splitter.high.chain(this.high, this.output);
				        this._readOnly([
				            'high',
				            'mid',
				            'low',
				            'highFrequency',
				            'lowFrequency'
				        ]);
				    };
				    Tone.extend(Tone.MultibandCompressor);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.MultibandCompressor.defaults = {
				        'low': Tone.Compressor.defaults,
				        'mid': Tone.Compressor.defaults,
				        'high': Tone.Compressor.defaults,
				        'lowFrequency': 250,
				        'highFrequency': 2000
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.MultibandCompressor} this
					 */
				    Tone.MultibandCompressor.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._splitter.dispose();
				        this._writable([
				            'high',
				            'mid',
				            'low',
				            'highFrequency',
				            'lowFrequency'
				        ]);
				        this.low.dispose();
				        this.mid.dispose();
				        this.high.dispose();
				        this._splitter = null;
				        this.low = null;
				        this.mid = null;
				        this.high = null;
				        this.lowFrequency = null;
				        this.highFrequency = null;
				        return this;
				    };
				    return Tone.MultibandCompressor;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
					 *          support 3D. Panner uses the StereoPannerNode when available. 
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)
					 *  @example
					 *  //pan the input signal hard right. 
					 *  var panner = new Tone.Panner(1);
					 */
				    Tone.Panner = function (initialPan) {
				        if (this._hasStereoPanner) {
				            /**
							 *  the panner node
							 *  @type {StereoPannerNode}
							 *  @private
							 */
				            this._panner = this.input = this.output = this.context.createStereoPanner();
				            /**
							 *  The pan control. -1 = hard left, 1 = hard right. 
							 *  @type {NormalRange}
							 *  @signal
							 */
				            this.pan = this._panner.pan;
				        } else {
				            /**
							 *  the dry/wet knob
							 *  @type {Tone.CrossFade}
							 *  @private
							 */
				            this._crossFade = new Tone.CrossFade();
				            /**
							 *  @type {Tone.Merge}
							 *  @private
							 */
				            this._merger = this.output = new Tone.Merge();
				            /**
							 *  @type {Tone.Split}
							 *  @private
							 */
				            this._splitter = this.input = new Tone.Split();
				            /**
							 *  The pan control. -1 = hard left, 1 = hard right. 
							 *  @type {AudioRange}
							 *  @signal
							 */
				            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);
				            /**
							 *  always sends 0
							 *  @type {Tone.Zero}
							 *  @private
							 */
				            this._zero = new Tone.Zero();
				            /**
							 *  The analog to gain conversion
							 *  @type  {Tone.AudioToGain}
							 *  @private
							 */
				            this._a2g = new Tone.AudioToGain();
				            //CONNECTIONS:
				            this._zero.connect(this._a2g);
				            this.pan.chain(this._a2g, this._crossFade.fade);
				            //left channel is a, right channel is b
				            this._splitter.connect(this._crossFade, 0, 0);
				            this._splitter.connect(this._crossFade, 1, 1);
				            //merge it back together
				            this._crossFade.a.connect(this._merger, 0, 0);
				            this._crossFade.b.connect(this._merger, 0, 1);
				        }
				        //initial value
				        this.pan.value = this.defaultArg(initialPan, 0);
				        this._readOnly('pan');
				    };
				    Tone.extend(Tone.Panner);
				    /**
					 *  indicates if the panner is using the new StereoPannerNode internally
					 *  @type  {boolean}
					 *  @private
					 */
				    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);
				    /**
					 *  Clean up.
					 *  @returns {Tone.Panner} this
					 */
				    Tone.Panner.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable('pan');
				        if (this._hasStereoPanner) {
				            this._panner.disconnect();
				            this._panner = null;
				            this.pan = null;
				        } else {
				            this._zero.dispose();
				            this._zero = null;
				            this._crossFade.dispose();
				            this._crossFade = null;
				            this._splitter.dispose();
				            this._splitter = null;
				            this._merger.dispose();
				            this._merger = null;
				            this.pan.dispose();
				            this.pan = null;
				            this._a2g.dispose();
				            this._a2g = null;
				        }
				        return this;
				    };
				    return Tone.Panner;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
					 *          Tries to normalize the API across various browsers. See Tone.Listener
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {Number} positionX The initial x position.
					 *  @param {Number} positionY The initial y position.
					 *  @param {Number} positionZ The initial z position.
					 */
				    Tone.Panner3D = function () {
				        var options = this.optionsObject(arguments, [
				            'positionX',
				            'positionY',
				            'positionZ'
				        ], Tone.Panner3D.defaults);
				        /**
						 *  The panner node
						 *  @type {PannerNode}
						 *  @private
						 */
				        this._panner = this.input = this.output = this.context.createPanner();
				        //set some values
				        this._panner.panningModel = options.panningModel;
				        this._panner.maxDistance = options.maxDistance;
				        this._panner.distanceModel = options.distanceModel;
				        this._panner.coneOuterGain = options.coneOuterGain;
				        this._panner.coneOuterAngle = options.coneOuterAngle;
				        this._panner.coneInnerAngle = options.coneInnerAngle;
				        this._panner.refDistance = options.refDistance;
				        this._panner.rolloffFactor = options.rolloffFactor;
				        /**
						 *  Holds the current orientation
						 *  @type  {Array}
						 *  @private
						 */
				        this._orientation = [
				            options.orientationX,
				            options.orientationY,
				            options.orientationZ
				        ];
				        /**
						 *  Holds the current position
						 *  @type  {Array}
						 *  @private
						 */
				        this._position = [
				            options.positionX,
				            options.positionY,
				            options.positionZ
				        ];
				        // set the default position/orientation
				        this.orientationX = options.orientationX;
				        this.orientationY = options.orientationY;
				        this.orientationZ = options.orientationZ;
				        this.positionX = options.positionX;
				        this.positionY = options.positionY;
				        this.positionZ = options.positionZ;
				    };
				    Tone.extend(Tone.Panner3D);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 *  Defaults according to the specification
					 */
				    Tone.Panner3D.defaults = {
				        'positionX': 0,
				        'positionY': 0,
				        'positionZ': 0,
				        'orientationX': 0,
				        'orientationY': 0,
				        'orientationZ': 0,
				        'panningModel': 'equalpower',
				        'maxDistance': 10000,
				        'distanceModel': 'inverse',
				        'coneOuterGain': 0,
				        'coneOuterAngle': 360,
				        'coneInnerAngle': 360,
				        'refDistance': 1,
				        'rolloffFactor': 1
				    };
				    Tone.Panner3D.prototype._rampTimeConstant = 0.3;
				    /**
					 *  Sets the position of the source in 3d space.	
					 *  @param  {Number}  x
					 *  @param  {Number}  y
					 *  @param  {Number}  z
					 *  @return {Tone.Panner3D} this
					 */
				    Tone.Panner3D.prototype.setPosition = function (x, y, z) {
				        if (this._panner.positionX) {
				            var now = this.now();
				            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
				            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
				            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
				        } else {
				            this._panner.setPosition(x, y, z);
				        }
				        this._position = Array.prototype.slice.call(arguments);
				        return this;
				    };
				    /**
					 *  Sets the orientation of the source in 3d space.	
					 *  @param  {Number}  x
					 *  @param  {Number}  y
					 *  @param  {Number}  z
					 *  @return {Tone.Panner3D} this
					 */
				    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {
				        if (this._panner.orientationX) {
				            var now = this.now();
				            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);
				            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);
				            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);
				        } else {
				            this._panner.setOrientation(x, y, z);
				        }
				        this._orientation = Array.prototype.slice.call(arguments);
				        return this;
				    };
				    /**
					 *  The x position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name positionX
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {
				        set: function (pos) {
				            this._position[0] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[0];
				        }
				    });
				    /**
					 *  The y position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name positionY
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {
				        set: function (pos) {
				            this._position[1] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[1];
				        }
				    });
				    /**
					 *  The z position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name positionZ
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {
				        set: function (pos) {
				            this._position[2] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[2];
				        }
				    });
				    /**
					 *  The x orientation of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name orientationX
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {
				        set: function (pos) {
				            this._orientation[0] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[0];
				        }
				    });
				    /**
					 *  The y orientation of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name orientationY
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {
				        set: function (pos) {
				            this._orientation[1] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[1];
				        }
				    });
				    /**
					 *  The z orientation of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name orientationZ
					 */
				    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {
				        set: function (pos) {
				            this._orientation[2] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[2];
				        }
				    });
				    /**
					 *  Proxy a property on the panner to an exposed public propery
					 *  @param  {String}  prop
					 *  @private
					 */
				    Tone.Panner3D._aliasProperty = function (prop) {
				        Object.defineProperty(Tone.Panner3D.prototype, prop, {
				            set: function (val) {
				                this._panner[prop] = val;
				            },
				            get: function () {
				                return this._panner[prop];
				            }
				        });
				    };
				    /**
					 *  The panning model. Either "equalpower" or "HRTF".
					 *  @type {String}
					 *  @memberOf Tone.Panner3D#
					 *  @name panningModel
					 */
				    Tone.Panner3D._aliasProperty('panningModel');
				    /**
					 *  A reference distance for reducing volume as source move further from the listener
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name refDistance
					 */
				    Tone.Panner3D._aliasProperty('refDistance');
				    /**
					 *  Describes how quickly the volume is reduced as source moves away from listener.
					 *  @type {Number}
					 *  @memberOf Tone.Panner3D#
					 *  @name rolloffFactor
					 */
				    Tone.Panner3D._aliasProperty('rolloffFactor');
				    /**
					 *  The distance model used by,  "linear", "inverse", or "exponential".
					 *  @type {String}
					 *  @memberOf Tone.Panner3D#
					 *  @name distanceModel
					 */
				    Tone.Panner3D._aliasProperty('distanceModel');
				    /**
					 *  The angle, in degrees, inside of which there will be no volume reduction
					 *  @type {Degrees}
					 *  @memberOf Tone.Panner3D#
					 *  @name coneInnerAngle
					 */
				    Tone.Panner3D._aliasProperty('coneInnerAngle');
				    /**
					 *  The angle, in degrees, outside of which the volume will be reduced 
					 *  to a constant value of coneOuterGain
					 *  @type {Degrees}
					 *  @memberOf Tone.Panner3D#
					 *  @name coneOuterAngle
					 */
				    Tone.Panner3D._aliasProperty('coneOuterAngle');
				    /**
					 *  The gain outside of the coneOuterAngle
					 *  @type {Gain}
					 *  @memberOf Tone.Panner3D#
					 *  @name coneOuterGain
					 */
				    Tone.Panner3D._aliasProperty('coneOuterGain');
				    /**
					 *  The maximum distance between source and listener, 
					 *  after which the volume will not be reduced any further.
					 *  @type {Positive}
					 *  @memberOf Tone.Panner3D#
					 *  @name maxDistance
					 */
				    Tone.Panner3D._aliasProperty('maxDistance');
				    /**
					 *  Clean up.
					 *  @returns {Tone.Panner3D} this
					 */
				    Tone.Panner3D.prototype.dispose = function () {
				        this._panner.disconnect();
				        this._panner = null;
				        this._orientation = null;
				        this._position = null;
				        return this;
				    };
				    return Tone.Panner3D;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
					 *
					 *  @extends {Tone}
					 *  @constructor
					 *  @param {AudioRange} pan the initial pan
					 *  @param {number} volume The output volume. 
					 *  @example
					 * //pan the incoming signal left and drop the volume
					 * var panVol = new Tone.PanVol(0.25, -12);
					 */
				    Tone.PanVol = function () {
				        var options = this.optionsObject(arguments, [
				            'pan',
				            'volume'
				        ], Tone.PanVol.defaults);
				        /**
						 *  The panning node
						 *  @type {Tone.Panner}
						 *  @private
						 */
				        this._panner = this.input = new Tone.Panner(options.pan);
				        /**
						 *  The L/R panning control.
						 *  @type {AudioRange}
						 *  @signal
						 */
				        this.pan = this._panner.pan;
				        /**
						 *  The volume node
						 *  @type {Tone.Volume}
						 */
				        this._volume = this.output = new Tone.Volume(options.volume);
				        /**
						 *  The volume control in decibels. 
						 *  @type {Decibels}
						 *  @signal
						 */
				        this.volume = this._volume.volume;
				        //connections
				        this._panner.connect(this._volume);
				        this._readOnly([
				            'pan',
				            'volume'
				        ]);
				    };
				    Tone.extend(Tone.PanVol);
				    /**
					 *  The defaults
					 *  @type  {Object}
					 *  @const
					 *  @static
					 */
				    Tone.PanVol.defaults = {
				        'pan': 0.5,
				        'volume': 0
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.PanVol} this
					 */
				    Tone.PanVol.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._writable([
				            'pan',
				            'volume'
				        ]);
				        this._panner.dispose();
				        this._panner = null;
				        this.pan = null;
				        this._volume.dispose();
				        this._volume = null;
				        this.volume = null;
				        return this;
				    };
				    return Tone.PanVol;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.CtrlInterpolate will interpolate between given values based
					 *         on the "index" property. Passing in an array or object literal
					 *         will interpolate each of the parameters. Note (i.e. "C3")
					 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
					 *         assumed to be numbers. 
					 *  @example
					 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
					 * interp.index = 0.75;
					 * interp.value; //returns 1.5
					 *
					 *  @example
					 * var interp = new Tone.CtrlInterpolate([
					 * 	[2, 4, 5],
					 * 	[9, 3, 2],
					 * ]);
					 * @param {Array} values The array of values to interpolate over
					 * @param {Positive} index The initial interpolation index.
					 * @extends {Tone}
					 */
				    Tone.CtrlInterpolate = function () {
				        var options = this.optionsObject(arguments, [
				            'values',
				            'index'
				        ], Tone.CtrlInterpolate.defaults);
				        /**
						 *  The values to interpolate between
						 *  @type  {Array}
						 */
				        this.values = options.values;
				        /**
						 *  The interpolated index between values. For example: a value of 1.5
						 *  would interpolate equally between the value at index 1
						 *  and the value at index 2. 
						 *  @example
						 * interp.index = 0; 
						 * interp.value; //returns the value at 0
						 * interp.index = 0.5;
						 * interp.value; //returns the value between indices 0 and 1. 
						 *  @type  {Positive}
						 */
				        this.index = options.index;
				    };
				    Tone.extend(Tone.CtrlInterpolate);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.CtrlInterpolate.defaults = {
				        'index': 0,
				        'values': []
				    };
				    /**
					 *  The current interpolated value based on the index
					 *  @readOnly
					 *  @memberOf Tone.CtrlInterpolate#
					 *  @type {*}
					 *  @name value
					 */
				    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {
				        get: function () {
				            var index = this.index;
				            index = Math.min(index, this.values.length - 1);
				            var lowerPosition = Math.floor(index);
				            var lower = this.values[lowerPosition];
				            var upper = this.values[Math.ceil(index)];
				            return this._interpolate(index - lowerPosition, lower, upper);
				        }
				    });
				    /**
					 *  Internal interpolation routine
					 *  @param  {NormalRange}  index  The index between the lower and upper
					 *  @param  {*}  lower 
					 *  @param  {*}  upper 
					 *  @return  {*}  The interpolated value
					 *  @private
					 */
				    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {
				        if (this.isArray(lower)) {
				            var retArray = [];
				            for (var i = 0; i < lower.length; i++) {
				                retArray[i] = this._interpolate(index, lower[i], upper[i]);
				            }
				            return retArray;
				        } else if (this.isObject(lower)) {
				            var retObj = {};
				            for (var attr in lower) {
				                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);
				            }
				            return retObj;
				        } else {
				            lower = this._toNumber(lower);
				            upper = this._toNumber(upper);
				            return (1 - index) * lower + index * upper;
				        }
				    };
				    /**
					 *  Convert from the given type into a number
					 *  @param  {Number|String}  value
					 *  @return  {Number}
					 *  @private
					 */
				    Tone.CtrlInterpolate.prototype._toNumber = function (val) {
				        if (this.isNumber(val)) {
				            return val;
				        } else {
				            //otherwise assume that it's Time...
				            return this.toSeconds(val);
				        }
				    };
				    /**
					 *  Clean up
					 *  @return  {Tone.CtrlInterpolate}  this
					 */
				    Tone.CtrlInterpolate.prototype.dispose = function () {
				        this.values = null;
				    };
				    return Tone.CtrlInterpolate;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
					 *         to Tone.CtrlMarkov.next will move to the next state. If the next
					 *         state choice is an array, the next state is chosen randomly with
					 *         even probability for all of the choices. For a weighted probability
					 *         of the next choices, pass in an object with "state" and "probability" attributes. 
					 *         The probabilities will be normalized and then chosen. If no next options
					 *         are given for the current state, the state will stay there. 
					 *  @extends {Tone}
					 *  @example
					 * var chain = new Tone.CtrlMarkov({
					 * 	"beginning" : ["end", "middle"],
					 * 	"middle" : "end"
					 * });
					 * chain.value = "beginning";
					 * chain.next(); //returns "end" or "middle" with 50% probability
					 *
					 *  @example
					 * var chain = new Tone.CtrlMarkov({
					 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
					 * 					{"value" : "middle", "probability" : 0.2}],
					 * 	"middle" : "end"
					 * });
					 * chain.value = "beginning";
					 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
					 *  @param {Object} values An object with the state names as the keys
					 *                         and the next state(s) as the values. 
					 */
				    Tone.CtrlMarkov = function (values, initial) {
				        /**
						 *  The Markov values with states as the keys
						 *  and next state(s) as the values. 
						 *  @type {Object}
						 */
				        this.values = this.defaultArg(values, {});
				        /**
						 *  The current state of the Markov values. The next
						 *  state will be evaluated and returned when Tone.CtrlMarkov.next
						 *  is invoked.
						 *  @type {String}
						 */
				        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);
				    };
				    Tone.extend(Tone.CtrlMarkov);
				    /**
					 *  Returns the next state of the Markov values. 
					 *  @return  {String}
					 */
				    Tone.CtrlMarkov.prototype.next = function () {
				        if (this.values.hasOwnProperty(this.value)) {
				            var next = this.values[this.value];
				            if (this.isArray(next)) {
				                var distribution = this._getProbDistribution(next);
				                var rand = Math.random();
				                var total = 0;
				                for (var i = 0; i < distribution.length; i++) {
				                    var dist = distribution[i];
				                    if (rand > total && rand < total + dist) {
				                        var chosen = next[i];
				                        if (this.isObject(chosen)) {
				                            this.value = chosen.value;
				                        } else {
				                            this.value = chosen;
				                        }
				                    }
				                    total += dist;
				                }
				            } else {
				                this.value = next;
				            }
				        }
				        return this.value;
				    };
				    /**
					 *  Choose randomly from an array weighted options in the form 
					 *  {"state" : string, "probability" : number} or an array of values
					 *  @param  {Array}  options 
					 *  @return  {Array}  The randomly selected choice
					 *  @private
					 */
				    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {
				        var distribution = [];
				        var total = 0;
				        var needsNormalizing = false;
				        for (var i = 0; i < options.length; i++) {
				            var option = options[i];
				            if (this.isObject(option)) {
				                needsNormalizing = true;
				                distribution[i] = option.probability;
				            } else {
				                distribution[i] = 1 / options.length;
				            }
				            total += distribution[i];
				        }
				        if (needsNormalizing) {
				            //normalize the values
				            for (var j = 0; j < distribution.length; j++) {
				                distribution[j] = distribution[j] / total;
				            }
				        }
				        return distribution;
				    };
				    /**
					 *  Clean up
					 *  @return  {Tone.CtrlMarkov}  this
					 */
				    Tone.CtrlMarkov.prototype.dispose = function () {
				        this.values = null;
				    };
				    return Tone.CtrlMarkov;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Generate patterns from an array of values.
					 *         Has a number of arpeggiation and randomized
					 *         selection patterns. 
					 *           <ul>
					 *  	        <li>"up" - cycles upward</li>
					 *  			<li>"down" - cycles downward</li>
					 *  			<li>"upDown" - up then and down</li>
					 *  			<li>"downUp" - cycles down then and up</li>
					 *  			<li>"alternateUp" - jump up two and down one</li>
					 *  			<li>"alternateDown" - jump down two and up one</li>
					 *  			<li>"random" - randomly select an index</li>
					 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
					 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
					 *     		</ul>
					 *  @param  {Array}  values   An array of options to choose from.
					 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
					 *  @extends {Tone}
					 */
				    Tone.CtrlPattern = function () {
				        var options = this.optionsObject(arguments, [
				            'values',
				            'type'
				        ], Tone.CtrlPattern.defaults);
				        /**
						 *  The array of values to arpeggiate over
						 *  @type {Array}
						 */
				        this.values = options.values;
				        /**
						 *  The current position in the values array
						 *  @type  {Number}
						 */
				        this.index = 0;
				        /**
						 *  The type placeholder
						 *  @type {Tone.CtrlPattern.Type}
						 *  @private
						 */
				        this._type = null;
				        /**
						 *  Shuffled values for the RandomOnce type
						 *  @type {Array}
						 *  @private
						 */
				        this._shuffled = null;
				        /**
						 *  The direction of the movement
						 *  @type {String}
						 *  @private
						 */
				        this._direction = null;
				        this.type = options.type;
				    };
				    Tone.extend(Tone.CtrlPattern);
				    /**
					 *  The Control Patterns
					 *  @type  {Object}
					 *  @static
					 */
				    Tone.CtrlPattern.Type = {
				        Up: 'up',
				        Down: 'down',
				        UpDown: 'upDown',
				        DownUp: 'downUp',
				        AlternateUp: 'alternateUp',
				        AlternateDown: 'alternateDown',
				        Random: 'random',
				        RandomWalk: 'randomWalk',
				        RandomOnce: 'randomOnce'
				    };
				    /**
					 *  The default values. 
					 *  @type  {Object}
					 */
				    Tone.CtrlPattern.defaults = {
				        'type': Tone.CtrlPattern.Type.Up,
				        'values': []
				    };
				    /**
					 *  The value at the current index of the pattern.
					 *  @readOnly
					 *  @memberOf Tone.CtrlPattern#
					 *  @type {*}
					 *  @name value
					 */
				    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {
				        get: function () {
				            //some safeguards
				            if (this.values.length === 0) {
				                return;
				            } else if (this.values.length === 1) {
				                return this.values[0];
				            }
				            this.index = Math.min(this.index, this.values.length - 1);
				            var val = this.values[this.index];
				            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {
				                if (this.values.length !== this._shuffled.length) {
				                    this._shuffleValues();
				                }
				                val = this.values[this._shuffled[this.index]];
				            }
				            return val;
				        }
				    });
				    /**
					 *  The pattern used to select the next
					 *  item from the values array
					 *  @memberOf Tone.CtrlPattern#
					 *  @type {Tone.CtrlPattern.Type}
					 *  @name type
					 */
				    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {
				        get: function () {
				            return this._type;
				        },
				        set: function (type) {
				            this._type = type;
				            this._shuffled = null;
				            //the first index
				            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {
				                this.index = 0;
				            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
				                this.index = this.values.length - 1;
				            }
				            //the direction
				            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {
				                this._direction = Tone.CtrlPattern.Type.Up;
				            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
				                this._direction = Tone.CtrlPattern.Type.Down;
				            }
				            //randoms
				            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {
				                this._shuffleValues();
				            } else if (this._type === Tone.CtrlPattern.Random) {
				                this.index = Math.floor(Math.random() * this.values.length);
				            }
				        }
				    });
				    /**
					 *  Return the next value given the current position
					 *  and pattern.
					 *  @return {*} The next value
					 */
				    Tone.CtrlPattern.prototype.next = function () {
				        var type = this.type;
				        //choose the next index
				        if (type === Tone.CtrlPattern.Type.Up) {
				            this.index++;
				            if (this.index >= this.values.length) {
				                this.index = 0;
				            }
				        } else if (type === Tone.CtrlPattern.Type.Down) {
				            this.index--;
				            if (this.index < 0) {
				                this.index = this.values.length - 1;
				            }
				        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {
				            if (this._direction === Tone.CtrlPattern.Type.Up) {
				                this.index++;
				            } else {
				                this.index--;
				            }
				            if (this.index < 0) {
				                this.index = 1;
				                this._direction = Tone.CtrlPattern.Type.Up;
				            } else if (this.index >= this.values.length) {
				                this.index = this.values.length - 2;
				                this._direction = Tone.CtrlPattern.Type.Down;
				            }
				        } else if (type === Tone.CtrlPattern.Type.Random) {
				            this.index = Math.floor(Math.random() * this.values.length);
				        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {
				            if (Math.random() < 0.5) {
				                this.index--;
				                this.index = Math.max(this.index, 0);
				            } else {
				                this.index++;
				                this.index = Math.min(this.index, this.values.length - 1);
				            }
				        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {
				            this.index++;
				            if (this.index >= this.values.length) {
				                this.index = 0;
				                //reshuffle the values for next time
				                this._shuffleValues();
				            }
				        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {
				            if (this._direction === Tone.CtrlPattern.Type.Up) {
				                this.index += 2;
				                this._direction = Tone.CtrlPattern.Type.Down;
				            } else {
				                this.index -= 1;
				                this._direction = Tone.CtrlPattern.Type.Up;
				            }
				            if (this.index >= this.values.length) {
				                this.index = 0;
				                this._direction = Tone.CtrlPattern.Type.Up;
				            }
				        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {
				            if (this._direction === Tone.CtrlPattern.Type.Up) {
				                this.index += 1;
				                this._direction = Tone.CtrlPattern.Type.Down;
				            } else {
				                this.index -= 2;
				                this._direction = Tone.CtrlPattern.Type.Up;
				            }
				            if (this.index < 0) {
				                this.index = this.values.length - 1;
				                this._direction = Tone.CtrlPattern.Type.Down;
				            }
				        }
				        return this.value;
				    };
				    /**
					 *  Shuffles the values and places the results into the _shuffled
					 *  @private
					 */
				    Tone.CtrlPattern.prototype._shuffleValues = function () {
				        var copy = [];
				        this._shuffled = [];
				        for (var i = 0; i < this.values.length; i++) {
				            copy[i] = i;
				        }
				        while (copy.length > 0) {
				            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
				            this._shuffled.push(randVal[0]);
				        }
				    };
				    /**
					 *  Clean up
					 *  @returns {Tone.CtrlPattern} this
					 */
				    Tone.CtrlPattern.prototype.dispose = function () {
				        this._shuffled = null;
				        this.values = null;
				    };
				    return Tone.CtrlPattern;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Choose a random value.
					 *  @extends {Tone}
					 *  @example
					 * var randomWalk = new Tone.CtrlRandom({
					 * 	"min" : 0,
					 * 	"max" : 10,
					 * 	"integer" : true
					 * });
					 * randomWalk.eval();
					 *
					 *  @param {Number|Time=} min The minimum return value.
					 *  @param {Number|Time=} max The maximum return value.
					 */
				    Tone.CtrlRandom = function () {
				        var options = this.optionsObject(arguments, [
				            'min',
				            'max'
				        ], Tone.CtrlRandom.defaults);
				        /**
						 *  The minimum return value
						 *  @type  {Number|Time}
						 */
				        this.min = options.min;
				        /**
						 *  The maximum return value
						 *  @type  {Number|Time}
						 */
				        this.max = options.max;
				        /**
						 *  If the return value should be an integer
						 *  @type  {Boolean}
						 */
				        this.integer = options.integer;
				    };
				    Tone.extend(Tone.CtrlRandom);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.CtrlRandom.defaults = {
				        'min': 0,
				        'max': 1,
				        'integer': false
				    };
				    /**
					 *  Return a random value between min and max. 
					 *  @readOnly
					 *  @memberOf Tone.CtrlRandom#
					 *  @type {*}
					 *  @name value
					 */
				    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {
				        get: function () {
				            var min = this.toSeconds(this.min);
				            var max = this.toSeconds(this.max);
				            var rand = Math.random();
				            var val = rand * min + (1 - rand) * max;
				            if (this.integer) {
				                val = Math.floor(val);
				            }
				            return val;
				        }
				    });
				    return Tone.CtrlRandom;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all 
					 *          classes that make requests for audio files such as Tone.Player,
					 *          Tone.Sampler and Tone.Convolver.
					 *          <br><br>
					 *          Aside from load callbacks from individual buffers, Tone.Buffer 
					 *  		provides static methods which keep track of the loading progress 
					 *  		of all of the buffers. These methods are Tone.Buffer.on("load" / "progress" / "error")
					 *
					 *  @constructor 
					 *  @extends {Tone}
					 *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. 
					 *  @param {Function=} onload A callback which is invoked after the buffer is loaded. 
					 *                            It's recommended to use Tone.Buffer.onload instead 
					 *                            since it will give you a callback when ALL buffers are loaded.
					 *  @param {Function=} onerror The callback to invoke if there is an error
					 *  @example
					 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
					 * 	//the buffer is now available.
					 * 	var buff = buffer.get();
					 * });
					 */
				    Tone.Buffer = function () {
				        var options = this.optionsObject(arguments, [
				            'url',
				            'onload',
				            'onerror'
				        ], Tone.Buffer.defaults);
				        /**
						 *  stores the loaded AudioBuffer
						 *  @type {AudioBuffer}
						 *  @private
						 */
				        this._buffer = null;
				        /**
						 *  indicates if the buffer should be reversed or not
						 *  @type {Boolean}
						 *  @private
						 */
				        this._reversed = options.reverse;
				        /**
						 *  The XHR
						 *  @type  {XMLHttpRequest}
						 *  @private
						 */
				        this._xhr = null;
				        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {
				            this.set(options.url);
				            // invoke the onload callback
				            if (options.onload) {
				                options.onload(this);
				            }
				        } else if (this.isString(options.url)) {
				            this.load(options.url, options.onload, options.onerror);
				        }
				    };
				    Tone.extend(Tone.Buffer);
				    /**
					 *  the default parameters
					 *  @type {Object}
					 */
				    Tone.Buffer.defaults = {
				        'url': undefined,
				        'reverse': false
				    };
				    /**
					 *  Pass in an AudioBuffer or Tone.Buffer to set the value
					 *  of this buffer.
					 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
					 *  @returns {Tone.Buffer} this
					 */
				    Tone.Buffer.prototype.set = function (buffer) {
				        if (buffer instanceof Tone.Buffer) {
				            this._buffer = buffer.get();
				        } else {
				            this._buffer = buffer;
				        }
				        return this;
				    };
				    /**
					 *  @return {AudioBuffer} The audio buffer stored in the object.
					 */
				    Tone.Buffer.prototype.get = function () {
				        return this._buffer;
				    };
				    /**
					 *  Makes an xhr reqest for the selected url then decodes
					 *  the file as an audio buffer. Invokes
					 *  the callback once the audio buffer loads.
					 *  @param {String} url The url of the buffer to load.
					 *                      filetype support depends on the
					 *                      browser.
					 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
					 */
				    Tone.Buffer.prototype.load = function (url, onload, onerror) {
				        var promise = new Promise(function (load, error) {
				            this._xhr = Tone.Buffer.load(url, //success
				            function (buff) {
				                this._xhr = null;
				                this.set(buff);
				                load(this);
				                if (onload) {
				                    onload(this);
				                }
				            }.bind(this), //error
				            function (err) {
				                this._xhr = null;
				                error(err);
				                if (onerror) {
				                    onerror(err);
				                }
				            }.bind(this));
				        }.bind(this));
				        return promise;
				    };
				    /**
					 *  dispose and disconnect
					 *  @returns {Tone.Buffer} this
					 */
				    Tone.Buffer.prototype.dispose = function () {
				        Tone.Emitter.prototype.dispose.call(this);
				        this._buffer = null;
				        if (this._xhr) {
				            Tone.Buffer._currentDownloads--;
				            this._xhr.abort();
				            this._xhr = null;
				        }
				        return this;
				    };
				    /**
					 * If the buffer is loaded or not
					 * @memberOf Tone.Buffer#
					 * @type {Boolean}
					 * @name loaded
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {
				        get: function () {
				            return this.length > 0;
				        }
				    });
				    /**
					 * The duration of the buffer. 
					 * @memberOf Tone.Buffer#
					 * @type {Number}
					 * @name duration
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Buffer.prototype, 'duration', {
				        get: function () {
				            if (this._buffer) {
				                return this._buffer.duration;
				            } else {
				                return 0;
				            }
				        }
				    });
				    /**
					 * The length of the buffer in samples
					 * @memberOf Tone.Buffer#
					 * @type {Number}
					 * @name length
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Buffer.prototype, 'length', {
				        get: function () {
				            if (this._buffer) {
				                return this._buffer.length;
				            } else {
				                return 0;
				            }
				        }
				    });
				    /**
					 * The number of discrete audio channels. Returns 0 if no buffer
					 * is loaded.
					 * @memberOf Tone.Buffer#
					 * @type {Number}
					 * @name numberOfChannels
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {
				        get: function () {
				            if (this._buffer) {
				                return this._buffer.numberOfChannels;
				            } else {
				                return 0;
				            }
				        }
				    });
				    /**
					 *  Set the audio buffer from the array
					 *  @param {Float32Array} array The array to fill the audio buffer
					 *  @param {Number} [channels=1] The number of channels contained in the array. 
					 *                               If the channel is more than 1, the input array
					 *                               is expected to be a multidimensional array
					 *                               with dimensions equal to the number of channels.
					 *  @return {Tone.Buffer} this
					 */
				    Tone.Buffer.prototype.fromArray = function (array) {
				        var isMultidimensional = array[0].length > 0;
				        var channels = isMultidimensional ? array.length : 1;
				        var len = isMultidimensional ? array[0].length : array.length;
				        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);
				        if (!isMultidimensional && channels === 1) {
				            array = [array];
				        }
				        for (var c = 0; c < channels; c++) {
				            if (this.isFunction(buffer.copyToChannel)) {
				                buffer.copyToChannel(array[c], c);
				            } else {
				                var channel = buffer.getChannelData(c);
				                var channelArray = array[c];
				                for (var i = 0; i < channelArray.length; i++) {
				                    channel[i] = channelArray[i];
				                }
				            }
				        }
				        this._buffer = buffer;
				        return this;
				    };
				    /**
					 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional 
					 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
					 *  @param {Number=} channel Optionally only copy a single channel from the array.
					 *  @return {Array}
					 */
				    Tone.Buffer.prototype.toArray = function (channel) {
				        if (this.isNumber(channel)) {
				            return this._buffer.getChannelData(channel);
				        } else {
				            var ret = [];
				            for (var c = 0; c < this.numberOfChannels; c++) {
				                ret[c] = new Float32Array(this.length);
				                if (this.isFunction(this._buffer.copyFromChannel)) {
				                    this._buffer.copyFromChannel(ret[c], c);
				                } else {
				                    var channelData = this._buffer.getChannelData(c);
				                    var retArray = ret[c];
				                    for (var i = 0; i < channelData.length; i++) {
				                        retArray[i] = channelData[i];
				                    }
				                }
				            }
				            if (ret.length === 1) {
				                return ret[0];
				            } else {
				                return ret;
				            }
				        }
				    };
				    /**
					 *  Cut a subsection of the array and return a buffer of the
					 *  subsection. Does not modify the original buffer
					 *  @param {Time} start The time to start the slice
					 *  @param {Time=} end The end time to slice. If none is given
					 *                     will default to the end of the buffer
					 *  @return {Tone.Buffer} this
					 */
				    Tone.Buffer.prototype.slice = function (start, end) {
				        end = this.defaultArg(end, this.duration);
				        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));
				        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));
				        var replacement = [];
				        for (var i = 0; i < this.numberOfChannels; i++) {
				            replacement[i] = this.toArray(i).slice(startSamples, endSamples);
				        }
				        var retBuffer = new Tone.Buffer().fromArray(replacement);
				        return retBuffer;
				    };
				    /**
					 *  Reverse the buffer.
					 *  @private
					 *  @return {Tone.Buffer} this
					 */
				    Tone.Buffer.prototype._reverse = function () {
				        if (this.loaded) {
				            for (var i = 0; i < this._buffer.numberOfChannels; i++) {
				                Array.prototype.reverse.call(this._buffer.getChannelData(i));
				            }
				        }
				        return this;
				    };
				    /**
					 * Reverse the buffer.
					 * @memberOf Tone.Buffer#
					 * @type {Boolean}
					 * @name reverse
					 */
				    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {
				        get: function () {
				            return this._reversed;
				        },
				        set: function (rev) {
				            if (this._reversed !== rev) {
				                this._reversed = rev;
				                this._reverse();
				            }
				        }
				    });
				    ///////////////////////////////////////////////////////////////////////////
				    // STATIC METHODS
				    ///////////////////////////////////////////////////////////////////////////
				    //statically inherits Emitter methods
				    Tone.Emitter.mixin(Tone.Buffer);
				    /**
					 *  the static queue for all of the xhr requests
					 *  @type {Array}
					 *  @private
					 */
				    Tone.Buffer._downloadQueue = [];
				    /**
					 *  the total number of downloads
					 *  @type {Number}
					 *  @private
					 */
				    Tone.Buffer._currentDownloads = 0;
				    /**
					 *  A path which is prefixed before every url.
					 *  @type  {String}
					 *  @static
					 */
				    Tone.Buffer.baseUrl = '';
				    /**
					 *  Loads a url using XMLHttpRequest.
					 *  @param {String} url
					 *  @param {Function} onload
					 *  @param {Function} onerror
					 *  @param {Function} onprogress
					 *  @return {XMLHttpRequest}
					 */
				    Tone.Buffer.load = function (url, onload, onerror) {
				        //default
				        onload = onload || Tone.noOp;
				        function onError(e) {
				            Tone.Buffer._currentDownloads--;
				            if (onerror) {
				                onerror(e);
				            } else {
				                throw new Error(e);
				            }
				        }
				        function onProgress() {
				            //calculate the progress
				            var totalProgress = 0;
				            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {
				                totalProgress += Tone.Buffer._downloadQueue[i].progress;
				            }
				            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);
				        }
				        var request = new XMLHttpRequest();
				        request.open('GET', Tone.Buffer.baseUrl + url, true);
				        request.responseType = 'arraybuffer';
				        //start out as 0
				        request.progress = 0;
				        Tone.Buffer._currentDownloads++;
				        Tone.Buffer._downloadQueue.push(request);
				        request.addEventListener('load', function () {
				            if (request.status === 200) {
				                Tone.context.decodeAudioData(request.response, function (buff) {
				                    request.progress = 1;
				                    onProgress();
				                    onload(buff);
				                    Tone.Buffer._currentDownloads--;
				                    if (Tone.Buffer._currentDownloads === 0) {
				                        // clear the downloads
				                        Tone.Buffer._downloadQueue = [];
				                        //emit the event at the end
				                        Tone.Buffer.emit('load');
				                    }
				                }, function () {
				                    onError('Tone.Buffer: could not decode audio data: ' + url);
				                });
				            } else {
				                onError('Tone.Buffer: could not locate file: ' + url);
				            }
				        });
				        request.addEventListener('error', onError);
				        request.addEventListener('progress', function (event) {
				            if (event.lengthComputable) {
				                //only go to 95%, the last 5% is when the audio is decoded
				                request.progress = event.loaded / event.total * 0.95;
				                onProgress();
				            }
				        });
				        request.send();
				        return request;
				    };
				    /**
					 *  Checks a url's extension to see if the current browser can play that file type.
					 *  @param {String} url The url/extension to test
					 *  @return {Boolean} If the file extension can be played
					 *  @static
					 *  @example
					 * Tone.Buffer.supportsType("wav"); //returns true
					 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
					 */
				    Tone.Buffer.supportsType = function (url) {
				        var extension = url.split('.');
				        extension = extension[extension.length - 1];
				        var response = document.createElement('audio').canPlayType('audio/' + extension);
				        return response !== '';
				    };
				    return Tone.Buffer;
				});
				Module(function (Tone) {
				    /**
					 *  @class A data structure for holding multiple buffers.
					 *  
					 *  @param  {Object|Array}    urls      An object literal or array
					 *                                      of urls to load.
					 *  @param  {Function=}  callback  The callback to invoke when
					 *                                 the buffers are loaded. 
					 *  @extends {Tone}
					 *  @example
					 * //load a whole bank of piano samples
					 * var pianoSamples = new Tone.Buffers({
					 * 	"C4" : "path/to/C4.mp3"
					 * 	"C#4" : "path/to/C#4.mp3"
					 * 	"D4" : "path/to/D4.mp3"
					 * 	"D#4" : "path/to/D#4.mp3"
					 * 	...
					 * }, function(){
					 * 	//play one of the samples when they all load
					 * 	player.buffer = pianoSamples.get("C4");
					 * 	player.start();
					 * });
					 * 
					 */
				    Tone.Buffers = function (urls, onload, baseUrl) {
				        /**
						 *  All of the buffers
						 *  @type  {Object}
						 *  @private
						 */
				        this._buffers = {};
				        /**
						 *  A path which is prefixed before every url.
						 *  @type  {String}
						 */
				        this.baseUrl = this.defaultArg(baseUrl, '');
				        urls = this._flattenUrls(urls);
				        this._loadingCount = 0;
				        //add each one
				        for (var key in urls) {
				            this._loadingCount++;
				            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));
				        }
				    };
				    Tone.extend(Tone.Buffers);
				    /**
					 *  True if the buffers object has a buffer by that name.
					 *  @param  {String|Number}  name  The key or index of the 
					 *                                 buffer.
					 *  @return  {Boolean}
					 */
				    Tone.Buffers.prototype.has = function (name) {
				        return this._buffers.hasOwnProperty(name);
				    };
				    /**
					 *  Get a buffer by name. If an array was loaded, 
					 *  then use the array index.
					 *  @param  {String|Number}  name  The key or index of the 
					 *                                 buffer.
					 *  @return  {Tone.Buffer}
					 */
				    Tone.Buffers.prototype.get = function (name) {
				        if (this.has(name)) {
				            return this._buffers[name];
				        } else {
				            throw new Error('Tone.Buffers: no buffer named ' + name);
				        }
				    };
				    /**
					 *  A buffer was loaded. decrement the counter.
					 *  @param  {Function}  callback 
					 *  @private
					 */
				    Tone.Buffers.prototype._bufferLoaded = function (callback) {
				        this._loadingCount--;
				        if (this._loadingCount === 0 && callback) {
				            callback(this);
				        }
				    };
				    /**
					 * If the buffers are loaded or not
					 * @memberOf Tone.Buffers#
					 * @type {Boolean}
					 * @name loaded
					 * @readOnly
					 */
				    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {
				        get: function () {
				            var isLoaded = true;
				            for (var buffName in this._buffers) {
				                var buff = this.get(buffName);
				                isLoaded = isLoaded && buff.loaded;
				            }
				            return isLoaded;
				        }
				    });
				    /**
					 *  Add a buffer by name and url to the Buffers
					 *  @param  {String}    name      A unique name to give
					 *                                the buffer
					 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
					 *                                                 or a buffer which will be added
					 *                                                 with the given name.
					 *  @param  {Function=}  callback  The callback to invoke 
					 *                                 when the url is loaded.
					 */
				    Tone.Buffers.prototype.add = function (name, url, callback) {
				        callback = this.defaultArg(callback, Tone.noOp);
				        if (url instanceof Tone.Buffer) {
				            this._buffers[name] = url;
				            callback(this);
				        } else if (url instanceof AudioBuffer) {
				            this._buffers[name] = new Tone.Buffer(url);
				            callback(this);
				        } else if (this.isString(url)) {
				            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);
				        }
				        return this;
				    };
				    /**
					 *  Flatten an object into a single depth object. 
					 *  thanks to https://gist.github.com/penguinboy/762197
					 *  @param   {Object} ob 	
					 *  @return  {Object}    
					 *  @private
					 */
				    Tone.Buffers.prototype._flattenUrls = function (ob) {
				        var toReturn = {};
				        for (var i in ob) {
				            if (!ob.hasOwnProperty(i))
				                continue;
				            if (this.isObject(ob[i])) {
				                var flatObject = this._flattenUrls(ob[i]);
				                for (var x in flatObject) {
				                    if (!flatObject.hasOwnProperty(x))
				                        continue;
				                    toReturn[i + '.' + x] = flatObject[x];
				                }
				            } else {
				                toReturn[i] = ob[i];
				            }
				        }
				        return toReturn;
				    };
				    /**
					 *  Clean up.
					 *  @return  {Tone.Buffers} this
					 */
				    Tone.Buffers.prototype.dispose = function () {
				        for (var name in this._buffers) {
				            this._buffers[name].dispose();
				        }
				        this._buffers = null;
				        return this;
				    };
				    return Tone.Buffers;
				});
				Module(function (Tone) {
				    
				    /**
					 *  buses are another way of routing audio
					 *
					 *  augments Tone.prototype to include send and recieve
					 */
				    /**
					  *  All of the routes
					  *  
					  *  @type {Object}
					  *  @static
					  *  @private
					  */
				    var Buses = {};
				    /**
					 *  Send this signal to the channel name. 
					 *  @param  {string} channelName A named channel to send the signal to.
					 *  @param  {Decibels} amount The amount of the source to send to the bus. 
					 *  @return {GainNode} The gain node which connects this node to the desired channel. 
					 *                     Can be used to adjust the levels of the send.
					 *  @example
					 * source.send("reverb", -12);
					 */
				    Tone.prototype.send = function (channelName, amount) {
				        if (!Buses.hasOwnProperty(channelName)) {
				            Buses[channelName] = this.context.createGain();
				        }
				        amount = this.defaultArg(amount, 0);
				        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);
				        this.output.chain(sendKnob, Buses[channelName]);
				        return sendKnob;
				    };
				    /**
					 *  Recieve the input from the desired channelName to the input
					 *
					 *  @param  {string} channelName A named channel to send the signal to.
					 *  @param {AudioNode} [input] If no input is selected, the
					 *                                         input of the current node is
					 *                                         chosen. 
					 *  @returns {Tone} this
					 *  @example
					 * reverbEffect.receive("reverb");
					 */
				    Tone.prototype.receive = function (channelName, input) {
				        if (!Buses.hasOwnProperty(channelName)) {
				            Buses[channelName] = this.context.createGain();
				        }
				        if (this.isUndef(input)) {
				            input = this.input;
				        }
				        Buses[channelName].connect(input);
				        return this;
				    };
				    //remove all the send/receives when a new audio context is passed in
				    Tone._initAudioContext(function () {
				        Buses = {};
				    });
				    return Tone;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space 
					 *          using a right-handed cartesian coordinate system. 
					 *          The units used in the coordinate system are not defined; 
					 *          these coordinates are independent/invariant of any particular 
					 *          units such as meters or feet. Tone.Panner3D objects have an forward 
					 *          vector representing the direction the sound is projecting. Additionally, 
					 *          they have a sound cone representing how directional the sound is. 
					 *          For example, the sound could be omnidirectional, in which case it would 
					 *          be heard anywhere regardless of its forward, or it can be more directional 
					 *          and heard only if it is facing the listener. Tone.Listener objects 
					 *          (representing a person's ears) have an forward and up vector 
					 *          representing in which direction the person is facing. Because both the 
					 *          source stream and the listener can be moving, they both have a velocity 
					 *          vector representing both the speed and direction of movement. Taken together, 
					 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
					 *          <br><br>
					 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 *  @singleton
					 *  @param {Number} positionX The initial x position.
					 *  @param {Number} positionY The initial y position.
					 *  @param {Number} positionZ The initial z position.
					 */
				    Tone.Listener = function () {
				        var options = this.optionsObject(arguments, [
				            'positionX',
				            'positionY',
				            'positionZ'
				        ], ListenerConstructor.defaults);
				        /**
						 *  The listener node
						 *  @type {AudioListener}
						 *  @private
						 */
				        this._listener = this.context.listener;
				        /**
						 *  Holds the current forward orientation
						 *  @type  {Array}
						 *  @private
						 */
				        this._orientation = [
				            options.forwardX,
				            options.forwardY,
				            options.forwardZ,
				            options.upX,
				            options.upY,
				            options.upZ
				        ];
				        /**
						 *  Holds the current position
						 *  @type  {Array}
						 *  @private
						 */
				        this._position = [
				            options.positionX,
				            options.positionY,
				            options.positionZ
				        ];
				        // set the default position/forward
				        this.forwardX = options.forwardX;
				        this.forwardY = options.forwardY;
				        this.forwardZ = options.forwardZ;
				        this.upX = options.upX;
				        this.upY = options.upY;
				        this.upZ = options.upZ;
				        this.positionX = options.positionX;
				        this.positionY = options.positionY;
				        this.positionZ = options.positionZ;
				    };
				    Tone.extend(Tone.Listener);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 *  Defaults according to the specification
					 */
				    Tone.Listener.defaults = {
				        'positionX': 0,
				        'positionY': 0,
				        'positionZ': 0,
				        'forwardX': 0,
				        'forwardY': 0,
				        'forwardZ': 1,
				        'upX': 0,
				        'upY': 1,
				        'upZ': 0
				    };
				    Tone.Listener.prototype._rampTimeConstant = 0.3;
				    /**
					 *  Sets the position of the listener in 3d space.	
					 *  @param  {Number}  x
					 *  @param  {Number}  y
					 *  @param  {Number}  z
					 *  @return {Tone.Listener} this
					 */
				    Tone.Listener.prototype.setPosition = function (x, y, z) {
				        if (this._listener.positionX) {
				            var now = this.now();
				            this._listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
				            this._listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
				            this._listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
				        } else {
				            this._listener.setPosition(x, y, z);
				        }
				        this._position = Array.prototype.slice.call(arguments);
				        return this;
				    };
				    /**
					 *  Sets the orientation of the listener using two vectors, the forward
					 *  vector (which direction the listener is facing) and the up vector 
					 *  (which the up direction of the listener). An up vector
					 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. 
					 *  @param  {Number}  x
					 *  @param  {Number}  y
					 *  @param  {Number}  z
					 *  @param  {Number}  upX
					 *  @param  {Number}  upY
					 *  @param  {Number}  upZ
					 *  @return {Tone.Listener} this
					 */
				    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {
				        if (this._listener.forwardX) {
				            var now = this.now();
				            this._listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);
				            this._listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);
				            this._listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);
				            this._listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);
				            this._listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);
				            this._listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);
				        } else {
				            this._listener.setOrientation(x, y, z, upX, upY, upZ);
				        }
				        this._orientation = Array.prototype.slice.call(arguments);
				        return this;
				    };
				    /**
					 *  The x position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name positionX
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'positionX', {
				        set: function (pos) {
				            this._position[0] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[0];
				        }
				    });
				    /**
					 *  The y position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name positionY
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'positionY', {
				        set: function (pos) {
				            this._position[1] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[1];
				        }
				    });
				    /**
					 *  The z position of the panner object.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name positionZ
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {
				        set: function (pos) {
				            this._position[2] = pos;
				            this.setPosition.apply(this, this._position);
				        },
				        get: function () {
				            return this._position[2];
				        }
				    });
				    /**
					 *  The x coordinate of the listeners front direction. i.e. 
					 *  which way they are facing.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name forwardX
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {
				        set: function (pos) {
				            this._orientation[0] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[0];
				        }
				    });
				    /**
					 *  The y coordinate of the listeners front direction. i.e. 
					 *  which way they are facing.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name forwardY
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {
				        set: function (pos) {
				            this._orientation[1] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[1];
				        }
				    });
				    /**
					 *  The z coordinate of the listeners front direction. i.e. 
					 *  which way they are facing.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name forwardZ
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {
				        set: function (pos) {
				            this._orientation[2] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[2];
				        }
				    });
				    /**
					 *  The x coordinate of the listener's up direction. i.e.
					 *  the direction the listener is standing in.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name upX
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'upX', {
				        set: function (pos) {
				            this._orientation[3] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[3];
				        }
				    });
				    /**
					 *  The y coordinate of the listener's up direction. i.e.
					 *  the direction the listener is standing in.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name upY
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'upY', {
				        set: function (pos) {
				            this._orientation[4] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[4];
				        }
				    });
				    /**
					 *  The z coordinate of the listener's up direction. i.e.
					 *  the direction the listener is standing in.
					 *  @type {Number}
					 *  @memberOf Tone.Listener#
					 *  @name upZ
					 */
				    Object.defineProperty(Tone.Listener.prototype, 'upZ', {
				        set: function (pos) {
				            this._orientation[5] = pos;
				            this.setOrientation.apply(this, this._orientation);
				        },
				        get: function () {
				            return this._orientation[5];
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.Listener} this
					 */
				    Tone.Listener.prototype.dispose = function () {
				        this._listener.disconnect();
				        this._listener = null;
				        this._orientation = null;
				        this._position = null;
				        return this;
				    };
				    //SINGLETON SETUP
				    var ListenerConstructor = Tone.Listener;
				    Tone._initAudioContext(function () {
				        if (typeof Tone.Listener === 'function') {
				            //a single listener object
				            Tone.Listener = new Tone.Listener();
				        } else {
				            //make new Listener insides
				            ListenerConstructor.call(Tone.Listener);
				        }
				    });
				    //END SINGLETON SETUP
				    return Tone.Listener;
				});
				Module(function (Tone) {
				    
				    /**
					 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
					 * 	        the effectSend and effectReturn GainNodes, then control the amount of
					 * 	        effect which goes to the output using the wet control.
					 *
					 *  @constructor
					 *  @extends {Tone}
					 *  @param {NormalRange|Object} [wet] The starting wet value. 
					 */
				    Tone.Effect = function () {
				        this.createInsOuts(1, 1);
				        //get all of the defaults
				        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
				        /**
						 *  the drywet knob to control the amount of effect
						 *  @type {Tone.CrossFade}
						 *  @private
						 */
				        this._dryWet = new Tone.CrossFade(options.wet);
				        /**
						 *  The wet control is how much of the effected
						 *  will pass through to the output. 1 = 100% effected
						 *  signal, 0 = 100% dry signal. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.wet = this._dryWet.fade;
				        /**
						 *  connect the effectSend to the input of hte effect
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this.effectSend = new Tone.Gain();
				        /**
						 *  connect the output of the effect to the effectReturn
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this.effectReturn = new Tone.Gain();
				        //connections
				        this.input.connect(this._dryWet.a);
				        this.input.connect(this.effectSend);
				        this.effectReturn.connect(this._dryWet.b);
				        this._dryWet.connect(this.output);
				        this._readOnly(['wet']);
				    };
				    Tone.extend(Tone.Effect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Effect.defaults = { 'wet': 1 };
				    /**
					 *  chains the effect in between the effectSend and effectReturn
					 *  @param  {Tone} effect
					 *  @private
					 *  @returns {Tone.Effect} this
					 */
				    Tone.Effect.prototype.connectEffect = function (effect) {
				        this.effectSend.chain(effect, this.effectReturn);
				        return this;
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Effect} this
					 */
				    Tone.Effect.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._dryWet.dispose();
				        this._dryWet = null;
				        this.effectSend.dispose();
				        this.effectSend = null;
				        this.effectReturn.dispose();
				        this.effectReturn = null;
				        this._writable(['wet']);
				        this.wet = null;
				        return this;
				    };
				    return Tone.Effect;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
					 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
					 *         and depth.
					 *
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {Time|Object} [frequency] The rate of the LFO.
					 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
				 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
					 *  @example
					 * //create an autofilter and start it's LFO
					 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
					 * //route an oscillator through the filter and start it
					 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
					 */
				    Tone.AutoFilter = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'baseFrequency',
				            'octaves'
				        ], Tone.AutoFilter.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  the lfo which drives the filter cutoff
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfo = new Tone.LFO({
				            'frequency': options.frequency,
				            'amplitude': options.depth
				        });
				        /**
						 * The range of the filter modulating between the min and max frequency. 
						 * 0 = no modulation. 1 = full modulation.
						 * @type {NormalRange}
						 * @signal
						 */
				        this.depth = this._lfo.amplitude;
				        /**
						 * How fast the filter modulates between min and max. 
						 * @type {Frequency}
						 * @signal
						 */
				        this.frequency = this._lfo.frequency;
				        /**
						 *  The filter node
						 *  @type {Tone.Filter}
						 */
				        this.filter = new Tone.Filter(options.filter);
				        /**
						 *  The octaves placeholder
						 *  @type {Positive}
						 *  @private
						 */
				        this._octaves = 0;
				        //connections
				        this.connectEffect(this.filter);
				        this._lfo.connect(this.filter.frequency);
				        this.type = options.type;
				        this._readOnly([
				            'frequency',
				            'depth'
				        ]);
				        this.octaves = options.octaves;
				        this.baseFrequency = options.baseFrequency;
				    };
				    //extend Effect
				    Tone.extend(Tone.AutoFilter, Tone.Effect);
				    /**
					 *  defaults
					 *  @static
					 *  @type {Object}
					 */
				    Tone.AutoFilter.defaults = {
				        'frequency': 1,
				        'type': 'sine',
				        'depth': 1,
				        'baseFrequency': 200,
				        'octaves': 2.6,
				        'filter': {
				            'type': 'lowpass',
				            'rolloff': -12,
				            'Q': 1
				        }
				    };
				    /**
					 * Start the effect.
					 * @param {Time} [time=now] When the LFO will start. 
					 * @returns {Tone.AutoFilter} this
					 */
				    Tone.AutoFilter.prototype.start = function (time) {
				        this._lfo.start(time);
				        return this;
				    };
				    /**
					 * Stop the effect.
					 * @param {Time} [time=now] When the LFO will stop. 
					 * @returns {Tone.AutoFilter} this
					 */
				    Tone.AutoFilter.prototype.stop = function (time) {
				        this._lfo.stop(time);
				        return this;
				    };
				    /**
					 * Sync the filter to the transport.
					 * @param {Time} [delay=0] Delay time before starting the effect after the
					 *                               Transport has started. 
					 * @returns {Tone.AutoFilter} this
					 */
				    Tone.AutoFilter.prototype.sync = function (delay) {
				        this._lfo.sync(delay);
				        return this;
				    };
				    /**
					 * Unsync the filter from the transport.
					 * @returns {Tone.AutoFilter} this
					 */
				    Tone.AutoFilter.prototype.unsync = function () {
				        this._lfo.unsync();
				        return this;
				    };
				    /**
					 * Type of oscillator attached to the AutoFilter. 
					 * Possible values: "sine", "square", "triangle", "sawtooth".
					 * @memberOf Tone.AutoFilter#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {
				        get: function () {
				            return this._lfo.type;
				        },
				        set: function (type) {
				            this._lfo.type = type;
				        }
				    });
				    /**
					 * The minimum value of the filter's cutoff frequency.
					 * @memberOf Tone.AutoFilter#
					 * @type {Frequency}
					 * @name min
					 */
				    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {
				        get: function () {
				            return this._lfo.min;
				        },
				        set: function (freq) {
				            this._lfo.min = this.toFrequency(freq);
				            //and set the max
				            this.octaves = this._octaves;
				        }
				    });
				    /**
					 * The maximum value of the filter's cutoff frequency. 
					 * @memberOf Tone.AutoFilter#
					 * @type {Positive}
					 * @name octaves
					 */
				    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {
				        get: function () {
				            return this._octaves;
				        },
				        set: function (oct) {
				            this._octaves = oct;
				            this._lfo.max = this.baseFrequency * Math.pow(2, oct);
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.AutoFilter} this
					 */
				    Tone.AutoFilter.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._lfo.dispose();
				        this._lfo = null;
				        this.filter.dispose();
				        this.filter = null;
				        this._writable([
				            'frequency',
				            'depth'
				        ]);
				        this.frequency = null;
				        this.depth = null;
				        return this;
				    };
				    return Tone.AutoFilter;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
					 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
					 *
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
					 *  @example
					 * //create an autopanner and start it's LFO
					 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
					 * //route an oscillator through the panner and start it
					 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
					 */
				    Tone.AutoPanner = function () {
				        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  the lfo which drives the panning
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfo = new Tone.LFO({
				            'frequency': options.frequency,
				            'amplitude': options.depth,
				            'min': -1,
				            'max': 1
				        });
				        /**
						 * The amount of panning between left and right. 
						 * 0 = always center. 1 = full range between left and right. 
						 * @type {NormalRange}
						 * @signal
						 */
				        this.depth = this._lfo.amplitude;
				        /**
						 *  the panner node which does the panning
						 *  @type {Tone.Panner}
						 *  @private
						 */
				        this._panner = new Tone.Panner();
				        /**
						 * How fast the panner modulates between left and right. 
						 * @type {Frequency}
						 * @signal
						 */
				        this.frequency = this._lfo.frequency;
				        //connections
				        this.connectEffect(this._panner);
				        this._lfo.connect(this._panner.pan);
				        this.type = options.type;
				        this._readOnly([
				            'depth',
				            'frequency'
				        ]);
				    };
				    //extend Effect
				    Tone.extend(Tone.AutoPanner, Tone.Effect);
				    /**
					 *  defaults
					 *  @static
					 *  @type {Object}
					 */
				    Tone.AutoPanner.defaults = {
				        'frequency': 1,
				        'type': 'sine',
				        'depth': 1
				    };
				    /**
					 * Start the effect.
					 * @param {Time} [time=now] When the LFO will start. 
					 * @returns {Tone.AutoPanner} this
					 */
				    Tone.AutoPanner.prototype.start = function (time) {
				        this._lfo.start(time);
				        return this;
				    };
				    /**
					 * Stop the effect.
					 * @param {Time} [time=now] When the LFO will stop. 
					 * @returns {Tone.AutoPanner} this
					 */
				    Tone.AutoPanner.prototype.stop = function (time) {
				        this._lfo.stop(time);
				        return this;
				    };
				    /**
					 * Sync the panner to the transport.
					 * @param {Time} [delay=0] Delay time before starting the effect after the
					 *                               Transport has started. 
					 * @returns {Tone.AutoPanner} this
					 */
				    Tone.AutoPanner.prototype.sync = function (delay) {
				        this._lfo.sync(delay);
				        return this;
				    };
				    /**
					 * Unsync the panner from the transport
					 * @returns {Tone.AutoPanner} this
					 */
				    Tone.AutoPanner.prototype.unsync = function () {
				        this._lfo.unsync();
				        return this;
				    };
				    /**
					 * Type of oscillator attached to the AutoFilter. 
					 * Possible values: "sine", "square", "triangle", "sawtooth".
					 * @memberOf Tone.AutoFilter#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {
				        get: function () {
				            return this._lfo.type;
				        },
				        set: function (type) {
				            this._lfo.type = type;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.AutoPanner} this
					 */
				    Tone.AutoPanner.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._lfo.dispose();
				        this._lfo = null;
				        this._panner.dispose();
				        this._panner = null;
				        this._writable([
				            'depth',
				            'frequency'
				        ]);
				        this.frequency = null;
				        this.depth = null;
				        return this;
				    };
				    return Tone.AutoPanner;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
					 *          The frequency of the filter is adjusted proportionally to the 
					 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
					 *
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set 
					 *                                            to at the low point of the wah
					 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
					 *                                the filter will sweep to when fully open
					 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for 
					 *                                   the incoming signal. Normal range of -40 to 0. 
					 *  @example
					 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
					 * //initialize the synth and connect to autowah
					 * var synth = new Synth.connect(autoWah);
					 * //Q value influences the effect of the wah - default is 2
					 * autoWah.Q.value = 6;
					 * //more audible on higher notes
					 * synth.triggerAttackRelease("C4", "8n")
					 */
				    Tone.AutoWah = function () {
				        var options = this.optionsObject(arguments, [
				            'baseFrequency',
				            'octaves',
				            'sensitivity'
				        ], Tone.AutoWah.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  The envelope follower. Set the attack/release
						 *  timing to adjust how the envelope is followed. 
						 *  @type {Tone.Follower}
						 *  @private
						 */
				        this.follower = new Tone.Follower(options.follower);
				        /**
						 *  scales the follower value to the frequency domain
						 *  @type {Tone}
						 *  @private
						 */
				        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);
				        /**
						 *  @type {number}
						 *  @private
						 */
				        this._baseFrequency = options.baseFrequency;
				        /**
						 *  @type {number}
						 *  @private
						 */
				        this._octaves = options.octaves;
				        /**
						 *  the input gain to adjust the sensitivity
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._inputBoost = new Tone.Gain();
				        /**
						 *  @type {BiquadFilterNode}
						 *  @private
						 */
				        this._bandpass = new Tone.Filter({
				            'rolloff': -48,
				            'frequency': 0,
				            'Q': options.Q
				        });
				        /**
						 *  @type {Tone.Filter}
						 *  @private
						 */
				        this._peaking = new Tone.Filter(0, 'peaking');
				        this._peaking.gain.value = options.gain;
				        /**
						 * The gain of the filter.
						 * @type {Number}
						 * @signal
						 */
				        this.gain = this._peaking.gain;
				        /**
						 * The quality of the filter.
						 * @type {Positive}
						 * @signal
						 */
				        this.Q = this._bandpass.Q;
				        //the control signal path
				        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);
				        this._sweepRange.connect(this._bandpass.frequency);
				        this._sweepRange.connect(this._peaking.frequency);
				        //the filtered path
				        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);
				        //set the initial value
				        this._setSweepRange();
				        this.sensitivity = options.sensitivity;
				        this._readOnly([
				            'gain',
				            'Q'
				        ]);
				    };
				    Tone.extend(Tone.AutoWah, Tone.Effect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.AutoWah.defaults = {
				        'baseFrequency': 100,
				        'octaves': 6,
				        'sensitivity': 0,
				        'Q': 2,
				        'gain': 2,
				        'follower': {
				            'attack': 0.3,
				            'release': 0.5
				        }
				    };
				    /**
					 * The number of octaves that the filter will sweep above the 
					 * baseFrequency. 
					 * @memberOf Tone.AutoWah#
					 * @type {Number}
					 * @name octaves
					 */
				    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {
				        get: function () {
				            return this._octaves;
				        },
				        set: function (octaves) {
				            this._octaves = octaves;
				            this._setSweepRange();
				        }
				    });
				    /**
					 * The base frequency from which the sweep will start from.
					 * @memberOf Tone.AutoWah#
					 * @type {Frequency}
					 * @name baseFrequency
					 */
				    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {
				        get: function () {
				            return this._baseFrequency;
				        },
				        set: function (baseFreq) {
				            this._baseFrequency = baseFreq;
				            this._setSweepRange();
				        }
				    });
				    /**
					 * The sensitivity to control how responsive to the input signal the filter is. 
					 * @memberOf Tone.AutoWah#
					 * @type {Decibels}
					 * @name sensitivity
					 */
				    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {
				        get: function () {
				            return this.gainToDb(1 / this._inputBoost.gain.value);
				        },
				        set: function (sensitivy) {
				            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);
				        }
				    });
				    /**
					 *  sets the sweep range of the scaler
					 *  @private
					 */
				    Tone.AutoWah.prototype._setSweepRange = function () {
				        this._sweepRange.min = this._baseFrequency;
				        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.AutoWah} this
					 */
				    Tone.AutoWah.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this.follower.dispose();
				        this.follower = null;
				        this._sweepRange.dispose();
				        this._sweepRange = null;
				        this._bandpass.dispose();
				        this._bandpass = null;
				        this._peaking.dispose();
				        this._peaking = null;
				        this._inputBoost.dispose();
				        this._inputBoost = null;
				        this._writable([
				            'gain',
				            'Q'
				        ]);
				        this.gain = null;
				        this.Q = null;
				        return this;
				    };
				    return Tone.AutoWah;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. 
					 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
					 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
					 *
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
					 *                       of 1 to 8. 
					 *  @example
					 * //initialize crusher and route a synth through it
					 * var crusher = new Tone.BitCrusher(4).toMaster();
					 * var synth = new Tone.MonoSynth().connect(crusher);
					 */
				    Tone.BitCrusher = function () {
				        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);
				        Tone.Effect.call(this, options);
				        var invStepSize = 1 / Math.pow(2, options.bits - 1);
				        /**
						 *  Subtract the input signal and the modulus of the input signal
						 *  @type {Tone.Subtract}
						 *  @private
						 */
				        this._subtract = new Tone.Subtract();
				        /**
						 *  The mod function
						 *  @type  {Tone.Modulo}
						 *  @private
						 */
				        this._modulo = new Tone.Modulo(invStepSize);
				        /**
						 *  keeps track of the bits
						 *  @type {number}
						 *  @private
						 */
				        this._bits = options.bits;
				        //connect it up
				        this.effectSend.fan(this._subtract, this._modulo);
				        this._modulo.connect(this._subtract, 0, 1);
				        this._subtract.connect(this.effectReturn);
				    };
				    Tone.extend(Tone.BitCrusher, Tone.Effect);
				    /**
					 *  the default values
					 *  @static
					 *  @type {Object}
					 */
				    Tone.BitCrusher.defaults = { 'bits': 4 };
				    /**
					 * The bit depth of the effect. Nominal range of 1-8. 
					 * @memberOf Tone.BitCrusher#
					 * @type {number}
					 * @name bits
					 */
				    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {
				        get: function () {
				            return this._bits;
				        },
				        set: function (bits) {
				            this._bits = bits;
				            var invStepSize = 1 / Math.pow(2, bits - 1);
				            this._modulo.value = invStepSize;
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.BitCrusher} this
					 */
				    Tone.BitCrusher.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._subtract.dispose();
				        this._subtract = null;
				        this._modulo.dispose();
				        this._modulo = null;
				        return this;
				    };
				    return Tone.BitCrusher;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
					 *         for making different types of distortion sounds.
					 *         Note that odd orders sound very different from even ones, 
					 *         and order = 1 is no change. 
					 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
					 *
					 *  @extends {Tone.Effect}
					 *  @constructor
					 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
					 *  @example
					 * //create a new cheby
					 * var cheby = new Tone.Chebyshev(50);
					 * //create a monosynth connected to our cheby
					 * synth = new Tone.MonoSynth().connect(cheby);
					 */
				    Tone.Chebyshev = function () {
				        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._shaper = new Tone.WaveShaper(4096);
				        /**
						 * holds onto the order of the filter
						 * @type {number}
						 * @private
						 */
				        this._order = options.order;
				        this.connectEffect(this._shaper);
				        this.order = options.order;
				        this.oversample = options.oversample;
				    };
				    Tone.extend(Tone.Chebyshev, Tone.Effect);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Chebyshev.defaults = {
				        'order': 1,
				        'oversample': 'none'
				    };
				    /**
					 *  get the coefficient for that degree
					 *  @param {number} x the x value
					 *  @param   {number} degree 
					 *  @param {Object} memo memoize the computed value. 
					 *                       this speeds up computation greatly. 
					 *  @return  {number}       the coefficient 
					 *  @private
					 */
				    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {
				        if (memo.hasOwnProperty(degree)) {
				            return memo[degree];
				        } else if (degree === 0) {
				            memo[degree] = 0;
				        } else if (degree === 1) {
				            memo[degree] = x;
				        } else {
				            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);
				        }
				        return memo[degree];
				    };
				    /**
					 * The order of the Chebyshev polynomial which creates
					 * the equation which is applied to the incoming 
					 * signal through a Tone.WaveShaper. The equations
					 * are in the form:<br>
					 * order 2: 2x^2 + 1<br>
					 * order 3: 4x^3 + 3x <br>
					 * @memberOf Tone.Chebyshev#
					 * @type {Positive}
					 * @name order
					 */
				    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {
				        get: function () {
				            return this._order;
				        },
				        set: function (order) {
				            this._order = order;
				            var curve = new Array(4096);
				            var len = curve.length;
				            for (var i = 0; i < len; ++i) {
				                var x = i * 2 / len - 1;
				                if (x === 0) {
				                    //should output 0 when input is 0
				                    curve[i] = 0;
				                } else {
				                    curve[i] = this._getCoefficient(x, order, {});
				                }
				            }
				            this._shaper.curve = curve;
				        }
				    });
				    /**
					 * The oversampling of the effect. Can either be "none", "2x" or "4x".
					 * @memberOf Tone.Chebyshev#
					 * @type {string}
					 * @name oversample
					 */
				    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {
				        get: function () {
				            return this._shaper.oversample;
				        },
				        set: function (oversampling) {
				            this._shaper.oversample = oversampling;
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Chebyshev} this
					 */
				    Tone.Chebyshev.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._shaper.dispose();
				        this._shaper = null;
				        return this;
				    };
				    return Tone.Chebyshev;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. 
					 *
					 *	@constructor
					 *	@extends {Tone.Effect}
					 */
				    Tone.StereoEffect = function () {
				        this.createInsOuts(1, 1);
				        //get the defaults
				        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
				        /**
						 *  the drywet knob to control the amount of effect
						 *  @type {Tone.CrossFade}
						 *  @private
						 */
				        this._dryWet = new Tone.CrossFade(options.wet);
				        /**
						 *  The wet control, i.e. how much of the effected
						 *  will pass through to the output. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.wet = this._dryWet.fade;
				        /**
						 *  then split it
						 *  @type {Tone.Split}
						 *  @private
						 */
				        this._split = new Tone.Split();
				        /**
						 *  the effects send LEFT
						 *  @type {GainNode}
						 *  @private
						 */
				        this.effectSendL = this._split.left;
				        /**
						 *  the effects send RIGHT
						 *  @type {GainNode}
						 *  @private
						 */
				        this.effectSendR = this._split.right;
				        /**
						 *  the stereo effect merger
						 *  @type {Tone.Merge}
						 *  @private
						 */
				        this._merge = new Tone.Merge();
				        /**
						 *  the effect return LEFT
						 *  @type {GainNode}
						 *  @private
						 */
				        this.effectReturnL = this._merge.left;
				        /**
						 *  the effect return RIGHT
						 *  @type {GainNode}
						 *  @private
						 */
				        this.effectReturnR = this._merge.right;
				        //connections
				        this.input.connect(this._split);
				        //dry wet connections
				        this.input.connect(this._dryWet, 0, 0);
				        this._merge.connect(this._dryWet, 0, 1);
				        this._dryWet.connect(this.output);
				        this._readOnly(['wet']);
				    };
				    Tone.extend(Tone.StereoEffect, Tone.Effect);
				    /**
					 *  Clean up. 
					 *  @returns {Tone.StereoEffect} this
					 */
				    Tone.StereoEffect.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._dryWet.dispose();
				        this._dryWet = null;
				        this._split.dispose();
				        this._split = null;
				        this._merge.dispose();
				        this._merge = null;
				        this.effectSendL = null;
				        this.effectSendR = null;
				        this.effectReturnL = null;
				        this.effectReturnR = null;
				        this._writable(['wet']);
				        this.wet = null;
				        return this;
				    };
				    return Tone.StereoEffect;
				});
				Module(function (Tone) {
				    
				    /**
					 * 	@class  Tone.FeedbackEffect provides a loop between an 
					 * 	        audio source and its own output. This is a base-class
					 * 	        for feedback effects. 
					 *
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {NormalRange|Object} [feedback] The initial feedback value.
					 */
				    Tone.FeedbackEffect = function () {
				        var options = this.optionsObject(arguments, ['feedback']);
				        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  the gain which controls the feedback
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);
				        /**
						 *  The amount of signal which is fed back into the effect input. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.feedback = this._feedbackGain.gain;
				        //the feedback loop
				        this.effectReturn.chain(this._feedbackGain, this.effectSend);
				        this._readOnly(['feedback']);
				    };
				    Tone.extend(Tone.FeedbackEffect, Tone.Effect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.FeedbackEffect} this
					 */
				    Tone.FeedbackEffect.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._writable(['feedback']);
				        this._feedbackGain.dispose();
				        this._feedbackGain = null;
				        this.feedback = null;
				        return this;
				    };
				    return Tone.FeedbackEffect;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
					 *         and right to left instead of on the same channel.
					 *
					 *	@constructor
					 *	@extends {Tone.FeedbackEffect}
					 */
				    Tone.StereoXFeedbackEffect = function () {
				        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  The amount of feedback from the output
						 *  back into the input of the effect (routed
						 *  across left and right channels).
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
				        /**
						 *  the left side feeback
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedbackLR = new Tone.Gain();
				        /**
						 *  the right side feeback
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedbackRL = new Tone.Gain();
				        //connect it up
				        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);
				        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);
				        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);
				        this._readOnly(['feedback']);
				    };
				    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);
				    /**
					 *  clean up
					 *  @returns {Tone.StereoXFeedbackEffect} this
					 */
				    Tone.StereoXFeedbackEffect.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        this._writable(['feedback']);
				        this.feedback.dispose();
				        this.feedback = null;
				        this._feedbackLR.dispose();
				        this._feedbackLR = null;
				        this._feedbackRL.dispose();
				        this._feedbackRL = null;
				        return this;
				    };
				    return Tone.StereoXFeedbackEffect;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Chorus is a stereo chorus effect with feedback composed of 
					 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. 
					 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
					 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
					 *
					 *	@constructor
					 *	@extends {Tone.StereoXFeedbackEffect}
					 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
					 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. 
					 *	@param {NormalRange} [depth] The depth of the chorus.
					 *	@example
					 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
					 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
					 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
					 */
				    Tone.Chorus = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'delayTime',
				            'depth'
				        ], Tone.Chorus.defaults);
				        Tone.StereoXFeedbackEffect.call(this, options);
				        /**
						 *  the depth of the chorus
						 *  @type {number}
						 *  @private
						 */
				        this._depth = options.depth;
				        /**
						 *  the delayTime
						 *  @type {number}
						 *  @private
						 */
				        this._delayTime = options.delayTime / 1000;
				        /**
						 *  the lfo which controls the delayTime
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfoL = new Tone.LFO({
				            'frequency': options.frequency,
				            'min': 0,
				            'max': 1
				        });
				        /**
						 *  another LFO for the right side with a 180 degree phase diff
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfoR = new Tone.LFO({
				            'frequency': options.frequency,
				            'min': 0,
				            'max': 1,
				            'phase': 180
				        });
				        /**
						 *  delay for left
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._delayNodeL = new Tone.Delay();
				        /**
						 *  delay for right
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._delayNodeR = new Tone.Delay();
				        /**
						 * The frequency of the LFO which modulates the delayTime. 
						 * @type {Frequency}
						 * @signal
						 */
				        this.frequency = this._lfoL.frequency;
				        //connections
				        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);
				        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);
				        //and pass through to make the detune apparent
				        this.effectSendL.connect(this.effectReturnL);
				        this.effectSendR.connect(this.effectReturnR);
				        //lfo setup
				        this._lfoL.connect(this._delayNodeL.delayTime);
				        this._lfoR.connect(this._delayNodeR.delayTime);
				        //start the lfo
				        this._lfoL.start();
				        this._lfoR.start();
				        //have one LFO frequency control the other
				        this._lfoL.frequency.connect(this._lfoR.frequency);
				        //set the initial values
				        this.depth = this._depth;
				        this.frequency.value = options.frequency;
				        this.type = options.type;
				        this._readOnly(['frequency']);
				        this.spread = options.spread;
				    };
				    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Chorus.defaults = {
				        'frequency': 1.5,
				        'delayTime': 3.5,
				        'depth': 0.7,
				        'feedback': 0.1,
				        'type': 'sine',
				        'spread': 180
				    };
				    /**
					 * The depth of the effect. A depth of 1 makes the delayTime
					 * modulate between 0 and 2*delayTime (centered around the delayTime). 
					 * @memberOf Tone.Chorus#
					 * @type {NormalRange}
					 * @name depth
					 */
				    Object.defineProperty(Tone.Chorus.prototype, 'depth', {
				        get: function () {
				            return this._depth;
				        },
				        set: function (depth) {
				            this._depth = depth;
				            var deviation = this._delayTime * depth;
				            this._lfoL.min = Math.max(this._delayTime - deviation, 0);
				            this._lfoL.max = this._delayTime + deviation;
				            this._lfoR.min = Math.max(this._delayTime - deviation, 0);
				            this._lfoR.max = this._delayTime + deviation;
				        }
				    });
				    /**
					 * The delayTime in milliseconds of the chorus. A larger delayTime
					 * will give a more pronounced effect. Nominal range a delayTime
					 * is between 2 and 20ms. 
					 * @memberOf Tone.Chorus#
					 * @type {Milliseconds}
					 * @name delayTime
					 */
				    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {
				        get: function () {
				            return this._delayTime * 1000;
				        },
				        set: function (delayTime) {
				            this._delayTime = delayTime / 1000;
				            this.depth = this._depth;
				        }
				    });
				    /**
					 * The oscillator type of the LFO. 
					 * @memberOf Tone.Chorus#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.Chorus.prototype, 'type', {
				        get: function () {
				            return this._lfoL.type;
				        },
				        set: function (type) {
				            this._lfoL.type = type;
				            this._lfoR.type = type;
				        }
				    });
				    /** 
					 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
					 * When set to 180, LFO's will be panned hard left and right respectively.
					 * @memberOf Tone.Chorus#
					 * @type {Degrees}
					 * @name spread
					 */
				    Object.defineProperty(Tone.Chorus.prototype, 'spread', {
				        get: function () {
				            return this._lfoR.phase - this._lfoL.phase;    //180
				        },
				        set: function (spread) {
				            this._lfoL.phase = 90 - spread / 2;
				            this._lfoR.phase = spread / 2 + 90;
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Chorus} this
					 */
				    Tone.Chorus.prototype.dispose = function () {
				        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
				        this._lfoL.dispose();
				        this._lfoL = null;
				        this._lfoR.dispose();
				        this._lfoR = null;
				        this._delayNodeL.dispose();
				        this._delayNodeL = null;
				        this._delayNodeR.dispose();
				        this._delayNodeR = null;
				        this._writable('frequency');
				        this.frequency = null;
				        return this;
				    };
				    return Tone.Chorus;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Convolver is a wrapper around the Native Web Audio 
					 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
					 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
					 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
					 *  
					 *  @constructor
					 *  @extends {Tone.Effect}
					 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
					 *                                           contianing the impulse response. 
					 *  @param {Function} onload The callback to invoke when the url is loaded.
					 *  @example
					 * //initializing the convolver with an impulse response
					 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
					 */
				    Tone.Convolver = function () {
				        var options = this.optionsObject(arguments, [
				            'url',
				            'onload'
				        ], Tone.Convolver.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  convolver node
						 *  @type {ConvolverNode}
						 *  @private
						 */
				        this._convolver = this.context.createConvolver();
				        /**
						 *  the convolution buffer
						 *  @type {Tone.Buffer}
						 *  @private
						 */
				        this._buffer = new Tone.Buffer();
				        if (this.isString(options.url)) {
				            this._buffer.load(options.url, function (buffer) {
				                this.buffer = buffer;
				                options.onload();
				            }.bind(this));
				        } else if (options.url) {
				            this.buffer = options.url;
				            options.onload();
				        }
				        this.connectEffect(this._convolver);
				    };
				    Tone.extend(Tone.Convolver, Tone.Effect);
				    /**
					 *  @static
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Convolver.defaults = { 'onload': Tone.noOp };
				    /**
					 *  The convolver's buffer
					 *  @memberOf Tone.Convolver#
					 *  @type {AudioBuffer}
					 *  @name buffer
					 */
				    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {
				        get: function () {
				            return this._buffer.get();
				        },
				        set: function (buffer) {
				            this._buffer.set(buffer);
				            this._convolver.buffer = this._buffer.get();
				        }
				    });
				    /**
					 *  Load an impulse response url as an audio buffer.
					 *  Decodes the audio asynchronously and invokes
					 *  the callback once the audio buffer loads.
					 *  @param {string} url The url of the buffer to load.
					 *                      filetype support depends on the
					 *                      browser.
					 *  @param  {function=} callback
					 *  @returns {Tone.Convolver} this
					 */
				    Tone.Convolver.prototype.load = function (url, callback) {
				        this._buffer.load(url, function (buff) {
				            this.buffer = buff;
				            if (callback) {
				                callback();
				            }
				        }.bind(this));
				        return this;
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Convolver} this
					 */
				    Tone.Convolver.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._convolver.disconnect();
				        this._convolver = null;
				        this._buffer.dispose();
				        this._buffer = null;
				        return this;
				    };
				    return Tone.Convolver;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
					 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
					 *
					 *  @extends {Tone.Effect}
					 *  @constructor
					 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
					 *  @example
					 * var dist = new Tone.Distortion(0.8).toMaster();
					 * var fm = new Tone.SimpleFM().connect(dist);
					 * //this sounds good on bass notes
					 * fm.triggerAttackRelease("A1", "8n");
					 */
				    Tone.Distortion = function () {
				        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  @type {Tone.WaveShaper}
						 *  @private
						 */
				        this._shaper = new Tone.WaveShaper(4096);
				        /**
						 * holds the distortion amount
						 * @type {number}
						 * @private
						 */
				        this._distortion = options.distortion;
				        this.connectEffect(this._shaper);
				        this.distortion = options.distortion;
				        this.oversample = options.oversample;
				    };
				    Tone.extend(Tone.Distortion, Tone.Effect);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Distortion.defaults = {
				        'distortion': 0.4,
				        'oversample': 'none'
				    };
				    /**
					 * The amount of distortion.
					 * @memberOf Tone.Distortion#
					 * @type {NormalRange}
					 * @name distortion
					 */
				    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {
				        get: function () {
				            return this._distortion;
				        },
				        set: function (amount) {
				            this._distortion = amount;
				            var k = amount * 100;
				            var deg = Math.PI / 180;
				            this._shaper.setMap(function (x) {
				                if (Math.abs(x) < 0.001) {
				                    //should output 0 when input is 0
				                    return 0;
				                } else {
				                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
				                }
				            });
				        }
				    });
				    /**
					 * The oversampling of the effect. Can either be "none", "2x" or "4x".
					 * @memberOf Tone.Distortion#
					 * @type {string}
					 * @name oversample
					 */
				    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {
				        get: function () {
				            return this._shaper.oversample;
				        },
				        set: function (oversampling) {
				            this._shaper.oversample = oversampling;
				        }
				    });
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Distortion} this
					 */
				    Tone.Distortion.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._shaper.dispose();
				        this._shaper = null;
				        return this;
				    };
				    return Tone.Distortion;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
					 *          signal is fed back into the delay. 
					 *
					 *  @constructor
					 *  @extends {Tone.FeedbackEffect}
					 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. 
					 *  @param {NormalRange=} feedback The amount of the effected signal which 
					 *                            is fed back through the delay.
					 *  @example
					 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
					 * var tom = new Tone.DrumSynth({
					 * 	"octaves" : 4,
					 * 	"pitchDecay" : 0.1
					 * }).connect(feedbackDelay);
					 * tom.triggerAttackRelease("A2","32n");
					 */
				    Tone.FeedbackDelay = function () {
				        var options = this.optionsObject(arguments, [
				            'delayTime',
				            'feedback'
				        ], Tone.FeedbackDelay.defaults);
				        Tone.FeedbackEffect.call(this, options);
				        /**
						 *  the delay node
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._delayNode = new Tone.Delay(options.delayTime);
				        /**
						 *  The delayTime of the DelayNode. 
						 *  @type {Time}
						 *  @signal
						 */
				        this.delayTime = this._delayNode.delayTime;
				        // connect it up
				        this.connectEffect(this._delayNode);
				        this._readOnly(['delayTime']);
				    };
				    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);
				    /**
					 *  The default values. 
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };
				    /**
					 *  clean up
					 *  @returns {Tone.FeedbackDelay} this
					 */
				    Tone.FeedbackDelay.prototype.dispose = function () {
				        Tone.FeedbackEffect.prototype.dispose.call(this);
				        this._delayNode.dispose();
				        this._delayNode = null;
				        this._writable(['delayTime']);
				        this.delayTime = null;
				        return this;
				    };
				    return Tone.FeedbackDelay;
				});
				Module(function (Tone) {
				    
				    /**
					 *  an array of comb filter delay values from Freeverb implementation
					 *  @static
					 *  @private
					 *  @type {Array}
					 */
				    var combFilterTunings = [
				        1557 / 44100,
				        1617 / 44100,
				        1491 / 44100,
				        1422 / 44100,
				        1277 / 44100,
				        1356 / 44100,
				        1188 / 44100,
				        1116 / 44100
				    ];
				    /**
					 *  an array of allpass filter frequency values from Freeverb implementation
					 *  @private
					 *  @static
					 *  @type {Array}
					 */
				    var allpassFilterFrequencies = [
				        225,
				        556,
				        441,
				        341
				    ];
				    /**
					 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
					 *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).
					 *
					 *  @extends {Tone.Effect}
					 *  @constructor
					 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. 
					 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part 
					 *                                 of the reverb. 
					 *  @example
					 * var freeverb = new Tone.Freeverb().toMaster();
					 * freeverb.dampening.value = 1000;
					 * //routing synth through the reverb
					 * var synth = new Tone.AMSynth().connect(freeverb);
					 */
				    Tone.Freeverb = function () {
				        var options = this.optionsObject(arguments, [
				            'roomSize',
				            'dampening'
				        ], Tone.Freeverb.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  The roomSize value between. A larger roomSize
						 *  will result in a longer decay. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
				        /**
						 *  The amount of dampening of the reverberant signal. 
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);
				        /**
						 *  the comb filters
						 *  @type {Array}
						 *  @private
						 */
				        this._combFilters = [];
				        /**
						 *  the allpass filters on the left
						 *  @type {Array}
						 *  @private
						 */
				        this._allpassFiltersL = [];
				        /**
						 *  the allpass filters on the right
						 *  @type {Array}
						 *  @private
						 */
				        this._allpassFiltersR = [];
				        //make the allpass filters on teh right
				        for (var l = 0; l < allpassFilterFrequencies.length; l++) {
				            var allpassL = this.context.createBiquadFilter();
				            allpassL.type = 'allpass';
				            allpassL.frequency.value = allpassFilterFrequencies[l];
				            this._allpassFiltersL.push(allpassL);
				        }
				        //make the allpass filters on the left
				        for (var r = 0; r < allpassFilterFrequencies.length; r++) {
				            var allpassR = this.context.createBiquadFilter();
				            allpassR.type = 'allpass';
				            allpassR.frequency.value = allpassFilterFrequencies[r];
				            this._allpassFiltersR.push(allpassR);
				        }
				        //make the comb filters
				        for (var c = 0; c < combFilterTunings.length; c++) {
				            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);
				            if (c < combFilterTunings.length / 2) {
				                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);
				            } else {
				                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);
				            }
				            this.roomSize.connect(lfpf.resonance);
				            this.dampening.connect(lfpf.dampening);
				            this._combFilters.push(lfpf);
				        }
				        //chain the allpass filters togetehr
				        this.connectSeries.apply(this, this._allpassFiltersL);
				        this.connectSeries.apply(this, this._allpassFiltersR);
				        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);
				        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);
				        this._readOnly([
				            'roomSize',
				            'dampening'
				        ]);
				    };
				    Tone.extend(Tone.Freeverb, Tone.StereoEffect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Freeverb.defaults = {
				        'roomSize': 0.7,
				        'dampening': 3000
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.Freeverb} this
					 */
				    Tone.Freeverb.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        for (var al = 0; al < this._allpassFiltersL.length; al++) {
				            this._allpassFiltersL[al].disconnect();
				            this._allpassFiltersL[al] = null;
				        }
				        this._allpassFiltersL = null;
				        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {
				            this._allpassFiltersR[ar].disconnect();
				            this._allpassFiltersR[ar] = null;
				        }
				        this._allpassFiltersR = null;
				        for (var cf = 0; cf < this._combFilters.length; cf++) {
				            this._combFilters[cf].dispose();
				            this._combFilters[cf] = null;
				        }
				        this._combFilters = null;
				        this._writable([
				            'roomSize',
				            'dampening'
				        ]);
				        this.roomSize.dispose();
				        this.roomSize = null;
				        this.dampening.dispose();
				        this.dampening = null;
				        return this;
				    };
				    return Tone.Freeverb;
				});
				Module(function (Tone) {
				    
				    /**
					 *  an array of the comb filter delay time values
					 *  @private
					 *  @static
					 *  @type {Array}
					 */
				    var combFilterDelayTimes = [
				        1687 / 25000,
				        1601 / 25000,
				        2053 / 25000,
				        2251 / 25000
				    ];
				    /**
					 *  the resonances of each of the comb filters
					 *  @private
					 *  @static
					 *  @type {Array}
					 */
				    var combFilterResonances = [
				        0.773,
				        0.802,
				        0.753,
				        0.733
				    ];
				    /**
					 *  the allpass filter frequencies
					 *  @private
					 *  @static
					 *  @type {Array}
					 */
				    var allpassFilterFreqs = [
				        347,
				        113,
				        37
				    ];
				    /**
					 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
					 *         tuned by John Chowning in 1970.
					 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. 
					 *         
					 *
					 *  @extends {Tone.Effect}
					 *  @constructor
					 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
					 *  @example
					 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
					 * var delay = new Tone.FeedbackDelay(0.5); 
					 * //connecting the synth to reverb through delay
					 * var synth = new Tone.DuoSynth().chain(delay, reverb);
					 * synth.triggerAttackRelease("A4","8n");
					 */
				    Tone.JCReverb = function () {
				        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  room size control values between [0,1]
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
				        /**
						 *  scale the room size
						 *  @type {Tone.Scale}
						 *  @private
						 */
				        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);
				        /**
						 *  a series of allpass filters
						 *  @type {Array}
						 *  @private
						 */
				        this._allpassFilters = [];
				        /**
						 *  parallel feedback comb filters
						 *  @type {Array}
						 *  @private
						 */
				        this._feedbackCombFilters = [];
				        //make the allpass filters
				        for (var af = 0; af < allpassFilterFreqs.length; af++) {
				            var allpass = this.context.createBiquadFilter();
				            allpass.type = 'allpass';
				            allpass.frequency.value = allpassFilterFreqs[af];
				            this._allpassFilters.push(allpass);
				        }
				        //and the comb filters
				        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {
				            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);
				            this._scaleRoomSize.connect(fbcf.resonance);
				            fbcf.resonance.value = combFilterResonances[cf];
				            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);
				            if (cf < combFilterDelayTimes.length / 2) {
				                fbcf.connect(this.effectReturnL);
				            } else {
				                fbcf.connect(this.effectReturnR);
				            }
				            this._feedbackCombFilters.push(fbcf);
				        }
				        //chain the allpass filters together
				        this.roomSize.connect(this._scaleRoomSize);
				        this.connectSeries.apply(this, this._allpassFilters);
				        this.effectSendL.connect(this._allpassFilters[0]);
				        this.effectSendR.connect(this._allpassFilters[0]);
				        this._readOnly(['roomSize']);
				    };
				    Tone.extend(Tone.JCReverb, Tone.StereoEffect);
				    /**
					 *  the default values
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.JCReverb.defaults = { 'roomSize': 0.5 };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.JCReverb} this
					 */
				    Tone.JCReverb.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        for (var apf = 0; apf < this._allpassFilters.length; apf++) {
				            this._allpassFilters[apf].disconnect();
				            this._allpassFilters[apf] = null;
				        }
				        this._allpassFilters = null;
				        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {
				            this._feedbackCombFilters[fbcf].dispose();
				            this._feedbackCombFilters[fbcf] = null;
				        }
				        this._feedbackCombFilters = null;
				        this._writable(['roomSize']);
				        this.roomSize.dispose();
				        this.roomSize = null;
				        this._scaleRoomSize.dispose();
				        this._scaleRoomSize = null;
				        return this;
				    };
				    return Tone.JCReverb;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Mid/Side processing separates the the 'mid' signal 
					 *         (which comes out of both the left and the right channel) 
					 *         and the 'side' (which only comes out of the the side channels) 
					 *         and effects them separately before being recombined.
					 *         Applies a Mid/Side seperation and recombination.
					 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
					 *         <br><br>
					 *         This is a base-class for Mid/Side Effects. 
					 *
					 *  @extends {Tone.Effect}
					 *  @constructor
					 */
				    Tone.MidSideEffect = function () {
				        Tone.Effect.apply(this, arguments);
				        /**
						 *  The mid/side split
						 *  @type  {Tone.MidSideSplit}
						 *  @private
						 */
				        this._midSideSplit = new Tone.MidSideSplit();
				        /**
						 *  The mid/side merge
						 *  @type  {Tone.MidSideMerge}
						 *  @private
						 */
				        this._midSideMerge = new Tone.MidSideMerge();
				        /**
						 *  The mid send. Connect to mid processing
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this.midSend = this._midSideSplit.mid;
				        /**
						 *  The side send. Connect to side processing
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this.sideSend = this._midSideSplit.side;
				        /**
						 *  The mid return connection
						 *  @type {GainNode}
						 *  @private
						 */
				        this.midReturn = this._midSideMerge.mid;
				        /**
						 *  The side return connection
						 *  @type {GainNode}
						 *  @private
						 */
				        this.sideReturn = this._midSideMerge.side;
				        //the connections
				        this.effectSend.connect(this._midSideSplit);
				        this._midSideMerge.connect(this.effectReturn);
				    };
				    Tone.extend(Tone.MidSideEffect, Tone.Effect);
				    /**
					 *  Clean up. 
					 *  @returns {Tone.MidSideEffect} this
					 */
				    Tone.MidSideEffect.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._midSideSplit.dispose();
				        this._midSideSplit = null;
				        this._midSideMerge.dispose();
				        this._midSideMerge = null;
				        this.midSend = null;
				        this.sideSend = null;
				        this.midReturn = null;
				        this.sideReturn = null;
				        return this;
				    };
				    return Tone.MidSideEffect;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
					 *         of different frequency components of an incoming signal. Read more on 
					 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). 
					 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
					 *
					 *	@extends {Tone.StereoEffect}
					 *	@constructor
					 *	@param {Frequency|Object} [frequency] The speed of the phasing. 
					 *	@param {number} [octaves] The octaves of the effect. 
					 *	@param {Frequency} [baseFrequency] The base frequency of the filters. 
					 *	@example
					 * var phaser = new Tone.Phaser({
					 * 	"frequency" : 15, 
					 * 	"octaves" : 5, 
					 * 	"baseFrequency" : 1000
					 * }).toMaster();
					 * var synth = new Tone.FMSynth().connect(phaser);
					 * synth.triggerAttackRelease("E3", "2n");
					 */
				    Tone.Phaser = function () {
				        //set the defaults
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'octaves',
				            'baseFrequency'
				        ], Tone.Phaser.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  the lfo which controls the frequency on the left side
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfoL = new Tone.LFO(options.frequency, 0, 1);
				        /**
						 *  the lfo which controls the frequency on the right side
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfoR = new Tone.LFO(options.frequency, 0, 1);
				        this._lfoR.phase = 180;
				        /**
						 *  the base modulation frequency
						 *  @type {number}
						 *  @private
						 */
				        this._baseFrequency = options.baseFrequency;
				        /**
						 *  the octaves of the phasing
						 *  @type {number}
						 *  @private
						 */
				        this._octaves = options.octaves;
				        /**
						 *  The quality factor of the filters
						 *  @type {Positive}
						 *  @signal
						 */
				        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);
				        /**
						 *  the array of filters for the left side
						 *  @type {Array}
						 *  @private
						 */
				        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);
				        /**
						 *  the array of filters for the left side
						 *  @type {Array}
						 *  @private
						 */
				        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);
				        /**
						 * the frequency of the effect
						 * @type {Tone.Signal}
						 */
				        this.frequency = this._lfoL.frequency;
				        this.frequency.value = options.frequency;
				        //connect them up
				        this.effectSendL.connect(this._filtersL[0]);
				        this.effectSendR.connect(this._filtersR[0]);
				        this._filtersL[options.stages - 1].connect(this.effectReturnL);
				        this._filtersR[options.stages - 1].connect(this.effectReturnR);
				        //control the frequency with one LFO
				        this._lfoL.frequency.connect(this._lfoR.frequency);
				        //set the options
				        this.baseFrequency = options.baseFrequency;
				        this.octaves = options.octaves;
				        //start the lfo
				        this._lfoL.start();
				        this._lfoR.start();
				        this._readOnly([
				            'frequency',
				            'Q'
				        ]);
				    };
				    Tone.extend(Tone.Phaser, Tone.StereoEffect);
				    /**
					 *  defaults
					 *  @static
					 *  @type {object}
					 */
				    Tone.Phaser.defaults = {
				        'frequency': 0.5,
				        'octaves': 3,
				        'stages': 10,
				        'Q': 10,
				        'baseFrequency': 350
				    };
				    /**
					 *  @param {number} stages
					 *  @returns {Array} the number of filters all connected together
					 *  @private
					 */
				    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {
				        var filters = new Array(stages);
				        //make all the filters
				        for (var i = 0; i < stages; i++) {
				            var filter = this.context.createBiquadFilter();
				            filter.type = 'allpass';
				            Q.connect(filter.Q);
				            connectToFreq.connect(filter.frequency);
				            filters[i] = filter;
				        }
				        this.connectSeries.apply(this, filters);
				        return filters;
				    };
				    /**
					 * The number of octaves the phase goes above
					 * the baseFrequency
					 * @memberOf Tone.Phaser#
					 * @type {Positive}
					 * @name octaves
					 */
				    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {
				        get: function () {
				            return this._octaves;
				        },
				        set: function (octaves) {
				            this._octaves = octaves;
				            var max = this._baseFrequency * Math.pow(2, octaves);
				            this._lfoL.max = max;
				            this._lfoR.max = max;
				        }
				    });
				    /**
					 * The the base frequency of the filters. 
					 * @memberOf Tone.Phaser#
					 * @type {number}
					 * @name baseFrequency
					 */
				    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {
				        get: function () {
				            return this._baseFrequency;
				        },
				        set: function (freq) {
				            this._baseFrequency = freq;
				            this._lfoL.min = freq;
				            this._lfoR.min = freq;
				            this.octaves = this._octaves;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.Phaser} this
					 */
				    Tone.Phaser.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'Q'
				        ]);
				        this.Q.dispose();
				        this.Q = null;
				        this._lfoL.dispose();
				        this._lfoL = null;
				        this._lfoR.dispose();
				        this._lfoR = null;
				        for (var i = 0; i < this._filtersL.length; i++) {
				            this._filtersL[i].disconnect();
				            this._filtersL[i] = null;
				        }
				        this._filtersL = null;
				        for (var j = 0; j < this._filtersR.length; j++) {
				            this._filtersR[j].disconnect();
				            this._filtersR[j] = null;
				        }
				        this._filtersR = null;
				        this.frequency = null;
				        return this;
				    };
				    return Tone.Phaser;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
					 *          first in one channel and next in the opposite channel. In a stereo
					 *          system these are the right and left channels.
					 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays 
					 *          with independent delay values. Each delay is routed to one channel
					 *          (left or right), and the channel triggered second will always 
					 *          trigger at the same interval after the first.
					 *
					 * 	@constructor
					 * 	@extends {Tone.StereoXFeedbackEffect}
					 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
					 *  @param {NormalRange=} feedback The amount of the effected signal which 
					 *                                 is fed back through the delay.
					 *  @example
					 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
					 * var drum = new Tone.DrumSynth().connect(pingPong);
					 * drum.triggerAttackRelease("C4", "32n");
					 */
				    Tone.PingPongDelay = function () {
				        var options = this.optionsObject(arguments, [
				            'delayTime',
				            'feedback'
				        ], Tone.PingPongDelay.defaults);
				        Tone.StereoXFeedbackEffect.call(this, options);
				        /**
						 *  the delay node on the left side
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);
				        /**
						 *  the delay node on the right side
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);
				        /**
						 *  the predelay on the right side
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);
				        /**
						 *  the delay time signal
						 *  @type {Time}
						 *  @signal
						 */
				        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);
				        //connect it up
				        this.effectSendL.chain(this._leftDelay, this.effectReturnL);
				        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);
				        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);
				        //rearranged the feedback to be after the rightPreDelay
				        this._feedbackLR.disconnect();
				        this._feedbackLR.connect(this._rightDelay);
				        this._readOnly(['delayTime']);
				    };
				    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.PingPongDelay.defaults = {
				        'delayTime': 0.25,
				        'maxDelayTime': 1
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.PingPongDelay} this
					 */
				    Tone.PingPongDelay.prototype.dispose = function () {
				        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
				        this._leftDelay.dispose();
				        this._leftDelay = null;
				        this._rightDelay.dispose();
				        this._rightDelay = null;
				        this._rightPreDelay.dispose();
				        this._rightPreDelay = null;
				        this._writable(['delayTime']);
				        this.delayTime.dispose();
				        this.delayTime = null;
				        return this;
				    };
				    return Tone.PingPongDelay;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. 
					 *         The effect is achieved by speeding up or slowing down the delayTime
					 *         of a DelayNode using a sawtooth wave. 
					 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
					 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
					 *         
					 *  @extends {Tone.FeedbackEffect}
					 *  @param {Interval=} pitch The interval to transpose the incoming signal by. 
					 */
				    Tone.PitchShift = function () {
				        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);
				        Tone.FeedbackEffect.call(this, options);
				        /**
						 *  The pitch signal
						 *  @type  {Tone.Signal}
						 *  @private
						 */
				        this._frequency = new Tone.Signal(0);
				        /**
						 *  Uses two DelayNodes to cover up the jump in
						 *  the sawtooth wave. 
						 *  @type  {DelayNode}
						 *  @private
						 */
				        this._delayA = new Tone.Delay(0, 1);
				        /**
						 *  The first LFO.
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._lfoA = new Tone.LFO({
				            'min': 0,
				            'max': 0.1,
				            'type': 'sawtooth'
				        }).connect(this._delayA.delayTime);
				        /**
						 *  The second DelayNode
						 *  @type  {DelayNode}
						 *  @private
						 */
				        this._delayB = new Tone.Delay(0, 1);
				        /**
						 *  The first LFO.
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._lfoB = new Tone.LFO({
				            'min': 0,
				            'max': 0.1,
				            'type': 'sawtooth',
				            'phase': 180
				        }).connect(this._delayB.delayTime);
				        /**
						 *  Crossfade quickly between the two delay lines
						 *  to cover up the jump in the sawtooth wave
						 *  @type  {Tone.CrossFade}
						 *  @private
						 */
				        this._crossFade = new Tone.CrossFade();
				        /**
						 *  LFO which alternates between the two
						 *  delay lines to cover up the disparity in the
						 *  sawtooth wave. 
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._crossFadeLFO = new Tone.LFO({
				            'min': 0,
				            'max': 1,
				            'type': 'triangle',
				            'phase': 90
				        }).connect(this._crossFade.fade);
				        /**
						 *  The delay node
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._feedbackDelay = new Tone.Delay(options.delayTime);
				        /**
						 *  The amount of delay on the input signal
						 *  @type {Time}
						 *  @signal
						 */
				        this.delayTime = this._feedbackDelay.delayTime;
				        this._readOnly('delayTime');
				        /**
						 *  Hold the current pitch
						 *  @type {Number}
						 *  @private
						 */
				        this._pitch = options.pitch;
				        /**
						 *  Hold the current windowSize
						 *  @type {Number}
						 *  @private
						 */
				        this._windowSize = options.windowSize;
				        //connect the two delay lines up
				        this._delayA.connect(this._crossFade.a);
				        this._delayB.connect(this._crossFade.b);
				        //connect the frequency
				        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);
				        //route the input
				        this.effectSend.fan(this._delayA, this._delayB);
				        this._crossFade.chain(this._feedbackDelay, this.effectReturn);
				        //start the LFOs at the same time
				        var now = this.now();
				        this._lfoA.start(now);
				        this._lfoB.start(now);
				        this._crossFadeLFO.start(now);
				        //set the initial value
				        this.windowSize = this._windowSize;
				    };
				    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.PitchShift.defaults = {
				        'pitch': 0,
				        'windowSize': 0.1,
				        'delayTime': 0,
				        'feedback': 0
				    };
				    /**
					 * Repitch the incoming signal by some interval (measured
					 * in semi-tones). 
					 * @memberOf Tone.PitchShift#
					 * @type {Interval}
					 * @name pitch
					 * @example
					 * pitchShift.pitch = -12; //down one octave
					 * pitchShift.pitch = 7; //up a fifth
					 */
				    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {
				        get: function () {
				            return this._pitch;
				        },
				        set: function (interval) {
				            this._pitch = interval;
				            var factor = 0;
				            if (interval < 0) {
				                this._lfoA.min = 0;
				                this._lfoA.max = this._windowSize;
				                this._lfoB.min = 0;
				                this._lfoB.max = this._windowSize;
				                factor = this.intervalToFrequencyRatio(interval - 1) + 1;
				            } else {
				                this._lfoA.min = this._windowSize;
				                this._lfoA.max = 0;
				                this._lfoB.min = this._windowSize;
				                this._lfoB.max = 0;
				                factor = this.intervalToFrequencyRatio(interval) - 1;
				            }
				            this._frequency.value = factor * (1.2 / this._windowSize);
				        }
				    });
				    /**
					 * The window size corresponds roughly to the sample length in a looping sampler. 
					 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
					 * signal, but larger values will result in smoother pitch shifting for larger intervals. 
					 * A nominal range of 0.03 to 0.1 is recommended. 
					 * @memberOf Tone.PitchShift#
					 * @type {Time}
					 * @name windowSize
					 * @example
					 * pitchShift.windowSize = 0.1;
					 */
				    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {
				        get: function () {
				            return this._windowSize;
				        },
				        set: function (size) {
				            this._windowSize = this.toSeconds(size);
				            this.pitch = this._pitch;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return  {Tone.PitchShift}  this
					 */
				    Tone.PitchShift.prototype.dispose = function () {
				        Tone.FeedbackEffect.prototype.dispose.call(this);
				        this._frequency.dispose();
				        this._frequency = null;
				        this._delayA.disconnect();
				        this._delayA = null;
				        this._delayB.disconnect();
				        this._delayB = null;
				        this._lfoA.dispose();
				        this._lfoA = null;
				        this._lfoB.dispose();
				        this._lfoB = null;
				        this._crossFade.dispose();
				        this._crossFade = null;
				        this._crossFadeLFO.dispose();
				        this._crossFadeLFO = null;
				        this._writable('delayTime');
				        this._feedbackDelay.dispose();
				        this._feedbackDelay = null;
				        this.delayTime = null;
				        return this;
				    };
				    return Tone.PitchShift;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Base class for stereo feedback effects where the effectReturn
					 *         is fed back into the same channel. 
					 *
					 *	@constructor
					 *	@extends {Tone.FeedbackEffect}
					 */
				    Tone.StereoFeedbackEffect = function () {
				        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  controls the amount of feedback
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
				        /**
						 *  the left side feeback
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedbackL = new Tone.Gain();
				        /**
						 *  the right side feeback
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._feedbackR = new Tone.Gain();
				        //connect it up
				        this.effectReturnL.chain(this._feedbackL, this.effectSendL);
				        this.effectReturnR.chain(this._feedbackR, this.effectSendR);
				        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
				        this._readOnly(['feedback']);
				    };
				    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);
				    /**
					 *  clean up
					 *  @returns {Tone.StereoFeedbackEffect} this
					 */
				    Tone.StereoFeedbackEffect.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        this._writable(['feedback']);
				        this.feedback.dispose();
				        this.feedback = null;
				        this._feedbackL.dispose();
				        this._feedbackL = null;
				        this._feedbackR.dispose();
				        this._feedbackR = null;
				        return this;
				    };
				    return Tone.StereoFeedbackEffect;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Applies a width factor to the mid/side seperation. 
					 *         0 is all mid and 1 is all side.
					 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
					 *         <br><br>
					 *         <code>
					 *         Mid *= 2*(1-width)<br>
					 *         Side *= 2*width
					 *         </code>
					 *
					 *  @extends {Tone.MidSideEffect}
					 *  @constructor
					 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
					 */
				    Tone.StereoWidener = function () {
				        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);
				        Tone.MidSideEffect.call(this, options);
				        /**
						 *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
				        /**
						 *  Mid multiplier
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');
				        /**
						 *  Side multiplier
						 *  @type {Tone.Expr}
						 *  @private
						 */
				        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');
				        /**
						 *  constant output of 2
						 *  @type {Tone}
						 *  @private
						 */
				        this._two = new Tone.Signal(2);
				        //the mid chain
				        this._two.connect(this._midMult, 0, 1);
				        this.width.connect(this._midMult, 0, 2);
				        //the side chain
				        this._two.connect(this._sideMult, 0, 1);
				        this.width.connect(this._sideMult, 0, 2);
				        //connect it to the effect send/return
				        this.midSend.chain(this._midMult, this.midReturn);
				        this.sideSend.chain(this._sideMult, this.sideReturn);
				        this._readOnly(['width']);
				    };
				    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);
				    /**
					 *  the default values
					 *  @static
					 *  @type {Object}
					 */
				    Tone.StereoWidener.defaults = { 'width': 0.5 };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.StereoWidener} this
					 */
				    Tone.StereoWidener.prototype.dispose = function () {
				        Tone.MidSideEffect.prototype.dispose.call(this);
				        this._writable(['width']);
				        this.width.dispose();
				        this.width = null;
				        this._midMult.dispose();
				        this._midMult = null;
				        this._sideMult.dispose();
				        this._sideMult = null;
				        this._two.dispose();
				        this._two = null;
				        return this;
				    };
				    return Tone.StereoWidener;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
					 *         The type, frequency, and depth of the LFO is controllable.
					 *
					 *  @extends {Tone.StereoEffect}
					 *  @constructor
					 *  @param {Frequency} [frequency] The rate of the effect.
					 *  @param {NormalRange} [depth] The depth of the effect.
					 *  @example
					 * //create a tremolo and start it's LFO
					 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
					 * //route an oscillator through the tremolo and start it
					 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
					 */
				    Tone.Tremolo = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'depth'
				        ], Tone.Tremolo.defaults);
				        Tone.StereoEffect.call(this, options);
				        /**
						 *  The tremelo LFO in the left channel
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._lfoL = new Tone.LFO({
				            'phase': options.spread,
				            'min': 1,
				            'max': 0
				        });
				        /**
						 *  The tremelo LFO in the left channel
						 *  @type  {Tone.LFO}
						 *  @private
						 */
				        this._lfoR = new Tone.LFO({
				            'phase': options.spread,
				            'min': 1,
				            'max': 0
				        });
				        /**
						 *  Where the gain is multiplied
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._amplitudeL = new Tone.Gain();
				        /**
						 *  Where the gain is multiplied
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._amplitudeR = new Tone.Gain();
				        /**
						 *  The frequency of the tremolo.
						 *  @type  {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The depth of the effect. A depth of 0, has no effect
						 *  on the amplitude, and a depth of 1 makes the amplitude
						 *  modulate fully between 0 and 1.
						 *  @type  {NormalRange}
						 *  @signal
						 */
				        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);
				        this._readOnly([
				            'frequency',
				            'depth'
				        ]);
				        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);
				        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);
				        this._lfoL.connect(this._amplitudeL.gain);
				        this._lfoR.connect(this._amplitudeR.gain);
				        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
				        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
				        this.type = options.type;
				        this.spread = options.spread;
				    };
				    Tone.extend(Tone.Tremolo, Tone.StereoEffect);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Tremolo.defaults = {
				        'frequency': 10,
				        'type': 'sine',
				        'depth': 0.5,
				        'spread': 180
				    };
				    /**
					 * Start the tremolo.
					 * @param {Time} [time=now] When the tremolo begins.
					 * @returns {Tone.Tremolo} this
					 */
				    Tone.Tremolo.prototype.start = function (time) {
				        this._lfoL.start(time);
				        this._lfoR.start(time);
				        return this;
				    };
				    /**
					 * Stop the tremolo.
					 * @param {Time} [time=now] When the tremolo stops.
					 * @returns {Tone.Tremolo} this
					 */
				    Tone.Tremolo.prototype.stop = function (time) {
				        this._lfoL.stop(time);
				        this._lfoR.stop(time);
				        return this;
				    };
				    /**
					 * Sync the effect to the transport.
					 * @param {Time} [delay=0] Delay time before starting the effect after the
					 *                              Transport has started.
					 * @returns {Tone.AutoFilter} this
					 */
				    Tone.Tremolo.prototype.sync = function (delay) {
				        this._lfoL.sync(delay);
				        this._lfoR.sync(delay);
				        return this;
				    };
				    /**
					 * Unsync the filter from the transport
					 * @returns {Tone.Tremolo} this
					 */
				    Tone.Tremolo.prototype.unsync = function () {
				        this._lfoL.unsync();
				        this._lfoR.unsync();
				        return this;
				    };
				    /**
					 * The Tremolo's oscillator type.
					 * @memberOf Tone.Tremolo#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.Tremolo.prototype, 'type', {
				        get: function () {
				            return this._lfoL.type;
				        },
				        set: function (type) {
				            this._lfoL.type = type;
				            this._lfoR.type = type;
				        }
				    });
				    /** 
					 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
					 * When set to 180, LFO's will be panned hard left and right respectively.
					 * @memberOf Tone.Tremolo#
					 * @type {Degrees}
					 * @name spread
					 */
				    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {
				        get: function () {
				            return this._lfoR.phase - this._lfoL.phase;    //180
				        },
				        set: function (spread) {
				            this._lfoL.phase = 90 - spread / 2;
				            this._lfoR.phase = spread / 2 + 90;
				        }
				    });
				    /**
					 *  clean up
					 *  @returns {Tone.Tremolo} this
					 */
				    Tone.Tremolo.prototype.dispose = function () {
				        Tone.StereoEffect.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'depth'
				        ]);
				        this._lfoL.dispose();
				        this._lfoL = null;
				        this._lfoR.dispose();
				        this._lfoR = null;
				        this._amplitudeL.dispose();
				        this._amplitudeL = null;
				        this._amplitudeR.dispose();
				        this._amplitudeR = null;
				        this.frequency = null;
				        this.depth = null;
				        return this;
				    };
				    return Tone.Tremolo;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
					 *         modulates the delayTime of the delay, causing the pitch to rise
					 *         and fall. 
					 *  @extends {Tone.Effect}
					 *  @param {Frequency} frequency The frequency of the vibrato.
					 *  @param {NormalRange} depth The amount the pitch is modulated.
					 */
				    Tone.Vibrato = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'depth'
				        ], Tone.Vibrato.defaults);
				        Tone.Effect.call(this, options);
				        /**
						 *  The delay node used for the vibrato effect
						 *  @type {Tone.Delay}
						 *  @private
						 */
				        this._delayNode = new Tone.Delay(0, options.maxDelay);
				        /**
						 *  The LFO used to control the vibrato
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._lfo = new Tone.LFO({
				            'type': options.type,
				            'min': 0,
				            'max': options.maxDelay,
				            'frequency': options.frequency,
				            'phase': -90    //offse the phase so the resting position is in the center
				        }).start().connect(this._delayNode.delayTime);
				        /**
						 *  The frequency of the vibrato
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this._lfo.frequency;
				        /**
						 *  The depth of the vibrato. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.depth = this._lfo.amplitude;
				        this.depth.value = options.depth;
				        this._readOnly([
				            'frequency',
				            'depth'
				        ]);
				        this.effectSend.chain(this._delayNode, this.effectReturn);
				    };
				    Tone.extend(Tone.Vibrato, Tone.Effect);
				    /**
					 *  The defaults
					 *  @type  {Object}
					 *  @const
					 */
				    Tone.Vibrato.defaults = {
				        'maxDelay': 0.005,
				        'frequency': 5,
				        'depth': 0.1,
				        'type': 'sine'
				    };
				    /**
					 * Type of oscillator attached to the Vibrato.
					 * @memberOf Tone.Vibrato#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.Vibrato.prototype, 'type', {
				        get: function () {
				            return this._lfo.type;
				        },
				        set: function (type) {
				            this._lfo.type = type;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.Vibrato} this
					 */
				    Tone.Vibrato.prototype.dispose = function () {
				        Tone.Effect.prototype.dispose.call(this);
				        this._delayNode.dispose();
				        this._delayNode = null;
				        this._lfo.dispose();
				        this._lfo = null;
				        this._writable([
				            'frequency',
				            'depth'
				        ]);
				        this.frequency = null;
				        this.depth = null;
				    };
				    return Tone.Vibrato;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
					 *          callback for a single or repeatable events along the timeline. 
					 *
					 *  @extends {Tone}
					 *  @param {function} callback The callback to invoke at the time. 
					 *  @param {*} value The value or values which should be passed to
					 *                      the callback function on invocation.  
					 *  @example
					 * var chord = new Tone.Event(function(time, chord){
					 * 	//the chord as well as the exact time of the event
					 * 	//are passed in as arguments to the callback function
					 * }, ["D4", "E4", "F4"]);
					 * //start the chord at the beginning of the transport timeline
					 * chord.start();
					 * //loop it every measure for 8 measures
					 * chord.loop = 8;
					 * chord.loopEnd = "1m";
					 */
				    Tone.Event = function () {
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'value'
				        ], Tone.Event.defaults);
				        /**
						 *  Loop value
						 *  @type  {Boolean|Positive}
						 *  @private
						 */
				        this._loop = options.loop;
				        /**
						 *  The callback to invoke. 
						 *  @type  {Function}
						 */
				        this.callback = options.callback;
				        /**
						 *  The value which is passed to the
						 *  callback function.
						 *  @type  {*}
						 *  @private
						 */
				        this.value = options.value;
				        /**
						 *  When the note is scheduled to start.
						 *  @type  {Number}
						 *  @private
						 */
				        this._loopStart = this.toTicks(options.loopStart);
				        /**
						 *  When the note is scheduled to start.
						 *  @type  {Number}
						 *  @private
						 */
				        this._loopEnd = this.toTicks(options.loopEnd);
				        /**
						 *  Tracks the scheduled events
						 *  @type {Tone.TimelineState}
						 *  @private
						 */
				        this._state = new Tone.TimelineState(Tone.State.Stopped);
				        /**
						 *  The playback speed of the note. A speed of 1
						 *  is no change. 
						 *  @private
						 *  @type {Positive}
						 */
				        this._playbackRate = 1;
				        /**
						 *  A delay time from when the event is scheduled to start
						 *  @type {Ticks}
						 *  @private
						 */
				        this._startOffset = 0;
				        /**
						 *  The probability that the callback will be invoked
						 *  at the scheduled time. 
						 *  @type {NormalRange}
						 *  @example
						 * //the callback will be invoked 50% of the time
						 * event.probability = 0.5;
						 */
				        this.probability = options.probability;
				        /**
						 *  If set to true, will apply small (+/-0.02 seconds) random variation
						 *  to the callback time. If the value is given as a time, it will randomize
						 *  by that amount.
						 *  @example
						 * event.humanize = true;
						 *  @type {Boolean|Time}
						 */
				        this.humanize = options.humanize;
				        /**
						 *  If mute is true, the callback won't be
						 *  invoked.
						 *  @type {Boolean}
						 */
				        this.mute = options.mute;
				        //set the initial values
				        this.playbackRate = options.playbackRate;
				    };
				    Tone.extend(Tone.Event);
				    /**
					 *  The default values
					 *  @type  {Object}
					 *  @const
					 */
				    Tone.Event.defaults = {
				        'callback': Tone.noOp,
				        'loop': false,
				        'loopEnd': '1m',
				        'loopStart': 0,
				        'playbackRate': 1,
				        'value': null,
				        'probability': 1,
				        'mute': false,
				        'humanize': false
				    };
				    /**
					 *  Reschedule all of the events along the timeline
					 *  with the updated values.
					 *  @param {Time} after Only reschedules events after the given time.
					 *  @return  {Tone.Event}  this
					 *  @private
					 */
				    Tone.Event.prototype._rescheduleEvents = function (after) {
				        //if no argument is given, schedules all of the events
				        after = this.defaultArg(after, -1);
				        this._state.forEachFrom(after, function (event) {
				            var duration;
				            if (event.state === Tone.State.Started) {
				                if (!this.isUndef(event.id)) {
				                    Tone.Transport.clear(event.id);
				                }
				                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);
				                if (this._loop) {
				                    duration = Infinity;
				                    if (this.isNumber(this._loop)) {
				                        duration = this._loop * this._getLoopDuration();
				                    }
				                    var nextEvent = this._state.getEventAfter(startTick);
				                    if (nextEvent !== null) {
				                        duration = Math.min(duration, nextEvent.time - startTick);
				                    }
				                    if (duration !== Infinity) {
				                        //schedule a stop since it's finite duration
				                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);
				                        duration = Tone.Time(duration, 'i');
				                    }
				                    var interval = Tone.Time(this._getLoopDuration(), 'i');
				                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);
				                } else {
				                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');
				                }
				            }
				        }.bind(this));
				        return this;
				    };
				    /**
					 *  Returns the playback state of the note, either "started" or "stopped".
					 *  @type {String}
					 *  @readOnly
					 *  @memberOf Tone.Event#
					 *  @name state
					 */
				    Object.defineProperty(Tone.Event.prototype, 'state', {
				        get: function () {
				            return this._state.getStateAtTime(Tone.Transport.ticks);
				        }
				    });
				    /**
					 *  The start from the scheduled start time
					 *  @type {Ticks}
					 *  @memberOf Tone.Event#
					 *  @name startOffset
					 *  @private
					 */
				    Object.defineProperty(Tone.Event.prototype, 'startOffset', {
				        get: function () {
				            return this._startOffset;
				        },
				        set: function (offset) {
				            this._startOffset = offset;
				        }
				    });
				    /**
					 *  Start the note at the given time. 
					 *  @param  {TimelinePosition}  time  When the note should start.
					 *  @return  {Tone.Event}  this
					 */
				    Tone.Event.prototype.start = function (time) {
				        time = this.toTicks(time);
				        if (this._state.getStateAtTime(time) === Tone.State.Stopped) {
				            this._state.addEvent({
				                'state': Tone.State.Started,
				                'time': time,
				                'id': undefined
				            });
				            this._rescheduleEvents(time);
				        }
				        return this;
				    };
				    /**
					 *  Stop the Event at the given time.
					 *  @param  {TimelinePosition}  time  When the note should stop.
					 *  @return  {Tone.Event}  this
					 */
				    Tone.Event.prototype.stop = function (time) {
				        this.cancel(time);
				        time = this.toTicks(time);
				        if (this._state.getStateAtTime(time) === Tone.State.Started) {
				            this._state.setStateAtTime(Tone.State.Stopped, time);
				            var previousEvent = this._state.getEventBefore(time);
				            var reschedulTime = time;
				            if (previousEvent !== null) {
				                reschedulTime = previousEvent.time;
				            }
				            this._rescheduleEvents(reschedulTime);
				        }
				        return this;
				    };
				    /**
					 *  Cancel all scheduled events greater than or equal to the given time
					 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
					 *  @return  {Tone.Event}  this
					 */
				    Tone.Event.prototype.cancel = function (time) {
				        time = this.defaultArg(time, -Infinity);
				        time = this.toTicks(time);
				        this._state.forEachFrom(time, function (event) {
				            Tone.Transport.clear(event.id);
				        });
				        this._state.cancel(time);
				        return this;
				    };
				    /**
					 *  The callback function invoker. Also 
					 *  checks if the Event is done playing
					 *  @param  {Number}  time  The time of the event in seconds
					 *  @private
					 */
				    Tone.Event.prototype._tick = function (time) {
				        if (!this.mute && this._state.getStateAtTime(Tone.Transport.ticks) === Tone.State.Started) {
				            if (this.probability < 1 && Math.random() > this.probability) {
				                return;
				            }
				            if (this.humanize) {
				                var variation = 0.02;
				                if (!this.isBoolean(this.humanize)) {
				                    variation = this.toSeconds(this.humanize);
				                }
				                time += (Math.random() * 2 - 1) * variation;
				            }
				            this.callback(time, this.value);
				        }
				    };
				    /**
					 *  Get the duration of the loop.
					 *  @return  {Ticks}
					 *  @private
					 */
				    Tone.Event.prototype._getLoopDuration = function () {
				        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
				    };
				    /**
					 *  If the note should loop or not
					 *  between Tone.Event.loopStart and 
					 *  Tone.Event.loopEnd. An integer
					 *  value corresponds to the number of
					 *  loops the Event does after it starts.
					 *  @memberOf Tone.Event#
					 *  @type {Boolean|Positive}
					 *  @name loop
					 */
				    Object.defineProperty(Tone.Event.prototype, 'loop', {
				        get: function () {
				            return this._loop;
				        },
				        set: function (loop) {
				            this._loop = loop;
				            this._rescheduleEvents();
				        }
				    });
				    /**
					 * 	The playback rate of the note. Defaults to 1.
					 *  @memberOf Tone.Event#
					 *  @type {Positive}
					 *  @name playbackRate
					 *  @example
					 * note.loop = true;
					 * //repeat the note twice as fast
					 * note.playbackRate = 2;
					 */
				    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {
				        get: function () {
				            return this._playbackRate;
				        },
				        set: function (rate) {
				            this._playbackRate = rate;
				            this._rescheduleEvents();
				        }
				    });
				    /**
					 *  The loopEnd point is the time the event will loop
					 *  if Tone.Event.loop is true.
					 *  @memberOf Tone.Event#
					 *  @type {TransportTime}
					 *  @name loopEnd
					 */
				    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {
				        get: function () {
				            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
				        },
				        set: function (loopEnd) {
				            this._loopEnd = this.toTicks(loopEnd);
				            if (this._loop) {
				                this._rescheduleEvents();
				            }
				        }
				    });
				    /**
					 *  The time when the loop should start. 
					 *  @memberOf Tone.Event#
					 *  @type {TransportTime}
					 *  @name loopStart
					 */
				    Object.defineProperty(Tone.Event.prototype, 'loopStart', {
				        get: function () {
				            return Tone.TransportTime(this._loopStart, 'i').toNotation();
				        },
				        set: function (loopStart) {
				            this._loopStart = this.toTicks(loopStart);
				            if (this._loop) {
				                this._rescheduleEvents();
				            }
				        }
				    });
				    /**
					 *  The current progress of the loop interval.
					 *  Returns 0 if the event is not started yet or
					 *  it is not set to loop.
					 *  @memberOf Tone.Event#
					 *  @type {NormalRange}
					 *  @name progress
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Event.prototype, 'progress', {
				        get: function () {
				            if (this._loop) {
				                var ticks = Tone.Transport.ticks;
				                var lastEvent = this._state.getEvent(ticks);
				                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {
				                    var loopDuration = this._getLoopDuration();
				                    var progress = (ticks - lastEvent.time) % loopDuration;
				                    return progress / loopDuration;
				                } else {
				                    return 0;
				                }
				            } else {
				                return 0;
				            }
				        }
				    });
				    /**
					 *  Clean up
					 *  @return  {Tone.Event}  this
					 */
				    Tone.Event.prototype.dispose = function () {
				        this.cancel();
				        this._state.dispose();
				        this._state = null;
				        this.callback = null;
				        this.value = null;
				    };
				    return Tone.Event;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.Loop creates a looped callback at the 
					 *         specified interval. The callback can be 
					 *         started, stopped and scheduled along
					 *         the Transport's timeline. 
					 *  @example
					 * var loop = new Tone.Loop(function(time){
					 * 	//triggered every eighth note. 
					 * 	console.log(time);
					 * }, "8n").start(0);
					 * Tone.Transport.start();
					 *  @extends {Tone}
					 *  @param {Function} callback The callback to invoke with the event.
					 *  @param {Time} interval The time between successive callback calls. 
					 */
				    Tone.Loop = function () {
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'interval'
				        ], Tone.Loop.defaults);
				        /**
						 *  The event which produces the callbacks
						 */
				        this._event = new Tone.Event({
				            'callback': this._tick.bind(this),
				            'loop': true,
				            'loopEnd': options.interval,
				            'playbackRate': options.playbackRate,
				            'probability': options.probability
				        });
				        /**
						 *  The callback to invoke with the next event in the pattern
						 *  @type {Function}
						 */
				        this.callback = options.callback;
				        //set the iterations
				        this.iterations = options.iterations;
				    };
				    Tone.extend(Tone.Loop);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Loop.defaults = {
				        'interval': '4n',
				        'callback': Tone.noOp,
				        'playbackRate': 1,
				        'iterations': Infinity,
				        'probability': true,
				        'mute': false
				    };
				    /**
					 *  Start the loop at the specified time along the Transport's
					 *  timeline.
					 *  @param  {TimelinePosition=}  time  When to start the Loop.
					 *  @return  {Tone.Loop}  this
					 */
				    Tone.Loop.prototype.start = function (time) {
				        this._event.start(time);
				        return this;
				    };
				    /**
					 *  Stop the loop at the given time.
					 *  @param  {TimelinePosition=}  time  When to stop the Arpeggio
					 *  @return  {Tone.Loop}  this
					 */
				    Tone.Loop.prototype.stop = function (time) {
				        this._event.stop(time);
				        return this;
				    };
				    /**
					 *  Cancel all scheduled events greater than or equal to the given time
					 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
					 *  @return  {Tone.Loop}  this
					 */
				    Tone.Loop.prototype.cancel = function (time) {
				        this._event.cancel(time);
				        return this;
				    };
				    /**
					 *  Internal function called when the notes should be called
					 *  @param  {Number}  time  The time the event occurs
					 *  @private
					 */
				    Tone.Loop.prototype._tick = function (time) {
				        this.callback(time);
				    };
				    /**
					 *  The state of the Loop, either started or stopped.
					 *  @memberOf Tone.Loop#
					 *  @type {String}
					 *  @name state
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'state', {
				        get: function () {
				            return this._event.state;
				        }
				    });
				    /**
					 *  The progress of the loop as a value between 0-1. 0, when
					 *  the loop is stopped or done iterating. 
					 *  @memberOf Tone.Loop#
					 *  @type {NormalRange}
					 *  @name progress
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'progress', {
				        get: function () {
				            return this._event.progress;
				        }
				    });
				    /**
					 *  The time between successive callbacks. 
					 *  @example
					 * loop.interval = "8n"; //loop every 8n
					 *  @memberOf Tone.Loop#
					 *  @type {Time}
					 *  @name interval
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'interval', {
				        get: function () {
				            return this._event.loopEnd;
				        },
				        set: function (interval) {
				            this._event.loopEnd = interval;
				        }
				    });
				    /**
					 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
					 *  A `playbackRate` of 2 would be twice as fast. 
					 *  @memberOf Tone.Loop#
					 *  @type {Time}
					 *  @name playbackRate
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {
				        get: function () {
				            return this._event.playbackRate;
				        },
				        set: function (rate) {
				            this._event.playbackRate = rate;
				        }
				    });
				    /**
					 *  Random variation +/-0.01s to the scheduled time. 
					 *  Or give it a time value which it will randomize by.
					 *  @type {Boolean|Time}
					 *  @memberOf Tone.Loop#
					 *  @name humanize
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'humanize', {
				        get: function () {
				            return this._event.humanize;
				        },
				        set: function (variation) {
				            this._event.humanize = variation;
				        }
				    });
				    /**
					 *  The probably of the callback being invoked.
					 *  @memberOf Tone.Loop#
					 *  @type {NormalRange}
					 *  @name probability
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'probability', {
				        get: function () {
				            return this._event.probability;
				        },
				        set: function (prob) {
				            this._event.probability = prob;
				        }
				    });
				    /**
					 *  Muting the Loop means that no callbacks are invoked.
					 *  @memberOf Tone.Loop#
					 *  @type {Boolean}
					 *  @name mute
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'mute', {
				        get: function () {
				            return this._event.mute;
				        },
				        set: function (mute) {
				            this._event.mute = mute;
				        }
				    });
				    /**
					 *  The number of iterations of the loop. The default
					 *  value is Infinity (loop forever).
					 *  @memberOf Tone.Loop#
					 *  @type {Positive}
					 *  @name iterations
					 */
				    Object.defineProperty(Tone.Loop.prototype, 'iterations', {
				        get: function () {
				            if (this._event.loop === true) {
				                return Infinity;
				            } else {
				                return this._event.loop;
				            }
				            return this._pattern.index;
				        },
				        set: function (iters) {
				            if (iters === Infinity) {
				                this._event.loop = true;
				            } else {
				                this._event.loop = iters;
				            }
				        }
				    });
				    /**
					 *  Clean up
					 *  @return  {Tone.Loop}  this
					 */
				    Tone.Loop.prototype.dispose = function () {
				        this._event.dispose();
				        this._event = null;
				        this.callback = null;
				    };
				    return Tone.Loop;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.Part is a collection Tone.Events which can be
					 *         started/stoped and looped as a single unit.
					 *
					 *  @extends {Tone.Event}
					 *  @param {Function} callback The callback to invoke on each event
					 *  @param {Array} events the array of events
					 *  @example
					 * var part = new Tone.Part(function(time, note){
					 * 	//the notes given as the second element in the array
					 * 	//will be passed in as the second argument
					 * 	synth.triggerAttackRelease(note, "8n", time);
					 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
					 *  @example
					 * //use an array of objects as long as the object has a "time" attribute
					 * var part = new Tone.Part(function(time, value){
					 * 	//the value is an object which contains both the note and the velocity
					 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
					 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9}, 
					 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
					 * ]).start(0);
					 */
				    Tone.Part = function () {
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'events'
				        ], Tone.Part.defaults);
				        /**
						 *  If the part is looping or not
						 *  @type  {Boolean|Positive}
						 *  @private
						 */
				        this._loop = options.loop;
				        /**
						 *  When the note is scheduled to start.
						 *  @type  {Ticks}
						 *  @private
						 */
				        this._loopStart = this.toTicks(options.loopStart);
				        /**
						 *  When the note is scheduled to start.
						 *  @type  {Ticks}
						 *  @private
						 */
				        this._loopEnd = this.toTicks(options.loopEnd);
				        /**
						 *  The playback rate of the part
						 *  @type  {Positive}
						 *  @private
						 */
				        this._playbackRate = options.playbackRate;
				        /**
						 *  private holder of probability value
						 *  @type {NormalRange}
						 *  @private
						 */
				        this._probability = options.probability;
				        /**
						 *  the amount of variation from the
						 *  given time. 
						 *  @type {Boolean|Time}
						 *  @private
						 */
				        this._humanize = options.humanize;
				        /**
						 *  The start offset
						 *  @type {Ticks}
						 *  @private
						 */
				        this._startOffset = 0;
				        /**
						 *  Keeps track of the current state
						 *  @type {Tone.TimelineState}
						 *  @private
						 */
				        this._state = new Tone.TimelineState(Tone.State.Stopped);
				        /**
						 *  An array of Objects. 
						 *  @type  {Array}
						 *  @private
						 */
				        this._events = [];
				        /**
						 *  The callback to invoke at all the scheduled events.
						 *  @type {Function}
						 */
				        this.callback = options.callback;
				        /**
						 *  If mute is true, the callback won't be
						 *  invoked.
						 *  @type {Boolean}
						 */
				        this.mute = options.mute;
				        //add the events
				        var events = this.defaultArg(options.events, []);
				        if (!this.isUndef(options.events)) {
				            for (var i = 0; i < events.length; i++) {
				                if (Array.isArray(events[i])) {
				                    this.add(events[i][0], events[i][1]);
				                } else {
				                    this.add(events[i]);
				                }
				            }
				        }
				    };
				    Tone.extend(Tone.Part, Tone.Event);
				    /**
					 *  The default values
					 *  @type  {Object}
					 *  @const
					 */
				    Tone.Part.defaults = {
				        'callback': Tone.noOp,
				        'loop': false,
				        'loopEnd': '1m',
				        'loopStart': 0,
				        'playbackRate': 1,
				        'probability': 1,
				        'humanize': false,
				        'mute': false
				    };
				    /**
					 *  Start the part at the given time. 
					 *  @param  {TransportTime}  time    When to start the part.
					 *  @param  {Time=}  offset  The offset from the start of the part
					 *                           to begin playing at.
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.start = function (time, offset) {
				        var ticks = this.toTicks(time);
				        if (this._state.getStateAtTime(ticks) !== Tone.State.Started) {
				            if (this._loop) {
				                offset = this.defaultArg(offset, this._loopStart);
				            } else {
				                offset = this.defaultArg(offset, 0);
				            }
				            offset = this.toTicks(offset);
				            this._state.addEvent({
				                'state': Tone.State.Started,
				                'time': ticks,
				                'offset': offset
				            });
				            this._forEach(function (event) {
				                this._startNote(event, ticks, offset);
				            });
				        }
				        return this;
				    };
				    /**
					 *  Start the event in the given event at the correct time given
					 *  the ticks and offset and looping.
					 *  @param  {Tone.Event}  event 
					 *  @param  {Ticks}  ticks
					 *  @param  {Ticks}  offset
					 *  @private
					 */
				    Tone.Part.prototype._startNote = function (event, ticks, offset) {
				        ticks -= offset;
				        if (this._loop) {
				            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
				                if (event.startOffset < offset) {
				                    //start it on the next loop
				                    ticks += this._getLoopDuration();
				                }
				                event.start(Tone.TransportTime(ticks, 'i'));
				            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
				                event.loop = false;
				                event.start(Tone.TransportTime(ticks, 'i'));
				            }
				        } else {
				            if (event.startOffset >= offset) {
				                event.start(Tone.TransportTime(ticks, 'i'));
				            }
				        }
				    };
				    /**
					 *  The start from the scheduled start time
					 *  @type {Ticks}
					 *  @memberOf Tone.Part#
					 *  @name startOffset
					 *  @private
					 */
				    Object.defineProperty(Tone.Part.prototype, 'startOffset', {
				        get: function () {
				            return this._startOffset;
				        },
				        set: function (offset) {
				            this._startOffset = offset;
				            this._forEach(function (event) {
				                event.startOffset += this._startOffset;
				            });
				        }
				    });
				    /**
					 *  Stop the part at the given time.
					 *  @param  {TimelinePosition}  time  When to stop the part.
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.stop = function (time) {
				        var ticks = this.toTicks(time);
				        this._state.cancel(ticks);
				        this._state.setStateAtTime(Tone.State.Stopped, ticks);
				        this._forEach(function (event) {
				            event.stop(time);
				        });
				        return this;
				    };
				    /**
					 *  Get/Set an Event's value at the given time. 
					 *  If a value is passed in and no event exists at
					 *  the given time, one will be created with that value. 
					 *  If two events are at the same time, the first one will
					 *  be returned.
					 *  @example
					 * part.at("1m"); //returns the part at the first measure
					 *
					 * part.at("2m", "C2"); //set the value at "2m" to C2. 
					 * //if an event didn't exist at that time, it will be created.
					 *  @param {TransportTime} time The time of the event to get or set.
					 *  @param {*=} value If a value is passed in, the value of the
					 *                    event at the given time will be set to it.
					 *  @return {Tone.Event} the event at the time
					 */
				    Tone.Part.prototype.at = function (time, value) {
				        time = Tone.TransportTime(time);
				        var tickTime = Tone.Time(1, 'i').toSeconds();
				        for (var i = 0; i < this._events.length; i++) {
				            var event = this._events[i];
				            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {
				                if (!this.isUndef(value)) {
				                    event.value = value;
				                }
				                return event;
				            }
				        }
				        //if there was no event at that time, create one
				        if (!this.isUndef(value)) {
				            this.add(time, value);
				            //return the new event
				            return this._events[this._events.length - 1];
				        } else {
				            return null;
				        }
				    };
				    /**
					 *  Add a an event to the part. 
					 *  @param {Time} time The time the note should start.
					 *                            If an object is passed in, it should
					 *                            have a 'time' attribute and the rest
					 *                            of the object will be used as the 'value'.
					 *  @param  {Tone.Event|*}  value 
					 *  @returns {Tone.Part} this
					 *  @example
					 * part.add("1m", "C#+11");
					 */
				    Tone.Part.prototype.add = function (time, value) {
				        //extract the parameters
				        if (time.hasOwnProperty('time')) {
				            value = time;
				            time = value.time;
				        }
				        time = this.toTicks(time);
				        var event;
				        if (value instanceof Tone.Event) {
				            event = value;
				            event.callback = this._tick.bind(this);
				        } else {
				            event = new Tone.Event({
				                'callback': this._tick.bind(this),
				                'value': value
				            });
				        }
				        //the start offset
				        event.startOffset = time;
				        //initialize the values
				        event.set({
				            'loopEnd': this.loopEnd,
				            'loopStart': this.loopStart,
				            'loop': this.loop,
				            'humanize': this.humanize,
				            'playbackRate': this.playbackRate,
				            'probability': this.probability
				        });
				        this._events.push(event);
				        //start the note if it should be played right now
				        this._restartEvent(event);
				        return this;
				    };
				    /**
					 *  Restart the given event
					 *  @param  {Tone.Event}  event 
					 *  @private
					 */
				    Tone.Part.prototype._restartEvent = function (event) {
				        var stateEvent = this._state.getEvent(Tone.Transport.ticks);
				        if (stateEvent && stateEvent.state === Tone.State.Started) {
				            this._startNote(event, stateEvent.time, stateEvent.offset);
				        }
				    };
				    /**
					 *  Remove an event from the part. Will recursively iterate
					 *  into nested parts to find the event.
					 *  @param {Time} time The time of the event
					 *  @param {*} value Optionally select only a specific event value
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.remove = function (time, value) {
				        //extract the parameters
				        if (time.hasOwnProperty('time')) {
				            value = time;
				            time = value.time;
				        }
				        time = this.toTicks(time);
				        for (var i = this._events.length - 1; i >= 0; i--) {
				            var event = this._events[i];
				            if (event instanceof Tone.Part) {
				                event.remove(time, value);
				            } else {
				                if (event.startOffset === time) {
				                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {
				                        this._events.splice(i, 1);
				                        event.dispose();
				                    }
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Remove all of the notes from the group. 
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.removeAll = function () {
				        this._forEach(function (event) {
				            event.dispose();
				        });
				        this._events = [];
				        return this;
				    };
				    /**
					 *  Cancel scheduled state change events: i.e. "start" and "stop".
					 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.cancel = function (after) {
				        after = this.toTicks(after);
				        this._forEach(function (event) {
				            event.cancel(after);
				        });
				        this._state.cancel(after);
				        return this;
				    };
				    /**
					 *  Iterate over all of the events
					 *  @param {Function} callback
					 *  @param {Object} ctx The context
					 *  @private
					 */
				    Tone.Part.prototype._forEach = function (callback, ctx) {
				        ctx = this.defaultArg(ctx, this);
				        for (var i = this._events.length - 1; i >= 0; i--) {
				            var e = this._events[i];
				            if (e instanceof Tone.Part) {
				                e._forEach(callback, ctx);
				            } else {
				                callback.call(ctx, e);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Set the attribute of all of the events
					 *  @param  {String}  attr  the attribute to set
					 *  @param  {*}  value      The value to set it to
					 *  @private
					 */
				    Tone.Part.prototype._setAll = function (attr, value) {
				        this._forEach(function (event) {
				            event[attr] = value;
				        });
				    };
				    /**
					 *  Internal tick method
					 *  @param  {Number}  time  The time of the event in seconds
					 *  @private
					 */
				    Tone.Part.prototype._tick = function (time, value) {
				        if (!this.mute) {
				            this.callback(time, value);
				        }
				    };
				    /**
					 *  Determine if the event should be currently looping
					 *  given the loop boundries of this Part.
					 *  @param  {Tone.Event}  event  The event to test
					 *  @private
					 */
				    Tone.Part.prototype._testLoopBoundries = function (event) {
				        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {
				            event.cancel();
				        } else {
				            //reschedule it if it's stopped
				            if (event.state === Tone.State.Stopped) {
				                this._restartEvent(event);
				            }
				        }
				    };
				    /**
					 *  The probability of the notes being triggered.
					 *  @memberOf Tone.Part#
					 *  @type {NormalRange}
					 *  @name probability
					 */
				    Object.defineProperty(Tone.Part.prototype, 'probability', {
				        get: function () {
				            return this._probability;
				        },
				        set: function (prob) {
				            this._probability = prob;
				            this._setAll('probability', prob);
				        }
				    });
				    /**
					 *  If set to true, will apply small random variation
					 *  to the callback time. If the value is given as a time, it will randomize
					 *  by that amount.
					 *  @example
					 * event.humanize = true;
					 *  @type {Boolean|Time}
					 *  @name humanize
					 */
				    Object.defineProperty(Tone.Part.prototype, 'humanize', {
				        get: function () {
				            return this._humanize;
				        },
				        set: function (variation) {
				            this._humanize = variation;
				            this._setAll('humanize', variation);
				        }
				    });
				    /**
					 *  If the part should loop or not
					 *  between Tone.Part.loopStart and 
					 *  Tone.Part.loopEnd. An integer
					 *  value corresponds to the number of
					 *  loops the Part does after it starts.
					 *  @memberOf Tone.Part#
					 *  @type {Boolean|Positive}
					 *  @name loop
					 *  @example
					 * //loop the part 8 times
					 * part.loop = 8;
					 */
				    Object.defineProperty(Tone.Part.prototype, 'loop', {
				        get: function () {
				            return this._loop;
				        },
				        set: function (loop) {
				            this._loop = loop;
				            this._forEach(function (event) {
				                event._loopStart = this._loopStart;
				                event._loopEnd = this._loopEnd;
				                event.loop = loop;
				                this._testLoopBoundries(event);
				            });
				        }
				    });
				    /**
					 *  The loopEnd point determines when it will 
					 *  loop if Tone.Part.loop is true.
					 *  @memberOf Tone.Part#
					 *  @type {TransportTime}
					 *  @name loopEnd
					 */
				    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {
				        get: function () {
				            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
				        },
				        set: function (loopEnd) {
				            this._loopEnd = this.toTicks(loopEnd);
				            if (this._loop) {
				                this._forEach(function (event) {
				                    event.loopEnd = this.loopEnd;
				                    this._testLoopBoundries(event);
				                });
				            }
				        }
				    });
				    /**
					 *  The loopStart point determines when it will 
					 *  loop if Tone.Part.loop is true.
					 *  @memberOf Tone.Part#
					 *  @type {TransportTime}
					 *  @name loopStart
					 */
				    Object.defineProperty(Tone.Part.prototype, 'loopStart', {
				        get: function () {
				            return Tone.TransportTime(this._loopStart, 'i').toNotation();
				        },
				        set: function (loopStart) {
				            this._loopStart = this.toTicks(loopStart);
				            if (this._loop) {
				                this._forEach(function (event) {
				                    event.loopStart = this.loopStart;
				                    this._testLoopBoundries(event);
				                });
				            }
				        }
				    });
				    /**
					 * 	The playback rate of the part
					 *  @memberOf Tone.Part#
					 *  @type {Positive}
					 *  @name playbackRate
					 */
				    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {
				        get: function () {
				            return this._playbackRate;
				        },
				        set: function (rate) {
				            this._playbackRate = rate;
				            this._setAll('playbackRate', rate);
				        }
				    });
				    /**
					 * 	The number of scheduled notes in the part. 
					 *  @memberOf Tone.Part#
					 *  @type {Positive}
					 *  @name length
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Part.prototype, 'length', {
				        get: function () {
				            return this._events.length;
				        }
				    });
				    /**
					 *  Clean up
					 *  @return  {Tone.Part}  this
					 */
				    Tone.Part.prototype.dispose = function () {
				        this.removeAll();
				        this._state.dispose();
				        this._state = null;
				        this.callback = null;
				        this._events = null;
				        return this;
				    };
				    return Tone.Part;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.Pattern arpeggiates between the given notes
					 *         in a number of patterns. See Tone.CtrlPattern for
					 *         a full list of patterns.
					 *  @example
					 * var pattern = new Tone.Pattern(function(time, note){
					 *   //the order of the notes passed in depends on the pattern
					 * }, ["C2", "D4", "E5", "A6"], "upDown");
					 *  @extends {Tone.Loop}
					 *  @param {Function} callback The callback to invoke with the
					 *                             event.
					 *  @param {Array} values The values to arpeggiate over.
					 */
				    Tone.Pattern = function () {
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'values',
				            'pattern'
				        ], Tone.Pattern.defaults);
				        Tone.Loop.call(this, options);
				        /**
						 *  The pattern manager
						 *  @type {Tone.CtrlPattern}
						 *  @private
						 */
				        this._pattern = new Tone.CtrlPattern({
				            'values': options.values,
				            'type': options.pattern,
				            'index': options.index
				        });
				    };
				    Tone.extend(Tone.Pattern, Tone.Loop);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.Pattern.defaults = {
				        'pattern': Tone.CtrlPattern.Type.Up,
				        'values': []
				    };
				    /**
					 *  Internal function called when the notes should be called
					 *  @param  {Number}  time  The time the event occurs
					 *  @private
					 */
				    Tone.Pattern.prototype._tick = function (time) {
				        this.callback(time, this._pattern.value);
				        this._pattern.next();
				    };
				    /**
					 *  The current index in the values array.
					 *  @memberOf Tone.Pattern#
					 *  @type {Positive}
					 *  @name index
					 */
				    Object.defineProperty(Tone.Pattern.prototype, 'index', {
				        get: function () {
				            return this._pattern.index;
				        },
				        set: function (i) {
				            this._pattern.index = i;
				        }
				    });
				    /**
					 *  The array of events.
					 *  @memberOf Tone.Pattern#
					 *  @type {Array}
					 *  @name values
					 */
				    Object.defineProperty(Tone.Pattern.prototype, 'values', {
				        get: function () {
				            return this._pattern.values;
				        },
				        set: function (vals) {
				            this._pattern.values = vals;
				        }
				    });
				    /**
					 *  The current value of the pattern.
					 *  @memberOf Tone.Pattern#
					 *  @type {*}
					 *  @name value
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Pattern.prototype, 'value', {
				        get: function () {
				            return this._pattern.value;
				        }
				    });
				    /**
					 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
					 *  @memberOf Tone.Pattern#
					 *  @type {String}
					 *  @name pattern
					 */
				    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {
				        get: function () {
				            return this._pattern.type;
				        },
				        set: function (pattern) {
				            this._pattern.type = pattern;
				        }
				    });
				    /**
					 *  Clean up
					 *  @return  {Tone.Pattern}  this
					 */
				    Tone.Pattern.prototype.dispose = function () {
				        Tone.Loop.prototype.dispose.call(this);
				        this._pattern.dispose();
				        this._pattern = null;
				    };
				    return Tone.Pattern;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class A sequence is an alternate notation of a part. Instead
					 *         of passing in an array of [time, event] pairs, pass
					 *         in an array of events which will be spaced at the
					 *         given subdivision. Sub-arrays will subdivide that beat
					 *         by the number of items are in the array. 
					 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
					 *  @param  {Function}  callback  The callback to invoke with every note
					 *  @param  {Array}    events  The sequence
					 *  @param  {Time} subdivision  The subdivision between which events are placed. 
					 *  @extends {Tone.Part}
					 *  @example
					 * var seq = new Tone.Sequence(function(time, note){
					 * 	console.log(note);
					 * //straight quater notes
					 * }, ["C4", "E4", "G4", "A4"], "4n");
					 *  @example
					 * var seq = new Tone.Sequence(function(time, note){
					 * 	console.log(note);
					 * //subdivisions are given as subarrays
					 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
					 */
				    Tone.Sequence = function () {
				        var options = this.optionsObject(arguments, [
				            'callback',
				            'events',
				            'subdivision'
				        ], Tone.Sequence.defaults);
				        //remove the events
				        var events = options.events;
				        delete options.events;
				        Tone.Part.call(this, options);
				        /**
						 *  The subdivison of each note
						 *  @type  {Ticks}
						 *  @private
						 */
				        this._subdivision = this.toTicks(options.subdivision);
				        //if no time was passed in, the loop end is the end of the cycle
				        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {
				            this._loopEnd = events.length * this._subdivision;
				        }
				        //defaults to looping
				        this._loop = true;
				        //add all of the events
				        if (!this.isUndef(events)) {
				            for (var i = 0; i < events.length; i++) {
				                this.add(i, events[i]);
				            }
				        }
				    };
				    Tone.extend(Tone.Sequence, Tone.Part);
				    /**
					 *  The default values.
					 *  @type  {Object}
					 */
				    Tone.Sequence.defaults = { 'subdivision': '4n' };
				    /**
					 *  The subdivision of the sequence. This can only be 
					 *  set in the constructor. The subdivision is the 
					 *  interval between successive steps. 
					 *  @type {Time}
					 *  @memberOf Tone.Sequence#
					 *  @name subdivision
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {
				        get: function () {
				            return Tone.Time(this._subdivision, 'i').toNotation();
				        }
				    });
				    /**
					 *  Get/Set an index of the sequence. If the index contains a subarray, 
					 *  a Tone.Sequence representing that sub-array will be returned. 
					 *  @example
					 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
					 * sequence.at(0)// => returns "E4"
					 * //set a value
					 * sequence.at(0, "G3");
					 * //get a nested sequence
					 * sequence.at(3).at(1)// => returns "Bb3"
					 * @param {Positive} index The index to get or set
					 * @param {*} value Optionally pass in the value to set at the given index.
					 */
				    Tone.Sequence.prototype.at = function (index, value) {
				        //if the value is an array, 
				        if (this.isArray(value)) {
				            //remove the current event at that index
				            this.remove(index);
				        }
				        //call the parent's method
				        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);
				    };
				    /**
					 *  Add an event at an index, if there's already something
					 *  at that index, overwrite it. If `value` is an array, 
					 *  it will be parsed as a subsequence.
					 *  @param {Number} index The index to add the event to
					 *  @param {*} value The value to add at that index
					 *  @returns {Tone.Sequence} this
					 */
				    Tone.Sequence.prototype.add = function (index, value) {
				        if (value === null) {
				            return this;
				        }
				        if (this.isArray(value)) {
				            //make a subsequence and add that to the sequence
				            var subSubdivision = Math.round(this._subdivision / value.length);
				            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));
				        }
				        Tone.Part.prototype.add.call(this, this._indexTime(index), value);
				        return this;
				    };
				    /**
					 *  Remove a value from the sequence by index
					 *  @param {Number} index The index of the event to remove
					 *  @returns {Tone.Sequence} this
					 */
				    Tone.Sequence.prototype.remove = function (index, value) {
				        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);
				        return this;
				    };
				    /**
					 *  Get the time of the index given the Sequence's subdivision
					 *  @param  {Number}  index 
					 *  @return  {Time}  The time of that index
					 *  @private
					 */
				    Tone.Sequence.prototype._indexTime = function (index) {
				        if (index instanceof Tone.TransportTime) {
				            return index;
				        } else {
				            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');
				        }
				    };
				    /**
					 *  Clean up.
					 *  @return {Tone.Sequence} this
					 */
				    Tone.Sequence.prototype.dispose = function () {
				        Tone.Part.prototype.dispose.call(this);
				        return this;
				    };
				    return Tone.Sequence;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
					 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is 
					 *         a square and only odd-numbered harmonics are present. At all other widths 
					 *         even-numbered harmonics are present. Read more 
					 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
					 *
					 *  @constructor
					 *  @extends {Tone.Oscillator}
					 *  @param {Frequency} [frequency] The frequency of the oscillator
					 *  @param {NormalRange} [width] The width of the pulse
					 *  @example
					 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
					 */
				    Tone.PulseOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'width'
				        ], Tone.Oscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The width of the pulse. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
				        /**
						 *  gate the width amount
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._widthGate = new Tone.Gain();
				        /**
						 *  the sawtooth oscillator
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._sawtooth = new Tone.Oscillator({
				            frequency: options.frequency,
				            detune: options.detune,
				            type: 'sawtooth',
				            phase: options.phase
				        });
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this._sawtooth.frequency;
				        /**
						 *  The detune in cents. 
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this._sawtooth.detune;
				        /**
						 *  Threshold the signal to turn it into a square
						 *  @type {Tone.WaveShaper}
						 *  @private
						 */
				        this._thresh = new Tone.WaveShaper(function (val) {
				            if (val < 0) {
				                return -1;
				            } else {
				                return 1;
				            }
				        });
				        //connections
				        this._sawtooth.chain(this._thresh, this.output);
				        this.width.chain(this._widthGate, this._thresh);
				        this._readOnly([
				            'width',
				            'frequency',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);
				    /**
					 *  The default parameters.
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.PulseOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'width': 0.2
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} time 
					 *  @private
					 */
				    Tone.PulseOscillator.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._sawtooth.start(time);
				        this._widthGate.gain.setValueAtTime(1, time);
				    };
				    /**
					 *  stop the oscillator
					 *  @param  {Time} time 
					 *  @private
					 */
				    Tone.PulseOscillator.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._sawtooth.stop(time);
				        //the width is still connected to the output. 
				        //that needs to be stopped also
				        this._widthGate.gain.setValueAtTime(0, time);
				    };
				    /**
					 * The phase of the oscillator in degrees.
					 * @memberOf Tone.PulseOscillator#
					 * @type {Degrees}
					 * @name phase
					 */
				    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {
				        get: function () {
				            return this._sawtooth.phase;
				        },
				        set: function (phase) {
				            this._sawtooth.phase = phase;
				        }
				    });
				    /**
					 * The type of the oscillator. Always returns "pulse".
					 * @readOnly
					 * @memberOf Tone.PulseOscillator#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {
				        get: function () {
				            return 'pulse';
				        }
				    });
				    /**
					 * The partials of the waveform. Cannot set partials for this waveform type
					 * @memberOf Tone.PulseOscillator#
					 * @type {Array}
					 * @name partials
					 * @private
					 */
				    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {
				        get: function () {
				            return [];
				        }
				    });
				    /**
					 *  Clean up method.
					 *  @return {Tone.PulseOscillator} this
					 */
				    Tone.PulseOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._sawtooth.dispose();
				        this._sawtooth = null;
				        this._writable([
				            'width',
				            'frequency',
				            'detune'
				        ]);
				        this.width.dispose();
				        this.width = null;
				        this._widthGate.dispose();
				        this._widthGate = null;
				        this._thresh.dispose();
				        this._thresh = null;
				        this.frequency = null;
				        this.detune = null;
				        return this;
				    };
				    return Tone.PulseOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator 
					 *         at the modulationFrequency. This has the effect of continuously
					 *         changing the timbre of the oscillator by altering the harmonics 
					 *         generated.
					 *
					 *  @extends {Tone.Oscillator}
					 *  @constructor
					 *  @param {Frequency} frequency The starting frequency of the oscillator. 
					 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. 
					 *  @example
					 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
					 */
				    Tone.PWMOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'modulationFrequency'
				        ], Tone.PWMOscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  the pulse oscillator
						 *  @type {Tone.PulseOscillator}
						 *  @private
						 */
				        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);
				        //change the pulse oscillator type
				        this._pulse._sawtooth.type = 'sine';
				        /**
						 *  the modulator
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._modulator = new Tone.Oscillator({
				            'frequency': options.frequency,
				            'detune': options.detune,
				            'phase': options.phase
				        });
				        /**
						 *  Scale the oscillator so it doesn't go silent 
						 *  at the extreme values.
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._scale = new Tone.Multiply(2);
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this._modulator.frequency;
				        /**
						 *  The detune of the oscillator.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this._modulator.detune;
				        /**
						 *  The modulation rate of the oscillator. 
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.modulationFrequency = this._pulse.frequency;
				        //connections
				        this._modulator.chain(this._scale, this._pulse.width);
				        this._pulse.connect(this.output);
				        this._readOnly([
				            'modulationFrequency',
				            'frequency',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.PWMOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'modulationFrequency': 0.4
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} [time=now]
					 *  @private
					 */
				    Tone.PWMOscillator.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.start(time);
				        this._pulse.start(time);
				    };
				    /**
					 *  stop the oscillator
					 *  @param  {Time} time (optional) timing parameter
					 *  @private
					 */
				    Tone.PWMOscillator.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.stop(time);
				        this._pulse.stop(time);
				    };
				    /**
					 * The type of the oscillator. Always returns "pwm".
					 * @readOnly
					 * @memberOf Tone.PWMOscillator#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {
				        get: function () {
				            return 'pwm';
				        }
				    });
				    /**
					 * The partials of the waveform. Cannot set partials for this waveform type
					 * @memberOf Tone.PWMOscillator#
					 * @type {Array}
					 * @name partials
					 * @private
					 */
				    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {
				        get: function () {
				            return [];
				        }
				    });
				    /**
					 * The phase of the oscillator in degrees.
					 * @memberOf Tone.PWMOscillator#
					 * @type {number}
					 * @name phase
					 */
				    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {
				        get: function () {
				            return this._modulator.phase;
				        },
				        set: function (phase) {
				            this._modulator.phase = phase;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return {Tone.PWMOscillator} this
					 */
				    Tone.PWMOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._pulse.dispose();
				        this._pulse = null;
				        this._scale.dispose();
				        this._scale = null;
				        this._modulator.dispose();
				        this._modulator = null;
				        this._writable([
				            'modulationFrequency',
				            'frequency',
				            'detune'
				        ]);
				        this.frequency = null;
				        this.detune = null;
				        this.modulationFrequency = null;
				        return this;
				    };
				    return Tone.PWMOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.FMOscillator 
					 *
					 *  @extends {Tone.Oscillator}
					 *  @constructor
					 *  @param {Frequency} frequency The starting frequency of the oscillator. 
					 *  @param {String} type The type of the carrier oscillator.
					 *  @param {String} modulationType The type of the modulator oscillator.
					 *  @example
					 * //a sine oscillator frequency-modulated by a square wave
					 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
					 */
				    Tone.FMOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type',
				            'modulationType'
				        ], Tone.FMOscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The carrier oscillator
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._carrier = new Tone.Oscillator(options.frequency, options.type);
				        /**
						 *  The oscillator's frequency
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The detune control signal.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this._carrier.detune;
				        this.detune.value = options.detune;
				        /**
						 *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
						 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
						 *  modulating signal (ma) -- as in ma/mf. 
						 *	@type {Positive}
						 *	@signal
						 */
				        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
				        this.modulationIndex.units = Tone.Type.Positive;
				        /**
						 *  The modulating oscillator
						 *  @type  {Tone.Oscillator}
						 *  @private
						 */
				        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
				        /**
						 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
						 *  A harmonicity of 1 gives both oscillators the same frequency. 
						 *  Harmonicity = 2 means a change of an octave. 
						 *  @type {Positive}
						 *  @signal
						 *  @example
						 * //pitch the modulator an octave below carrier
						 * synth.harmonicity.value = 0.5;
						 */
				        this.harmonicity = new Tone.Multiply(options.harmonicity);
				        this.harmonicity.units = Tone.Type.Positive;
				        /**
						 *  the node where the modulation happens
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._modulationNode = new Tone.Gain(0);
				        //connections
				        this.frequency.connect(this._carrier.frequency);
				        this.frequency.chain(this.harmonicity, this._modulator.frequency);
				        this.frequency.chain(this.modulationIndex, this._modulationNode);
				        this._modulator.connect(this._modulationNode.gain);
				        this._modulationNode.connect(this._carrier.frequency);
				        this._carrier.connect(this.output);
				        this.detune.connect(this._modulator.detune);
				        this.phase = options.phase;
				        this._readOnly([
				            'modulationIndex',
				            'frequency',
				            'detune',
				            'harmonicity'
				        ]);
				    };
				    Tone.extend(Tone.FMOscillator, Tone.Oscillator);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.FMOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'modulationIndex': 2,
				        'modulationType': 'square',
				        'harmonicity': 1
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} [time=now]
					 *  @private
					 */
				    Tone.FMOscillator.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.start(time);
				        this._carrier.start(time);
				    };
				    /**
					 *  stop the oscillator
					 *  @param  {Time} time (optional) timing parameter
					 *  @private
					 */
				    Tone.FMOscillator.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.stop(time);
				        this._carrier.stop(time);
				    };
				    /**
					 * The type of the carrier oscillator
					 * @memberOf Tone.FMOscillator#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {
				        get: function () {
				            return this._carrier.type;
				        },
				        set: function (type) {
				            this._carrier.type = type;
				        }
				    });
				    /**
					 * The type of the modulator oscillator
					 * @memberOf Tone.FMOscillator#
					 * @type {String}
					 * @name modulationType
					 */
				    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {
				        get: function () {
				            return this._modulator.type;
				        },
				        set: function (type) {
				            this._modulator.type = type;
				        }
				    });
				    /**
					 * The phase of the oscillator in degrees.
					 * @memberOf Tone.FMOscillator#
					 * @type {number}
					 * @name phase
					 */
				    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {
				        get: function () {
				            return this._carrier.phase;
				        },
				        set: function (phase) {
				            this._carrier.phase = phase;
				            this._modulator.phase = phase;
				        }
				    });
				    /**
					 * The partials of the carrier waveform. A partial represents 
					 * the amplitude at a harmonic. The first harmonic is the 
					 * fundamental frequency, the second is the octave and so on
					 * following the harmonic series. 
					 * Setting this value will automatically set the type to "custom". 
					 * The value is an empty array when the type is not "custom". 
					 * @memberOf Tone.FMOscillator#
					 * @type {Array}
					 * @name partials
					 * @example
					 * osc.partials = [1, 0.2, 0.01];
					 */
				    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {
				        get: function () {
				            return this._carrier.partials;
				        },
				        set: function (partials) {
				            this._carrier.partials = partials;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return {Tone.FMOscillator} this
					 */
				    Tone.FMOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._writable([
				            'modulationIndex',
				            'frequency',
				            'detune',
				            'harmonicity'
				        ]);
				        this.frequency.dispose();
				        this.frequency = null;
				        this.detune = null;
				        this.harmonicity.dispose();
				        this.harmonicity = null;
				        this._carrier.dispose();
				        this._carrier = null;
				        this._modulator.dispose();
				        this._modulator = null;
				        this._modulationNode.dispose();
				        this._modulationNode = null;
				        this.modulationIndex.dispose();
				        this.modulationIndex = null;
				        return this;
				    };
				    return Tone.FMOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.AMOscillator 
					 *
					 *  @extends {Tone.Oscillator}
					 *  @constructor
					 *  @param {Frequency} frequency The starting frequency of the oscillator. 
					 *  @param {String} type The type of the carrier oscillator.
					 *  @param {String} modulationType The type of the modulator oscillator.
					 *  @example
					 * //a sine oscillator frequency-modulated by a square wave
					 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
					 */
				    Tone.AMOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type',
				            'modulationType'
				        ], Tone.AMOscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The carrier oscillator
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._carrier = new Tone.Oscillator(options.frequency, options.type);
				        /**
						 *  The oscillator's frequency
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this._carrier.frequency;
				        /**
						 *  The detune control signal.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this._carrier.detune;
				        this.detune.value = options.detune;
				        /**
						 *  The modulating oscillator
						 *  @type  {Tone.Oscillator}
						 *  @private
						 */
				        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
				        /**
						 *  convert the -1,1 output to 0,1
						 *  @type {Tone.AudioToGain}
						 *  @private
						 */
				        this._modulationScale = new Tone.AudioToGain();
				        /**
						 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
						 *  A harmonicity of 1 gives both oscillators the same frequency. 
						 *  Harmonicity = 2 means a change of an octave. 
						 *  @type {Positive}
						 *  @signal
						 *  @example
						 * //pitch the modulator an octave below carrier
						 * synth.harmonicity.value = 0.5;
						 */
				        this.harmonicity = new Tone.Multiply(options.harmonicity);
				        this.harmonicity.units = Tone.Type.Positive;
				        /**
						 *  the node where the modulation happens
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._modulationNode = new Tone.Gain(0);
				        //connections
				        this.frequency.chain(this.harmonicity, this._modulator.frequency);
				        this.detune.connect(this._modulator.detune);
				        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
				        this._carrier.chain(this._modulationNode, this.output);
				        this.phase = options.phase;
				        this._readOnly([
				            'frequency',
				            'detune',
				            'harmonicity'
				        ]);
				    };
				    Tone.extend(Tone.AMOscillator, Tone.Oscillator);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.AMOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'modulationType': 'square',
				        'harmonicity': 1
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} [time=now]
					 *  @private
					 */
				    Tone.AMOscillator.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.start(time);
				        this._carrier.start(time);
				    };
				    /**
					 *  stop the oscillator
					 *  @param  {Time} time (optional) timing parameter
					 *  @private
					 */
				    Tone.AMOscillator.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._modulator.stop(time);
				        this._carrier.stop(time);
				    };
				    /**
					 * The type of the carrier oscillator
					 * @memberOf Tone.AMOscillator#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {
				        get: function () {
				            return this._carrier.type;
				        },
				        set: function (type) {
				            this._carrier.type = type;
				        }
				    });
				    /**
					 * The type of the modulator oscillator
					 * @memberOf Tone.AMOscillator#
					 * @type {string}
					 * @name modulationType
					 */
				    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {
				        get: function () {
				            return this._modulator.type;
				        },
				        set: function (type) {
				            this._modulator.type = type;
				        }
				    });
				    /**
					 * The phase of the oscillator in degrees.
					 * @memberOf Tone.AMOscillator#
					 * @type {number}
					 * @name phase
					 */
				    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {
				        get: function () {
				            return this._carrier.phase;
				        },
				        set: function (phase) {
				            this._carrier.phase = phase;
				            this._modulator.phase = phase;
				        }
				    });
				    /**
					 * The partials of the carrier waveform. A partial represents 
					 * the amplitude at a harmonic. The first harmonic is the 
					 * fundamental frequency, the second is the octave and so on
					 * following the harmonic series. 
					 * Setting this value will automatically set the type to "custom". 
					 * The value is an empty array when the type is not "custom". 
					 * @memberOf Tone.AMOscillator#
					 * @type {Array}
					 * @name partials
					 * @example
					 * osc.partials = [1, 0.2, 0.01];
					 */
				    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {
				        get: function () {
				            return this._carrier.partials;
				        },
				        set: function (partials) {
				            this._carrier.partials = partials;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return {Tone.AMOscillator} this
					 */
				    Tone.AMOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'detune',
				            'harmonicity'
				        ]);
				        this.frequency = null;
				        this.detune = null;
				        this.harmonicity.dispose();
				        this.harmonicity = null;
				        this._carrier.dispose();
				        this._carrier = null;
				        this._modulator.dispose();
				        this._modulator = null;
				        this._modulationNode.dispose();
				        this._modulationNode = null;
				        this._modulationScale.dispose();
				        this._modulationScale = null;
				        return this;
				    };
				    return Tone.AMOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.FatOscillator 
					 *
					 *  @extends {Tone.Oscillator}
					 *  @constructor
					 *  @param {Frequency} frequency The starting frequency of the oscillator. 
					 *  @param {String} type The type of the carrier oscillator.
					 *  @param {String} modulationType The type of the modulator oscillator.
					 *  @example
					 * //a sine oscillator frequency-modulated by a square wave
					 * var fmOsc = new Tone.FatOscillator("Ab3", "sine", "square").toMaster().start();
					 */
				    Tone.FatOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type',
				            'spread'
				        ], Tone.FatOscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The oscillator's frequency
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The detune control signal.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        /**
						 *  The array of oscillators
						 *  @type {Array}
						 *  @private
						 */
				        this._oscillators = [];
				        /**
						 *  The total spread of the oscillators
						 *  @type  {Cents}
						 *  @private
						 */
				        this._spread = options.spread;
				        /**
						 *  The type of the oscillator
						 *  @type {String}
						 *  @private
						 */
				        this._type = options.type;
				        /**
						 *  The phase of the oscillators
						 *  @type {Degrees}
						 *  @private
						 */
				        this._phase = options.phase;
				        /**
						 *  The partials array
						 *  @type {Array}
						 *  @private
						 */
				        this._partials = this.defaultArg(options.partials, []);
				        //set the count initially
				        this.count = options.count;
				        this._readOnly([
				            'frequency',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.FatOscillator, Tone.Oscillator);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.FatOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'phase': 0,
				        'spread': 20,
				        'count': 3,
				        'type': 'sawtooth'
				    };
				    /**
					 *  start the oscillator
					 *  @param  {Time} [time=now]
					 *  @private
					 */
				    Tone.FatOscillator.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._forEach(function (osc) {
				            osc.start(time);
				        });
				    };
				    /**
					 *  stop the oscillator
					 *  @param  {Time} time (optional) timing parameter
					 *  @private
					 */
				    Tone.FatOscillator.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._forEach(function (osc) {
				            osc.stop(time);
				        });
				    };
				    /**
					 *  Iterate over all of the oscillators
					 *  @param  {Function}  iterator  The iterator function
					 *  @private
					 */
				    Tone.FatOscillator.prototype._forEach = function (iterator) {
				        for (var i = 0; i < this._oscillators.length; i++) {
				            iterator.call(this, this._oscillators[i], i);
				        }
				    };
				    /**
					 * The type of the carrier oscillator
					 * @memberOf Tone.FatOscillator#
					 * @type {string}
					 * @name type
					 */
				    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {
				        get: function () {
				            return this._type;
				        },
				        set: function (type) {
				            this._type = type;
				            this._forEach(function (osc) {
				                osc.type = type;
				            });
				        }
				    });
				    /**
					 * The detune spread between the oscillators. If "count" is
					 * set to 3 oscillators and the "spread" is set to 40,
					 * the three oscillators would be detuned like this: [-20, 0, 20]
					 * for a total detune spread of 40 cents.
					 * @memberOf Tone.FatOscillator#
					 * @type {Cents}
					 * @name spread
					 */
				    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {
				        get: function () {
				            return this._spread;
				        },
				        set: function (spread) {
				            this._spread = spread;
				            if (this._oscillators.length > 1) {
				                var start = -spread / 2;
				                var step = spread / (this._oscillators.length - 1);
				                this._forEach(function (osc, i) {
				                    osc.detune.value = start + step * i;
				                });
				            }
				        }
				    });
				    /**
					 * The number of detuned oscillators
					 * @memberOf Tone.FatOscillator#
					 * @type {Number}
					 * @name count
					 */
				    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {
				        get: function () {
				            return this._oscillators.length;
				        },
				        set: function (count) {
				            count = Math.max(count, 1);
				            if (this._oscillators.length !== count) {
				                // var partials = this.partials;
				                // var type = this.type;
				                //dispose the previous oscillators
				                this._forEach(function (osc) {
				                    osc.dispose();
				                });
				                this._oscillators = [];
				                for (var i = 0; i < count; i++) {
				                    var osc = new Tone.Oscillator();
				                    if (this.type === Tone.Oscillator.Type.Custom) {
				                        osc.partials = this._partials;
				                    } else {
				                        osc.type = this._type;
				                    }
				                    osc.phase = this._phase;
				                    osc.volume.value = -6 - count;
				                    this.frequency.connect(osc.frequency);
				                    this.detune.connect(osc.detune);
				                    osc.connect(this.output);
				                    this._oscillators[i] = osc;
				                }
				                //set the spread
				                this.spread = this._spread;
				                if (this.state === Tone.State.Started) {
				                    this._forEach(function (osc) {
				                        osc.start();
				                    });
				                }
				            }
				        }
				    });
				    /**
					 * The phase of the oscillator in degrees.
					 * @memberOf Tone.FatOscillator#
					 * @type {Number}
					 * @name phase
					 */
				    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {
				        get: function () {
				            return this._phase;
				        },
				        set: function (phase) {
				            this._phase = phase;
				            this._forEach(function (osc) {
				                osc.phase = phase;
				            });
				        }
				    });
				    /**
					 * The partials of the carrier waveform. A partial represents 
					 * the amplitude at a harmonic. The first harmonic is the 
					 * fundamental frequency, the second is the octave and so on
					 * following the harmonic series. 
					 * Setting this value will automatically set the type to "custom". 
					 * The value is an empty array when the type is not "custom". 
					 * @memberOf Tone.FatOscillator#
					 * @type {Array}
					 * @name partials
					 * @example
					 * osc.partials = [1, 0.2, 0.01];
					 */
				    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {
				        get: function () {
				            return this._partials;
				        },
				        set: function (partials) {
				            this._partials = partials;
				            this._type = Tone.Oscillator.Type.Custom;
				            this._forEach(function (osc) {
				                osc.partials = partials;
				            });
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return {Tone.FatOscillator} this
					 */
				    Tone.FatOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'detune'
				        ]);
				        this.frequency.dispose();
				        this.frequency = null;
				        this.detune.dispose();
				        this.detune = null;
				        this._forEach(function (osc) {
				            osc.dispose();
				        });
				        this._oscillators = null;
				        this._partials = null;
				        return this;
				    };
				    return Tone.FatOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
					 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
					 *         into one class. The oscillator class can be changed by setting the `type`. 
					 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
					 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
					 *         will use the FMOscillator, AMOscillator or FatOscillator respectively. 
					 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
					 *         to a FatOscillator of type "sawtooth". 
					 *
					 *  @extends {Tone.Oscillator}
					 *  @constructor
					 *  @param {Frequency} frequency The initial frequency of the oscillator.
					 *  @param {String} type The type of the oscillator.
					 *  @example
					 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
					 */
				    Tone.OmniOscillator = function () {
				        var options = this.optionsObject(arguments, [
				            'frequency',
				            'type'
				        ], Tone.OmniOscillator.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The detune control
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        /**
						 *  the type of the oscillator source
						 *  @type {String}
						 *  @private
						 */
				        this._sourceType = undefined;
				        /**
						 *  the oscillator
						 *  @type {Tone.Oscillator}
						 *  @private
						 */
				        this._oscillator = null;
				        //set the oscillator
				        this.type = options.type;
				        this._readOnly([
				            'frequency',
				            'detune'
				        ]);
				        //set the options
				        this.set(options);
				    };
				    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);
				    /**
					 *  default values
					 *  @static
					 *  @type {Object}
					 *  @const
					 */
				    Tone.OmniOscillator.defaults = {
				        'frequency': 440,
				        'detune': 0,
				        'type': 'sine',
				        'phase': 0
				    };
				    /**
					 *  @enum {String}
					 *  @private
					 */
				    var OmniOscType = {
				        Pulse: 'PulseOscillator',
				        PWM: 'PWMOscillator',
				        Osc: 'Oscillator',
				        FM: 'FMOscillator',
				        AM: 'AMOscillator',
				        Fat: 'FatOscillator'
				    };
				    /**
					 *  start the oscillator
					 *  @param {Time} [time=now] the time to start the oscillator
					 *  @private
					 */
				    Tone.OmniOscillator.prototype._start = function (time) {
				        this._oscillator.start(time);
				    };
				    /**
					 *  start the oscillator
					 *  @param {Time} [time=now] the time to start the oscillator
					 *  @private
					 */
				    Tone.OmniOscillator.prototype._stop = function (time) {
				        this._oscillator.stop(time);
				    };
				    /**
					 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
					 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
					 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
					 * oscillator's class are accessible when the oscillator is set to that type, but throws an error 
					 * when it's not.
					 * 
					 * @memberOf Tone.OmniOscillator#
					 * @type {String}
					 * @name type
					 * @example
					 * omniOsc.type = "pwm";
					 * //modulationFrequency is parameter which is available
					 * //only when the type is "pwm". 
					 * omniOsc.modulationFrequency.value = 0.5;
					 * @example
					 * //an square wave frequency modulated by a sawtooth
					 * omniOsc.type = "fmsquare";
					 * omniOsc.modulationType = "sawtooth";
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {
				        get: function () {
				            var prefix = '';
				            if (this._sourceType === OmniOscType.FM) {
				                prefix = 'fm';
				            } else if (this._sourceType === OmniOscType.AM) {
				                prefix = 'am';
				            } else if (this._sourceType === OmniOscType.Fat) {
				                prefix = 'fat';
				            }
				            return prefix + this._oscillator.type;
				        },
				        set: function (type) {
				            if (type.substr(0, 2) === 'fm') {
				                this._createNewOscillator(OmniOscType.FM);
				                this._oscillator.type = type.substr(2);
				            } else if (type.substr(0, 2) === 'am') {
				                this._createNewOscillator(OmniOscType.AM);
				                this._oscillator.type = type.substr(2);
				            } else if (type.substr(0, 3) === 'fat') {
				                this._createNewOscillator(OmniOscType.Fat);
				                this._oscillator.type = type.substr(3);
				            } else if (type === 'pwm') {
				                this._createNewOscillator(OmniOscType.PWM);
				            } else if (type === 'pulse') {
				                this._createNewOscillator(OmniOscType.Pulse);
				            } else {
				                this._createNewOscillator(OmniOscType.Osc);
				                this._oscillator.type = type;
				            }
				        }
				    });
				    /**
					 * The partials of the waveform. A partial represents 
					 * the amplitude at a harmonic. The first harmonic is the 
					 * fundamental frequency, the second is the octave and so on
					 * following the harmonic series. 
					 * Setting this value will automatically set the type to "custom". 
					 * The value is an empty array when the type is not "custom". 
					 * This is not available on "pwm" and "pulse" oscillator types.
					 * @memberOf Tone.OmniOscillator#
					 * @type {Array}
					 * @name partials
					 * @example
					 * osc.partials = [1, 0.2, 0.01];
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {
				        get: function () {
				            return this._oscillator.partials;
				        },
				        set: function (partials) {
				            this._oscillator.partials = partials;
				        }
				    });
				    /**
					 *  Set a member/attribute of the oscillator. 
					 *  @param {Object|String} params
					 *  @param {number=} value
					 *  @param {Time=} rampTime
					 *  @returns {Tone.OmniOscillator} this
					 */
				    Tone.OmniOscillator.prototype.set = function (params, value) {
				        //make sure the type is set first
				        if (params === 'type') {
				            this.type = value;
				        } else if (this.isObject(params) && params.hasOwnProperty('type')) {
				            this.type = params.type;
				        }
				        //then set the rest
				        Tone.prototype.set.apply(this, arguments);
				        return this;
				    };
				    /**
					 *  connect the oscillator to the frequency and detune signals
					 *  @private
					 */
				    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {
				        if (oscType !== this._sourceType) {
				            this._sourceType = oscType;
				            var OscillatorConstructor = Tone[oscType];
				            //short delay to avoid clicks on the change
				            var now = this.now() + this.blockTime;
				            if (this._oscillator !== null) {
				                var oldOsc = this._oscillator;
				                oldOsc.stop(now);
				                //dispose the old one
				                setTimeout(function () {
				                    oldOsc.dispose();
				                    oldOsc = null;
				                }, this.blockTime * 1000);
				            }
				            this._oscillator = new OscillatorConstructor();
				            this.frequency.connect(this._oscillator.frequency);
				            this.detune.connect(this._oscillator.detune);
				            this._oscillator.connect(this.output);
				            if (this.state === Tone.State.Started) {
				                this._oscillator.start(now);
				            }
				        }
				    };
				    /**
					 * The phase of the oscillator in degrees. 
					 * @memberOf Tone.OmniOscillator#
					 * @type {Degrees}
					 * @name phase
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {
				        get: function () {
				            return this._oscillator.phase;
				        },
				        set: function (phase) {
				            this._oscillator.phase = phase;
				        }
				    });
				    /**
					 * The width of the oscillator (only if the oscillator is set to "pulse")
					 * @memberOf Tone.OmniOscillator#
					 * @type {NormalRange}
					 * @signal
					 * @name width
					 * @example
					 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
					 * //can access the width attribute only if type === "pulse"
					 * omniOsc.width.value = 0.2; 
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {
				        get: function () {
				            if (this._sourceType === OmniOscType.Pulse) {
				                return this._oscillator.width;
				            }
				        }
				    });
				    /**
					 * The number of detuned oscillators
					 * @memberOf Tone.OmniOscillator#
					 * @type {Number}
					 * @name count
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {
				        get: function () {
				            if (this._sourceType === OmniOscType.Fat) {
				                return this._oscillator.count;
				            }
				        },
				        set: function (count) {
				            if (this._sourceType === OmniOscType.Fat) {
				                this._oscillator.count = count;
				            }
				        }
				    });
				    /**
					 * The detune spread between the oscillators. If "count" is
					 * set to 3 oscillators and the "spread" is set to 40,
					 * the three oscillators would be detuned like this: [-20, 0, 20]
					 * for a total detune spread of 40 cents. See Tone.FatOscillator
					 * for more info.
					 * @memberOf Tone.OmniOscillator#
					 * @type {Cents}
					 * @name spread
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {
				        get: function () {
				            if (this._sourceType === OmniOscType.Fat) {
				                return this._oscillator.spread;
				            }
				        },
				        set: function (spread) {
				            if (this._sourceType === OmniOscType.Fat) {
				                this._oscillator.spread = spread;
				            }
				        }
				    });
				    /**
					 * The type of the modulator oscillator. Only if the oscillator
					 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
					 * for more info. 
					 * @memberOf Tone.OmniOscillator#
					 * @type {String}
					 * @name modulationType
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {
				        get: function () {
				            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
				                return this._oscillator.modulationType;
				            }
				        },
				        set: function (mType) {
				            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
				                this._oscillator.modulationType = mType;
				            }
				        }
				    });
				    /**
					 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
					 * ratio of the frequency of the modulating signal (mf) to the amplitude of the 
					 * modulating signal (ma) -- as in ma/mf. 
					 * See Tone.FMOscillator for more info. 
					 * @type {Positive}
					 * @signal
					 * @name modulationIndex
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {
				        get: function () {
				            if (this._sourceType === OmniOscType.FM) {
				                return this._oscillator.modulationIndex;
				            }
				        }
				    });
				    /**
					 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
					 *  A harmonicity of 1 gives both oscillators the same frequency. 
					 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
					 *  for more info. 
					 *  @memberOf Tone.OmniOscillator#
					 *  @signal
					 *  @type {Positive}
					 *  @name harmonicity
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {
				        get: function () {
				            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
				                return this._oscillator.harmonicity;
				            }
				        }
				    });
				    /**
					 * The modulationFrequency Signal of the oscillator 
					 * (only if the oscillator type is set to pwm). See 
					 * Tone.PWMOscillator for more info. 
					 * @memberOf Tone.OmniOscillator#
					 * @type {Frequency}
					 * @signal
					 * @name modulationFrequency
					 * @example
					 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
					 * //can access the modulationFrequency attribute only if type === "pwm"
					 * omniOsc.modulationFrequency.value = 0.2; 
					 */
				    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {
				        get: function () {
				            if (this._sourceType === OmniOscType.PWM) {
				                return this._oscillator.modulationFrequency;
				            }
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return {Tone.OmniOscillator} this
					 */
				    Tone.OmniOscillator.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'detune'
				        ]);
				        this.detune.dispose();
				        this.detune = null;
				        this.frequency.dispose();
				        this.frequency = null;
				        this._oscillator.dispose();
				        this._oscillator = null;
				        this._sourceType = null;
				        return this;
				    };
				    return Tone.OmniOscillator;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Base-class for all instruments
					 *  
					 *  @constructor
					 *  @extends {Tone}
					 */
				    Tone.Instrument = function (options) {
				        //get the defaults
				        options = this.defaultArg(options, Tone.Instrument.defaults);
				        /**
						 *  The output and volume triming node
						 *  @type  {Tone.Volume}
						 *  @private
						 */
				        this._volume = this.output = new Tone.Volume(options.volume);
				        /**
						 * The volume of the output in decibels.
						 * @type {Decibels}
						 * @signal
						 * @example
						 * source.volume.value = -6;
						 */
				        this.volume = this._volume.volume;
				        this._readOnly('volume');
				    };
				    Tone.extend(Tone.Instrument);
				    /**
					 *  the default attributes
					 *  @type {object}
					 */
				    Tone.Instrument.defaults = {
				        /** the volume of the output in decibels */
				        'volume': 0
				    };
				    /**
					 *  @abstract
					 *  @param {string|number} note the note to trigger
					 *  @param {Time} [time=now] the time to trigger the ntoe
					 *  @param {number} [velocity=1] the velocity to trigger the note
					 */
				    Tone.Instrument.prototype.triggerAttack = Tone.noOp;
				    /**
					 *  @abstract
					 *  @param {Time} [time=now] when to trigger the release
					 */
				    Tone.Instrument.prototype.triggerRelease = Tone.noOp;
				    /**
					 *  Trigger the attack and then the release after the duration. 
					 *  @param  {Frequency} note     The note to trigger.
					 *  @param  {Time} duration How long the note should be held for before
					 *                          triggering the release.
					 *  @param {Time} [time=now]  When the note should be triggered.
					 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
					 *  @returns {Tone.Instrument} this
					 *  @example
					 * //trigger "C4" for the duration of an 8th note
					 * synth.triggerAttackRelease("C4", "8n");
					 */
				    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
				        if (this.isUndef(time)) {
				            time = this.now() + this.blockTime;
				        } else {
				            time = this.toSeconds(time);
				        }
				        duration = this.toSeconds(duration);
				        this.triggerAttack(note, time, velocity);
				        this.triggerRelease(time + duration);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.Instrument} this
					 */
				    Tone.Instrument.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._volume.dispose();
				        this._volume = null;
				        this._writable(['volume']);
				        this.volume = null;
				        return this;
				    };
				    return Tone.Instrument;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  This is an abstract base class for other monophonic instruments to 
					 *          extend. IMPORTANT: It does not make any sound on its own and
					 *          shouldn't be directly instantiated.
					 *
					 *  @constructor
					 *  @abstract
					 *  @extends {Tone.Instrument}
					 */
				    Tone.Monophonic = function (options) {
				        //get the defaults
				        options = this.defaultArg(options, Tone.Monophonic.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  The glide time between notes. 
						 *  @type {Time}
						 */
				        this.portamento = options.portamento;
				    };
				    Tone.extend(Tone.Monophonic, Tone.Instrument);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Monophonic.defaults = { 'portamento': 0 };
				    /**
					 *  Trigger the attack of the note optionally with a given velocity. 
					 *  
					 *  
					 *  @param  {Frequency} note     The note to trigger.
					 *  @param  {Time} [time=now]     When the note should start.
					 *  @param  {number} [velocity=1] velocity The velocity scaler 
					 *                                determines how "loud" the note 
					 *                                will be triggered.
					 *  @returns {Tone.Monophonic} this
					 *  @example
					 * synth.triggerAttack("C4");
					 *  @example
					 * //trigger the note a half second from now at half velocity
					 * synth.triggerAttack("C4", "+0.5", 0.5);
					 */
				    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {
				        if (this.isUndef(time)) {
				            time = this.now() + this.blockTime;
				        } else {
				            time = this.toSeconds(time);
				        }
				        this._triggerEnvelopeAttack(time, velocity);
				        this.setNote(note, time);
				        return this;
				    };
				    /**
					 *  Trigger the release portion of the envelope
					 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
					 *  @returns {Tone.Monophonic} this
					 *  @example
					 * synth.triggerRelease();
					 */
				    Tone.Monophonic.prototype.triggerRelease = function (time) {
				        if (this.isUndef(time)) {
				            time = this.now() + this.blockTime;
				        } else {
				            time = this.toSeconds(time);
				        }
				        this._triggerEnvelopeRelease(time);
				        return this;
				    };
				    /**
					 *  override this method with the actual method
					 *  @abstract
					 *  @private
					 */
				    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {
				    };
				    /**
					 *  override this method with the actual method
					 *  @abstract
					 *  @private
					 */
				    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {
				    };
				    /**
					 *  Set the note at the given time. If no time is given, the note
					 *  will set immediately. 
					 *  @param {Frequency} note The note to change to.
					 *  @param  {Time} [time=now] The time when the note should be set. 
					 *  @returns {Tone.Monophonic} this
					 * @example
					 * //change to F#6 in one quarter note from now.
					 * synth.setNote("F#6", "+4n");
					 * @example
					 * //change to Bb4 right now
					 * synth.setNote("Bb4");
					 */
				    Tone.Monophonic.prototype.setNote = function (note, time) {
				        time = this.toSeconds(time);
				        if (this.portamento > 0) {
				            var currentNote = this.frequency.value;
				            this.frequency.setValueAtTime(currentNote, time);
				            var portTime = this.toSeconds(this.portamento);
				            this.frequency.exponentialRampToValueAtTime(note, time + portTime);
				        } else {
				            this.frequency.setValueAtTime(note, time);
				        }
				        return this;
				    };
				    return Tone.Monophonic;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
					 *          routed through a Tone.AmplitudeEnvelope. 
					 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
					 *
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 *  @example
					 * var synth = new Tone.Synth().toMaster();
					 * synth.triggerAttackRelease("C4", "8n");
					 */
				    Tone.Synth = function (options) {
				        //get the defaults
				        options = this.defaultArg(options, Tone.Synth.defaults);
				        Tone.Monophonic.call(this, options);
				        /**
						 *  The oscillator.
						 *  @type {Tone.OmniOscillator}
						 */
				        this.oscillator = new Tone.OmniOscillator(options.oscillator);
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this.oscillator.frequency;
				        /**
						 *  The detune control.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this.oscillator.detune;
				        /**
						 *  The amplitude envelope.
						 *  @type {Tone.AmplitudeEnvelope}
						 */
				        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
				        //connect the oscillators to the output
				        this.oscillator.chain(this.envelope, this.output);
				        //start the oscillators
				        this.oscillator.start();
				        this._readOnly([
				            'oscillator',
				            'frequency',
				            'detune',
				            'envelope'
				        ]);
				    };
				    Tone.extend(Tone.Synth, Tone.Monophonic);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.Synth.defaults = {
				        'oscillator': { 'type': 'triangle' },
				        'envelope': {
				            'attack': 0.005,
				            'decay': 0.1,
				            'sustain': 0.3,
				            'release': 1
				        }
				    };
				    /**
					 *  start the attack portion of the envelope
					 *  @param {Time} [time=now] the time the attack should start
					 *  @param {number} [velocity=1] the velocity of the note (0-1)
					 *  @returns {Tone.Synth} this
					 *  @private
					 */
				    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {
				        //the envelopes
				        this.envelope.triggerAttack(time, velocity);
				        return this;
				    };
				    /**
					 *  start the release portion of the envelope
					 *  @param {Time} [time=now] the time the release should start
					 *  @returns {Tone.Synth} this
					 *  @private
					 */
				    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {
				        this.envelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.Synth} this
					 */
				    Tone.Synth.prototype.dispose = function () {
				        Tone.Monophonic.prototype.dispose.call(this);
				        this._writable([
				            'oscillator',
				            'frequency',
				            'detune',
				            'envelope'
				        ]);
				        this.oscillator.dispose();
				        this.oscillator = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        this.frequency = null;
				        this.detune = null;
				        return this;
				    };
				    return Tone.Synth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
					 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
					 *          the two signals) affects the timbre of the output signal greatly.
					 *          Read more about Amplitude Modulation Synthesis on 
					 *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).
					 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
					 *
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 *  @param {Object} [options] the options available for the synth 
					 *                            see defaults below
					 *  @example
					 * var synth = new Tone.AMSynth().toMaster();
					 * synth.triggerAttackRelease("C4", "4n");
					 */
				    Tone.AMSynth = function (options) {
				        options = this.defaultArg(options, Tone.AMSynth.defaults);
				        Tone.Monophonic.call(this, options);
				        /**
						 *  The carrier voice. 
						 *  @type {Tone.Synth}
						 *  @private
						 */
				        this._carrier = new Tone.Synth();
				        this._carrier.volume.value = -10;
				        /**
						 *  The carrier's oscillator
						 *  @type {Tone.Oscillator}
						 */
				        this.oscillator = this._carrier.oscillator;
				        /**
						 *  The carrier's envelope
						 *  @type {Tone.Oscillator}
						 */
				        this.envelope = this._carrier.envelope.set(options.envelope);
				        /**
						 *  The modulator voice. 
						 *  @type {Tone.Synth}
						 *  @private
						 */
				        this._modulator = new Tone.Synth();
				        this._modulator.volume.value = -10;
				        /**
						 *  The modulator's oscillator which is applied
						 *  to the amplitude of the oscillator
						 *  @type {Tone.Oscillator}
						 */
				        this.modulation = this._modulator.oscillator.set(options.modulation);
				        /**
						 *  The modulator's envelope
						 *  @type {Tone.Oscillator}
						 */
				        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
				        /**
						 *  The frequency.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
				        /**
						 *  The detune in cents
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        /**
						 *  Harmonicity is the ratio between the two voices. A harmonicity of
						 *  1 is no change. Harmonicity = 2 means a change of an octave. 
						 *  @type {Positive}
						 *  @signal
						 *  @example
						 * //pitch voice1 an octave below voice0
						 * synth.harmonicity.value = 0.5;
						 */
				        this.harmonicity = new Tone.Multiply(options.harmonicity);
				        this.harmonicity.units = Tone.Type.Positive;
				        /**
						 *  convert the -1,1 output to 0,1
						 *  @type {Tone.AudioToGain}
						 *  @private
						 */
				        this._modulationScale = new Tone.AudioToGain();
				        /**
						 *  the node where the modulation happens
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._modulationNode = new Tone.Gain();
				        //control the two voices frequency
				        this.frequency.connect(this._carrier.frequency);
				        this.frequency.chain(this.harmonicity, this._modulator.frequency);
				        this.detune.fan(this._carrier.detune, this._modulator.detune);
				        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
				        this._carrier.chain(this._modulationNode, this.output);
				        this._readOnly([
				            'frequency',
				            'harmonicity',
				            'oscillator',
				            'envelope',
				            'modulation',
				            'modulationEnvelope',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.AMSynth, Tone.Monophonic);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.AMSynth.defaults = {
				        'harmonicity': 3,
				        'detune': 0,
				        'oscillator': { 'type': 'sine' },
				        'envelope': {
				            'attack': 0.01,
				            'decay': 0.01,
				            'sustain': 1,
				            'release': 0.5
				        },
				        'moduation': { 'type': 'square' },
				        'modulationEnvelope': {
				            'attack': 0.5,
				            'decay': 0,
				            'sustain': 1,
				            'release': 0.5
				        }
				    };
				    /**
					 *  trigger the attack portion of the note
					 *  
					 *  @param  {Time} [time=now] the time the note will occur
					 *  @param {NormalRange} [velocity=1] the velocity of the note
					 *  @private
					 *  @returns {Tone.AMSynth} this
					 */
				    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
				        //the port glide
				        time = this.toSeconds(time);
				        //the envelopes
				        this.envelope.triggerAttack(time, velocity);
				        this.modulationEnvelope.triggerAttack(time, velocity);
				        return this;
				    };
				    /**
					 *  trigger the release portion of the note
					 *  
					 *  @param  {Time} [time=now] the time the note will release
					 *  @private
					 *  @returns {Tone.AMSynth} this
					 */
				    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {
				        this.envelope.triggerRelease(time);
				        this.modulationEnvelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.AMSynth} this
					 */
				    Tone.AMSynth.prototype.dispose = function () {
				        Tone.Monophonic.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'harmonicity',
				            'oscillator',
				            'envelope',
				            'modulation',
				            'modulationEnvelope',
				            'detune'
				        ]);
				        this._carrier.dispose();
				        this._carrier = null;
				        this._modulator.dispose();
				        this._modulator = null;
				        this.frequency.dispose();
				        this.frequency = null;
				        this.detune.dispose();
				        this.detune = null;
				        this.harmonicity.dispose();
				        this.harmonicity = null;
				        this._modulationScale.dispose();
				        this._modulationScale = null;
				        this._modulationNode.dispose();
				        this._modulationNode = null;
				        this.oscillator = null;
				        this.envelope = null;
				        this.modulationEnvelope = null;
				        this.modulation = null;
				        return this;
				    };
				    return Tone.AMSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
					 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the 
					 *          Tone.Filter are controlled by Tone.Envelopes. 
					 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
					 *          
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 *  @example
					 * var synth = new Tone.MonoSynth({
					 * 	"oscillator" : {
					 * 		"type" : "square"
					 *  },
					 *  "envelope" : {
					 *  	"attack" : 0.1
					 *  }
					 * }).toMaster();
					 * synth.triggerAttackRelease("C4", "8n");
					 */
				    Tone.MonoSynth = function (options) {
				        //get the defaults
				        options = this.defaultArg(options, Tone.MonoSynth.defaults);
				        Tone.Monophonic.call(this, options);
				        /**
						 *  The oscillator.
						 *  @type {Tone.OmniOscillator}
						 */
				        this.oscillator = new Tone.OmniOscillator(options.oscillator);
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = this.oscillator.frequency;
				        /**
						 *  The detune control.
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = this.oscillator.detune;
				        /**
						 *  The filter.
						 *  @type {Tone.Filter}
						 */
				        this.filter = new Tone.Filter(options.filter);
				        /**
						 *  The filter envelope.
						 *  @type {Tone.FrequencyEnvelope}
						 */
				        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);
				        /**
						 *  The amplitude envelope.
						 *  @type {Tone.AmplitudeEnvelope}
						 */
				        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
				        //connect the oscillators to the output
				        this.oscillator.chain(this.filter, this.envelope, this.output);
				        //start the oscillators
				        this.oscillator.start();
				        //connect the filter envelope
				        this.filterEnvelope.connect(this.filter.frequency);
				        this._readOnly([
				            'oscillator',
				            'frequency',
				            'detune',
				            'filter',
				            'filterEnvelope',
				            'envelope'
				        ]);
				    };
				    Tone.extend(Tone.MonoSynth, Tone.Monophonic);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.MonoSynth.defaults = {
				        'frequency': 'C4',
				        'detune': 0,
				        'oscillator': { 'type': 'square' },
				        'filter': {
				            'Q': 6,
				            'type': 'lowpass',
				            'rolloff': -24
				        },
				        'envelope': {
				            'attack': 0.005,
				            'decay': 0.1,
				            'sustain': 0.9,
				            'release': 1
				        },
				        'filterEnvelope': {
				            'attack': 0.06,
				            'decay': 0.2,
				            'sustain': 0.5,
				            'release': 2,
				            'baseFrequency': 200,
				            'octaves': 7,
				            'exponent': 2
				        }
				    };
				    /**
					 *  start the attack portion of the envelope
					 *  @param {Time} [time=now] the time the attack should start
					 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
					 *  @returns {Tone.MonoSynth} this
					 *  @private
					 */
				    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
				        //the envelopes
				        this.envelope.triggerAttack(time, velocity);
				        this.filterEnvelope.triggerAttack(time);
				        return this;
				    };
				    /**
					 *  start the release portion of the envelope
					 *  @param {Time} [time=now] the time the release should start
					 *  @returns {Tone.MonoSynth} this
					 *  @private
					 */
				    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {
				        this.envelope.triggerRelease(time);
				        this.filterEnvelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.MonoSynth} this
					 */
				    Tone.MonoSynth.prototype.dispose = function () {
				        Tone.Monophonic.prototype.dispose.call(this);
				        this._writable([
				            'oscillator',
				            'frequency',
				            'detune',
				            'filter',
				            'filterEnvelope',
				            'envelope'
				        ]);
				        this.oscillator.dispose();
				        this.oscillator = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        this.filterEnvelope.dispose();
				        this.filterEnvelope = null;
				        this.filter.dispose();
				        this.filter = null;
				        this.frequency = null;
				        this.detune = null;
				        return this;
				    };
				    return Tone.MonoSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.DuoSynth is a monophonic synth composed of two 
					 *          MonoSynths run in parallel with control over the 
					 *          frequency ratio between the two voices and vibrato effect.
					 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
					 *
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 *  @example
					 * var duoSynth = new Tone.DuoSynth().toMaster();
					 * duoSynth.triggerAttackRelease("C4", "2n");
					 */
				    Tone.DuoSynth = function (options) {
				        options = this.defaultArg(options, Tone.DuoSynth.defaults);
				        Tone.Monophonic.call(this, options);
				        /**
						 *  the first voice
						 *  @type {Tone.MonoSynth}
						 */
				        this.voice0 = new Tone.MonoSynth(options.voice0);
				        this.voice0.volume.value = -10;
				        /**
						 *  the second voice
						 *  @type {Tone.MonoSynth}
						 */
				        this.voice1 = new Tone.MonoSynth(options.voice1);
				        this.voice1.volume.value = -10;
				        /**
						 *  The vibrato LFO. 
						 *  @type {Tone.LFO}
						 *  @private
						 */
				        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);
				        this._vibrato.start();
				        /**
						 * the vibrato frequency
						 * @type {Frequency}
						 * @signal
						 */
				        this.vibratoRate = this._vibrato.frequency;
				        /**
						 *  the vibrato gain
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);
				        /**
						 * The amount of vibrato
						 * @type {Positive}
						 * @signal
						 */
				        this.vibratoAmount = this._vibratoGain.gain;
				        /**
						 *  the frequency control
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
				        /**
						 *  Harmonicity is the ratio between the two voices. A harmonicity of
						 *  1 is no change. Harmonicity = 2 means a change of an octave. 
						 *  @type {Positive}
						 *  @signal
						 *  @example
						 * //pitch voice1 an octave below voice0
						 * duoSynth.harmonicity.value = 0.5;
						 */
				        this.harmonicity = new Tone.Multiply(options.harmonicity);
				        this.harmonicity.units = Tone.Type.Positive;
				        //control the two voices frequency
				        this.frequency.connect(this.voice0.frequency);
				        this.frequency.chain(this.harmonicity, this.voice1.frequency);
				        this._vibrato.connect(this._vibratoGain);
				        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);
				        this.voice0.connect(this.output);
				        this.voice1.connect(this.output);
				        this._readOnly([
				            'voice0',
				            'voice1',
				            'frequency',
				            'vibratoAmount',
				            'vibratoRate'
				        ]);
				    };
				    Tone.extend(Tone.DuoSynth, Tone.Monophonic);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.DuoSynth.defaults = {
				        'vibratoAmount': 0.5,
				        'vibratoRate': 5,
				        'harmonicity': 1.5,
				        'voice0': {
				            'volume': -10,
				            'portamento': 0,
				            'oscillator': { 'type': 'sine' },
				            'filterEnvelope': {
				                'attack': 0.01,
				                'decay': 0,
				                'sustain': 1,
				                'release': 0.5
				            },
				            'envelope': {
				                'attack': 0.01,
				                'decay': 0,
				                'sustain': 1,
				                'release': 0.5
				            }
				        },
				        'voice1': {
				            'volume': -10,
				            'portamento': 0,
				            'oscillator': { 'type': 'sine' },
				            'filterEnvelope': {
				                'attack': 0.01,
				                'decay': 0,
				                'sustain': 1,
				                'release': 0.5
				            },
				            'envelope': {
				                'attack': 0.01,
				                'decay': 0,
				                'sustain': 1,
				                'release': 0.5
				            }
				        }
				    };
				    /**
					 *  start the attack portion of the envelopes
					 *  
					 *  @param {Time} [time=now] the time the attack should start
					 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
					 *  @returns {Tone.DuoSynth} this
					 *  @private
					 */
				    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
				        time = this.toSeconds(time);
				        this.voice0.envelope.triggerAttack(time, velocity);
				        this.voice1.envelope.triggerAttack(time, velocity);
				        this.voice0.filterEnvelope.triggerAttack(time);
				        this.voice1.filterEnvelope.triggerAttack(time);
				        return this;
				    };
				    /**
					 *  start the release portion of the envelopes
					 *  
					 *  @param {Time} [time=now] the time the release should start
					 *  @returns {Tone.DuoSynth} this
					 *  @private
					 */
				    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {
				        this.voice0.triggerRelease(time);
				        this.voice1.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.DuoSynth} this
					 */
				    Tone.DuoSynth.prototype.dispose = function () {
				        Tone.Monophonic.prototype.dispose.call(this);
				        this._writable([
				            'voice0',
				            'voice1',
				            'frequency',
				            'vibratoAmount',
				            'vibratoRate'
				        ]);
				        this.voice0.dispose();
				        this.voice0 = null;
				        this.voice1.dispose();
				        this.voice1 = null;
				        this.frequency.dispose();
				        this.frequency = null;
				        this._vibratoGain.dispose();
				        this._vibratoGain = null;
				        this._vibrato = null;
				        this.harmonicity.dispose();
				        this.harmonicity = null;
				        this.vibratoAmount.dispose();
				        this.vibratoAmount = null;
				        this.vibratoRate = null;
				        return this;
				    };
				    return Tone.DuoSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
					 *          the frequency of a second Tone.Synth. A lot of spectral content 
					 *          can be explored using the modulationIndex parameter. Read more about
					 *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).
					 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
					 *
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 *  @example
					 * var fmSynth = new Tone.FMSynth().toMaster();
					 * fmSynth.triggerAttackRelease("C5", "4n");
					 */
				    Tone.FMSynth = function (options) {
				        options = this.defaultArg(options, Tone.FMSynth.defaults);
				        Tone.Monophonic.call(this, options);
				        /**
						 *  The carrier voice.
						 *  @type {Tone.Synth}
						 *  @private
						 */
				        this._carrier = new Tone.Synth(options.carrier);
				        this._carrier.volume.value = -10;
				        /**
						 *  The carrier's oscillator
						 *  @type {Tone.Oscillator}
						 */
				        this.oscillator = this._carrier.oscillator;
				        /**
						 *  The carrier's envelope
						 *  @type {Tone.Oscillator}
						 */
				        this.envelope = this._carrier.envelope.set(options.envelope);
				        /**
						 *  The modulator voice.
						 *  @type {Tone.Synth}
						 *  @private
						 */
				        this._modulator = new Tone.Synth(options.modulator);
				        this._modulator.volume.value = -10;
				        /**
						 *  The modulator's oscillator which is applied
						 *  to the amplitude of the oscillator
						 *  @type {Tone.Oscillator}
						 */
				        this.modulation = this._modulator.oscillator.set(options.modulation);
				        /**
						 *  The modulator's envelope
						 *  @type {Tone.Oscillator}
						 */
				        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
				        /**
						 *  The frequency control.
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
				        /**
						 *  The detune in cents
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        /**
						 *  Harmonicity is the ratio between the two voices. A harmonicity of
						 *  1 is no change. Harmonicity = 2 means a change of an octave. 
						 *  @type {Positive}
						 *  @signal
						 *  @example
						 * //pitch voice1 an octave below voice0
						 * synth.harmonicity.value = 0.5;
						 */
				        this.harmonicity = new Tone.Multiply(options.harmonicity);
				        this.harmonicity.units = Tone.Type.Positive;
				        /**
						 *  The modulation index which essentially the depth or amount of the modulation. It is the 
						 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
						 *  modulating signal (ma) -- as in ma/mf. 
						 *	@type {Positive}
						 *	@signal
						 */
				        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
				        this.modulationIndex.units = Tone.Type.Positive;
				        /**
						 *  the node where the modulation happens
						 *  @type {GainNode}
						 *  @private
						 */
				        this._modulationNode = new Tone.Gain(0);
				        //control the two voices frequency
				        this.frequency.connect(this._carrier.frequency);
				        this.frequency.chain(this.harmonicity, this._modulator.frequency);
				        this.frequency.chain(this.modulationIndex, this._modulationNode);
				        this.detune.fan(this._carrier.detune, this._modulator.detune);
				        this._modulator.connect(this._modulationNode.gain);
				        this._modulationNode.connect(this._carrier.frequency);
				        this._carrier.connect(this.output);
				        this._readOnly([
				            'frequency',
				            'harmonicity',
				            'modulationIndex',
				            'oscillator',
				            'envelope',
				            'modulation',
				            'modulationEnvelope',
				            'detune'
				        ]);
				    };
				    Tone.extend(Tone.FMSynth, Tone.Monophonic);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.FMSynth.defaults = {
				        'harmonicity': 3,
				        'modulationIndex': 10,
				        'detune': 0,
				        'oscillator': { 'type': 'sine' },
				        'envelope': {
				            'attack': 0.01,
				            'decay': 0.01,
				            'sustain': 1,
				            'release': 0.5
				        },
				        'moduation': { 'type': 'square' },
				        'modulationEnvelope': {
				            'attack': 0.5,
				            'decay': 0,
				            'sustain': 1,
				            'release': 0.5
				        }
				    };
				    /**
					 * 	trigger the attack portion of the note
					 *  
					 *  @param  {Time} [time=now] the time the note will occur
					 *  @param {number} [velocity=1] the velocity of the note
					 *  @returns {Tone.FMSynth} this
					 *  @private
					 */
				    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
				        time = this.toSeconds(time);
				        //the envelopes
				        this.envelope.triggerAttack(time, velocity);
				        this.modulationEnvelope.triggerAttack(time);
				        return this;
				    };
				    /**
					 *  trigger the release portion of the note
					 *  
					 *  @param  {Time} [time=now] the time the note will release
					 *  @returns {Tone.FMSynth} this
					 *  @private
					 */
				    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {
				        time = this.toSeconds(time);
				        this.envelope.triggerRelease(time);
				        this.modulationEnvelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.FMSynth} this
					 */
				    Tone.FMSynth.prototype.dispose = function () {
				        Tone.Monophonic.prototype.dispose.call(this);
				        this._writable([
				            'frequency',
				            'harmonicity',
				            'modulationIndex',
				            'oscillator',
				            'envelope',
				            'modulation',
				            'modulationEnvelope',
				            'detune'
				        ]);
				        this._carrier.dispose();
				        this._carrier = null;
				        this._modulator.dispose();
				        this._modulator = null;
				        this.frequency.dispose();
				        this.frequency = null;
				        this.detune.dispose();
				        this.detune = null;
				        this.modulationIndex.dispose();
				        this.modulationIndex = null;
				        this.harmonicity.dispose();
				        this.harmonicity = null;
				        this._modulationNode.dispose();
				        this._modulationNode = null;
				        this.oscillator = null;
				        this.envelope = null;
				        this.modulationEnvelope = null;
				        this.modulation = null;
				        return this;
				    };
				    return Tone.FMSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
					 *          with an amplitude envelope and frequency ramp. A Tone.Oscillator
					 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
					 *          quality of the sound comes from the frequency envelope applied
					 *          during during Tone.MembraneSynth.triggerAttack(note). The frequency
					 *          envelope starts at <code>note * .octaves</code> and ramps to 
					 *          <code>note</code> over the duration of <code>.pitchDecay</code>. 
					 *
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 *  @example
					 * var synth = new Tone.MembraneSynth().toMaster();
					 * synth.triggerAttackRelease("C2", "8n");
					 */
				    Tone.MembraneSynth = function (options) {
				        options = this.defaultArg(options, Tone.MembraneSynth.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  The oscillator.
						 *  @type {Tone.Oscillator}
						 */
				        this.oscillator = new Tone.Oscillator(options.oscillator).start();
				        /**
						 *  The amplitude envelope.
						 *  @type {Tone.AmplitudeEnvelope}
						 */
				        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
				        /**
						 *  The number of octaves the pitch envelope ramps.
						 *  @type {Positive}
						 */
				        this.octaves = options.octaves;
				        /**
						 *  The amount of time the frequency envelope takes. 
						 *  @type {Time}
						 */
				        this.pitchDecay = options.pitchDecay;
				        this.oscillator.chain(this.envelope, this.output);
				        this._readOnly([
				            'oscillator',
				            'envelope'
				        ]);
				    };
				    Tone.extend(Tone.MembraneSynth, Tone.Instrument);
				    /**
					 *  @static
					 *  @type {Object}
					 */
				    Tone.MembraneSynth.defaults = {
				        'pitchDecay': 0.05,
				        'octaves': 10,
				        'oscillator': { 'type': 'sine' },
				        'envelope': {
				            'attack': 0.001,
				            'decay': 0.4,
				            'sustain': 0.01,
				            'release': 1.4,
				            'attackCurve': 'exponential'
				        }
				    };
				    /**
					 *  Trigger the note at the given time with the given velocity. 
					 *  
					 *  @param  {Frequency} note     the note
					 *  @param  {Time} [time=now]     the time, if not given is now
					 *  @param  {number} [velocity=1] velocity defaults to 1
					 *  @returns {Tone.MembraneSynth} this
					 *  @example
					 *  kick.triggerAttack(60);
					 */
				    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {
				        time = this.toSeconds(time);
				        note = this.toFrequency(note);
				        var maxNote = note * this.octaves;
				        this.oscillator.frequency.setValueAtTime(maxNote, time);
				        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));
				        this.envelope.triggerAttack(time, velocity);
				        return this;
				    };
				    /**
					 *  Trigger the release portion of the note.
					 *  
					 *  @param  {Time} [time=now] the time the note will release
					 *  @returns {Tone.MembraneSynth} this
					 */
				    Tone.MembraneSynth.prototype.triggerRelease = function (time) {
				        this.envelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.MembraneSynth} this
					 */
				    Tone.MembraneSynth.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        this._writable([
				            'oscillator',
				            'envelope'
				        ]);
				        this.oscillator.dispose();
				        this.oscillator = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        return this;
				    };
				    return Tone.MembraneSynth;
				});
				Module(function (Tone) {
				    /**
					 *  Inharmonic ratio of frequencies based on the Roland TR-808
					 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
					 *  @private
					 *  @static
					 *  @type {Array}
					 */
				    var inharmRatios = [
				        1,
				        1.483,
				        1.932,
				        2.546,
				        2.63,
				        3.897
				    ];
				    /**
					 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
					 *          and amplitude envelope which is good for making metalophone sounds. Based
					 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
					 *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
					 *
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {Object} [options] The options availble for the synth
					 *                             see defaults below
					 */
				    Tone.MetalSynth = function (options) {
				        options = this.defaultArg(options, Tone.MetalSynth.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  The frequency of the cymbal
						 *  @type  {Frequency}
						 *  @signal
						 */
				        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
				        /**
						 *  The array of FMOscillators
						 *  @type  {Array}
						 *  @private
						 */
				        this._oscillators = [];
				        /**
						 *  The frequency multipliers
						 *  @type {Array}
						 *  @private
						 */
				        this._freqMultipliers = [];
				        /**
						 *  The amplitude for the body
						 *  @type {Tone.Gain}
						 *  @private
						 */
				        this._amplitue = new Tone.Gain(0).connect(this.output);
				        /**
						 *  highpass the output
						 *  @type {Tone.Filter}
						 *  @private
						 */
				        this._highpass = new Tone.Filter({
				            'type': 'highpass',
				            'Q': 0
				        }).connect(this._amplitue);
				        /**
						 *  The number of octaves the highpass
						 *  filter frequency ramps
						 *  @type {Number}
						 *  @private
						 */
				        this._octaves = options.octaves;
				        /**
						 *  Scale the body envelope
						 *  for the bandpass
						 *  @type {Tone.Scale}
						 *  @private
						 */
				        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);
				        /**
						 *  The envelope which is connected both to the 
						 *  amplitude and highpass filter's cutoff frequency
						 *  @type  {Tone.Envelope}
						 */
				        this.envelope = new Tone.Envelope({
				            'attack': options.envelope.attack,
				            'attackCurve': 'exponential',
				            'decay': options.envelope.decay,
				            'sustain': 0,
				            'release': options.envelope.release
				        }).chain(this._filterFreqScaler, this._highpass.frequency);
				        this.envelope.connect(this._amplitue.gain);
				        for (var i = 0; i < inharmRatios.length; i++) {
				            var osc = new Tone.FMOscillator({
				                'type': 'square',
				                'modulationType': 'square',
				                'harmonicity': options.harmonicity,
				                'modulationIndex': options.modulationIndex
				            });
				            osc.connect(this._highpass).start(0);
				            this._oscillators[i] = osc;
				            var mult = new Tone.Multiply(inharmRatios[i]);
				            this._freqMultipliers[i] = mult;
				            this.frequency.chain(mult, osc.frequency);
				        }
				        //set the octaves
				        this.octaves = options.octaves;
				    };
				    Tone.extend(Tone.MetalSynth, Tone.Instrument);
				    /**
					 *  default values
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.MetalSynth.defaults = {
				        'frequency': 200,
				        'envelope': {
				            'attack': 0.0015,
				            'decay': 1.4,
				            'release': 0.2
				        },
				        'harmonicity': 5.1,
				        'modulationIndex': 32,
				        'resonance': 4000,
				        'octaves': 1.5
				    };
				    /**
					 *  Trigger the attack.
					 *  @param  {Time}  time      When the attack should be triggered.
					 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
					 *  @return  {Tone.MetalSynth}  this
					 */
				    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {
				        time = this.toSeconds(time);
				        vel = this.defaultArg(vel, 1);
				        this.envelope.triggerAttack(time, vel);
				        return this;
				    };
				    /**
					 *  Trigger the release of the envelope.
					 *  @param  {Time}  time      When the release should be triggered.
					 *  @return  {Tone.MetalSynth}  this
					 */
				    Tone.MetalSynth.prototype.triggerRelease = function (time) {
				        time = this.toSeconds(time);
				        this.envelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  Trigger the attack and release of the envelope after the given 
					 *  duration. 
					 *  @param  {Time}  duration  The duration before triggering the release
					 *  @param  {Time}  time      When the attack should be triggered.
					 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
					 *  @return  {Tone.MetalSynth}  this
					 */
				    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
				        time = this.toSeconds(time);
				        duration = this.toSeconds(duration);
				        this.triggerAttack(time, velocity);
				        this.triggerRelease(time + duration);
				        return this;
				    };
				    /**
					 *  The modulationIndex of the oscillators which make up the source.
					 *  see Tone.FMOscillator.modulationIndex
					 *  @memberOf Tone.MetalSynth#
					 *  @type {Positive}
					 *  @name  modulationIndex
					 */
				    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {
				        get: function () {
				            return this._oscillators[0].modulationIndex.value;
				        },
				        set: function (val) {
				            for (var i = 0; i < this._oscillators.length; i++) {
				                this._oscillators[i].modulationIndex.value = val;
				            }
				        }
				    });
				    /**
					 *  The harmonicity of the oscillators which make up the source.
					 *  see Tone.FMOscillator.harmonicity
					 *  @memberOf Tone.MetalSynth#
					 *  @type {Positive}
					 *  @name  harmonicity
					 */
				    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {
				        get: function () {
				            return this._oscillators[0].harmonicity.value;
				        },
				        set: function (val) {
				            for (var i = 0; i < this._oscillators.length; i++) {
				                this._oscillators[i].harmonicity.value = val;
				            }
				        }
				    });
				    /**
					 *  The frequency of the highpass filter attached to the envelope
					 *  @memberOf Tone.MetalSynth#
					 *  @type {Frequency}
					 *  @name  resonance
					 */
				    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {
				        get: function () {
				            return this._filterFreqScaler.min;
				        },
				        set: function (val) {
				            this._filterFreqScaler.min = val;
				            this.octaves = this._octaves;
				        }
				    });
				    /**
					 *  The number of octaves above the "resonance" frequency
					 *  that the filter ramps during the attack/decay envelope
					 *  @memberOf Tone.MetalSynth#
					 *  @type {Number}
					 *  @name  octaves
					 */
				    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {
				        get: function () {
				            return this._octaves;
				        },
				        set: function (octs) {
				            this._octaves = octs;
				            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);
				        }
				    });
				    /**
					 *  Clean up
					 *  @returns {Tone.MetalSynth} this
					 */
				    Tone.MetalSynth.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        for (var i = 0; i < this._oscillators.length; i++) {
				            this._oscillators[i].dispose();
				            this._freqMultipliers[i].dispose();
				        }
				        this._oscillators = null;
				        this._freqMultipliers = null;
				        this.frequency.dispose();
				        this.frequency = null;
				        this._filterFreqScaler.dispose();
				        this._filterFreqScaler = null;
				        this._amplitue.dispose();
				        this._amplitue = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        this._highpass.dispose();
				        this._highpass = null;
				    };
				    return Tone.MetalSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
					 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
					 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
					 *
					 *  @constructor
					 *  @extends {Tone.Source}
					 *  @param {string} type the noise type (white|pink|brown)
					 *  @example
					 * //initialize the noise and start
					 * var noise = new Tone.Noise("pink").start();
					 * 
					 * //make an autofilter to shape the noise
					 * var autoFilter = new Tone.AutoFilter({
					 * 	"frequency" : "8m", 
					 * 	"min" : 800, 
					 * 	"max" : 15000
					 * }).connect(Tone.Master);
					 * 
					 * //connect the noise
					 * noise.connect(autoFilter);
					 * //start the autofilter LFO
					 * autoFilter.start()
					 */
				    Tone.Noise = function () {
				        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  @private
						 *  @type {AudioBufferSourceNode}
						 */
				        this._source = null;
				        /**
						 *  the buffer
						 *  @private
						 *  @type {AudioBuffer}
						 */
				        this._buffer = null;
				        /**
						 *  The playback rate of the noise. Affects
						 *  the "frequency" of the noise.
						 *  @type {Positive}
						 *  @signal
						 */
				        this._playbackRate = options.playbackRate;
				        this.type = options.type;
				    };
				    Tone.extend(Tone.Noise, Tone.Source);
				    /**
					 *  the default parameters
					 *
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Noise.defaults = {
				        'type': 'white',
				        'playbackRate': 1
				    };
				    /**
					 * The type of the noise. Can be "white", "brown", or "pink". 
					 * @memberOf Tone.Noise#
					 * @type {string}
					 * @name type
					 * @example
					 * noise.type = "white";
					 */
				    Object.defineProperty(Tone.Noise.prototype, 'type', {
				        get: function () {
				            if (this._buffer === _whiteNoise) {
				                return 'white';
				            } else if (this._buffer === _brownNoise) {
				                return 'brown';
				            } else if (this._buffer === _pinkNoise) {
				                return 'pink';
				            }
				        },
				        set: function (type) {
				            if (this.type !== type) {
				                switch (type) {
				                case 'white':
				                    this._buffer = _whiteNoise;
				                    break;
				                case 'pink':
				                    this._buffer = _pinkNoise;
				                    break;
				                case 'brown':
				                    this._buffer = _brownNoise;
				                    break;
				                default:
				                    throw new TypeError('Tone.Noise: invalid type: ' + type);
				                }
				                //if it's playing, stop and restart it
				                if (this.state === Tone.State.Started) {
				                    var now = this.now() + this.blockTime;
				                    //remove the listener
				                    this._stop(now);
				                    this._start(now);
				                }
				            }
				        }
				    });
				    /**
					 *  The playback rate of the noise. Affects
					 *  the "frequency" of the noise.
					 *  @type {Positive}
					 *  @signal
					 */
				    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {
				        get: function () {
				            return this._playbackRate;
				        },
				        set: function (rate) {
				            this._playbackRate = rate;
				            if (this._source) {
				                this._source.playbackRate.value = rate;
				            }
				        }
				    });
				    /**
					 *  internal start method
					 *
					 *  @param {Time} time
					 *  @private
					 */
				    Tone.Noise.prototype._start = function (time) {
				        this._source = this.context.createBufferSource();
				        this._source.buffer = this._buffer;
				        this._source.loop = true;
				        this._source.playbackRate.value = this._playbackRate;
				        this._source.connect(this.output);
				        this._source.start(this.toSeconds(time), Math.random() * (this._buffer.duration - 0.001));
				    };
				    /**
					 *  internal stop method
					 *
					 *  @param {Time} time
					 *  @private
					 */
				    Tone.Noise.prototype._stop = function (time) {
				        if (this._source) {
				            this._source.stop(this.toSeconds(time));
				        }
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.Noise} this
					 */
				    Tone.Noise.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        if (this._source !== null) {
				            this._source.disconnect();
				            this._source = null;
				        }
				        this._buffer = null;
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    // THE BUFFERS
				    // borrowed heavily from http://noisehack.com/generate-noise-web-audio-api/
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 *	static noise buffers
					 *
					 *  @static
					 *  @private
					 *  @type {AudioBuffer}
					 */
				    var _pinkNoise = null, _brownNoise = null, _whiteNoise = null;
				    Tone._initAudioContext(function (audioContext) {
				        var sampleRate = audioContext.sampleRate;
				        //four seconds per buffer
				        var bufferLength = sampleRate * 4;
				        //fill the buffers
				        _pinkNoise = function () {
				            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
				            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
				                var channel = buffer.getChannelData(channelNum);
				                var b0, b1, b2, b3, b4, b5, b6;
				                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;
				                for (var i = 0; i < bufferLength; i++) {
				                    var white = Math.random() * 2 - 1;
				                    b0 = 0.99886 * b0 + white * 0.0555179;
				                    b1 = 0.99332 * b1 + white * 0.0750759;
				                    b2 = 0.969 * b2 + white * 0.153852;
				                    b3 = 0.8665 * b3 + white * 0.3104856;
				                    b4 = 0.55 * b4 + white * 0.5329522;
				                    b5 = -0.7616 * b5 - white * 0.016898;
				                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
				                    channel[i] *= 0.11;
				                    // (roughly) compensate for gain
				                    b6 = white * 0.115926;
				                }
				            }
				            return buffer;
				        }();
				        _brownNoise = function () {
				            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
				            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
				                var channel = buffer.getChannelData(channelNum);
				                var lastOut = 0;
				                for (var i = 0; i < bufferLength; i++) {
				                    var white = Math.random() * 2 - 1;
				                    channel[i] = (lastOut + 0.02 * white) / 1.02;
				                    lastOut = channel[i];
				                    channel[i] *= 3.5;    // (roughly) compensate for gain
				                }
				            }
				            return buffer;
				        }();
				        _whiteNoise = function () {
				            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
				            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
				                var channel = buffer.getChannelData(channelNum);
				                for (var i = 0; i < bufferLength; i++) {
				                    channel[i] = Math.random() * 2 - 1;
				                }
				            }
				            return buffer;
				        }();
				    });
				    return Tone.Noise;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), 
					 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
					 *          of the noise and the other is controls the cutoff frequency of the filter. 
					 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
					 *
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {Object} [options] the options available for the synth 
					 *                          see defaults below
					 * @example
					 * var noiseSynth = new Tone.NoiseSynth().toMaster();
					 * noiseSynth.triggerAttackRelease("8n");
					 */
				    Tone.NoiseSynth = function (options) {
				        //get the defaults
				        options = this.defaultArg(options, Tone.NoiseSynth.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  The noise source.
						 *  @type {Tone.Noise}
						 *  @example
						 * noiseSynth.set("noise.type", "brown");
						 */
				        this.noise = new Tone.Noise();
				        /**
						 *  The amplitude envelope. 
						 *  @type {Tone.AmplitudeEnvelope}
						 */
				        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
				        //connect the noise to the output
				        this.noise.chain(this.envelope, this.output);
				        //start the noise
				        this.noise.start();
				        this._readOnly([
				            'noise',
				            'envelope'
				        ]);
				    };
				    Tone.extend(Tone.NoiseSynth, Tone.Instrument);
				    /**
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.NoiseSynth.defaults = {
				        'noise': { 'type': 'white' },
				        'envelope': {
				            'attack': 0.005,
				            'decay': 0.1,
				            'sustain': 0
				        }
				    };
				    /**
					 *  Start the attack portion of the envelopes. Unlike other 
					 *  instruments, Tone.NoiseSynth doesn't have a note. 
					 *  @param {Time} [time=now] the time the attack should start
					 *  @param {number} [velocity=1] the velocity of the note (0-1)
					 *  @returns {Tone.NoiseSynth} this
					 *  @example
					 * noiseSynth.triggerAttack();
					 */
				    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {
				        //the envelopes
				        this.envelope.triggerAttack(time, velocity);
				        return this;
				    };
				    /**
					 *  Start the release portion of the envelopes.
					 *  @param {Time} [time=now] the time the release should start
					 *  @returns {Tone.NoiseSynth} this
					 */
				    Tone.NoiseSynth.prototype.triggerRelease = function (time) {
				        this.envelope.triggerRelease(time);
				        return this;
				    };
				    /**
					 *  Trigger the attack and then the release. 
					 *  @param  {Time} duration the duration of the note
					 *  @param  {Time} [time=now]     the time of the attack
					 *  @param  {number} [velocity=1] the velocity
					 *  @returns {Tone.NoiseSynth} this
					 */
				    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
				        time = this.toSeconds(time);
				        duration = this.toSeconds(duration);
				        this.triggerAttack(time, velocity);
				        this.triggerRelease(time + duration);
				        return this;
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.NoiseSynth} this
					 */
				    Tone.NoiseSynth.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        this._writable([
				            'noise',
				            'envelope'
				        ]);
				        this.noise.dispose();
				        this.noise = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        return this;
				    };
				    return Tone.NoiseSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Karplus-String string synthesis. Often out of tune. 
					 *         Will change when the AudioWorkerNode is available across
					 *         browsers. 
					 *  
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {Object} [options] see the defaults
					 *  @example
					 * var plucky = new Tone.PluckSynth().toMaster();
					 * plucky.triggerAttack("C4");
					 */
				    Tone.PluckSynth = function (options) {
				        options = this.defaultArg(options, Tone.PluckSynth.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  @type {Tone.Noise}
						 *  @private
						 */
				        this._noise = new Tone.Noise('pink');
				        /**
						 *  The amount of noise at the attack. 
						 *  Nominal range of [0.1, 20]
						 *  @type {number}
						 */
				        this.attackNoise = 1;
				        /**
						 *  the LFCF
						 *  @type {Tone.LowpassCombFilter}
						 *  @private
						 */
				        this._lfcf = new Tone.LowpassCombFilter({
				            'resonance': options.resonance,
				            'dampening': options.dampening
				        });
				        /**
						 *  The resonance control. 
						 *  @type {NormalRange}
						 *  @signal
						 */
				        this.resonance = this._lfcf.resonance;
				        /**
						 *  The dampening control. i.e. the lowpass filter frequency of the comb filter
						 *  @type {Frequency}
						 *  @signal
						 */
				        this.dampening = this._lfcf.dampening;
				        //connections
				        this._noise.connect(this._lfcf);
				        this._lfcf.connect(this.output);
				        this._readOnly([
				            'resonance',
				            'dampening'
				        ]);
				    };
				    Tone.extend(Tone.PluckSynth, Tone.Instrument);
				    /**
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.PluckSynth.defaults = {
				        'attackNoise': 1,
				        'dampening': 4000,
				        'resonance': 0.9
				    };
				    /**
					 *  Trigger the note. 
					 *  @param {Frequency} note The note to trigger.
					 *  @param {Time} [time=now] When the note should be triggered.
					 *  @returns {Tone.PluckSynth} this
					 */
				    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {
				        note = this.toFrequency(note);
				        time = this.toSeconds(time);
				        var delayAmount = 1 / note;
				        this._lfcf.delayTime.setValueAtTime(delayAmount, time);
				        this._noise.start(time);
				        this._noise.stop(time + delayAmount * this.attackNoise);
				        return this;
				    };
				    /**
					 *  Clean up. 
					 *  @returns {Tone.PluckSynth} this
					 */
				    Tone.PluckSynth.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        this._noise.dispose();
				        this._lfcf.dispose();
				        this._noise = null;
				        this._lfcf = null;
				        this._writable([
				            'resonance',
				            'dampening'
				        ]);
				        this.dampening = null;
				        this.resonance = null;
				        return this;
				    };
				    return Tone.PluckSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.PolySynth handles voice creation and allocation for any
					 *          instruments passed in as the second paramter. PolySynth is 
					 *          not a synthesizer by itself, it merely manages voices of 
					 *          one of the other types of synths, allowing any of the 
					 *          monophonic synthesizers to be polyphonic. 
					 *
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {number|Object} [polyphony=4] The number of voices to create
					 *  @param {function} [voice=Tone.Synth] The constructor of the voices
					 *                                            uses Tone.Synth by default. 
					 *  @example
					 * //a polysynth composed of 6 Voices of Synth
					 * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();
					 * //set the attributes using the set interface
					 * synth.set("detune", -1200);
					 * //play a chord
					 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
					 */
				    Tone.PolySynth = function () {
				        Tone.Instrument.call(this);
				        var options = this.optionsObject(arguments, [
				            'polyphony',
				            'voice'
				        ], Tone.PolySynth.defaults);
				        options = this.defaultArg(options, Tone.Instrument.defaults);
				        //max polyphony
				        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);
				        /**
						 *  the array of voices
						 *  @type {Array}
						 */
				        this.voices = new Array(options.polyphony);
				        /**
						 *  The queue of voices with data about last trigger
						 *  and the triggered note
						 *  @private
						 *  @type {Array}
						 */
				        this._triggers = new Array(options.polyphony);
				        /**
						 *  The detune in cents
						 *  @type {Cents}
						 *  @signal
						 */
				        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
				        this._readOnly('detune');
				        //create the voices
				        for (var i = 0; i < options.polyphony; i++) {
				            var v = new options.voice(arguments[2], arguments[3]);
				            this.voices[i] = v;
				            v.connect(this.output);
				            if (v.hasOwnProperty('detune')) {
				                this.detune.connect(v.detune);
				            }
				            this._triggers[i] = {
				                release: -1,
				                note: null,
				                voice: v
				            };
				        }
				        //set the volume initially
				        this.volume.value = options.volume;
				    };
				    Tone.extend(Tone.PolySynth, Tone.Instrument);
				    /**
					 *  the defaults
					 *  @const
					 *  @static
					 *  @type {Object}
					 */
				    Tone.PolySynth.defaults = {
				        'polyphony': 4,
				        'volume': 0,
				        'detune': 0,
				        'voice': Tone.Synth
				    };
				    /**
					 *  Trigger the attack portion of the note
					 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
					 *                                  Frequency or an array of frequencies.
					 *  @param  {Time} [time=now]  The start time of the note.
					 *  @param {number} [velocity=1] The velocity of the note.
					 *  @returns {Tone.PolySynth} this
					 *  @example
					 * //trigger a chord immediately with a velocity of 0.2
					 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
					 */
				    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {
				        if (!Array.isArray(notes)) {
				            notes = [notes];
				        }
				        time = this.toSeconds(time);
				        for (var i = 0; i < notes.length; i++) {
				            var val = notes[i];
				            //trigger the oldest voice
				            var oldest = this._triggers[0];
				            var oldestIndex = 0;
				            for (var j = 1; j < this._triggers.length; j++) {
				                if (this._triggers[j].release < oldest.release) {
				                    oldest = this._triggers[j];
				                    oldestIndex = j;
				                }
				            }
				            oldest.release = Infinity;
				            oldest.note = JSON.stringify(val);
				            oldest.voice.triggerAttack(val, time, velocity);
				        }
				        return this;
				    };
				    /**
					 *  Trigger the attack and release after the specified duration
					 *  
					 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
					 *                                  Frequency or an array of frequencies.
					 *  @param  {Time} duration the duration of the note
					 *  @param  {Time} [time=now]     if no time is given, defaults to now
					 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
					 *  @returns {Tone.PolySynth} this
					 *  @example
					 * //trigger a chord for a duration of a half note 
					 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
					 *  @example
					 * //can pass in an array of durations as well
					 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
					 */
				    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
				        time = this.toSeconds(time);
				        this.triggerAttack(notes, time, velocity);
				        if (this.isArray(duration) && this.isArray(notes)) {
				            for (var i = 0; i < notes.length; i++) {
				                var d = duration[Math.min(i, duration.length - 1)];
				                this.triggerRelease(notes[i], time + this.toSeconds(d));
				            }
				        } else {
				            this.triggerRelease(notes, time + this.toSeconds(duration));
				        }
				        return this;
				    };
				    /**
					 *  Trigger the release of the note. Unlike monophonic instruments, 
					 *  a note (or array of notes) needs to be passed in as the first argument.
					 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
					 *                                  Frequency or an array of frequencies.
					 *  @param  {Time} [time=now]  When the release will be triggered. 
					 *  @returns {Tone.PolySynth} this
					 *  @example
					 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
					 */
				    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {
				        if (!Array.isArray(notes)) {
				            notes = [notes];
				        }
				        time = this.toSeconds(time);
				        for (var i = 0; i < notes.length; i++) {
				            //get the voice
				            var stringified = JSON.stringify(notes[i]);
				            for (var v = 0; v < this._triggers.length; v++) {
				                var desc = this._triggers[v];
				                if (desc.note === stringified && desc.release > time) {
				                    desc.voice.triggerRelease(time);
				                    desc.release = time;
				                }
				            }
				        }
				        return this;
				    };
				    /**
					 *  Set a member/attribute of the voices. 
					 *  @param {Object|string} params
					 *  @param {number=} value
					 *  @param {Time=} rampTime
					 *  @returns {Tone.PolySynth} this
					 *  @example
					 * poly.set({
					 * 	"filter" : {
					 * 		"type" : "highpass"
					 * 	},
					 * 	"envelope" : {
					 * 		"attack" : 0.25
					 * 	}
					 * });
					 */
				    Tone.PolySynth.prototype.set = function (params, value, rampTime) {
				        for (var i = 0; i < this.voices.length; i++) {
				            this.voices[i].set(params, value, rampTime);
				        }
				        return this;
				    };
				    /**
					 *  Get the synth's attributes. Given no arguments get
					 *  will return all available object properties and their corresponding
					 *  values. Pass in a single attribute to retrieve or an array
					 *  of attributes. The attribute strings can also include a "."
					 *  to access deeper properties.
					 *  @param {Array=} params the parameters to get, otherwise will return 
					 *  					   all available.
					 */
				    Tone.PolySynth.prototype.get = function (params) {
				        return this.voices[0].get(params);
				    };
				    /**
					 *  Trigger the release portion of all the currently active voices.
					 *  @param {Time} [time=now] When the notes should be released.
					 *  @return {Tone.PolySynth} this
					 */
				    Tone.PolySynth.prototype.releaseAll = function (time) {
				        time = this.toSeconds(time);
				        for (var i = 0; i < this._triggers.length; i++) {
				            var desc = this._triggers[i];
				            if (desc.release > time) {
				                desc.release = time;
				                desc.voice.triggerRelease(time);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Clean up.
					 *  @returns {Tone.PolySynth} this
					 */
				    Tone.PolySynth.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        for (var i = 0; i < this.voices.length; i++) {
				            this.voices[i].dispose();
				            this.voices[i] = null;
				        }
				        this._writable('detune');
				        this.detune.dispose();
				        this.detune = null;
				        this.voices = null;
				        this._triggers = null;
				        return this;
				    };
				    /**
					 *  The maximum number of notes that can be allocated 
					 *  to a polysynth. 
					 *  @type  {Number}
					 *  @static
					 */
				    Tone.PolySynth.MAX_POLYPHONY = 20;
				    return Tone.PolySynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
					 *  
					 *  @constructor
					 *  @extends {Tone.Source} 
					 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
					 *                                  which to load the AudioBuffer
					 *  @param {function=} onload The function to invoke when the buffer is loaded. 
					 *                            Recommended to use Tone.Buffer.on('load') instead.
					 *  @example
					 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
					 * //play as soon as the buffer is loaded
					 * player.autostart = true;
					 */
				    Tone.Player = function (url) {
				        var options;
				        if (url instanceof Tone.Buffer) {
				            url = url.get();
				            options = Tone.Player.defaults;
				        } else {
				            options = this.optionsObject(arguments, [
				                'url',
				                'onload'
				            ], Tone.Player.defaults);
				        }
				        Tone.Source.call(this, options);
				        /**
						 *  @private
						 *  @type {AudioBufferSourceNode}
						 */
				        this._source = null;
				        /**
						 *  If the file should play as soon
						 *  as the buffer is loaded. 
						 *  @type {boolean}
						 *  @example
						 * //will play as soon as it's loaded
						 * var player = new Tone.Player({
						 * 	"url" : "./path/to/sample.mp3",
						 * 	"autostart" : true,
						 * }).toMaster();
						 */
				        this.autostart = options.autostart;
				        /**
						 *  the buffer
						 *  @private
						 *  @type {Tone.Buffer}
						 */
				        this._buffer = new Tone.Buffer({
				            'url': options.url,
				            'onload': this._onload.bind(this, options.onload),
				            'reverse': options.reverse
				        });
				        if (url instanceof AudioBuffer) {
				            this._buffer.set(url);
				        }
				        /**
						 *  if the buffer should loop once it's over
						 *  @type {boolean}
						 *  @private
						 */
				        this._loop = options.loop;
				        /**
						 *  if 'loop' is true, the loop will start at this position
						 *  @type {Time}
						 *  @private
						 */
				        this._loopStart = options.loopStart;
				        /**
						 *  if 'loop' is true, the loop will end at this position
						 *  @type {Time}
						 *  @private
						 */
				        this._loopEnd = options.loopEnd;
				        /**
						 *  the playback rate
						 *  @private
						 *  @type {number}
						 */
				        this._playbackRate = options.playbackRate;
				        /**
						 *  Enabling retrigger will allow a player to be restarted
						 *  before the the previous 'start' is done playing. Otherwise, 
						 *  successive calls to Tone.Player.start will only start
						 *  the sample if it had played all the way through. 
						 *  @type {boolean}
						 */
				        this.retrigger = options.retrigger;
				    };
				    Tone.extend(Tone.Player, Tone.Source);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.Player.defaults = {
				        'onload': Tone.noOp,
				        'playbackRate': 1,
				        'loop': false,
				        'autostart': false,
				        'loopStart': 0,
				        'loopEnd': 0,
				        'retrigger': false,
				        'reverse': false
				    };
				    /**
					 *  Load the audio file as an audio buffer.
					 *  Decodes the audio asynchronously and invokes
					 *  the callback once the audio buffer loads. 
					 *  Note: this does not need to be called if a url
					 *  was passed in to the constructor. Only use this
					 *  if you want to manually load a new url. 
					 * @param {string} url The url of the buffer to load.
					 *                     Filetype support depends on the
					 *                     browser.
					 *  @param  {function=} callback The function to invoke once
					 *                               the sample is loaded.
					 *  @returns {Tone.Player} this
					 */
				    Tone.Player.prototype.load = function (url, callback) {
				        this._buffer.load(url, this._onload.bind(this, callback));
				        return this;
				    };
				    /**
					 * Internal callback when the buffer is loaded.
					 * @private
					 */
				    Tone.Player.prototype._onload = function (callback) {
				        callback(this);
				        if (this.autostart) {
				            this.start();
				        }
				    };
				    /**
					 *  Play the buffer at the given startTime. Optionally add an offset
					 *  and/or duration which will play the buffer from a position
					 *  within the buffer for the given duration. 
					 *  
					 *  @param  {Time} [startTime=now] When the player should start.
					 *  @param  {Time} [offset=0] The offset from the beginning of the sample
					 *                                 to start at. 
					 *  @param  {Time=} duration How long the sample should play. If no duration
					 *                                is given, it will default to the full length 
					 *                                of the sample (minus any offset)
					 *  @returns {Tone.Player} this
					 *  @memberOf Tone.Player#
					 *  @method start
					 *  @name start
					 */
				    /**
					 *  Internal start method
					 *  @private
					 */
				    Tone.Player.prototype._start = function (startTime, offset, duration) {
				        if (this._buffer.loaded) {
				            //if it's a loop the default offset is the loopstart point
				            if (this._loop) {
				                offset = this.defaultArg(offset, this._loopStart);
				            } else {
				                //otherwise the default offset is 0
				                offset = this.defaultArg(offset, 0);
				            }
				            offset = this.toSeconds(offset);
				            //make sure it has a positive duration
				            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));
				            duration = this.toSeconds(duration);
				            //the values in seconds
				            startTime = this.toSeconds(startTime);
				            //make the source
				            this._source = this.context.createBufferSource();
				            this._source.buffer = this._buffer.get();
				            //set the looping properties
				            if (this._loop) {
				                this._source.loop = this._loop;
				                this._source.loopStart = this.toSeconds(this._loopStart);
				                this._source.loopEnd = this.toSeconds(this._loopEnd);
				            } else {
				                //if it's not looping, set the state change at the end of the sample
				                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);
				            }
				            //and other properties
				            this._source.playbackRate.value = this._playbackRate;
				            this._source.connect(this.output);
				            //start it
				            if (this._loop) {
				                //modify the offset if it's greater than the loop time
				                var loopEnd = this._source.loopEnd || this._buffer.duration;
				                var loopStart = this._source.loopStart;
				                var loopDuration = loopEnd - loopStart;
				                if (offset > loopDuration) {
				                    offset = loopStart + offset % loopDuration;
				                    if (offset > loopEnd) {
				                        offset -= loopDuration;
				                    }
				                }
				                this._source.start(startTime, offset);
				            } else {
				                this._source.start(startTime, offset, duration);
				            }
				        } else {
				            throw Error('Tone.Player: tried to start Player before the buffer was loaded');
				        }
				        return this;
				    };
				    /**
					 *  Stop playback.
					 *  @private
					 *  @param  {Time} [time=now]
					 *  @returns {Tone.Player} this
					 */
				    Tone.Player.prototype._stop = function (time) {
				        if (this._source) {
				            this._source.stop(this.toSeconds(time));
				            this._source = null;
				        }
				        return this;
				    };
				    /**
					 *  Seek to a specific time in the player's buffer. If the 
					 *  source is no longer playing at that time, it will stop.
					 *  If you seek to a time that 
					 *  @param {Time} offset The time to seek to.
					 *  @param {Time=} time The time for the seek event to occur.
					 *  @return {Tone.Player} this
					 *  @example
					 * source.start(0.2);
					 * source.stop(0.4);
					 */
				    Tone.Player.prototype.seek = function (offset, time) {
				        time = this.toSeconds(time);
				        if (this._state.getStateAtTime(time) === Tone.State.Started) {
				            offset = this.toSeconds(offset);
				            // if it's currently playing, stop it
				            this._stop(time);
				            //restart it at the given time
				            this._start(time, offset);
				        }
				        return this;
				    };
				    /**
					 *  Set the loop start and end. Will only loop if loop is 
					 *  set to true. 
					 *  @param {Time} loopStart The loop end time
					 *  @param {Time} loopEnd The loop end time
					 *  @returns {Tone.Player} this
					 *  @example
					 * //loop 0.1 seconds of the file. 
					 * player.setLoopPoints(0.2, 0.3);
					 * player.loop = true;
					 */
				    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {
				        this.loopStart = loopStart;
				        this.loopEnd = loopEnd;
				        return this;
				    };
				    /**
					 * If loop is true, the loop will start at this position. 
					 * @memberOf Tone.Player#
					 * @type {Time}
					 * @name loopStart
					 */
				    Object.defineProperty(Tone.Player.prototype, 'loopStart', {
				        get: function () {
				            return this._loopStart;
				        },
				        set: function (loopStart) {
				            this._loopStart = loopStart;
				            if (this._source) {
				                this._source.loopStart = this.toSeconds(loopStart);
				            }
				        }
				    });
				    /**
					 * If loop is true, the loop will end at this position.
					 * @memberOf Tone.Player#
					 * @type {Time}
					 * @name loopEnd
					 */
				    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {
				        get: function () {
				            return this._loopEnd;
				        },
				        set: function (loopEnd) {
				            this._loopEnd = loopEnd;
				            if (this._source) {
				                this._source.loopEnd = this.toSeconds(loopEnd);
				            }
				        }
				    });
				    /**
					 * The audio buffer belonging to the player. 
					 * @memberOf Tone.Player#
					 * @type {Tone.Buffer}
					 * @name buffer
					 */
				    Object.defineProperty(Tone.Player.prototype, 'buffer', {
				        get: function () {
				            return this._buffer;
				        },
				        set: function (buffer) {
				            this._buffer.set(buffer);
				        }
				    });
				    /**
					 * If the buffer should loop once it's over. 
					 * @memberOf Tone.Player#
					 * @type {boolean}
					 * @name loop
					 */
				    Object.defineProperty(Tone.Player.prototype, 'loop', {
				        get: function () {
				            return this._loop;
				        },
				        set: function (loop) {
				            this._loop = loop;
				            if (this._source) {
				                this._source.loop = loop;
				            }
				        }
				    });
				    /**
					 * The playback speed. 1 is normal speed. This is not a signal because
					 * Safari and iOS currently don't support playbackRate as a signal.
					 * @memberOf Tone.Player#
					 * @type {number}
					 * @name playbackRate
					 */
				    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {
				        get: function () {
				            return this._playbackRate;
				        },
				        set: function (rate) {
				            this._playbackRate = rate;
				            if (this._source) {
				                this._source.playbackRate.value = rate;
				            }
				        }
				    });
				    /**
					 * The direction the buffer should play in
					 * @memberOf Tone.Player#
					 * @type {boolean}
					 * @name reverse
					 */
				    Object.defineProperty(Tone.Player.prototype, 'reverse', {
				        get: function () {
				            return this._buffer.reverse;
				        },
				        set: function (rev) {
				            this._buffer.reverse = rev;
				        }
				    });
				    /**
					 *  Dispose and disconnect.
					 *  @return {Tone.Player} this
					 */
				    Tone.Player.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        if (this._source !== null) {
				            this._source.disconnect();
				            this._source = null;
				        }
				        this._buffer.dispose();
				        this._buffer = null;
				        return this;
				    };
				    return Tone.Player;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.
					 *
					 *  @constructor
					 *  @extends {Tone.Instrument}
					 *  @param {String} url the url of the audio file
					 *  @param {Function=} onload The callback to invoke when the sample is loaded.
					 *  @example
					 * var sampler = new Sampler("./audio/casio/A1.mp3", function(){
					 * 	//repitch the sample down a half step
					 * 	sampler.triggerAttack(-1);
					 * }).toMaster();
					 */
				    Tone.Sampler = function () {
				        var options = this.optionsObject(arguments, [
				            'url',
				            'onload'
				        ], Tone.Sampler.defaults);
				        Tone.Instrument.call(this, options);
				        /**
						 *  The sample player.
						 *  @type {Tone.Player}
						 */
				        this.player = new Tone.Player(options.url, options.onload);
				        this.player.retrigger = true;
				        /**
						 *  The amplitude envelope. 
						 *  @type {Tone.AmplitudeEnvelope}
						 */
				        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
				        this.player.chain(this.envelope, this.output);
				        this._readOnly([
				            'player',
				            'envelope'
				        ]);
				        this.loop = options.loop;
				        this.reverse = options.reverse;
				    };
				    Tone.extend(Tone.Sampler, Tone.Instrument);
				    /**
					 *  the default parameters
					 *  @static
					 */
				    Tone.Sampler.defaults = {
				        'onload': Tone.noOp,
				        'loop': false,
				        'reverse': false,
				        'envelope': {
				            'attack': 0.001,
				            'decay': 0,
				            'sustain': 1,
				            'release': 0.1
				        }
				    };
				    /**
					 *  Trigger the start of the sample. 
					 *  @param {Interval} [pitch=0] The amount the sample should
					 *                              be repitched. 
					 *  @param {Time} [time=now] The time when the sample should start
					 *  @param {NormalRange} [velocity=1] The velocity of the note
					 *  @returns {Tone.Sampler} this
					 *  @example
					 * sampler.triggerAttack(0, "+0.1", 0.5);
					 */
				    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {
				        time = this.toSeconds(time);
				        pitch = this.defaultArg(pitch, 0);
				        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);
				        this.player.start(time);
				        this.envelope.triggerAttack(time, velocity);
				        return this;
				    };
				    /**
					 *  Start the release portion of the sample. Will stop the sample once the 
					 *  envelope has fully released. 
					 *  
					 *  @param {Time} [time=now] The time when the note should release
					 *  @returns {Tone.Sampler} this
					 *  @example
					 * sampler.triggerRelease();
					 */
				    Tone.Sampler.prototype.triggerRelease = function (time) {
				        time = this.toSeconds(time);
				        this.envelope.triggerRelease(time);
				        this.player.stop(this.toSeconds(this.envelope.release) + time);
				        return this;
				    };
				    /**
					 * If the output sample should loop or not.
					 * @memberOf Tone.Sampler#
					 * @type {number|string}
					 * @name loop
					 */
				    Object.defineProperty(Tone.Sampler.prototype, 'loop', {
				        get: function () {
				            return this.player.loop;
				        },
				        set: function (loop) {
				            this.player.loop = loop;
				        }
				    });
				    /**
					 * The direction the buffer should play in
					 * @memberOf Tone.Sampler#
					 * @type {boolean}
					 * @name reverse
					 */
				    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {
				        get: function () {
				            return this.player.reverse;
				        },
				        set: function (rev) {
				            this.player.reverse = rev;
				        }
				    });
				    /**
					 * The buffer to play.
					 * @memberOf Tone.Sampler#
					 * @type {Tone.Buffer}
					 * @name buffer
					 */
				    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {
				        get: function () {
				            return this.player.buffer;
				        },
				        set: function (buff) {
				            this.player.buffer = buff;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @returns {Tone.Sampler} this
					 */
				    Tone.Sampler.prototype.dispose = function () {
				        Tone.Instrument.prototype.dispose.call(this);
				        this._writable([
				            'player',
				            'envelope'
				        ]);
				        this.player.dispose();
				        this.player = null;
				        this.envelope.dispose();
				        this.envelope = null;
				        return this;
				    };
				    return Tone.Sampler;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Now called Tone.Synth
					 *  @constructor
					 *  @extends {Tone.Monophonic}
					 */
				    Tone.SimpleSynth = function (options) {
				        console.warn('Tone.SimpleSynth is now called Tone.Synth');
				        Tone.Synth.call(this, options);
				    };
				    Tone.extend(Tone.SimpleSynth, Tone.Synth);
				    return Tone.SimpleSynth;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
					 *         See also Tone.AudioToGain. 
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @example
					 * var g2a = new Tone.GainToAudio();
					 */
				    Tone.GainToAudio = function () {
				        /**
						 *  @type {WaveShaperNode}
						 *  @private
						 */
				        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
				            return Math.abs(x) * 2 - 1;
				        });
				    };
				    Tone.extend(Tone.GainToAudio, Tone.SignalBase);
				    /**
					 *  clean up
					 *  @returns {Tone.GainToAudio} this
					 */
				    Tone.GainToAudio.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._norm.dispose();
				        this._norm = null;
				        return this;
				    };
				    return Tone.GainToAudio;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
					 *
					 *  @extends {Tone.SignalBase}
					 *  @constructor
					 *  @param {number} inputMin the min input value
					 *  @param {number} inputMax the max input value
					 *  @example
					 * var norm = new Tone.Normalize(2, 4);
					 * var sig = new Tone.Signal(3).connect(norm);
					 * //output of norm is 0.5. 
					 */
				    Tone.Normalize = function (inputMin, inputMax) {
				        /**
						 *  the min input value
						 *  @type {number}
						 *  @private
						 */
				        this._inputMin = this.defaultArg(inputMin, 0);
				        /**
						 *  the max input value
						 *  @type {number}
						 *  @private
						 */
				        this._inputMax = this.defaultArg(inputMax, 1);
				        /**
						 *  subtract the min from the input
						 *  @type {Tone.Add}
						 *  @private
						 */
				        this._sub = this.input = new Tone.Add(0);
				        /**
						 *  divide by the difference between the input and output
						 *  @type {Tone.Multiply}
						 *  @private
						 */
				        this._div = this.output = new Tone.Multiply(1);
				        this._sub.connect(this._div);
				        this._setRange();
				    };
				    Tone.extend(Tone.Normalize, Tone.SignalBase);
				    /**
					 * The minimum value the input signal will reach.
					 * @memberOf Tone.Normalize#
					 * @type {number}
					 * @name min
					 */
				    Object.defineProperty(Tone.Normalize.prototype, 'min', {
				        get: function () {
				            return this._inputMin;
				        },
				        set: function (min) {
				            this._inputMin = min;
				            this._setRange();
				        }
				    });
				    /**
					 * The maximum value the input signal will reach.
					 * @memberOf Tone.Normalize#
					 * @type {number}
					 * @name max
					 */
				    Object.defineProperty(Tone.Normalize.prototype, 'max', {
				        get: function () {
				            return this._inputMax;
				        },
				        set: function (max) {
				            this._inputMax = max;
				            this._setRange();
				        }
				    });
				    /**
					 *  set the values
					 *  @private
					 */
				    Tone.Normalize.prototype._setRange = function () {
				        this._sub.value = -this._inputMin;
				        this._div.value = 1 / (this._inputMax - this._inputMin);
				    };
				    /**
					 *  clean up
					 *  @returns {Tone.Normalize} this
					 */
				    Tone.Normalize.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._sub.dispose();
				        this._sub = null;
				        this._div.dispose();
				        this._div = null;
				        return this;
				    };
				    return Tone.Normalize;
				});
				Module(function (Tone) {
				    /**
					 *  @class Wrapper around the native BufferSourceNode.
					 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
					 *  @param  {Function}  onended  The callback to invoke when the 
					 *                               buffer is done playing.
					 */
				    Tone.BufferSource = function () {
				        var options = this.optionsObject(arguments, [
				            'buffer',
				            'onended'
				        ], Tone.BufferSource.defaults);
				        /**
						 *  The callback to invoke after the 
						 *  buffer source is done playing. 
						 *  @type  {Function}
						 */
				        this.onended = options.onended;
				        /**
						 *  The time that the buffer was started.
						 *  @type  {Number}
						 *  @private
						 */
				        this._startTime = -1;
				        /**
						 *  The gain node which envelopes the BufferSource
						 *  @type  {Tone.Gain}
						 *  @private
						 */
				        this._gainNode = this.output = new Tone.Gain();
				        /**
						 *  The buffer source
						 *  @type  {AudioBufferSourceNode}
						 *  @private
						 */
				        this._source = this.context.createBufferSource();
				        this._source.connect(this._gainNode);
				        this._source.onended = this._onended.bind(this);
				        /**
						 *  The playbackRate of the buffer
						 *  @type {Positive}
						 *  @signal
						 */
				        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);
				        /**
						 *  The fadeIn time of the amplitude envelope.
						 *  @type {Time}
						 */
				        this.fadeIn = options.fadeIn;
				        /**
						 *  The fadeOut time of the amplitude envelope.
						 *  @type {Time}
						 */
				        this.fadeOut = options.fadeOut;
				        /**
						 *  The value that the buffer ramps to
						 *  @type {Gain}
						 *  @private
						 */
				        this._gain = 1;
				        //set the buffer initially
				        if (!this.isUndef(options.buffer)) {
				            this.buffer = options.buffer;
				        }
				        this.loop = options.loop;
				    };
				    Tone.extend(Tone.BufferSource);
				    /**
					 *  The defaults
					 *  @const
					 *  @type  {Object}
					 */
				    Tone.BufferSource.defaults = {
				        'onended': Tone.noOp,
				        'fadeIn': 0,
				        'fadeOut': 0
				    };
				    /**
					 *  Returns the playback state of the source, either "started" or "stopped".
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.BufferSource#
					 *  @name state
					 */
				    Object.defineProperty(Tone.BufferSource.prototype, 'state', {
				        get: function () {
				            var now = this.now();
				            if (this._startTime !== -1 && now > this._startTime) {
				                return Tone.State.Started;
				            } else {
				                return Tone.State.Stopped;
				            }
				        }
				    });
				    /**
					 *  Start the buffer
					 *  @param  {Time} [startTime=now] When the player should start.
					 *  @param  {Time} [offset=0] The offset from the beginning of the sample
					 *                                 to start at. 
					 *  @param  {Time=} duration How long the sample should play. If no duration
					 *                                is given, it will default to the full length 
					 *                                of the sample (minus any offset)
					 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
					 *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.
					 *  @return  {Tone.BufferSource}  this
					 */
				    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {
				        if (this._startTime !== -1) {
				            throw new Error('Tone.BufferSource: can only be started once.');
				        }
				        if (this.buffer) {
				            time = this.toSeconds(time);
				            //if it's a loop the default offset is the loopstart point
				            if (this.loop) {
				                offset = this.defaultArg(offset, this.loopStart);
				            } else {
				                //otherwise the default offset is 0
				                offset = this.defaultArg(offset, 0);
				            }
				            offset = this.toSeconds(offset);
				            //the values in seconds
				            time = this.toSeconds(time);
				            this._source.start(time, offset);
				            gain = this.defaultArg(gain, 1);
				            this._gain = gain;
				            //the fadeIn time
				            if (this.isUndef(fadeInTime)) {
				                fadeInTime = this.toSeconds(this.fadeIn);
				            } else {
				                fadeInTime = this.toSeconds(fadeInTime);
				            }
				            if (fadeInTime > 0) {
				                this._gainNode.gain.setValueAtTime(0, time);
				                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);
				            } else {
				                this._gainNode.gain.setValueAtTime(gain, time);
				            }
				            this._startTime = time + fadeInTime;
				            if (!this.isUndef(duration)) {
				                duration = this.defaultArg(duration, this.buffer.duration - offset);
				                duration = this.toSeconds(duration);
				                this.stop(time + duration + fadeInTime, fadeInTime);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Stop the buffer. Optionally add a ramp time to fade the 
					 *  buffer out. 
					 *  @param  {Time=}  time         The time the buffer should stop.
					 *  @param  {Time=}  fadeOutTime  How long the gain should fade out for
					 *  @return  {Tone.BufferSource}  this
					 */
				    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {
				        if (this.buffer) {
				            time = this.toSeconds(time);
				            //the fadeOut time
				            if (this.isUndef(fadeOutTime)) {
				                fadeOutTime = this.toSeconds(this.fadeOut);
				            } else {
				                fadeOutTime = this.toSeconds(fadeOutTime);
				            }
				            //cancel the end curve
				            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);
				            //set a new one
				            if (fadeOutTime > 0) {
				                this._gainNode.gain.setValueAtTime(this._gain, time);
				                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);
				                time += fadeOutTime;
				            } else {
				                this._gainNode.gain.setValueAtTime(0, time);
				            }
				            // fix for safari bug and old FF
				            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {
				                this._source.stop(time);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Internal callback when the buffer is ended. 
					 *  Invokes `onended` and disposes the node.
					 *  @private
					 */
				    Tone.BufferSource.prototype._onended = function () {
				        this.onended(this);
				        this.dispose();
				    };
				    /**
					 * If loop is true, the loop will start at this position. 
					 * @memberOf Tone.BufferSource#
					 * @type {Time}
					 * @name loopStart
					 */
				    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {
				        get: function () {
				            return this._source.loopStart;
				        },
				        set: function (loopStart) {
				            this._source.loopStart = this.toSeconds(loopStart);
				        }
				    });
				    /**
					 * If loop is true, the loop will end at this position.
					 * @memberOf Tone.BufferSource#
					 * @type {Time}
					 * @name loopEnd
					 */
				    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {
				        get: function () {
				            return this._source.loopEnd;
				        },
				        set: function (loopEnd) {
				            this._source.loopEnd = this.toSeconds(loopEnd);
				        }
				    });
				    /**
					 * The audio buffer belonging to the player. 
					 * @memberOf Tone.BufferSource#
					 * @type {AudioBuffer}
					 * @name buffer
					 */
				    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {
				        get: function () {
				            if (this._source) {
				                return this._source.buffer;
				            } else {
				                return null;
				            }
				        },
				        set: function (buffer) {
				            if (buffer instanceof Tone.Buffer) {
				                this._source.buffer = buffer.get();
				            } else {
				                this._source.buffer = buffer;
				            }
				        }
				    });
				    /**
					 * If the buffer should loop once it's over. 
					 * @memberOf Tone.BufferSource#
					 * @type {boolean}
					 * @name loop
					 */
				    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {
				        get: function () {
				            return this._source.loop;
				        },
				        set: function (loop) {
				            this._source.loop = loop;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return  {Tone.BufferSource}  this
					 */
				    Tone.BufferSource.prototype.dispose = function () {
				        this.onended = null;
				        if (this._source) {
				            this._source.onended = null;
				            this._source.disconnect();
				            this._source = null;
				        }
				        if (this._gainNode) {
				            this._gainNode.dispose();
				            this._gainNode = null;
				        }
				        this._startTime = -1;
				        this.playbackRate = null;
				        this.output = null;
				        return this;
				    };
				    return Tone.BufferSource;
				});
				Module(function (Tone) {
				    
				    //polyfill for getUserMedia
				    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
				    /**
					 *  @class  Tone.ExternalInput is a WebRTC Audio Input. Check 
					 *          [Media Stream API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API)
					 *          to see which browsers are supported. As of
					 *          writing this, Chrome, Firefox, and Opera 
					 *          support Media Stream. Chrome allows enumeration 
					 *          of the sources, and access to device name over a 
					 *          secure (HTTPS) connection. See [https://simpl.info](https://simpl.info/getusermedia/sources/index.html) 
					 *          vs [http://simple.info](https://simpl.info/getusermedia/sources/index.html) 
					 *          on a Chrome browser for the difference.
					 *         
					 *  @constructor
					 *  @extends {Tone.Source}
					 *  @param {number} [inputNum=0] If multiple inputs are present, select the input number. Chrome only.
					 *  @example
					 * //select the third input
					 * var motu = new Tone.ExternalInput(3);
					 * 
					 * //opening the input asks the user to activate their mic
					 * motu.open(function(){
					 * 	//opening is activates the microphone
					 * 	//starting lets audio through
					 * 	motu.start(10);
					 * });
					 */
				    Tone.ExternalInput = function () {
				        var options = this.optionsObject(arguments, ['inputNum'], Tone.ExternalInput.defaults);
				        Tone.Source.call(this, options);
				        /**
						 *  The MediaStreamNode 
						 *  @type {MediaStreamAudioSourceNode}
						 *  @private
						 */
				        this._mediaStream = null;
				        /**
						 *  The media stream created by getUserMedia.
						 *  @type {LocalMediaStream}
						 *  @private
						 */
				        this._stream = null;
				        /**
						 *  The constraints argument for getUserMedia
						 *  @type {Object}
						 *  @private
						 */
				        this._constraints = { 'audio': true };
				        /**
						 *  The input source position in Tone.ExternalInput.sources. 
						 *  Set before ExternalInput.open().
						 *  @type {Number}
						 *  @private
						 */
				        this._inputNum = options.inputNum;
				        /**
						 *  Gates the input signal for start/stop. 
						 *  Initially closed.
						 *  @type {GainNode}
						 *  @private
						 */
				        this._gate = new Tone.Gain(0).connect(this.output);
				    };
				    Tone.extend(Tone.ExternalInput, Tone.Source);
				    /**
					 * the default parameters
					 * @type {Object}
					 */
				    Tone.ExternalInput.defaults = { 'inputNum': 0 };
				    /**
					 * wrapper for getUserMedia function
					 * @param {function} callback
					 * @param {function} error
					 * @private
					 */
				    Tone.ExternalInput.prototype._getUserMedia = function (callback, error) {
				        if (!Tone.ExternalInput.supported) {
				            error('browser does not support \'getUserMedia\'');
				        }
				        if (Tone.ExternalInput.sources[this._inputNum]) {
				            this._constraints = { audio: { optional: [{ sourceId: Tone.ExternalInput.sources[this._inputNum].id }] } };
				        }
				        navigator.getUserMedia(this._constraints, function (stream) {
				            this._onStream(stream);
				            callback();
				        }.bind(this), function (err) {
				            error(err);
				        });
				    };
				    /**
					 * called when the stream is successfully setup
					 * @param  {LocalMediaStream} stream
					 * @private
					 */
				    Tone.ExternalInput.prototype._onStream = function (stream) {
				        if (!this.isFunction(this.context.createMediaStreamSource)) {
				            throw new Error('Tone.ExternalInput: browser does not support the \'MediaStreamSourceNode\'');
				        }
				        //can only start a new source if the previous one is closed
				        if (!this._stream) {
				            this._stream = stream;
				            //Wrap a MediaStreamSourceNode around the live input stream.
				            this._mediaStream = this.context.createMediaStreamSource(stream);
				            //Connect the MediaStreamSourceNode to a gate gain node
				            this._mediaStream.connect(this._gate);
				        }
				    };
				    /**
					 *  Open the media stream 
					 *  @param  {function=} callback The callback function to 
					 *                       execute when the stream is open
					 *  @param  {function=} error The callback function to execute
					 *                            when the media stream can't open. 
					 *                            This is fired either because the browser
					 *                            doesn't support the media stream,
					 *                            or the user blocked opening the microphone. 
					 *  @return {Tone.ExternalInput} this
					 */
				    Tone.ExternalInput.prototype.open = function (callback, error) {
				        callback = this.defaultArg(callback, Tone.noOp);
				        error = this.defaultArg(error, Tone.noOp);
				        Tone.ExternalInput.getSources(function () {
				            this._getUserMedia(callback, error);
				        }.bind(this));
				        return this;
				    };
				    /**
					 *  Close the media stream
					 *  @return {Tone.ExternalInput} this
					 */
				    Tone.ExternalInput.prototype.close = function () {
				        if (this._stream) {
				            var track = this._stream.getTracks()[this._inputNum];
				            if (!this.isUndef(track)) {
				                track.stop();
				            }
				            this._stream = null;
				        }
				        return this;
				    };
				    /**
					 *  Start the stream
					 *  @private
					 */
				    Tone.ExternalInput.prototype._start = function (time) {
				        time = this.toSeconds(time);
				        this._gate.gain.setValueAtTime(1, time);
				        return this;
				    };
				    /**
					 *  Stops the stream.
					 *  @private
					 */
				    Tone.ExternalInput.prototype._stop = function (time) {
				        time = this.toSeconds(time);
				        this._gate.gain.setValueAtTime(0, time);
				        return this;
				    };
				    /**
					 * Clean up.
					 * @return {Tone.ExternalInput} this
					 */
				    Tone.ExternalInput.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this.close();
				        if (this._mediaStream) {
				            this._mediaStream.disconnect();
				            this._mediaStream = null;
				        }
				        this._constraints = null;
				        this._gate.dispose();
				        this._gate = null;
				        return this;
				    };
				    ///////////////////////////////////////////////////////////////////////////
				    // STATIC METHODS
				    ///////////////////////////////////////////////////////////////////////////
				    /**
					 * The array of available sources, different depending on whether connection is secure
					 * @type {Array}
					 * @static
					 */
				    Tone.ExternalInput.sources = [];
				    /**
					 * indicates whether browser supports MediaStreamTrack.getSources (i.e. Chrome vs Firefox)
					 * @type {Boolean}
					 * @private
					 */
				    Tone.ExternalInput._canGetSources = !Tone.prototype.isUndef(window.MediaStreamTrack) && Tone.prototype.isFunction(MediaStreamTrack.getSources);
				    /**
					 *  If getUserMedia is supported by the browser.
					 *  @type  {Boolean}
					 *  @memberOf Tone.ExternalInput#
					 *  @name supported
					 *  @static
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.ExternalInput, 'supported', {
				        get: function () {
				            return Tone.prototype.isFunction(navigator.getUserMedia);
				        }
				    });
				    /**
					 *  Populates the source list. Invokes the callback with an array of 
					 *  possible audio sources.
					 *  @param  {function=} callback Callback to be executed after populating list 
					 *  @return {Tone.ExternalInput} this
					 *  @static
					 *  @example
					 * var soundflower = new Tone.ExternalInput();
					 * Tone.ExternalInput.getSources(selectSoundflower);
					 *
					 * function selectSoundflower(sources){
					 * 	for(var i = 0; i < sources.length; i++){
					 * 		if(sources[i].label === "soundflower"){
					 * 			soundflower.inputNum = i;
					 * 			soundflower.open(function(){
					 * 				soundflower.start();
					 * 			});
					 * 			break;
					 * 		}
					 * 	}
					 * };
					 */
				    Tone.ExternalInput.getSources = function (callback) {
				        if (Tone.ExternalInput.sources.length === 0 && Tone.ExternalInput._canGetSources) {
				            MediaStreamTrack.getSources(function (media_sources) {
				                for (var i = 0; i < media_sources.length; i++) {
				                    if (media_sources[i].kind === 'audio') {
				                        Tone.ExternalInput.sources[i] = media_sources[i];
				                    }
				                }
				                callback(Tone.ExternalInput.sources);
				            });
				        } else {
				            callback(Tone.ExternalInput.sources);
				        }
				        return this;
				    };
				    return Tone.ExternalInput;
				});
				Module(function (Tone) {
				    /**
					 *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled istruments
					 *         or any time you need to play a bunch of audio buffers. 
					 *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available
					 *                                                to the MultiPlayer
					 *  @param {Function} onload The callback to invoke when all of the buffers are loaded.
					 *  @extends {Tone}
					 *  @example
					 * var multiPlayer = new MultiPlayer({
					 * 	"kick" : "path/to/kick.mp3",
					 * 	"snare" : "path/to/snare.mp3",
					 * }, function(){
					 * 	multiPlayer.start("kick");
					 * });
					 *  @example
					 * //can also store the values in an array
					 * var multiPlayer = new MultiPlayer(["path/to/kick.mp3", "path/to/snare.mp3"], 
					 * function(){
					 * 	//if an array is passed in, the samples are referenced to by index
					 * 	multiPlayer.start(1);
					 * });
					 */
				    Tone.MultiPlayer = function () {
				        var options = this.optionsObject(arguments, [
				            'urls',
				            'onload'
				        ], Tone.MultiPlayer.defaults);
				        if (options.urls instanceof Tone.Buffers) {
				            /**
							 *  All the buffers belonging to the player.
							 *  @type  {Tone.Buffers}
							 */
				            this.buffers = options.urls;
				        } else {
				            this.buffers = new Tone.Buffers(options.urls, options.onload);
				        }
				        /**
						 *  Keeps track of the currently playing sources.
						 *  @type  {Array}
						 *  @private
						 */
				        this._activeSources = [];
				        /**
						 *  The fade in envelope which is applied
						 *  to the beginning of the BufferSource
						 *  @type  {Time}
						 */
				        this.fadeIn = options.fadeIn;
				        /**
						 *  The fade out envelope which is applied
						 *  to the end of the BufferSource
						 *  @type  {Time}
						 */
				        this.fadeOut = options.fadeOut;
				        /**
						 *  The output volume node
						 *  @type  {Tone.Volume}
						 *  @private
						 */
				        this._volume = this.output = new Tone.Volume(options.volume);
				        /**
						 * The volume of the output in decibels.
						 * @type {Decibels}
						 * @signal
						 * @example
						 * source.volume.value = -6;
						 */
				        this.volume = this._volume.volume;
				        this._readOnly('volume');
				        //make the output explicitly stereo
				        this._volume.output.output.channelCount = 2;
				        this._volume.output.output.channelCountMode = 'explicit';
				        //mute initially
				        this.mute = options.mute;
				    };
				    Tone.extend(Tone.MultiPlayer, Tone.Source);
				    /**
					 *  The defaults
					 *  @type  {Object}
					 */
				    Tone.MultiPlayer.defaults = {
				        'onload': Tone.noOp,
				        'fadeIn': 0,
				        'fadeOut': 0
				    };
				    /**
					 *  Get the given buffer.
					 *  @param  {String|Number|AudioBuffer|Tone.Buffer}  buffer
					 *  @return  {AudioBuffer}  The requested buffer.
					 *  @private
					 */
				    Tone.MultiPlayer.prototype._getBuffer = function (buffer) {
				        if (this.isNumber(buffer) || this.isString(buffer)) {
				            return this.buffers.get(buffer).get();
				        } else if (buffer instanceof Tone.Buffer) {
				            return buffer.get();
				        } else {
				            return buffer;
				        }
				    };
				    /**
					 *  Start a buffer by name. The `start` method allows a number of options
					 *  to be passed in such as offset, interval, and gain. This is good for multi-sampled 
					 *  instruments and sound sprites where samples are repitched played back at different velocities.
					 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
					 *                                          Or pass in a buffer which will be started.
					 *  @param  {Time}  time      When to start the buffer.
					 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
					 *  @param  {Time=}  duration   How long to play the buffer for.
					 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
					 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
					 *  @return  {Tone.MultiPlayer}  this
					 */
				    Tone.MultiPlayer.prototype.start = function (buffer, time, offset, duration, pitch, gain) {
				        buffer = this._getBuffer(buffer);
				        var source = new Tone.BufferSource(buffer).connect(this.output);
				        this._activeSources.push(source);
				        time = this.toSeconds(time);
				        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);
				        if (duration) {
				            source.stop(time + this.toSeconds(duration), this.fadeOut);
				        }
				        source.onended = this._onended.bind(this);
				        pitch = this.defaultArg(pitch, 0);
				        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
				        return this;
				    };
				    /**
					 *  Start a looping buffer by name. Similar to `start`, but the buffer
					 *  is looped instead of played straight through. Can still be stopped with `stop`. 
					 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
					 *                                          Or pass in a buffer which will be started.
					 *  @param  {Time}  time      When to start the buffer.
					 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
					 *  @param  {Time=}  loopStart   The start of the loop.
					 *  @param  {Time=}  loopEnd	The end of the loop.
					 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
					 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
					 *  @return  {Tone.MultiPlayer}  this
					 */
				    Tone.MultiPlayer.prototype.startLoop = function (buffer, time, offset, loopStart, loopEnd, pitch, gain) {
				        buffer = this._getBuffer(buffer);
				        var source = new Tone.BufferSource(buffer).connect(this.output);
				        this._activeSources.push(source);
				        time = this.toSeconds(time);
				        source.loop = true;
				        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));
				        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));
				        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);
				        source.onended = this._onended.bind(this);
				        pitch = this.defaultArg(pitch, 0);
				        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
				        return this;
				    };
				    /**
					 *  Internal callback when a buffer is done playing.
					 *  @param  {Tone.BufferSource}  source  The stopped source
					 *  @private
					 */
				    Tone.MultiPlayer.prototype._onended = function (source) {
				        var index = this._activeSources.indexOf(source);
				        this._activeSources.splice(index, 1);
				    };
				    /**
					 *  Stop all instances of the currently playing buffer at the given time.
					 *  @param  {String|AudioBuffer}  buffer  The buffer to stop.
					 *  @param  {Time=}  time    When to stop the buffer
					 *  @return  {Tone.MultiPlayer}  this
					 */
				    Tone.MultiPlayer.prototype.stop = function (buffer, time) {
				        buffer = this._getBuffer(buffer);
				        time = this.toSeconds(time);
				        for (var i = 0; i < this._activeSources.length; i++) {
				            if (this._activeSources[i].buffer === buffer) {
				                this._activeSources[i].stop(time, this.fadeOut);
				            }
				        }
				        return this;
				    };
				    /**
					 *  Stop all currently playing buffers at the given time.
					 *  @param  {Time=}  time  When to stop the buffers.
					 *  @return  {Tone.MultiPlayer}  this
					 */
				    Tone.MultiPlayer.prototype.stopAll = function (time) {
				        time = this.toSeconds(time);
				        for (var i = 0; i < this._activeSources.length; i++) {
				            this._activeSources[i].stop(time, this.fadeOut);
				        }
				        return this;
				    };
				    /**
					 *  Add another buffer to the available buffers.
					 *  @param {String} name The name to that the buffer is refered
					 *                       to in start/stop methods. 
					 *  @param {String|Tone.Buffer} url The url of the buffer to load
					 *                                  or the buffer.
					 *  @param {Function} callback The function to invoke after the buffer is loaded.
					 */
				    Tone.MultiPlayer.prototype.add = function (name, url, callback) {
				        this.buffers.add(name, url, callback);
				        return this;
				    };
				    /**
					 *  Returns the playback state of the source. "started"
					 *  if there are any buffers playing. "stopped" otherwise.
					 *  @type {Tone.State}
					 *  @readOnly
					 *  @memberOf Tone.MultiPlayer#
					 *  @name state
					 */
				    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {
				        get: function () {
				            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;
				        }
				    });
				    /**
					 * Mute the output. 
					 * @memberOf Tone.MultiPlayer#
					 * @type {boolean}
					 * @name mute
					 * @example
					 * //mute the output
					 * source.mute = true;
					 */
				    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {
				        get: function () {
				            return this._volume.mute;
				        },
				        set: function (mute) {
				            this._volume.mute = mute;
				        }
				    });
				    /**
					 *  Clean up.
					 *  @return  {Tone.MultiPlayer}  this
					 */
				    Tone.MultiPlayer.prototype.dispose = function () {
				        Tone.prototype.dispose.call(this);
				        this._volume.dispose();
				        this._volume = null;
				        this._writable('volume');
				        this.volume = null;
				        this.buffers.dispose();
				        this.buffers = null;
				        for (var i = 0; i < this._activeSources.length; i++) {
				            this._activeSources[i].dispose();
				        }
				        this._activeSources = null;
				        return this;
				    };
				    return Tone.MultiPlayer;
				});
				Module(function (Tone) {
				    /**
					 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
					 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the 
					 *        amount of time each small chunk of audio is played for and the overlap is the 
					 *        amount of crossfading transition time between successive grains.
					 * @extends {Tone}
					 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
					 * @param {Function=} callback The callback to invoke after the url is loaded.
					 */
				    Tone.GrainPlayer = function () {
				        var options = this.optionsObject(arguments, [
				            'url',
				            'onload'
				        ], Tone.GrainPlayer.defaults);
				        Tone.Source.call(this);
				        /**
						 *  The audio buffer belonging to the player.
						 *  @type  {Tone.Buffer}
						 */
				        this.buffer = new Tone.Buffer(options.url, options.onload);
				        /**
						 *  Plays the buffer with a small envelope
						 *  @type  {Tone.MultiPlayer}
						 *  @private
						 */
				        this._player = this.output = new Tone.MultiPlayer();
				        /**
						 *  Create a repeating tick to schedule
						 *  the grains.
						 *  @type  {Tone.Clock}
						 *  @private
						 */
				        this._clock = new Tone.Clock(this._tick.bind(this), 1);
				        /**
						 *  @type  {Number}
						 *  @private
						 */
				        this._loopStart = 0;
				        /**
						 *  @type  {Number}
						 *  @private
						 */
				        this._loopEnd = 0;
				        /**
						 *  @type  {Number}
						 *  @private
						 */
				        this._playbackRate = options.playbackRate;
				        /**
						 *  @type  {Number}
						 *  @private
						 */
				        this._grainSize = options.grainSize;
				        /**
						 *  @private
						 *  @type {Number}
						 */
				        this._overlap = options.overlap;
				        /**
						 *  Adjust the pitch independently of the playbackRate.
						 *  @type  {Cents}
						 */
				        this.detune = options.detune;
				        /**
						 *  The amount of time randomly added
						 *  or subtracted from the grain's offset
						 *  @type  {Time}
						 */
				        this.drift = options.drift;
				        //setup
				        this.overlap = options.overlap;
				        this.loop = options.loop;
				        this.playbackRate = options.playbackRate;
				        this.grainSize = options.grainSize;
				        this.loopStart = options.loopStart;
				        this.loopEnd = options.loopEnd;
				        this.reverse = options.reverse;
				    };
				    Tone.extend(Tone.GrainPlayer, Tone.Source);
				    /**
					 *  the default parameters
					 *  @static
					 *  @const
					 *  @type {Object}
					 */
				    Tone.GrainPlayer.defaults = {
				        'onload': Tone.noOp,
				        'overlap': 0.1,
				        'grainSize': 0.2,
				        'drift': 0,
				        'playbackRate': 1,
				        'detune': 0,
				        'loop': false,
				        'loopStart': 0,
				        'loopEnd': 0,
				        'reverse': false
				    };
				    /**
					 *  Play the buffer at the given startTime. Optionally add an offset
					 *  from the start of the buffer to play from.
					 *  
					 *  @param  {Time} [startTime=now] When the player should start.
					 *  @param  {Time} [offset=0] The offset from the beginning of the sample
					 *                                 to start at. 
					 * @return {Tone.GrainPlayer} this
					 */
				    /**
					 *  Internal start method
					 *  @param {Time} time
					 *  @param {Time} offset
					 *  @private
					 */
				    Tone.GrainPlayer.prototype._start = function (time, offset) {
				        offset = this.defaultArg(offset, 0);
				        offset = this.toSeconds(offset);
				        time = this.toSeconds(time);
				        this._offset = offset;
				        this._clock.start(time);
				    };
				    /**
					 *  Internal start method
					 *  @param {Time} time
					 *  @private
					 */
				    Tone.GrainPlayer.prototype._stop = function (time) {
				        this._clock.stop(time);
				        this._player.stop(this.buffer, time);
				        this._offset = 0;
				    };
				    /**
					 *  Invoked on each clock tick. scheduled a new
					 *  grain at this time.
					 *  @param  {Time}  time 
					 *  @private
					 */
				    Tone.GrainPlayer.prototype._tick = function (time) {
				        var bufferDuration = this.buffer.duration;
				        if (this.loop && this._loopEnd > 0) {
				            bufferDuration = this._loopEnd;
				        }
				        var drift = (Math.random() * 2 - 1) * this.drift;
				        var offset = this._offset - this._overlap + drift;
				        var detune = this.detune / 100;
				        var originalFadeIn = this._player.fadeIn;
				        if (this.loop && this._offset > bufferDuration) {
				            //play the end
				            var endSegmentDuration = this._offset - bufferDuration;
				            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);
				            //and play the beginning 
				            offset = this._offset % bufferDuration;
				            this._offset = this._loopStart;
				            this._player.fadeIn = 0;
				            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);
				        } else if (this._offset > bufferDuration) {
				            //set the state to stopped. 
				            this.stop(time);
				        } else {
				            if (offset < 0) {
				                this._player.fadeIn = Math.max(this._player.fadeIn + offset, 0);
				                offset = 0;
				            }
				            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);
				        }
				        this._player.fadeIn = originalFadeIn;
				        //increment the offset
				        var duration = this._clock._nextTick - time;
				        this._offset += duration * this._playbackRate;
				    };
				    /**
					 *  Jump to a specific time and play it.
					 *  @param  {Time}  offset  The offset to jump to.
					 *  @param {Time=} time When to make the jump.
					 *  @return  {[type]}  [description]
					 */
				    Tone.GrainPlayer.prototype.scrub = function (offset, time) {
				        this._offset = this.toSeconds(offset);
				        this._tick(this.toSeconds(time));
				        return this;
				    };
				    /**
					 * The playback rate of the sample
					 * @memberOf Tone.GrainPlayer#
					 * @type {Positive}
					 * @name playbackRate
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {
				        get: function () {
				            return this._playbackRate;
				        },
				        set: function (rate) {
				            this._playbackRate = rate;
				            this.grainSize = this._grainSize;
				        }
				    });
				    /**
					 * The loop start time. 
					 * @memberOf Tone.GrainPlayer#
					 * @type {Time}
					 * @name loopStart
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {
				        get: function () {
				            return this._loopStart;
				        },
				        set: function (time) {
				            this._loopStart = this.toSeconds(time);
				        }
				    });
				    /**
					 * The loop end time. 
					 * @memberOf Tone.GrainPlayer#
					 * @type {Time}
					 * @name loopEnd
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {
				        get: function () {
				            return this._loopEnd;
				        },
				        set: function (time) {
				            this._loopEnd = this.toSeconds(time);
				        }
				    });
				    /**
					 * The direction the buffer should play in
					 * @memberOf Tone.GrainPlayer#
					 * @type {boolean}
					 * @name reverse
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {
				        get: function () {
				            return this.buffer.reverse;
				        },
				        set: function (rev) {
				            this.buffer.reverse = rev;
				        }
				    });
				    /**
					 * The size of each chunk of audio that the 
					 * buffer is chopped into and played back at.
					 * @memberOf Tone.GrainPlayer#
					 * @type {Time}
					 * @name grainSize
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {
				        get: function () {
				            return this._grainSize;
				        },
				        set: function (size) {
				            this._grainSize = this.toSeconds(size);
				            this._clock.frequency.value = this._playbackRate / this._grainSize;
				        }
				    });
				    /**
					 * This is the duration of the cross-fade between 
					 * sucessive grains.
					 * @memberOf Tone.GrainPlayer#
					 * @type {Time}
					 * @name overlap
					 */
				    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {
				        get: function () {
				            return this._overlap;
				        },
				        set: function (time) {
				            time = this.toSeconds(time);
				            this._overlap = time;
				            if (this._overlap < 0) {
				                this._player.fadeIn = 0.01;
				                this._player.fadeOut = 0.01;
				            } else {
				                this._player.fadeIn = time;
				                this._player.fadeOut = time;
				            }
				        }
				    });
				    /**
					 * Clean up
					 * @return {Tone.GrainPlayer} this
					 */
				    Tone.GrainPlayer.prototype.dispose = function () {
				        Tone.Source.prototype.dispose.call(this);
				        this.buffer.dispose();
				        this.buffer = null;
				        this._player.dispose();
				        this._player = null;
				        this._clock.dispose();
				        this._clock = null;
				        return this;
				    };
				    return Tone.GrainPlayer;
				});
				Module(function (Tone) {
				    
				    /**
					 *  @class  Opens up the default source (typically the microphone).
					 *
					 *  @constructor
					 *  @extends {Tone.ExternalInput}
					 *  @example
					 *  //mic will feedback if played through master
					 *  var mic = new Tone.Microphone();
					 *  mic.open(function(){
					 *  	//start the mic at ten seconds
					 *  	mic.start(10);
					 *  });
					 *  //stop the mic
					 *  mic.stop(20);
					 */
				    Tone.Microphone = function () {
				        Tone.ExternalInput.call(this, 0);
				    };
				    Tone.extend(Tone.Microphone, Tone.ExternalInput);
				    /**
					 *  If getUserMedia is supported by the browser.
					 *  @type  {Boolean}
					 *  @memberOf Tone.Microphone#
					 *  @name supported
					 *  @static
					 *  @readOnly
					 */
				    Object.defineProperty(Tone.Microphone, 'supported', {
				        get: function () {
				            return Tone.ExternalInput.supported;
				        }
				    });
				    return Tone.Microphone;
				});
				
				return Tone;
			}));

		/***/ },
		/* 2 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict'

			var load = __webpack_require__(3)
			var player = __webpack_require__(6)

			/**
			 * Load a soundfont instrument. It returns a promise that resolves to a
			 * instrument object.
			 *
			 * The instrument object returned by the promise has the following properties:
			 *
			 * - name: the instrument name
			 * - play: A function to play notes from the buffer with the signature
			 * `play(note, time, duration, options)`
			 *
			 *
			 * The valid options are:
			 *
			 * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'
			 * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'
			 * - `nameToUrl` <Function>: a function to convert from instrument names to URL
			 * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.
			 * - `gain`: the gain of the player (1 by default)
			 * - `notes`: an array of the notes to decode. It can be an array of strings
			 * with note names or an array of numbers with midi note numbers. This is a
			 * performance option: since decoding mp3 is a cpu intensive process, you can limit
			 * limit the number of notes you want and reduce the time to load the instrument.
			 *
			 * @param {AudioContext} ac - the audio context
			 * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'
			 * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers
			 * @return {Promise}
			 *
			 * @example
			 * var Soundfont = require('sounfont-player')
			 * Soundfont.instrument('marimba').then(function (marimba) {
			 *   marimba.play('C4')
			 * })
			 */
			function instrument (ac, name, options) {
			  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }
			  var opts = options || {}
			  var isUrl = opts.isSoundfontURL || isSoundfontURL
			  var toUrl = opts.nameToUrl || nameToUrl
			  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)

			  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {
			    var p = player(ac, buffers, opts).connect(ac.destination)
			    p.url = url
			    p.name = name
			    return p
			  })
			}

			function isSoundfontURL (name) {
			  return /\.js(\?.*)?$/i.test(name)
			}

			/**
			 * Given an instrument name returns a URL to to the Benjamin Gleitzman's
			 * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)
			 *
			 * @param {String} name - instrument name
			 * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'
			 * or 'MusyngKite' ('MusyngKite' by default)
			 * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)
			 * @returns {String} the Soundfont file url
			 * @example
			 * var Soundfont = require('soundfont-player')
			 * Soundfont.nameToUrl('marimba', 'mp3')
			 */
			function nameToUrl (name, sf, format) {
			  format = format === 'ogg' ? format : 'mp3'
			  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'
			  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'
			}

			// In the 1.0.0 release it will be:
			// var Soundfont = {}
			var Soundfont = __webpack_require__(15)
			Soundfont.instrument = instrument
			Soundfont.nameToUrl = nameToUrl

			if (typeof module === 'object' && module.exports) module.exports = Soundfont
			if (typeof window !== 'undefined') window.Soundfont = Soundfont


		/***/ },
		/* 3 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict'

			var base64 = __webpack_require__(4)
			var fetch = __webpack_require__(5)

			// Given a regex, return a function that test if against a string
			function fromRegex (r) {
			  return function (o) { return typeof o === 'string' && r.test(o) }
			}
			// Try to apply a prefix to a name
			function prefix (pre, name) {
			  return typeof pre === 'string' ? pre + name
			    : typeof pre === 'function' ? pre(name)
			    : name
			}

			/**
			 * Load one or more audio files
			 *
			 *
			 * Possible option keys:
			 *
			 * - __from__ {Function|String}: a function or string to convert from file names to urls.
			 * If is a string it will be prefixed to the name:
			 * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`
			 * If it's a function it receives the file name and should return the url as string.
			 * - __only__ {Array} - when loading objects, if provided, only the given keys
			 * will be included in the decoded object:
			 * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`
			 *
			 * @param {AudioContext} ac - the audio context
			 * @param {Object} source - the object to be loaded
			 * @param {Object} options - (Optional) the load options for that object
			 * @param {Object} defaultValue - (Optional) the default value to return as
			 * in a promise if not valid loader found
			 */
			function load (ac, source, options, defVal) {
			  var loader =
			    // Basic audio loading
			      isArrayBuffer(source) ? loadArrayBuffer
			    : isAudioFileName(source) ? loadAudioFile
			    : isPromise(source) ? loadPromise
			    // Compound objects
			    : isArray(source) ? loadArrayData
			    : isObject(source) ? loadObjectData
			    : isJsonFileName(source) ? loadJsonFile
			    // Base64 encoded audio
			    : isBase64Audio(source) ? loadBase64Audio
			    : isJsFileName(source) ? loadMidiJSFile
			    : null

			  var opts = options || {}
			  return loader ? loader(ac, source, opts)
			    : defVal ? Promise.resolve(defVal)
			    : Promise.reject('Source not valid (' + source + ')')
			}
			load.fetch = fetch

			// BASIC AUDIO LOADING
			// ===================

			// Load (decode) an array buffer
			function isArrayBuffer (o) { return o instanceof ArrayBuffer }
			function loadArrayBuffer (ac, array, options) {
			  return new Promise(function (done, reject) {
			    ac.decodeAudioData(array,
			      function (buffer) { done(buffer) },
			      function () { reject("Can't decode audio data (" + array.slice(0, 30) + '...)') }
			    )
			  })
			}

			// Load an audio filename
			var isAudioFileName = fromRegex(/\.(mp3|wav|ogg)(\?.*)?$/i)
			function loadAudioFile (ac, name, options) {
			  var url = prefix(options.from, name)
			  return load(ac, load.fetch(url, 'arraybuffer'), options)
			}

			// Load the result of a promise
			function isPromise (o) { return o && typeof o.then === 'function' }
			function loadPromise (ac, promise, options) {
			  return promise.then(function (value) {
			    return load(ac, value, options)
			  })
			}

			// COMPOUND OBJECTS
			// ================

			// Try to load all the items of an array
			var isArray = Array.isArray
			function loadArrayData (ac, array, options) {
			  return Promise.all(array.map(function (data) {
			    return load(ac, data, options, data)
			  }))
			}

			// Try to load all the values of a key/value object
			function isObject (o) { return o && typeof o === 'object' }
			function loadObjectData (ac, obj, options) {
			  var dest = {}
			  var promises = Object.keys(obj).map(function (key) {
			    if (options.only && options.only.indexOf(key) === -1) return null
			    var value = obj[key]
			    return load(ac, value, options, value).then(function (audio) {
			      dest[key] = audio
			    })
			  })
			  return Promise.all(promises).then(function () { return dest })
			}

			// Load the content of a JSON file
			var isJsonFileName = fromRegex(/\.json(\?.*)?$/i)
			function loadJsonFile (ac, name, options) {
			  var url = prefix(options.from, name)
			  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)
			}

			// BASE64 ENCODED FORMATS
			// ======================

			// Load strings with Base64 encoded audio
			var isBase64Audio = fromRegex(/^data:audio/)
			function loadBase64Audio (ac, source, options) {
			  var i = source.indexOf(',')
			  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)
			}

			// Load .js files with MidiJS soundfont prerendered audio
			var isJsFileName = fromRegex(/\.js(\?.*)?$/i)
			function loadMidiJSFile (ac, name, options) {
			  var url = prefix(options.from, name)
			  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)
			}

			// convert a MIDI.js javascript soundfont file to json
			function midiJsToJson (data) {
			  var begin = data.indexOf('MIDI.Soundfont.')
			  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')
			  begin = data.indexOf('=', begin) + 2
			  var end = data.lastIndexOf(',')
			  return JSON.parse(data.slice(begin, end) + '}')
			}

			if (typeof module === 'object' && module.exports) module.exports = load
			if (typeof window !== 'undefined') window.loadAudio = load


		/***/ },
		/* 4 */
		/***/ function(module, exports) {

			'use strict'

			// DECODE UTILITIES
			function b64ToUint6 (nChr) {
			  return nChr > 64 && nChr < 91 ? nChr - 65
			    : nChr > 96 && nChr < 123 ? nChr - 71
			    : nChr > 47 && nChr < 58 ? nChr + 4
			    : nChr === 43 ? 62
			    : nChr === 47 ? 63
			    : 0
			}

			// Decode Base64 to Uint8Array
			// ---------------------------
			function decode (sBase64, nBlocksSize) {
			  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, '')
			  var nInLen = sB64Enc.length
			  var nOutLen = nBlocksSize
			    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize
			    : nInLen * 3 + 1 >> 2
			  var taBytes = new Uint8Array(nOutLen)

			  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
			    nMod4 = nInIdx & 3
			    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4
			    if (nMod4 === 3 || nInLen - nInIdx === 1) {
			      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
			        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255
			      }
			      nUint24 = 0
			    }
			  }
			  return taBytes
			}

			module.exports = { decode: decode }


		/***/ },
		/* 5 */
		/***/ function(module, exports) {

			/* global XMLHttpRequest */
			'use strict'

			/**
			 * Given a url and a return type, returns a promise to the content of the url
			 * Basically it wraps a XMLHttpRequest into a Promise
			 *
			 * @param {String} url
			 * @param {String} type - can be 'text' or 'arraybuffer'
			 * @return {Promise}
			 */
			module.exports = function (url, type) {
			  return new Promise(function (done, reject) {
			    var req = new XMLHttpRequest()
			    if (type) req.responseType = type

			    req.open('GET', url)
			    req.onload = function () {
			      req.status === 200 ? done(req.response) : reject(Error(req.statusText))
			    }
			    req.onerror = function () { reject(Error('Network Error')) }
			    req.send()
			  })
			}


		/***/ },
		/* 6 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict'

			var player = __webpack_require__(7)
			var events = __webpack_require__(9)
			var notes = __webpack_require__(10)
			var scheduler = __webpack_require__(12)
			var midi = __webpack_require__(13)

			function SamplePlayer (ac, source, options) {
			  return midi(scheduler(notes(events(player(ac, source, options)))))
			}

			if (typeof module === 'object' && module.exports) module.exports = SamplePlayer
			if (typeof window !== 'undefined') window.SamplePlayer = SamplePlayer


		/***/ },
		/* 7 */
		/***/ function(module, exports, __webpack_require__) {

			/* global AudioBuffer */
			'use strict'

			var ADSR = __webpack_require__(8)

			var EMPTY = {}
			var DEFAULTS = {
			  gain: 1,
			  attack: 0.01,
			  decay: 0.1,
			  sustain: 0.9,
			  release: 0.3,
			  loop: false,
			  cents: 0,
			  loopStart: 0,
			  loopEnd: 0
			}

			/**
			 * Create a sample player.
			 *
			 * @param {AudioContext} ac - the audio context
			 * @param {ArrayBuffer|Object<String,ArrayBuffer>} source
			 * @param {Onject} options - (Optional) an options object
			 * @return {player} the player
			 * @example
			 * var SamplePlayer = require('sample-player')
			 * var ac = new AudioContext()
			 * var snare = SamplePlayer(ac, <AudioBuffer>)
			 * snare.play()
			 */
			function SamplePlayer (ac, source, options) {
			  var connected = false
			  var nextId = 0
			  var tracked = {}
			  var out = ac.createGain()
			  out.gain.value = 1

			  var opts = Object.assign({}, DEFAULTS, options)

			  /**
			   * @namespace
			   */
			  var player = { context: ac, out: out, opts: opts }
			  if (source instanceof AudioBuffer) player.buffer = source
			  else player.buffers = source

			  /**
			   * Start a sample buffer.
			   *
			   * The returned object has a function `stop(when)` to stop the sound.
			   *
			   * @param {String} name - the name of the buffer. If the source of the
			   * SamplePlayer is one sample buffer, this parameter is not required
			   * @param {Float} when - (Optional) when to start (current time if by default)
			   * @param {Object} options - additional sample playing options
			   * @return {AudioNode} an audio node with a `stop` function
			   * @example
			   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
			   * sample.start()
			   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer
			   * @example
			   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)
			   * drums.start('snare')
			   * drums.start('snare', 0, { gain: 0.3 })
			   */
			  player.start = function (name, when, options) {
			    // if only one buffer, reorder arguments
			    if (player.buffer && name !== null) return player.start(null, name, when)

			    var buffer = name ? player.buffers[name] : player.buffer
			    if (!buffer) {
			      console.warn('Buffer ' + name + ' not found.')
			      return
			    } else if (!connected) {
			      console.warn('SamplePlayer not connected to any node.')
			      return
			    }

			    var opts = options || EMPTY
			    when = Math.max(ac.currentTime, when || 0)
			    player.emit('start', when, name, opts)
			    var node = createNode(name, buffer, opts)
			    node.id = track(name, node)
			    node.env.start(when)
			    node.source.start(when)
			    player.emit('started', when, node.id, node)
			    if (opts.duration) node.stop(when + opts.duration)
			    return node
			  }

			  // NOTE: start will be override so we can't copy the function reference
			  // this is obviously not a good design, so this code will be gone soon.
			  /**
			   * An alias for `player.start`
			   * @see player.start
			   * @since 0.3.0
			   */
			  player.play = function (name, when, options) {
			    return player.start(name, when, options)
			  }

			  /**
			   * Stop some or all samples
			   *
			   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime
			   * if not specified)
			   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop
			   * @return {Array} an array of ids of the stoped samples
			   *
			   * @example
			   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)
			   * longSound.start(ac.currentTime)
			   * longSound.start(ac.currentTime + 1)
			   * longSound.start(ac.currentTime + 2)
			   * longSound.stop(ac.currentTime + 3) // stop the three sounds
			   */
			  player.stop = function (when, ids) {
			    var node
			    ids = ids || Object.keys(tracked)
			    return ids.map(function (id) {
			      node = tracked[id]
			      if (!node) return null
			      node.stop(when)
			      return node.id
			    })
			  }
			  /**
			   * Connect the player to a destination node
			   *
			   * @param {AudioNode} destination - the destination node
			   * @return {AudioPlayer} the player
			   * @chainable
			   * @example
			   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
			   */
			  player.connect = function (dest) {
			    connected = true
			    out.connect(dest)
			    return player
			  }

			  player.emit = function (event, when, obj, opts) {
			    if (player.onevent) player.onevent(event, when, obj, opts)
			    var fn = player['on' + event]
			    if (fn) fn(when, obj, opts)
			  }

			  return player

			  // =============== PRIVATE FUNCTIONS ============== //

			  function track (name, node) {
			    node.id = nextId++
			    tracked[node.id] = node
			    node.source.onended = function () {
			      var now = ac.currentTime
			      node.source.disconnect()
			      node.env.disconnect()
			      node.disconnect()
			      player.emit('ended', now, node.id, node)
			    }
			    return node.id
			  }

			  function createNode (name, buffer, options) {
			    var node = ac.createGain()
			    node.gain.value = 0 // the envelope will control the gain
			    node.connect(out)

			    node.env = envelope(ac, options, opts)
			    node.env.connect(node.gain)

			    node.source = ac.createBufferSource()
			    node.source.buffer = buffer
			    node.source.connect(node)
			    node.source.loop = options.loop || opts.loop
			    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)
			    node.source.loopStart = options.loopStart || opts.loopStart
			    node.source.loopEnd = options.loopEnd || opts.loopEnd
			    node.stop = function (when) {
			      var time = when || ac.currentTime
			      player.emit('stop', time, name)
			      var stopAt = node.env.stop(time)
			      node.source.stop(stopAt)
			    }
			    return node
			  }
			}

			function isNum (x) { return typeof x === 'number' }
			var PARAMS = ['attack', 'decay', 'sustain', 'release']
			function envelope (ac, options, opts) {
			  var env = ADSR(ac)
			  var adsr = options.adsr || opts.adsr
			  PARAMS.forEach(function (name, i) {
			    if (adsr) env[name] = adsr[i]
			    else env[name] = options[name] || opts[name]
			  })
			  env.value.value = isNum(options.gain) ? options.gain
			    : isNum(opts.gain) ? opts.gain : 1
			  return env
			}

			/*
			 * Get playback rate for a given pitch change (in cents)
			 * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):
			 * f2 = f1 * 2^( C / 1200 )
			 */
			function centsToRate (cents) { return cents ? Math.pow(2, cents / 1200) : 1 }

			module.exports = SamplePlayer


		/***/ },
		/* 8 */
		/***/ function(module, exports) {

			module.exports = ADSR

			function ADSR(audioContext){
			  var node = audioContext.createGain()

			  var voltage = node._voltage = getVoltage(audioContext)
			  var value = scale(voltage)
			  var startValue = scale(voltage)
			  var endValue = scale(voltage)

			  node._startAmount = scale(startValue)
			  node._endAmount = scale(endValue)

			  node._multiplier = scale(value)
			  node._multiplier.connect(node)
			  node._startAmount.connect(node)
			  node._endAmount.connect(node)

			  node.value = value.gain
			  node.startValue = startValue.gain
			  node.endValue = endValue.gain

			  node.startValue.value = 0
			  node.endValue.value = 0

			  Object.defineProperties(node, props)
			  return node
			}

			var props = {

			  attack: { value: 0, writable: true },
			  decay: { value: 0, writable: true },
			  sustain: { value: 1, writable: true },
			  release: {value: 0, writable: true },

			  getReleaseDuration: {
			    value: function(){
			      return this.release
			    }
			  },

			  start: {
			    value: function(at){
			      var target = this._multiplier.gain
			      var startAmount = this._startAmount.gain
			      var endAmount = this._endAmount.gain

			      this._voltage.start(at)
			      this._decayFrom = this._decayFrom = at+this.attack
			      this._startedAt = at

			      var sustain = this.sustain

			      target.cancelScheduledValues(at)
			      startAmount.cancelScheduledValues(at)
			      endAmount.cancelScheduledValues(at)

			      endAmount.setValueAtTime(0, at)

			      if (this.attack){
			        target.setValueAtTime(0, at)
			        target.linearRampToValueAtTime(1, at + this.attack)

			        startAmount.setValueAtTime(1, at)
			        startAmount.linearRampToValueAtTime(0, at + this.attack)
			      } else {
			        target.setValueAtTime(1, at)
			        startAmount.setValueAtTime(0, at)
			      }

			      if (this.decay){
			        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay))
			      }
			    }
			  },

			  stop: {
			    value: function(at, isTarget){
			      if (isTarget){
			        at = at - this.release
			      }

			      var endTime = at + this.release
			      if (this.release){

			        var target = this._multiplier.gain
			        var startAmount = this._startAmount.gain
			        var endAmount = this._endAmount.gain

			        target.cancelScheduledValues(at)
			        startAmount.cancelScheduledValues(at)
			        endAmount.cancelScheduledValues(at)

			        var expFalloff = getTimeConstant(this.release)

			        // truncate attack (required as linearRamp is removed by cancelScheduledValues)
			        if (this.attack && at < this._decayFrom){
			          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at)
			          target.linearRampToValueAtTime(valueAtTime, at)
			          startAmount.linearRampToValueAtTime(1-valueAtTime, at)
			          startAmount.setTargetAtTime(0, at, expFalloff)
			        }

			        endAmount.setTargetAtTime(1, at, expFalloff)
			        target.setTargetAtTime(0, at, expFalloff)
			      }

			      this._voltage.stop(endTime)
			      return endTime
			    }
			  },

			  onended: {
			    get: function(){
			      return this._voltage.onended
			    },
			    set: function(value){
			      this._voltage.onended = value
			    }
			  }

			}

			var flat = new Float32Array([1,1])
			function getVoltage(context){
			  var voltage = context.createBufferSource()
			  var buffer = context.createBuffer(1, 2, context.sampleRate)
			  buffer.getChannelData(0).set(flat)
			  voltage.buffer = buffer
			  voltage.loop = true
			  return voltage
			}

			function scale(node){
			  var gain = node.context.createGain()
			  node.connect(gain)
			  return gain
			}

			function getTimeConstant(time){
			  return Math.log(time+1)/Math.log(100)
			}

			function getValue(start, end, fromTime, toTime, at){
			  var difference = end - start
			  var time = toTime - fromTime
			  var truncateTime = at - fromTime
			  var phase = truncateTime / time
			  var value = start + phase * difference

			  if (value <= start) {
			      value = start
			  }
			  if (value >= end) {
			      value = end
			  }

			  return value
			}


		/***/ },
		/* 9 */
		/***/ function(module, exports) {

			
			module.exports = function (player) {
			  /**
			   * Adds a listener of an event
			   * @chainable
			   * @param {String} event - the event name
			   * @param {Function} callback - the event handler
			   * @return {SamplePlayer} the player
			   * @example
			   * player.on('start', function(time, note) {
			   *   console.log(time, note)
			   * })
			   */
			  player.on = function (event, cb) {
			    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event)
			    var prop = 'on' + event
			    var old = player[prop]
			    player[prop] = old ? chain(old, cb) : cb
			    return player
			  }
			  return player
			}

			function chain (fn1, fn2) {
			  return function (a, b, c, d) { fn1(a, b, c, d); fn2(a, b, c, d) }
			}


		/***/ },
		/* 10 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict'

			var note = __webpack_require__(11)
			var isMidi = function (n) { return n !== null && n !== [] && n >= 0 && n < 129 }
			var toMidi = function (n) { return isMidi(n) ? +n : note.midi(n) }

			// Adds note name to midi conversion
			module.exports = function (player) {
			  if (player.buffers) {
			    var map = player.opts.map
			    var toKey = typeof map === 'function' ? map : toMidi
			    var mapper = function (name) {
			      return name ? toKey(name) || name : null
			    }

			    player.buffers = mapBuffers(player.buffers, mapper)
			    var start = player.start
			    player.start = function (name, when, options) {
			      var key = mapper(name)
			      var dec = key % 1
			      if (dec) {
			        key = Math.floor(key)
			        options = Object.assign(options || {}, { cents: Math.floor(dec * 100) })
			      }
			      return start(key, when, options)
			    }
			  }
			  return player
			}

			function mapBuffers (buffers, toKey) {
			  return Object.keys(buffers).reduce(function (mapped, name) {
			    mapped[toKey(name)] = buffers[name]
			    return mapped
			  }, {})
			}


		/***/ },
		/* 11 */
		/***/ function(module, exports) {

			'use strict'

			var REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/
			/**
			 * A regex for matching note strings in scientific notation.
			 *
			 * @name regex
			 * @function
			 * @return {RegExp} the regexp used to parse the note name
			 *
			 * The note string should have the form `letter[accidentals][octave][element]`
			 * where:
			 *
			 * - letter: (Required) is a letter from A to G either upper or lower case
			 * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).
			 * They can NOT be mixed.
			 * - octave: (Optional) a positive or negative integer
			 * - element: (Optional) additionally anything after the duration is considered to
			 * be the element name (for example: 'C2 dorian')
			 *
			 * The executed regex contains (by array index):
			 *
			 * - 0: the complete string
			 * - 1: the note letter
			 * - 2: the optional accidentals
			 * - 3: the optional octave
			 * - 4: the rest of the string (trimmed)
			 *
			 * @example
			 * var parser = require('note-parser')
			 * parser.regex.exec('c#4')
			 * // => ['c#4', 'c', '#', '4', '']
			 * parser.regex.exec('c#4 major')
			 * // => ['c#4major', 'c', '#', '4', 'major']
			 * parser.regex().exec('CMaj7')
			 * // => ['CMaj7', 'C', '', '', 'Maj7']
			 */
			function regex () { return REGEX }

			var SEMITONES = [0, 2, 4, 5, 7, 9, 11]
			/**
			 * Parse a note name in scientific notation an return it's components,
			 * and some numeric properties including midi number and frequency.
			 *
			 * @name parse
			 * @function
			 * @param {String} note - the note string to be parsed
			 * @param {Boolean} isTonic - true if the note is the tonic of something.
			 * If true, en extra tonicOf property is returned. It's false by default.
			 * @param {Float} tunning - The frequency of A4 note to calculate frequencies.
			 * By default it 440.
			 * @return {Object} the parsed note name or null if not a valid note
			 *
			 * The parsed note name object will ALWAYS contains:
			 * - letter: the uppercase letter of the note
			 * - acc: the accidentals of the note (only sharps or flats)
			 * - pc: the pitch class (letter + acc)
			 * - step: s a numeric representation of the letter. It's an integer from 0 to 6
			 * where 0 = C, 1 = D ... 6 = B
			 * - alt: a numeric representation of the accidentals. 0 means no alteration,
			 * positive numbers are for sharps and negative for flats
			 * - chroma: a numeric representation of the pitch class. It's like midi for
			 * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.
			 * Can detect pitch class enhramonics.
			 *
			 * If the note has octave, the parser object will contain:
			 * - oct: the octave number (as integer)
			 * - midi: the midi number
			 * - freq: the frequency (using tuning parameter as base)
			 *
			 * If the parameter `isTonic` is set to true, the parsed object will contain:
			 * - tonicOf: the rest of the string that follows note name (left and right trimmed)
			 *
			 * @example
			 * var parse = require('note-parser').parse
			 * parse('Cb4')
			 * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,
			 *         oct: 4, midi: 59, freq: 246.94165062806206 }
			 * // if no octave, no midi, no freq
			 * parse('fx')
			 * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })
			 */
			function parse (str, isTonic, tuning) {
			  if (typeof str !== 'string') return null
			  var m = REGEX.exec(str)
			  if (!m || !isTonic && m[4]) return null

			  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }
			  p.pc = p.letter + p.acc
			  p.step = (p.letter.charCodeAt(0) + 3) % 7
			  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length
			  p.chroma = SEMITONES[p.step] + p.alt
			  if (m[3]) {
			    p.oct = +m[3]
			    p.midi = p.chroma + 12 * (p.oct + 1)
			    p.freq = midiToFreq(p.midi, tuning)
			  }
			  if (isTonic) p.tonicOf = m[4]
			  return p
			}

			/**
			 * Given a midi number, return its frequency
			 * @param {Integer} midi - midi note number
			 * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)
			 * @return {Float} frequency in hertzs
			 */
			function midiToFreq (midi, tuning) {
			  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)
			}

			var parser = { parse: parse, regex: regex, midiToFreq: midiToFreq }
			var FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq']
			FNS.forEach(function (name) {
			  parser[name] = function (src) {
			    var p = parse(src)
			    return p && (typeof p[name] !== 'undefined') ? p[name] : null
			  }
			})

			module.exports = parser

			// extra API docs
			/**
			 * Get midi of a note
			 *
			 * @name midi
			 * @function
			 * @param {String} note - the note name
			 * @return {Integer} the midi number of the note or null if not a valid note
			 * or the note does NOT contains octave
			 * @example
			 * var parser = require('note-parser')
			 * parser.midi('A4') // => 69
			 * parser.midi('A') // => null
			 */
			/**
			 * Get freq of a note in hertzs (in a well tempered 440Hz A4)
			 *
			 * @name freq
			 * @function
			 * @param {String} note - the note name
			 * @return {Float} the freq of the number if hertzs or null if not valid note
			 * or the note does NOT contains octave
			 * @example
			 * var parser = require('note-parser')
			 * parser.freq('A4') // => 440
			 * parser.freq('A') // => null
			 */


		/***/ },
		/* 12 */
		/***/ function(module, exports) {

			'use strict'

			var isArr = Array.isArray
			var isObj = function (o) { return o && typeof o === 'object' }
			var OPTS = {}

			module.exports = function (player) {
			  /**
			   * Schedule a list of events to be played at specific time.
			   *
			   * It supports three formats of events for the events list:
			   *
			   * - An array with [time, note]
			   * - An array with [time, object]
			   * - An object with { time: ?, [name|note|midi|key]: ? }
			   *
			   * @param {Float} time - an absolute time to start (or AudioContext's
			   * currentTime if provided number is 0)
			   * @param {Array} events - the events list.
			   * @return {Array} an array of ids
			   *
			   * @example
			   * // Event format: [time, note]
			   * var piano = player(ac, ...).connect(ac.destination)
			   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])
			   *
			   * @example
			   * // Event format: an object { time: ?, name: ? }
			   * var drums = player(ac, ...).connect(ac.destination)
			   * drums.schedule(0, [
			   *   { name: 'kick', time: 0 },
			   *   { name: 'snare', time: 0.5 },
			   *   { name: 'kick', time: 1 },
			   *   { name: 'snare', time: 1.5 }
			   * ])
			   */
			  player.schedule = function (time, events) {
			    var now = player.context.currentTime
			    var when = time < now ? now : time
			    player.emit('schedule', when, events)
			    var t, o, note, opts
			    return events.map(function (event) {
			      if (!event) return null
			      else if (isArr(event)) {
			        t = event[0]; o = event[1]
			      } else {
			        t = event.time; o = event
			      }

			      if (isObj(o)) {
			        note = o.name || o.key || o.note || o.midi || null
			        opts = o
			      } else {
			        note = o
			        opts = OPTS
			      }

			      return player.start(note, when + (t || 0), opts)
			    })
			  }
			  return player
			}


		/***/ },
		/* 13 */
		/***/ function(module, exports, __webpack_require__) {

			var midimessage = __webpack_require__(14)

			module.exports = function (player) {
			  /**
			  * Connect a player to a midi input
			  *
			  * The options accepts:
			  *
			  * - channel: the channel to listen to. Listen to all channels by default.
			  *
			  * @param {MIDIInput} input
			  * @param {Object} options - (Optional)
			  * @return {SamplePlayer} the player
			  * @example
			  * var piano = player(...)
			  * window.navigator.requestMIDIAccess().then(function (midiAccess) {
			  *   midiAccess.inputs.forEach(function (midiInput) {
			  *     piano.listenToMidi(midiInput)
			  *   })
			  * })
			  */
			  player.listenToMidi = function (input, options) {
			    var started = {}
			    var opts = options || {}
			    var gain = opts.gain || function (vel) { return vel / 127 }

			    input.onmidimessage = function (msg) {
			      var mm = msg.messageType ? msg : midimessage(msg)
			      if (mm.messageType === 'noteon' && mm.velocity === 0) {
			        mm.messageType = 'noteoff'
			      }
			      if (opts.channel && mm.channel !== opts.channel) return

			      switch (mm.messageType) {
			        case 'noteon':
			          started[mm.key] = player.play(mm.key, 0, { gain: gain(mm.velocity) })
			          break
			        case 'noteoff':
			          if (started[mm.key]) {
			            started[mm.key].stop()
			            delete started[mm.key]
			          }
			          break
			      }
			    }
			    return player
			  }
			  return player
			}


		/***/ },
		/* 14 */
		/***/ function(module, exports, __webpack_require__) {

			var require;var require;(function(e){if(true){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.midimessage=e()}})(function(){var e,t,s;return function o(e,t,s){function a(n,i){if(!t[n]){if(!e[n]){var l=typeof require=="function"&&require;if(!i&&l)return require(n,!0);if(r)return r(n,!0);var h=new Error("Cannot find module '"+n+"'");throw h.code="MODULE_NOT_FOUND",h}var c=t[n]={exports:{}};e[n][0].call(c.exports,function(t){var s=e[n][1][t];return a(s?s:t)},c,c.exports,o,e,t,s)}return t[n].exports}var r=typeof require=="function"&&require;for(var n=0;n<s.length;n++)a(s[n]);return a}({1:[function(e,t,s){"use strict";Object.defineProperty(s,"__esModule",{value:true});s["default"]=function(e){function t(e){this._event=e;this._data=e.data;this.receivedTime=e.receivedTime;if(this._data&&this._data.length<2){console.warn("Illegal MIDI message of length",this._data.length);return}this._messageCode=e.data[0]&240;this.channel=e.data[0]&15;switch(this._messageCode){case 128:this.messageType="noteoff";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 144:this.messageType="noteon";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 160:this.messageType="keypressure";this.key=e.data[1]&127;this.pressure=e.data[2]&127;break;case 176:this.messageType="controlchange";this.controllerNumber=e.data[1]&127;this.controllerValue=e.data[2]&127;if(this.controllerNumber===120&&this.controllerValue===0){this.channelModeMessage="allsoundoff"}else if(this.controllerNumber===121){this.channelModeMessage="resetallcontrollers"}else if(this.controllerNumber===122){if(this.controllerValue===0){this.channelModeMessage="localcontroloff"}else{this.channelModeMessage="localcontrolon"}}else if(this.controllerNumber===123&&this.controllerValue===0){this.channelModeMessage="allnotesoff"}else if(this.controllerNumber===124&&this.controllerValue===0){this.channelModeMessage="omnimodeoff"}else if(this.controllerNumber===125&&this.controllerValue===0){this.channelModeMessage="omnimodeon"}else if(this.controllerNumber===126){this.channelModeMessage="monomodeon"}else if(this.controllerNumber===127){this.channelModeMessage="polymodeon"}break;case 192:this.messageType="programchange";this.program=e.data[1];break;case 208:this.messageType="channelpressure";this.pressure=e.data[1]&127;break;case 224:this.messageType="pitchbendchange";var t=e.data[2]&127;var s=e.data[1]&127;this.pitchBend=(t<<8)+s;break}}return new t(e)};t.exports=s["default"]},{}]},{},[1])(1)});
			//# sourceMappingURL=dist/index.js.map

		/***/ },
		/* 15 */
		/***/ function(module, exports, __webpack_require__) {

			'use strict'

			var parser = __webpack_require__(16)

			/**
			 * Create a Soundfont object
			 *
			 * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)
			 * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url
			 * @return {Soundfont} a soundfont object
			 */
			function Soundfont (ctx, nameToUrl) {
			  console.warn('new Soundfont() is deprected')
			  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')
			  if (!(this instanceof Soundfont)) return new Soundfont(ctx)

			  this.nameToUrl = nameToUrl || Soundfont.nameToUrl
			  this.ctx = ctx
			  this.instruments = {}
			  this.promises = []
			}

			Soundfont.prototype.onready = function (callback) {
			  console.warn('deprecated API')
			  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')
			  Promise.all(this.promises).then(callback)
			}

			Soundfont.prototype.instrument = function (name, options) {
			  console.warn('new Soundfont().instrument() is deprecated.')
			  console.log('Please use Soundfont.instrument() instead.')
			  var ctx = this.ctx
			  name = name || 'default'
			  if (name in this.instruments) return this.instruments[name]
			  var inst = {name: name, play: oscillatorPlayer(ctx, options)}
			  this.instruments[name] = inst
			  if (name !== 'default') {
			    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {
			      inst.play = instrument.play
			      return inst
			    })
			    this.promises.push(promise)
			    inst.onready = function (cb) {
			      console.warn('onready is deprecated. Use Soundfont.instrument().then()')
			      promise.then(cb)
			    }
			  } else {
			    inst.onready = function (cb) {
			      console.warn('onready is deprecated. Use Soundfont.instrument().then()')
			      cb()
			    }
			  }
			  return inst
			}

			/*
			 * Load the buffers of a given instrument name. It returns a promise that resolves
			 * to a hash with midi note numbers as keys, and audio buffers as values.
			 *
			 * @param {AudioContext} ac - the audio context
			 * @param {String} name - the instrument name (it accepts an url if starts with "http")
			 * @param {Object} options - (Optional) options object
			 * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }
			 *
			 * The options object accepts the following keys:
			 *
			 * - nameToUrl {Function}: a function to convert from instrument names to urls.
			 * By default it uses Benjamin Gleitzman's package of
			 * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)
			 * - notes {Array}: the list of note names to be decoded (all by default)
			 *
			 * @example
			 * var Soundfont = require('soundfont-player')
			 * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {
			 *  buffers[60] // => An <AudioBuffer> corresponding to note C4
			 * })
			 */
			function loadBuffers (ac, name, options) {
			  console.warn('Soundfont.loadBuffers is deprecate.')
			  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')
			  return Soundfont.instrument(ac, name, options).then(function (inst) {
			    return inst.buffers
			  })
			}
			Soundfont.loadBuffers = loadBuffers

			/**
			 * Returns a function that plays an oscillator
			 *
			 * @param {AudioContext} ac - the audio context
			 * @param {Hash} defaultOptions - (Optional) a hash of options:
			 * - vcoType: the oscillator type (default: 'sine')
			 * - gain: the output gain value (default: 0.4)
			  * - destination: the player destination (default: ac.destination)
			 */
			function oscillatorPlayer (ctx, defaultOptions) {
			  defaultOptions = defaultOptions || {}
			  return function (note, time, duration, options) {
			    console.warn('The oscillator player is deprecated.')
			    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')
			    var midi = note > 0 && note < 129 ? +note : parser.midi(note)
			    var freq = midi ? parser.midiToFreq(midi, 440) : null
			    if (!freq) return

			    duration = duration || 0.2

			    options = options || {}
			    var destination = options.destination || defaultOptions.destination || ctx.destination
			    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'
			    var gain = options.gain || defaultOptions.gain || 0.4

			    var vco = ctx.createOscillator()
			    vco.type = vcoType
			    vco.frequency.value = freq

			    /* VCA */
			    var vca = ctx.createGain()
			    vca.gain.value = gain

			    /* Connections */
			    vco.connect(vca)
			    vca.connect(destination)

			    vco.start(time)
			    if (duration > 0) vco.stop(time + duration)
			    return vco
			  }
			}

			/**
			 * Given a note name, return the note midi number
			 *
			 * @name noteToMidi
			 * @function
			 * @param {String} noteName
			 * @return {Integer} the note midi number or null if not a valid note name
			 */
			Soundfont.noteToMidi = parser.midi

			module.exports = Soundfont


		/***/ },
		/* 16 */
		/***/ function(module, exports) {

			'use strict'

			// util
			function fillStr (s, num) { return Array(num + 1).join(s) }
			function isNum (x) { return typeof x === 'number' }
			function isStr (x) { return typeof x === 'string' }
			function isDef (x) { return typeof x !== 'undefined' }
			function midiToFreq (midi, tuning) {
			  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)
			}

			var REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/
			/**
			 * A regex for matching note strings in scientific notation.
			 *
			 * @name regex
			 * @function
			 * @return {RegExp} the regexp used to parse the note name
			 *
			 * The note string should have the form `letter[accidentals][octave][element]`
			 * where:
			 *
			 * - letter: (Required) is a letter from A to G either upper or lower case
			 * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).
			 * They can NOT be mixed.
			 * - octave: (Optional) a positive or negative integer
			 * - element: (Optional) additionally anything after the duration is considered to
			 * be the element name (for example: 'C2 dorian')
			 *
			 * The executed regex contains (by array index):
			 *
			 * - 0: the complete string
			 * - 1: the note letter
			 * - 2: the optional accidentals
			 * - 3: the optional octave
			 * - 4: the rest of the string (trimmed)
			 *
			 * @example
			 * var parser = require('note-parser')
			 * parser.regex.exec('c#4')
			 * // => ['c#4', 'c', '#', '4', '']
			 * parser.regex.exec('c#4 major')
			 * // => ['c#4major', 'c', '#', '4', 'major']
			 * parser.regex().exec('CMaj7')
			 * // => ['CMaj7', 'C', '', '', 'Maj7']
			 */
			function regex () { return REGEX }

			var SEMITONES = [0, 2, 4, 5, 7, 9, 11]
			/**
			 * Parse a note name in scientific notation an return it's components,
			 * and some numeric properties including midi number and frequency.
			 *
			 * @name parse
			 * @function
			 * @param {String} note - the note string to be parsed
			 * @param {Boolean} isTonic - true the strings it's supposed to contain a note number
			 * and some category (for example an scale: 'C# major'). It's false by default,
			 * but when true, en extra tonicOf property is returned with the category ('major')
			 * @param {Float} tunning - The frequency of A4 note to calculate frequencies.
			 * By default it 440.
			 * @return {Object} the parsed note name or null if not a valid note
			 *
			 * The parsed note name object will ALWAYS contains:
			 * - letter: the uppercase letter of the note
			 * - acc: the accidentals of the note (only sharps or flats)
			 * - pc: the pitch class (letter + acc)
			 * - step: s a numeric representation of the letter. It's an integer from 0 to 6
			 * where 0 = C, 1 = D ... 6 = B
			 * - alt: a numeric representation of the accidentals. 0 means no alteration,
			 * positive numbers are for sharps and negative for flats
			 * - chroma: a numeric representation of the pitch class. It's like midi for
			 * pitch classes. 0 = C, 1 = C#, 2 = D ... 11 = B. Can be used to find enharmonics
			 * since, for example, chroma of 'Cb' and 'B' are both 11
			 *
			 * If the note has octave, the parser object will contain:
			 * - oct: the octave number (as integer)
			 * - midi: the midi number
			 * - freq: the frequency (using tuning parameter as base)
			 *
			 * If the parameter `isTonic` is set to true, the parsed object will contain:
			 * - tonicOf: the rest of the string that follows note name (left and right trimmed)
			 *
			 * @example
			 * var parse = require('note-parser').parse
			 * parse('Cb4')
			 * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,
			 *         oct: 4, midi: 59, freq: 246.94165062806206 }
			 * // if no octave, no midi, no freq
			 * parse('fx')
			 * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })
			 */
			function parse (str, isTonic, tuning) {
			  if (typeof str !== 'string') return null
			  var m = REGEX.exec(str)
			  if (!m || !isTonic && m[4]) return null

			  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }
			  p.pc = p.letter + p.acc
			  p.step = (p.letter.charCodeAt(0) + 3) % 7
			  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length
			  var pos = SEMITONES[p.step] + p.alt
			  p.chroma = pos < 0 ? 12 + pos : pos % 12
			  if (m[3]) { // has octave
			    p.oct = +m[3]
			    p.midi = pos + 12 * (p.oct + 1)
			    p.freq = midiToFreq(p.midi, tuning)
			  }
			  if (isTonic) p.tonicOf = m[4]
			  return p
			}

			var LETTERS = 'CDEFGAB'
			function acc (n) { return !isNum(n) ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n) }
			function oct (n) { return !isNum(n) ? '' : '' + n }

			/**
			 * Create a string from a parsed object or `step, alteration, octave` parameters
			 * @param {Object} obj - the parsed data object
			 * @return {String} a note string or null if not valid parameters
			 * @since 1.2
			 * @example
			 * parser.build(parser.parse('cb2')) // => 'Cb2'
			 *
			 * @example
			 * // it accepts (step, alteration, octave) parameters:
			 * parser.build(3) // => 'F'
			 * parser.build(3, -1) // => 'Fb'
			 * parser.build(3, -1, 4) // => 'Fb4'
			 */
			function build (s, a, o) {
			  if (s === null || typeof s === 'undefined') return null
			  if (s.step) return build(s.step, s.alt, s.oct)
			  if (s < 0 || s > 6) return null
			  return LETTERS.charAt(s) + acc(a) + oct(o)
			}

			/**
			 * Get midi of a note
			 *
			 * @name midi
			 * @function
			 * @param {String|Integer} note - the note name or midi number
			 * @return {Integer} the midi number of the note or null if not a valid note
			 * or the note does NOT contains octave
			 * @example
			 * var parser = require('note-parser')
			 * parser.midi('A4') // => 69
			 * parser.midi('A') // => null
			 * @example
			 * // midi numbers are bypassed (even as strings)
			 * parser.midi(60) // => 60
			 * parser.midi('60') // => 60
			 */
			function midi (note) {
			  if ((isNum(note) || isStr(note)) && note >= 0 && note < 128) return +note
			  var p = parse(note)
			  return p && isDef(p.midi) ? p.midi : null
			}

			/**
			 * Get freq of a note in hertzs (in a well tempered 440Hz A4)
			 *
			 * @name freq
			 * @function
			 * @param {String} note - the note name or note midi number
			 * @param {String} tuning - (Optional) the A4 frequency (440 by default)
			 * @return {Float} the freq of the number if hertzs or null if not valid note
			 * @example
			 * var parser = require('note-parser')
			 * parser.freq('A4') // => 440
			 * parser.freq('A') // => null
			 * @example
			 * // can change tuning (440 by default)
			 * parser.freq('A4', 444) // => 444
			 * parser.freq('A3', 444) // => 222
			 * @example
			 * // it accepts midi numbers (as numbers and as strings)
			 * parser.freq(69) // => 440
			 * parser.freq('69', 442) // => 442
			 */
			function freq (note, tuning) {
			  var m = midi(note)
			  return m === null ? null : midiToFreq(m, tuning)
			}

			var parser = { parse: parse, build: build, regex: regex, midi: midi, freq: freq }
			// add additional functions, one for each object property
			var FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct']
			FNS.forEach(function (name) {
			  parser[name] = function (src) {
			    var p = parse(src)
			    return p && isDef(p[name]) ? p[name] : null
			  }
			})

			module.exports = parser


		/***/ }
		/******/ ]);

	/***/ },
	/* 98 */
	/***/ function(module, exports, __webpack_require__) {

		var Clone = __webpack_require__(92);
		var Blocks = __webpack_require__(11);

		/**
		 * Sprite to be used on the Scratch stage.
		 * All clones of a sprite have shared blocks, shared costumes, shared variables.
		 * @param {?Blocks} blocks Shared blocks object for all clones of sprite.
		 * @param {Runtime} runtime Reference to the runtime.
		 * @constructor
		 */
		function Sprite (blocks, runtime) {
		    this.runtime = runtime;
		    if (!blocks) {
		        // Shared set of blocks for all clones.
		        blocks = new Blocks();
		    }
		    this.blocks = blocks;
		    /**
		     * Human-readable name for this sprite (and all clones).
		     * @type {string}
		     */
		    this.name = '';
		    /**
		     * List of costumes for this sprite.
		     * Each entry is an object, e.g.,
		     * {
		     *      skin: "costume.svg",
		     *      name: "Costume Name",
		     *      bitmapResolution: 2,
		     *      rotationCenterX: 0,
		     *      rotationCenterY: 0
		     * }
		     * @type {Array.<!Object>}
		     */
		    this.costumes = [];
		    /**
		     * List of sounds for this sprite.
		    */
		    this.sounds = [];
		    /**
		     * List of clones for this sprite, including the original.
		     * @type {Array.<!Clone>}
		     */
		    this.clones = [];
		}

		/**
		 * Create a clone of this sprite.
		 * @returns {!Clone} Newly created clone.
		 */
		Sprite.prototype.createClone = function () {
		    var newClone = new Clone(this, this.runtime);
		    newClone.isOriginal = this.clones.length == 0;
		    this.clones.push(newClone);
		    if (newClone.isOriginal) {
		        newClone.initDrawable();
		    }
		    return newClone;
		};

		module.exports = Sprite;


	/***/ },
	/* 99 */
	/***/ function(module, exports) {

		/**
		 * @fileoverview
		 * The specMap below handles a few pieces of "translation" work between
		 * the SB2 JSON format and the data we need to run a project
		 * in the Scratch 3.0 VM.
		 * Notably:
		 *  - Map 2.0 and 1.4 opcodes (forward:) into 3.0-format (motion_movesteps).
		 *  - Map ordered, unnamed args to unordered, named inputs and fields.
		 * Keep this up-to-date as 3.0 blocks are renamed, changed, etc.
		 * Originally this was generated largely by a hand-guided scripting process.
		 * The relevant data lives here:
		 * https://github.com/LLK/scratch-flash/blob/master/src/Specs.as
		 * (for the old opcode and argument order).
		 * and here:
		 * https://github.com/LLK/scratch-blocks/tree/develop/blocks_vertical
		 * (for the new opcodes and argument names).
		 * and here:
		 * https://github.com/LLK/scratch-blocks/blob/develop/tests/
		 * (for the shadow blocks created for each block).
		 * I started with the `commands` array in Specs.as, and discarded irrelevant
		 * properties. By hand, I matched the opcode name to the 3.0 opcode.
		 * Finally, I filled in the expected arguments as below.
		 */
		var specMap = {
		    'forward:':{
		        'opcode':'motion_movesteps',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'STEPS'
		            }
		        ]
		    },
		    'turnRight:':{
		        'opcode':'motion_turnright',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'DEGREES'
		            }
		        ]
		    },
		    'turnLeft:':{
		        'opcode':'motion_turnleft',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'DEGREES'
		            }
		        ]
		    },
		    'heading:':{
		        'opcode':'motion_pointindirection',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_angle',
		                'inputName':'DIRECTION'
		            }
		        ]
		    },
		    'pointTowards:':{
		        'opcode':'motion_pointtowards',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'motion_pointtowards_menu',
		                'inputName':'TOWARDS'
		            }
		        ]
		    },
		    'gotoX:y:':{
		        'opcode':'motion_gotoxy',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'X'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'Y'
		            }
		        ]
		    },
		    'gotoSpriteOrMouse:':{
		        'opcode':'motion_goto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'motion_goto_menu',
		                'inputName':'TO'
		            }
		        ]
		    },
		    'glideSecs:toX:y:elapsed:from:':{
		        'opcode':'motion_glidesecstoxy',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SECS'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'X'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'Y'
		            }
		        ]
		    },
		    'changeXposBy:':{
		        'opcode':'motion_changexby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'DX'
		            }
		        ]
		    },
		    'xpos:':{
		        'opcode':'motion_setx',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'X'
		            }
		        ]
		    },
		    'changeYposBy:':{
		        'opcode':'motion_changeyby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'DY'
		            }
		        ]
		    },
		    'ypos:':{
		        'opcode':'motion_sety',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'Y'
		            }
		        ]
		    },
		    'bounceOffEdge':{
		        'opcode':'motion_ifonedgebounce',
		        'argMap':[
		        ]
		    },
		    'setRotationStyle':{
		        'opcode':'motion_setrotationstyle',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'motion_setrotationstyle_menu',
		                'inputName':'STYLE'
		            }
		        ]
		    },
		    'xpos':{
		        'opcode':'motion_xposition',
		        'argMap':[
		        ]
		    },
		    'ypos':{
		        'opcode':'motion_yposition',
		        'argMap':[
		        ]
		    },
		    'heading':{
		        'opcode':'motion_direction',
		        'argMap':[
		        ]
		    },
		    'say:duration:elapsed:from:':{
		        'opcode':'looks_sayforsecs',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'MESSAGE'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SECS'
		            }
		        ]
		    },
		    'say:':{
		        'opcode':'looks_say',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'MESSAGE'
		            }
		        ]
		    },
		    'think:duration:elapsed:from:':{
		        'opcode':'looks_thinkforsecs',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'MESSAGE'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SECS'
		            }
		        ]
		    },
		    'think:':{
		        'opcode':'looks_think',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'MESSAGE'
		            }
		        ]
		    },
		    'show':{
		        'opcode':'looks_show',
		        'argMap':[
		        ]
		    },
		    'hide':{
		        'opcode':'looks_hide',
		        'argMap':[
		        ]
		    },
		    'lookLike:':{
		        'opcode':'looks_switchcostumeto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'looks_costume',
		                'inputName':'COSTUME'
		            }
		        ]
		    },
		    'nextCostume':{
		        'opcode':'looks_nextcostume',
		        'argMap':[
		        ]
		    },
		    'startScene':{
		        'opcode':'looks_switchbackdropto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'looks_backdrops',
		                'inputName':'BACKDROP'
		            }
		        ]
		    },
		    'changeGraphicEffect:by:':{
		        'opcode':'looks_changeeffectby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'looks_effectmenu',
		                'inputName':'EFFECT'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'CHANGE'
		            }
		        ]
		    },
		    'setGraphicEffect:to:':{
		        'opcode':'looks_seteffectto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'looks_effectmenu',
		                'inputName':'EFFECT'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'VALUE'
		            }
		        ]
		    },
		    'filterReset':{
		        'opcode':'looks_cleargraphiceffects',
		        'argMap':[
		        ]
		    },
		    'changeSizeBy:':{
		        'opcode':'looks_changesizeby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'CHANGE'
		            }
		        ]
		    },
		    'setSizeTo:':{
		        'opcode':'looks_setsizeto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SIZE'
		            }
		        ]
		    },
		    'comeToFront':{
		        'opcode':'looks_gotofront',
		        'argMap':[
		        ]
		    },
		    'goBackByLayers:':{
		        'opcode':'looks_gobacklayers',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_integer',
		                'inputName':'NUM'
		            }
		        ]
		    },
		    'costumeIndex':{
		        'opcode':'looks_costumeorder',
		        'argMap':[
		        ]
		    },
		    'sceneName':{
		        'opcode':'looks_backdropname',
		        'argMap':[
		        ]
		    },
		    'scale':{
		        'opcode':'looks_size',
		        'argMap':[
		        ]
		    },
		    'startSceneAndWait':{
		        'opcode':'looks_switchbackdroptoandwait',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'looks_backdrops',
		                'inputName':'BACKDROP'
		            }
		        ]
		    },
		    'nextScene':{
		        'opcode':'looks_nextbackdrop',
		        'argMap':[
		        ]
		    },
		    'backgroundIndex':{
		        'opcode':'looks_backdroporder',
		        'argMap':[
		        ]
		    },
		    'playSound:':{
		        'opcode':'sound_play',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sound_sounds_option',
		                'inputName':'SOUND_MENU'
		            }
		        ]
		    },
		    'doPlaySoundAndWait':{
		        'opcode':'sound_playuntildone',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sound_sounds_option',
		                'inputName':'SOUND_MENU'
		            }
		        ]
		    },
		    'stopAllSounds':{
		        'opcode':'sound_stopallsounds',
		        'argMap':[
		        ]
		    },
		    'playDrum':{
		        'opcode':'sound_playdrumforbeats',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'DRUMTYPE'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'BEATS'
		            }
		        ]
		    },
		    'rest:elapsed:from:':{
		        'opcode':'sound_restforbeats',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'BEATS'
		            }
		        ]
		    },
		    'noteOn:duration:elapsed:from:':{
		        'opcode':'sound_playnoteforbeats',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NOTE'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'BEATS'
		            }
		        ]
		    },
		    'instrument:':{
		        'opcode':'sound_setinstrumentto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'INSTRUMENT'
		            }
		        ]
		    },
		    'changeVolumeBy:':{
		        'opcode':'sound_changevolumeby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'VOLUME'
		            }
		        ]
		    },
		    'setVolumeTo:':{
		        'opcode':'sound_setvolumeto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'VOLUME'
		            }
		        ]
		    },
		    'volume':{
		        'opcode':'sound_volume',
		        'argMap':[
		        ]
		    },
		    'changeTempoBy:':{
		        'opcode':'sound_changetempoby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'TEMPO'
		            }
		        ]
		    },
		    'setTempoTo:':{
		        'opcode':'sound_settempotobpm',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'TEMPO'
		            }
		        ]
		    },
		    'tempo':{
		        'opcode':'sound_tempo',
		        'argMap':[
		        ]
		    },
		    'clearPenTrails':{
		        'opcode':'pen_clear',
		        'argMap':[
		        ]
		    },
		    'stampCostume':{
		        'opcode':'pen_stamp',
		        'argMap':[
		        ]
		    },
		    'putPenDown':{
		        'opcode':'pen_pendown',
		        'argMap':[
		        ]
		    },
		    'putPenUp':{
		        'opcode':'pen_penup',
		        'argMap':[
		        ]
		    },
		    'penColor:':{
		        'opcode':'pen_setpencolortocolor',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'colour_picker',
		                'inputName':'COLOR'
		            }
		        ]
		    },
		    'changePenHueBy:':{
		        'opcode':'pen_changepencolorby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'COLOR'
		            }
		        ]
		    },
		    'setPenHueTo:':{
		        'opcode':'pen_setpencolortonum',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'COLOR'
		            }
		        ]
		    },
		    'changePenShadeBy:':{
		        'opcode':'pen_changepenshadeby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SHADE'
		            }
		        ]
		    },
		    'setPenShadeTo:':{
		        'opcode':'pen_changepenshadeby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SHADE'
		            }
		        ]
		    },
		    'changePenSizeBy:':{
		        'opcode':'pen_changepensizeby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SIZE'
		            }
		        ]
		    },
		    'penSize:':{
		        'opcode':'pen_setpensizeto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'SIZE'
		            }
		        ]
		    },
		    'whenGreenFlag':{
		        'opcode':'event_whenflagclicked',
		        'argMap':[
		        ]
		    },
		    'whenKeyPressed':{
		        'opcode':'event_whenkeypressed',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'KEY_OPTION'
		            }
		        ]
		    },
		    'whenClicked':{
		        'opcode':'event_whenthisspriteclicked',
		        'argMap':[
		        ]
		    },
		    'whenSceneStarts':{
		        'opcode':'event_whenbackdropswitchesto',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'BACKDROP'
		            }
		        ]
		    },
		    'whenSensorGreaterThan':{
		        'opcode':'event_whengreaterthan',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'WHENGREATERTHANMENU'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'VALUE'
		            }
		        ]
		    },
		    'whenIReceive':{
		        'opcode':'event_whenbroadcastreceived',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'BROADCAST_OPTION'
		            }
		        ]
		    },
		    'broadcast:':{
		        'opcode':'event_broadcast',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'event_broadcast_menu',
		                'inputName':'BROADCAST_OPTION'
		            }
		        ]
		    },
		    'doBroadcastAndWait':{
		        'opcode':'event_broadcastandwait',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'event_broadcast_menu',
		                'inputName':'BROADCAST_OPTION'
		            }
		        ]
		    },
		    'wait:elapsed:from:':{
		        'opcode':'control_wait',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_positive_number',
		                'inputName':'DURATION'
		            }
		        ]
		    },
		    'doRepeat':{
		        'opcode':'control_repeat',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_whole_number',
		                'inputName':'TIMES'
		            },
		            {
		                'type':'input',
		                'inputName': 'SUBSTACK'
		            }
		        ]
		    },
		    'doForever':{
		        'opcode':'control_forever',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'SUBSTACK'
		            }
		        ]
		    },
		    'doIf':{
		        'opcode':'control_if',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'CONDITION'
		            },
		            {
		                'type':'input',
		                'inputName':'SUBSTACK'
		            }
		        ]
		    },
		    'doIfElse':{
		        'opcode':'control_if_else',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'CONDITION'
		            },
		            {
		                'type':'input',
		                'inputName':'SUBSTACK'
		            },
		            {
		                'type':'input',
		                'inputName':'SUBSTACK2'
		            }
		        ]
		    },
		    'doWaitUntil':{
		        'opcode':'control_wait_until',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'CONDITION'
		            }
		        ]
		    },
		    'doUntil':{
		        'opcode':'control_repeat_until',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'CONDITION'
		            },
		            {
		                'type':'input',
		                'inputName':'SUBSTACK'
		            }
		        ]
		    },
		    'stopScripts':{
		        'opcode':'control_stop',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'STOP_OPTION'
		            }
		        ]
		    },
		    'whenCloned':{
		        'opcode':'control_start_as_clone',
		        'argMap':[
		        ]
		    },
		    'createCloneOf':{
		        'opcode':'control_create_clone_of',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'control_create_clone_of_menu',
		                'inputName':'CLONE_OPTION'
		            }
		        ]
		    },
		    'deleteClone':{
		        'opcode':'control_delete_this_clone',
		        'argMap':[
		        ]
		    },
		    'touching:':{
		        'opcode':'sensing_touchingobject',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_touchingobjectmenu',
		                'inputName':'TOUCHINGOBJECTMENU'
		            }
		        ]
		    },
		    'touchingColor:':{
		        'opcode':'sensing_touchingcolor',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'colour_picker',
		                'inputName':'COLOR'
		            }
		        ]
		    },
		    'color:sees:':{
		        'opcode':'sensing_coloristouchingcolor',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'colour_picker',
		                'inputName':'COLOR'
		            },
		            {
		                'type':'input',
		                'inputOp':'colour_picker',
		                'inputName':'COLOR2'
		            }
		        ]
		    },
		    'distanceTo:':{
		        'opcode':'sensing_distanceto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_distancetomenu',
		                'inputName':'DISTANCETOMENU'
		            }
		        ]
		    },
		    'doAsk':{
		        'opcode':'sensing_askandwait',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'QUESTION'
		            }
		        ]
		    },
		    'answer':{
		        'opcode':'sensing_answer',
		        'argMap':[
		        ]
		    },
		    'keyPressed:':{
		        'opcode':'sensing_keypressed',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_keyoptions',
		                'inputName':'KEY_OPTION'
		            }
		        ]
		    },
		    'mousePressed':{
		        'opcode':'sensing_mousedown',
		        'argMap':[
		        ]
		    },
		    'mouseX':{
		        'opcode':'sensing_mousex',
		        'argMap':[
		        ]
		    },
		    'mouseY':{
		        'opcode':'sensing_mousey',
		        'argMap':[
		        ]
		    },
		    'soundLevel':{
		        'opcode':'sensing_loudness',
		        'argMap':[
		        ]
		    },
		    'senseVideoMotion':{
		        'opcode':'sensing_videoon',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_videoonmenuone',
		                'inputName':'VIDEOONMENU1'
		            },
		            {
		                'type':'input',
		                'inputOp':'sensing_videoonmenutwo',
		                'inputName':'VIDEOONMENU2'
		            }
		        ]
		    },
		    'setVideoState':{
		        'opcode':'sensing_videotoggle',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_videotogglemenu',
		                'inputName':'VIDEOTOGGLEMENU'
		            }
		        ]
		    },
		    'setVideoTransparency':{
		        'opcode':'sensing_setvideotransparency',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'TRANSPARENCY'
		            }
		        ]
		    },
		    'timer':{
		        'opcode':'sensing_timer',
		        'argMap':[
		        ]
		    },
		    'timerReset':{
		        'opcode':'sensing_resettimer',
		        'argMap':[
		        ]
		    },
		    'getAttribute:of:':{
		        'opcode':'sensing_of',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_of_property_menu',
		                'inputName':'PROPERTY'
		            },
		            {
		                'type':'input',
		                'inputOp':'sensing_of_object_menu',
		                'inputName':'OBJECT'
		            }
		        ]
		    },
		    'timeAndDate':{
		        'opcode':'sensing_current',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'sensing_currentmenu',
		                'inputName':'CURRENTMENU'
		            }
		        ]
		    },
		    'timestamp':{
		        'opcode':'sensing_dayssince2000',
		        'argMap':[
		        ]
		    },
		    'getUserName':{
		        'opcode':'sensing_username',
		        'argMap':[
		        ]
		    },
		    '+':{
		        'opcode':'operator_add',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM1'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM2'
		            }
		        ]
		    },
		    '-':{
		        'opcode':'operator_subtract',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM1'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM2'
		            }
		        ]
		    },
		    '*':{
		        'opcode':'operator_multiply',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM1'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM2'
		            }
		        ]
		    },
		    '/':{
		        'opcode':'operator_divide',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM1'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM2'
		            }
		        ]
		    },
		    'randomFrom:to:':{
		        'opcode':'operator_random',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'FROM'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'TO'
		            }
		        ]
		    },
		    '<':{
		        'opcode':'operator_lt',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND1'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND2'
		            }
		        ]
		    },
		    '=':{
		        'opcode':'operator_equals',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND1'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND2'
		            }
		        ]
		    },
		    '>':{
		        'opcode':'operator_gt',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND1'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'OPERAND2'
		            }
		        ]
		    },
		    '&':{
		        'opcode':'operator_and',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'OPERAND1'
		            },
		            {
		                'type':'input',
		                'inputName':'OPERAND2'
		            }
		        ]
		    },
		    '|':{
		        'opcode':'operator_or',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'OPERAND1'
		            },
		            {
		                'type':'input',
		                'inputName':'OPERAND2'
		            }
		        ]
		    },
		    'not':{
		        'opcode':'operator_not',
		        'argMap':[
		            {
		                'type':'input',
		                'inputName':'OPERAND'
		            }
		        ]
		    },
		    'concatenate:with:':{
		        'opcode':'operator_join',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'STRING1'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'STRING2'
		            }
		        ]
		    },
		    'letter:of:':{
		        'opcode':'operator_letter_of',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_whole_number',
		                'inputName':'LETTER'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'STRING'
		            }
		        ]
		    },
		    'stringLength:':{
		        'opcode':'operator_length',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'STRING'
		            }
		        ]
		    },
		    '%':{
		        'opcode':'operator_mod',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM1'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM2'
		            }
		        ]
		    },
		    'rounded':{
		        'opcode':'operator_round',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM'
		            }
		        ]
		    },
		    'computeFunction:of:':{
		        'opcode':'operator_mathop',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'operator_mathop_menu',
		                'inputName':'OPERATOR'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'NUM'
		            }
		        ]
		    },
		    'readVariable':{
		        'opcode':'data_variable',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'data_variablemenu',
		                'inputName':'VARIABLE'
		            }
		        ]
		    },
		    'setVar:to:':{
		        'opcode':'data_setvariableto',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'data_variablemenu',
		                'inputName':'VARIABLE'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'VALUE'
		            }
		        ]
		    },
		    'changeVar:by:':{
		        'opcode':'data_changevariableby',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'data_variablemenu',
		                'inputName':'VARIABLE'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_number',
		                'inputName':'VALUE'
		            }
		        ]
		    },
		    'showVariable:':{
		        'opcode':'data_showvariable',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'data_variablemenu',
		                'inputName':'VARIABLE'
		            }
		        ]
		    },
		    'hideVariable:':{
		        'opcode':'data_hidevariable',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'data_variablemenu',
		                'inputName':'VARIABLE'
		            }
		        ]
		    },
		    'contentsOfList:':{
		        'opcode':'data_list',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'append:toList:':{
		        'opcode':'data_addtolist',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'ITEM'
		            },
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'deleteLine:ofList:':{
		        'opcode':'data_deleteoflist',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_integer',
		                'inputName':'INDEX'
		            },
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'insert:at:ofList:':{
		        'opcode':'data_insertatlist',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'ITEM'
		            },
		            {
		                'type':'input',
		                'inputOp':'math_integer',
		                'inputName':'INDEX'
		            },
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'setLine:ofList:to:':{
		        'opcode':'data_replaceitemoflist',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_integer',
		                'inputName':'INDEX'
		            },
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'ITEM'
		            }
		        ]
		    },
		    'getLine:ofList:':{
		        'opcode':'data_itemoflist',
		        'argMap':[
		            {
		                'type':'input',
		                'inputOp':'math_integer',
		                'inputName':'INDEX'
		            },
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'lineCountOfList:':{
		        'opcode':'data_lengthoflist',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'list:contains:':{
		        'opcode':'data_listcontainsitem',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            },
		            {
		                'type':'input',
		                'inputOp':'text',
		                'inputName':'ITEM'
		            }
		        ]
		    },
		    'showList:':{
		        'opcode':'data_showlist',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'hideList:':{
		        'opcode':'data_hidelist',
		        'argMap':[
		            {
		                'type':'field',
		                'fieldName':'LIST'
		            }
		        ]
		    },
		    'procDef':{
		        'opcode':'procedures_defnoreturn',
		        'argMap':[]
		    },
		    'getParam':{
		        'opcode':'procedures_param',
		        'argMap':[]
		    },
		    'call':{
		        'opcode':'procedures_callnoreturn',
		        'argMap':[]
		    }
		};
		module.exports = specMap;


	/***/ }
	/******/ ]);

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var defaultsDeep = __webpack_require__(175);
	var React = __webpack_require__(2);
	var ScratchBlocks = __webpack_require__(183);
	var VM = __webpack_require__(173);

	var BlocksComponent = __webpack_require__(184);

	var Blocks = function (_React$Component) {
	    _inherits(Blocks, _React$Component);

	    function Blocks(props) {
	        _classCallCheck(this, Blocks);

	        var _this = _possibleConstructorReturn(this, (Blocks.__proto__ || Object.getPrototypeOf(Blocks)).call(this, props));

	        bindAll(_this, ['attachVM', 'detachVM', 'onStackGlowOn', 'onStackGlowOff', 'onBlockGlowOn', 'onBlockGlowOff', 'onVisualReport', 'onWorkspaceUpdate']);
	        return _this;
	    }

	    _createClass(Blocks, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var workspaceConfig = defaultsDeep({}, Blocks.defaultOptions, this.props.options);
	            this.workspace = ScratchBlocks.inject(this.blocks, workspaceConfig);
	            this.attachVM();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.detachVM();
	            this.workspace.dispose();
	        }
	    }, {
	        key: 'attachVM',
	        value: function attachVM() {
	            this.workspace.addChangeListener(this.props.vm.blockListener);
	            this.workspace.getFlyout().getWorkspace().addChangeListener(this.props.vm.flyoutBlockListener);
	            this.props.vm.on('STACK_GLOW_ON', this.onStackGlowOn);
	            this.props.vm.on('STACK_GLOW_OFF', this.onStackGlowOff);
	            this.props.vm.on('BLOCK_GLOW_ON', this.onBlockGlowOn);
	            this.props.vm.on('BLOCK_GLOW_OFF', this.onBlockGlowOff);
	            this.props.vm.on('VISUAL_REPORT', this.onVisualReport);
	            this.props.vm.on('workspaceUpdate', this.onWorkspaceUpdate);
	        }
	    }, {
	        key: 'detachVM',
	        value: function detachVM() {
	            this.props.vm.off('STACK_GLOW_ON', this.onStackGlowOn);
	            this.props.vm.off('STACK_GLOW_OFF', this.onStackGlowOff);
	            this.props.vm.off('BLOCK_GLOW_ON', this.onBlockGlowOn);
	            this.props.vm.off('BLOCK_GLOW_OFF', this.onBlockGlowOff);
	            this.props.vm.off('VISUAL_REPORT', this.onVisualReport);
	            this.props.vm.off('workspaceUpdate', this.onWorkspaceUpdate);
	        }
	    }, {
	        key: 'onStackGlowOn',
	        value: function onStackGlowOn(data) {
	            this.workspace.glowStack(data.id, true);
	        }
	    }, {
	        key: 'onStackGlowOff',
	        value: function onStackGlowOff(data) {
	            this.workspace.glowStack(data.id, false);
	        }
	    }, {
	        key: 'onBlockGlowOn',
	        value: function onBlockGlowOn(data) {
	            this.workspace.glowBlock(data.id, true);
	        }
	    }, {
	        key: 'onBlockGlowOff',
	        value: function onBlockGlowOff(data) {
	            this.workspace.glowBlock(data.id, false);
	        }
	    }, {
	        key: 'onVisualReport',
	        value: function onVisualReport(data) {
	            this.workspace.reportValue(data.id, data.value);
	        }
	    }, {
	        key: 'onWorkspaceUpdate',
	        value: function onWorkspaceUpdate(data) {
	            ScratchBlocks.Events.disable();
	            this.workspace.clear();
	            var dom = ScratchBlocks.Xml.textToDom(data.xml);
	            ScratchBlocks.Xml.domToWorkspace(dom, this.workspace);
	            ScratchBlocks.Events.enable();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _props = this.props;
	            var options = _props.options;
	            var vm = _props.vm;

	            var props = _objectWithoutProperties(_props, ['options', 'vm']);

	            return React.createElement(BlocksComponent, _extends({
	                componentRef: function componentRef(c) {
	                    return _this2.blocks = c;
	                }
	            }, props));
	        }
	    }]);

	    return Blocks;
	}(React.Component);

	Blocks.propTypes = {
	    options: React.PropTypes.shape({
	        media: React.PropTypes.string,
	        zoom: React.PropTypes.shape({
	            controls: React.PropTypes.boolean,
	            wheel: React.PropTypes.boolean,
	            startScale: React.PropTypes.number
	        }),
	        colours: React.PropTypes.shape({
	            workspace: React.PropTypes.string,
	            flyout: React.PropTypes.string,
	            scrollbar: React.PropTypes.string,
	            scrollbarHover: React.PropTypes.string,
	            insertionMarker: React.PropTypes.string,
	            insertionMarkerOpacity: React.PropTypes.number,
	            fieldShadow: React.PropTypes.string,
	            dragShadowOpacity: React.PropTypes.number
	        })
	    }),
	    vm: React.PropTypes.instanceOf(VM)
	};

	Blocks.defaultOptions = {
	    zoom: {
	        controls: true,
	        wheel: true,
	        startScale: 0.75
	    },
	    colours: {
	        workspace: '#334771',
	        flyout: '#283856',
	        scrollbar: '#24324D',
	        scrollbarHover: '#0C111A',
	        insertionMarker: '#FFFFFF',
	        insertionMarkerOpacity: 0.3,
	        fieldShadow: 'rgba(255, 255, 255, 0.3)',
	        dragShadowOpacity: 0.6
	    }
	};

	Blocks.defaultProps = {
	    options: Blocks.defaultOptions,
	    vm: new VM()
	};

	module.exports = Blocks;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	var baseClone = __webpack_require__(176),
	    isPlainObject = __webpack_require__(178),
	    keysIn = __webpack_require__(179),
	    mergeWith = __webpack_require__(180),
	    rest = __webpack_require__(181),
	    root = __webpack_require__(182);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  var length = args.length;
	  switch (length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
	    cache = this.__data__ = new MapCache(cache.__data__);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (typeof key == 'number' && value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = keysIn(source);
	  }
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	      else {
	        newValue = objValue;
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  stack.set(srcValue, newValue);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	  }
	  stack['delete'](srcValue);
	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : source[key];

	    assignValue(object, key, newValue);
	  }
	  return object;
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a
	 * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	 * Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Used by `_.defaultsDeep` to customize its `_.merge` use.
	 *
	 * @private
	 * @param {*} objValue The destination value.
	 * @param {*} srcValue The source value.
	 * @param {string} key The key of the property to merge.
	 * @param {Object} object The parent object of `objValue`.
	 * @param {Object} source The parent object of `srcValue`.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 * @returns {*} Returns the value to assign.
	 */
	function mergeDefaults(objValue, srcValue, key, object, source, stack) {
	  if (isObject(objValue) && isObject(srcValue)) {
	    baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
	  }
	  return objValue;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value)) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length,
	 *  else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	/**
	 * This method is like `_.defaults` except that it recursively assigns
	 * default properties.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaults
	 * @example
	 *
	 * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	 * // => { 'user': { 'name': 'barney', 'age': 36 } }
	 *
	 */
	var defaultsDeep = rest(function(args) {
	  args.push(undefined, mergeDefaults);
	  return apply(mergeWith, undefined, args);
	});

	module.exports = defaultsDeep;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = (freeModule && freeModule.exports === freeExports)
	  ? freeExports
	  : undefined;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `Map#set` because it doesn't return the map instance in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  set.add(value);
	  return set;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getOwnPropertySymbols = Object.getOwnPropertySymbols,
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetPrototype = Object.getPrototypeOf,
	    nativeKeys = Object.keys;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache && cache.__data__.length == LARGE_ARRAY_SIZE) {
	    cache = this.__data__ = new MapCache(cache.__data__);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  // Recursively populate clone (susceptible to call stack limits).
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,
	  // that are composed entirely of index properties, return `false` for
	  // `hasOwnProperty` checks of them.
	  return hasOwnProperty.call(object, key) ||
	    (typeof object == 'object' && key in object && getPrototype(object) === null);
	}

	/**
	 * The base implementation of `_.keys` which doesn't skip the constructor
	 * property of prototypes or treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  return nativeKeys(Object(object));
	}

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : source[key];

	    assignValue(object, key, newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a
	 * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects
	 * Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Gets the `[[Prototype]]` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {null|Object} Returns the `[[Prototype]]`.
	 */
	function getPrototype(value) {
	  return nativeGetPrototype(Object(value));
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	function getSymbols(object) {
	  // Coerce `object` to an object to avoid non-object errors in V8.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.
	  return getOwnPropertySymbols(Object(object));
	}

	// Fallback for IE < 11.
	if (!getOwnPropertySymbols) {
	  getSymbols = function() {
	    return [];
	  };
	}

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function getTag(value) {
	  return objectToString.call(value);
	}

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Creates an array of index keys for `object` values of arrays,
	 * `arguments` objects, and strings, otherwise `null` is returned.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array|null} Returns index keys, else `null`.
	 */
	function indexKeys(object) {
	  var length = object ? object.length : undefined;
	  if (isLength(length) &&
	      (isArray(object) || isString(object) || isArguments(object))) {
	    return baseTimes(length, String);
	  }
	  return null;
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var other = { 'user': 'fred' };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @type {Function}
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value)) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = !Buffer ? constant(false) : function(value) {
	  return value instanceof Buffer;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8 which returns 'object' for typed array and weak map constructors,
	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length,
	 *  else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified,
	 *  else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  var isProto = isPrototype(object);
	  if (!(isProto || isArrayLike(object))) {
	    return baseKeys(object);
	  }
	  var indexes = indexKeys(object),
	      skipIndexes = !!indexes,
	      result = indexes || [],
	      length = result.length;

	  for (var key in object) {
	    if (baseHas(object, key) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
	        !(isProto && key == 'constructor')) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 * var getter = _.constant(object);
	 *
	 * getter() === object;
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = baseClone;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(177)(module), (function() { return this; }())))

/***/ },
/* 177 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 178 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	module.exports = isPlainObject;


/***/ },
/* 179 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (typeof key == 'number' && value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  if (!(isArray(source) || isTypedArray(source))) {
	    var props = baseKeysIn(source);
	  }
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(object[key], srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  });
	}

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = object[key],
	      srcValue = source[key],
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    newValue = srcValue;
	    if (isArray(srcValue) || isTypedArray(srcValue)) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        isCommon = false;
	        newValue = baseClone(srcValue, true);
	      }
	      else {
	        newValue = objValue;
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) ||
	      objectToString.call(value) != objectTag || isHostObject(value)) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return (typeof Ctor == 'function' &&
	    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);
	}

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	/**
	 * This method is like `_.merge` except that it accepts `customizer` which
	 * is invoked to produce the merged values of the destination and source
	 * properties. If `customizer` returns `undefined`, merging is handled by the
	 * method instead. The `customizer` is invoked with seven arguments:
	 * (objValue, srcValue, key, object, source, stack).
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} sources The source objects.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * function customizer(objValue, srcValue) {
	 *   if (_.isArray(objValue)) {
	 *     return objValue.concat(srcValue);
	 *   }
	 * }
	 *
	 * var object = { 'a': [1], 'b': [2] };
	 * var other = { 'a': [3], 'b': [4] };
	 *
	 * _.mergeWith(object, other, customizer);
	 * // => { 'a': [1, 3], 'b': [2, 4] }
	 */
	var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
	  baseMerge(object, source, srcIndex, customizer);
	});

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = mergeWith;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(177)(module)))

/***/ },
/* 181 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308,
	    NAN = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as
	 * an array.
	 *
	 * **Note:** This method is based on the
	 * [rest parameter](https://mdn.io/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.rest(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function rest(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = start === undefined ? start : toInteger(start);
	  return baseRest(func, start);
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = rest;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used to determine if values are of the language type `Object`. */
	var objectTypes = {
	  'function': true,
	  'object': true
	};

	/** Detect free variable `exports`. */
	var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
	  ? exports
	  : undefined;

	/** Detect free variable `module`. */
	var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
	  ? module
	  : undefined;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

	/** Detect free variable `self`. */
	var freeSelf = checkGlobal(objectTypes[typeof self] && self);

	/** Detect free variable `window`. */
	var freeWindow = checkGlobal(objectTypes[typeof window] && window);

	/** Detect `this` as the global object. */
	var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

	/**
	 * Used as a reference to the global object.
	 *
	 * The `this` value is used if it's the global object to avoid Greasemonkey's
	 * restricted `window` object, otherwise the `window` object is used.
	 */
	var root = freeGlobal ||
	  ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
	    freeSelf || thisGlobal || Function('return this')();

	/**
	 * Checks if `value` is a global object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.
	 */
	function checkGlobal(value) {
	  return (value && value.Object === Object) ? value : null;
	}

	module.exports = root;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(177)(module), (function() { return this; }())))

/***/ },
/* 183 */
/***/ function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(10);

	/***/ },
	/* 1 */,
	/* 2 */,
	/* 3 */,
	/* 4 */,
	/* 5 */,
	/* 6 */,
	/* 7 */,
	/* 8 */,
	/* 9 */,
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		/*** IMPORTS FROM imports-loader ***/
		var Blockly = __webpack_require__(11);
		var goog = __webpack_require__(13);

		/**
		 * @license
		 * Visual Blocks Language
		 *
		 * Copyright 2012 Google Inc.
		 * https://developers.google.com/blockly/
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 *   http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */

		/**
		 * @fileoverview English strings.
		 * @author fraser@google.com (Neil Fraser)
		 *
		 * After modifying this file, either run "build.py" from the parent directory,
		 * or run (from this directory):
		 * ../i18n/js_to_json.py
		 * to regenerate json/{en,qqq,synonyms}.json.
		 *
		 * To convert all of the json files to .js files, run:
		 * ../i18n/create_messages.py json/*.json
		 */
		'use strict';

		goog.provide('Blockly.Msg.en');

		goog.require('Blockly.Msg');


		/**
		 * Due to the frequency of long strings, the 80-column wrap rule need not apply
		 * to message files.
		 */

		/**
		 * Each message is preceded with a tripple-slash comment that becomes the
		 * message descriptor.  The build process extracts these descriptors, adds
		 * them to msg/json/qqq.json, and they show up in the translation console.
		 */

		/// default name - A simple, general default name for a variable, preferably short.
		/// For more context, see
		/// [[Translating:Blockly#infrequent_message_types]].\n{{Identical|Item}}
		Blockly.Msg.VARIABLES_DEFAULT_NAME = 'item';
		/// button text - Button that sets a calendar to today's date.\n{{Identical|Today}}
		Blockly.Msg.TODAY = 'Today';

		// Context menus.
		/// context menu - Make a copy of the selected block (and any blocks it contains).\n{{Identical|Duplicate}}
		Blockly.Msg.DUPLICATE_BLOCK = 'Duplicate';
		/// context menu - Add a descriptive comment to the selected block.
		Blockly.Msg.ADD_COMMENT = 'Add Comment';
		/// context menu - Remove the descriptive comment from the selected block.
		Blockly.Msg.REMOVE_COMMENT = 'Remove Comment';
		/// context menu - Change from 'external' to 'inline' mode for displaying blocks used as inputs to the selected block.  See [[Translating:Blockly#context_menus]].
		Blockly.Msg.EXTERNAL_INPUTS = 'External Inputs';
		/// context menu - Change from 'internal' to 'external' mode for displaying blocks used as inputs to the selected block.  See [[Translating:Blockly#context_menus]].
		Blockly.Msg.INLINE_INPUTS = 'Inline Inputs';
		/// context menu - Permanently delete the selected block.
		Blockly.Msg.DELETE_BLOCK = 'Delete Block';
		/// context menu - Permanently delete the %1 selected blocks.\n\nParameters:\n* %1 - an integer greater than 1.
		Blockly.Msg.DELETE_X_BLOCKS = 'Delete %1 Blocks';
		/// confirmation prompt - Question the user if they really wanted to permanently delete all %1 blocks.\n\nParameters:\n* %1 - an integer greater than 1.
		Blockly.Msg.DELETE_ALL_BLOCKS = 'Delete all %1 blocks?';
		/// context menu - Reposition all the blocks so that they form a neat line.
		Blockly.Msg.CLEAN_UP = 'Clean up Blocks';
		/// context menu - Make the appearance of the selected block smaller by hiding some information about it.
		Blockly.Msg.COLLAPSE_BLOCK = 'Collapse Block';
		/// context menu - Make the appearance of all blocks smaller by hiding some information about it.  Use the same terminology as in the previous message.
		Blockly.Msg.COLLAPSE_ALL = 'Collapse Blocks';
		/// context menu - Restore the appearance of the selected block by showing information about it that was hidden (collapsed) earlier.
		Blockly.Msg.EXPAND_BLOCK = 'Expand Block';
		/// context menu - Restore the appearance of all blocks by showing information about it that was hidden (collapsed) earlier.  Use the same terminology as in the previous message.
		Blockly.Msg.EXPAND_ALL = 'Expand Blocks';
		/// context menu - Make the selected block have no effect (unless reenabled).
		Blockly.Msg.DISABLE_BLOCK = 'Disable Block';
		/// context menu - Make the selected block have effect (after having been disabled earlier).
		Blockly.Msg.ENABLE_BLOCK = 'Enable Block';
		/// context menu - Provide helpful information about the selected block.\n{{Identical|Help}}
		Blockly.Msg.HELP = 'Help';
		/// context menu - Undo the previous action.\n{{Identical|Undo}}
		Blockly.Msg.UNDO = 'Undo';
		/// context menu - Undo the previous undo action.\n{{Identical|Redo}}
		Blockly.Msg.REDO = 'Redo';

		// Variable renaming.
		/// prompt - This message is only seen in the Opera browser.  With most browsers, users can edit numeric values in blocks by just clicking and typing.  Opera does not allows this, so we have to open a new window and prompt users with this message to chanage a value.
		Blockly.Msg.CHANGE_VALUE_TITLE = 'Change value:';
		/// dropdown choice - When the user clicks on a variable block, this is one of the dropdown menu choices.  It is used to rename the current variable.  See [https://github.com/google/blockly/wiki/Variables#dropdown-menu https://github.com/google/blockly/wiki/Variables#dropdown-menu].
		Blockly.Msg.RENAME_VARIABLE = 'Rename variable...';
		/// prompt - Prompts the user to enter the new name for the selected variable.  See [https://github.com/google/blockly/wiki/Variables#dropdown-menu https://github.com/google/blockly/wiki/Variables#dropdown-menu].\n\nParameters:\n* %1 - the name of the variable to be renamed.
		Blockly.Msg.RENAME_VARIABLE_TITLE = 'Rename all "%1" variables to:';

		// Variable creation
		/// button text - Text on the button used to launch the variable creation dialogue.
		Blockly.Msg.NEW_VARIABLE = 'Create variable...';
		/// prompt - Prompts the user to enter the name for a new variable.  See [https://github.com/google/blockly/wiki/Variables#dropdown-menu https://github.com/google/blockly/wiki/Variables#dropdown-menu].
		Blockly.Msg.NEW_VARIABLE_TITLE = 'New variable name:';
		/// alert - Tells the user that the name they entered is already in use.
		Blockly.Msg.VARIABLE_ALREADY_EXISTS = 'A variable named "%1" already exists.'

		// Variable deletion.
		/// confirm -  Ask the user to confirm their deletion of multiple uses of a variable.
		Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = 'Delete %1 uses of the "%2" variable?';
		/// alert - Tell the user that they can't delete a variable because it's part of the definition of a procedure.
		Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = 'Can\'t delete the variable "%1" because it is part of the definition of the procedure "%2"';
		/// dropdown choice - Delete the currently selected variable.
		Blockly.Msg.DELETE_VARIABLE = 'Delete the "%1" variable';

		// Colour Blocks.
		/// url - Information about colour.
		Blockly.Msg.COLOUR_PICKER_HELPURL = 'https://en.wikipedia.org/wiki/Color';
		/// tooltip - See [https://github.com/google/blockly/wiki/Colour#picking-a-colour-from-a-palette https://github.com/google/blockly/wiki/Colour#picking-a-colour-from-a-palette].
		Blockly.Msg.COLOUR_PICKER_TOOLTIP = 'Choose a colour from the palette.';
		/// url - A link that displays a random colour each time you visit it.
		Blockly.Msg.COLOUR_RANDOM_HELPURL = 'http://randomcolour.com';
		/// block text - Title of block that generates a colour at random.
		Blockly.Msg.COLOUR_RANDOM_TITLE = 'random colour';
		/// tooltip - See [https://github.com/google/blockly/wiki/Colour#generating-a-random-colour https://github.com/google/blockly/wiki/Colour#generating-a-random-colour].
		Blockly.Msg.COLOUR_RANDOM_TOOLTIP = 'Choose a colour at random.';
		/// url - A link for color codes with percentages (0-100%) for each component, instead of the more common 0-255, which may be more difficult for beginners.
		Blockly.Msg.COLOUR_RGB_HELPURL = 'http://www.december.com/html/spec/colorper.html';
		/// block text - Title of block for [https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components].
		Blockly.Msg.COLOUR_RGB_TITLE = 'colour with';
		/// block input text - The amount of red (from 0 to 100) to use when [https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components].\n{{Identical|Red}}
		Blockly.Msg.COLOUR_RGB_RED = 'red';
		/// block input text - The amount of green (from 0 to 100) to use when [https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components].
		Blockly.Msg.COLOUR_RGB_GREEN = 'green';
		/// block input text - The amount of blue (from 0 to 100) to use when [https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components].\n{{Identical|Blue}}
		Blockly.Msg.COLOUR_RGB_BLUE = 'blue';
		/// tooltip - See [https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components https://github.com/google/blockly/wiki/Colour#creating-a-colour-from-red-green-and-blue-components].
		Blockly.Msg.COLOUR_RGB_TOOLTIP = 'Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.';
		/// url - A useful link that displays blending of two colors.
		Blockly.Msg.COLOUR_BLEND_HELPURL = 'http://meyerweb.com/eric/tools/color-blend/';
		/// block text - A verb for blending two shades of paint.
		Blockly.Msg.COLOUR_BLEND_TITLE = 'blend';
		/// block input text - The first of two colours to [https://github.com/google/blockly/wiki/Colour#blending-colours blend].
		Blockly.Msg.COLOUR_BLEND_COLOUR1 = 'colour 1';
		/// block input text - The second of two colours to [https://github.com/google/blockly/wiki/Colour#blending-colours blend].
		Blockly.Msg.COLOUR_BLEND_COLOUR2 = 'colour 2';
		/// block input text - The proportion of the [https://github.com/google/blockly/wiki/Colour#blending-colours blend] containing the first color; the remaining proportion is of the second colour.  For example, if the first colour is red and the second color blue, a ratio of 1 would yield pure red, a ratio of .5 would yield purple (equal amounts of red and blue), and a ratio of 0 would yield pure blue.\n{{Identical|Ratio}}
		Blockly.Msg.COLOUR_BLEND_RATIO = 'ratio';
		/// tooltip - See [https://github.com/google/blockly/wiki/Colour#blending-colours https://github.com/google/blockly/wiki/Colour#blending-colours].
		Blockly.Msg.COLOUR_BLEND_TOOLTIP = 'Blends two colours together with a given ratio (0.0 - 1.0).';

		// Loop Blocks.
		/// url - Describes 'repeat loops' in computer programs; consider using the translation of the page [https://en.wikipedia.org/wiki/Control_flow http://en.wikipedia.org/wiki/Control_flow].
		Blockly.Msg.CONTROLS_REPEAT_HELPURL = 'https://en.wikipedia.org/wiki/For_loop';
		/// block input text - Title of [https://github.com/google/blockly/wiki/Loops#repeat repeat block].\n\nParameters:\n* %1 - the number of times the body of the loop should be repeated.
		Blockly.Msg.CONTROLS_REPEAT_TITLE = 'repeat %1 times';
		/// block text - Preceding the blocks in the body of the loop.  See [https://github.com/google/blockly/wiki/Loops https://github.com/google/blockly/wiki/Loops].\n{{Identical|Do}}
		Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = 'do';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#repeat https://github.com/google/blockly/wiki/Loops#repeat].
		Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = 'Do some statements several times.';
		/// url - Describes 'while loops' in computer programs; consider using the translation of [https://en.wikipedia.org/wiki/While_loop https://en.wikipedia.org/wiki/While_loop], if present, or [https://en.wikipedia.org/wiki/Control_flow https://en.wikipedia.org/wiki/Control_flow].
		Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = 'https://github.com/google/blockly/wiki/Loops#repeat';
		Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
		/// dropdown - Specifies that a loop should [https://github.com/google/blockly/wiki/Loops#repeat-while repeat while] the following condition is true.
		Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = 'repeat while';
		/// dropdown - Specifies that a loop should [https://github.com/google/blockly/wiki/Loops#repeat-until repeat until] the following condition becomes true.
		Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = 'repeat until';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#repeat-while Loops#repeat-while https://github.com/google/blockly/wiki/Loops#repeat-while Loops#repeat-while].
		Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = 'While a value is true, then do some statements.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#repeat-until https://github.com/google/blockly/wiki/Loops#repeat-until].
		Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = 'While a value is false, then do some statements.';

		/// url - Describes 'for loops' in computer programs.  Consider using your language's translation of [https://en.wikipedia.org/wiki/For_loop https://en.wikipedia.org/wiki/For_loop], if present.
		Blockly.Msg.CONTROLS_FOR_HELPURL = 'https://github.com/google/blockly/wiki/Loops#count-with';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#count-with https://github.com/google/blockly/wiki/Loops#count-with].\n\nParameters:\n* %1 - the name of the loop variable.
		Blockly.Msg.CONTROLS_FOR_TOOLTIP = 'Have the variable "%1" take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.';
		/// block text - Repeatedly counts a variable (%1)
		/// starting with a (usually lower) number in a range (%2),
		/// ending with a (usually higher) number in a range (%3), and counting the
		/// iterations by a number of steps (%4).  As in
		/// [https://github.com/google/blockly/wiki/Loops#count-with
		/// https://github.com/google/blockly/wiki/Loops#count-with].
		/// [[File:Blockly-count-with.png]]
		Blockly.Msg.CONTROLS_FOR_TITLE = 'count with %1 from %2 to %3 by %4';
		Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;

		/// url - Describes 'for-each loops' in computer programs.  Consider using your language's translation of [https://en.wikipedia.org/wiki/Foreach https://en.wikipedia.org/wiki/Foreach] if present.
		Blockly.Msg.CONTROLS_FOREACH_HELPURL = 'https://github.com/google/blockly/wiki/Loops#for-each';
		/// block text - Title of [https://github.com/google/blockly/wiki/Loops#for-each for each block].
		/// Sequentially assigns every item in array %2 to the valiable %1.
		Blockly.Msg.CONTROLS_FOREACH_TITLE = 'for each item %1 in list %2';
		Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
		/// block text - Description of [https://github.com/google/blockly/wiki/Loops#for-each for each blocks].\n\nParameters:\n* %1 - the name of the loop variable.
		Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = 'For each item in a list, set the variable "%1" to the item, and then do some statements.';

		/// url - Describes control flow in computer programs.  Consider using your language's translation of [https://en.wikipedia.org/wiki/Control_flow https://en.wikipedia.org/wiki/Control_flow], if it exists.
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = 'https://github.com/google/blockly/wiki/Loops#loop-termination-blocks';
		/// dropdown - The current loop should be exited.  See [https://github.com/google/blockly/wiki/Loops#break https://github.com/google/blockly/wiki/Loops#break].
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = 'break out of loop';
		/// dropdown - The current iteration of the loop should be ended and the next should begin.  See [https://github.com/google/blockly/wiki/Loops#continue-with-next-iteration https://github.com/google/blockly/wiki/Loops#continue-with-next-iteration].
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = 'continue with next iteration of loop';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#break-out-of-loop https://github.com/google/blockly/wiki/Loops#break-out-of-loop].
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = 'Break out of the containing loop.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Loops#continue-with-next-iteration https://github.com/google/blockly/wiki/Loops#continue-with-next-iteration].
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = 'Skip the rest of this loop, and continue with the next iteration.';
		/// warning - The user has tried placing a block outside of a loop (for each, while, repeat, etc.), but this type of block may only be used within a loop.  See [https://github.com/google/blockly/wiki/Loops#loop-termination-blocks https://github.com/google/blockly/wiki/Loops#loop-termination-blocks].
		Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = 'Warning: This block may only be used within a loop.';

		// Logic Blocks.
		/// url - Describes conditional statements (if-then-else) in computer programs.  Consider using your language's translation of [https://en.wikipedia.org/wiki/If_else https://en.wikipedia.org/wiki/If_else], if present.
		Blockly.Msg.CONTROLS_IF_HELPURL = 'https://github.com/google/blockly/wiki/IfElse';
		/// tooltip - Describes [https://github.com/google/blockly/wiki/IfElse#if-blocks 'if' blocks].  Consider using your language's translation of [https://en.wikipedia.org/wiki/If_statement https://en.wikipedia.org/wiki/If_statement], if present.
		Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = 'If a value is true, then do some statements.';
		/// tooltip - Describes [https://github.com/google/blockly/wiki/IfElse#if-else-blocks if-else blocks].  Consider using your language's translation of [https://en.wikipedia.org/wiki/If_statement https://en.wikipedia.org/wiki/If_statement], if present.
		Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = 'If a value is true, then do the first block of statements. Otherwise, do the second block of statements.';
		/// tooltip - Describes [https://github.com/google/blockly/wiki/IfElse#if-else-if-blocks if-else-if blocks].  Consider using your language's translation of [https://en.wikipedia.org/wiki/If_statement https://en.wikipedia.org/wiki/If_statement], if present.
		Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = 'If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.';
		/// tooltip - Describes [https://github.com/google/blockly/wiki/IfElse#if-else-if-else-blocks if-else-if-else blocks].  Consider using your language's translation of [https://en.wikipedia.org/wiki/If_statement https://en.wikipedia.org/wiki/If_statement], if present.
		Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = 'If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.';
		/// block text - See [https://github.com/google/blockly/wiki/IfElse https://github.com/google/blockly/wiki/IfElse].
		/// It is recommended, but not essential, that this have text in common with the translation of 'else if'
		Blockly.Msg.CONTROLS_IF_MSG_IF = 'if';
		/// block text - See [https://github.com/google/blockly/wiki/IfElse https://github.com/google/blockly/wiki/IfElse].  The English words "otherwise if" would probably be clearer than "else if", but the latter is used because it is traditional and shorter.
		Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = 'else if';
		/// block text - See [https://github.com/google/blockly/wiki/IfElse https://github.com/google/blockly/wiki/IfElse].  The English word "otherwise" would probably be superior to "else", but the latter is used because it is traditional and shorter.
		Blockly.Msg.CONTROLS_IF_MSG_ELSE = 'else';
		Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
		Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
		/// tooltip - Describes [https://github.com/google/blockly/wiki/IfElse#block-modification if block modification].
		Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = 'Add, remove, or reorder sections to reconfigure this if block.';
		Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
		/// tooltip - Describes the 'else if' subblock during [https://github.com/google/blockly/wiki/IfElse#block-modification if block modification].
		Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = 'Add a condition to the if block.';
		Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
		/// tooltip - Describes the 'else' subblock during [https://github.com/google/blockly/wiki/IfElse#block-modification if block modification].
		Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = 'Add a final, catch-all condition to the if block.';

		/// url - Information about comparisons.
		Blockly.Msg.LOGIC_COMPARE_HELPURL = 'https://en.wikipedia.org/wiki/Inequality_(mathematics)';
		/// tooltip - Describes the equals (=) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = 'Return true if both inputs equal each other.';
		/// tooltip - Describes the not equals (≠) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = 'Return true if both inputs are not equal to each other.';
		/// tooltip - Describes the less than (<) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = 'Return true if the first input is smaller than the second input.';
		/// tooltip - Describes the less than or equals (≤) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = 'Return true if the first input is smaller than or equal to the second input.';
		/// tooltip - Describes the greater than (>) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = 'Return true if the first input is greater than the second input.';
		/// tooltip - Describes the greater than or equals (≥) block.
		Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = 'Return true if the first input is greater than or equal to the second input.';

		/// url - Information about the Boolean conjunction ("and") and disjunction ("or") operators.  Consider using the translation of [https://en.wikipedia.org/wiki/Boolean_logic https://en.wikipedia.org/wiki/Boolean_logic], if it exists in your language.
		Blockly.Msg.LOGIC_OPERATION_HELPURL = 'https://github.com/google/blockly/wiki/Logic#logical-operations';
		/// tooltip - See [https://en.wikipedia.org/wiki/Logical_conjunction https://en.wikipedia.org/wiki/Logical_conjunction].
		Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = 'Return true if both inputs are true.';
		/// block text - See [https://en.wikipedia.org/wiki/Logical_conjunction https://en.wikipedia.org/wiki/Logical_conjunction].\n{{Identical|And}}
		Blockly.Msg.LOGIC_OPERATION_AND = 'and';
		/// block text - See [https://en.wikipedia.org/wiki/Disjunction https://en.wikipedia.org/wiki/Disjunction].
		Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = 'Return true if at least one of the inputs is true.';
		/// block text - See [https://en.wikipedia.org/wiki/Disjunction https://en.wikipedia.org/wiki/Disjunction].\n{{Identical|Or}}
		Blockly.Msg.LOGIC_OPERATION_OR = 'or';

		/// url - Information about logical negation.  The translation of [https://en.wikipedia.org/wiki/Logical_negation https://en.wikipedia.org/wiki/Logical_negation] is recommended if it exists in the target language.
		Blockly.Msg.LOGIC_NEGATE_HELPURL = 'https://github.com/google/blockly/wiki/Logic#not';
		/// block text - This is a unary operator that returns ''false'' when the input is ''true'', and ''true'' when the input is ''false''.
		/// \n\nParameters:\n* %1 - the input (which should be either the value "true" or "false")
		Blockly.Msg.LOGIC_NEGATE_TITLE = 'not %1';
		/// tooltip - See [https://en.wikipedia.org/wiki/Logical_negation https://en.wikipedia.org/wiki/Logical_negation].
		Blockly.Msg.LOGIC_NEGATE_TOOLTIP = 'Returns true if the input is false. Returns false if the input is true.';

		/// url - Information about the logic values ''true'' and ''false''.  Consider using the translation of [https://en.wikipedia.org/wiki/Truth_value https://en.wikipedia.org/wiki/Truth_value] if it exists in your language.
		Blockly.Msg.LOGIC_BOOLEAN_HELPURL = 'https://github.com/google/blockly/wiki/Logic#values';
		/// block text - The word for the [https://en.wikipedia.org/wiki/Truth_value logical value] ''true''.\n{{Identical|True}}
		Blockly.Msg.LOGIC_BOOLEAN_TRUE = 'true';
		/// block text - The word for the [https://en.wikipedia.org/wiki/Truth_value logical value] ''false''.\n{{Identical|False}}
		Blockly.Msg.LOGIC_BOOLEAN_FALSE = 'false';
		/// tooltip - Indicates that the block returns either of the two possible [https://en.wikipedia.org/wiki/Truth_value logical values].
		Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = 'Returns either true or false.';

		/// url - Provide a link to the translation of [https://en.wikipedia.org/wiki/Nullable_type https://en.wikipedia.org/wiki/Nullable_type], if it exists in your language; otherwise, do not worry about translating this advanced concept.
		Blockly.Msg.LOGIC_NULL_HELPURL = 'https://en.wikipedia.org/wiki/Nullable_type';
		/// block text - In computer languages, ''null'' is a special value that indicates that no value has been set.  You may use your language's word for "nothing" or "invalid".\n{{Identical|Null}}
		Blockly.Msg.LOGIC_NULL = 'null';
		/// tooltip - This should use the word from the previous message.
		Blockly.Msg.LOGIC_NULL_TOOLTIP = 'Returns null.';

		/// url - Describes the programming language operator known as the ''ternary'' or ''conditional'' operator.  It is recommended that you use the translation of [https://en.wikipedia.org/wiki/%3F: https://en.wikipedia.org/wiki/%3F:] if it exists.
		Blockly.Msg.LOGIC_TERNARY_HELPURL = 'https://en.wikipedia.org/wiki/%3F:';
		/// block input text - Label for the input whose value determines which of the other two inputs is returned.  In some programming languages, this is called a ''''predicate''''.
		Blockly.Msg.LOGIC_TERNARY_CONDITION = 'test';
		/// block input text - Indicates that the following input should be returned (used as output) if the test input is true.  Remember to try to keep block text terse (short).
		Blockly.Msg.LOGIC_TERNARY_IF_TRUE = 'if true';
		/// block input text - Indicates that the following input should be returned (used as output) if the test input is false.
		Blockly.Msg.LOGIC_TERNARY_IF_FALSE = 'if false';
		/// tooltip - See [https://en.wikipedia.org/wiki/%3F: https://en.wikipedia.org/wiki/%3F:].
		Blockly.Msg.LOGIC_TERNARY_TOOLTIP = 'Check the condition in "test". If the condition is true, returns the "if true" value; otherwise returns the "if false" value.';

		// Math Blocks.
		/// url - Information about (real) numbers.
		Blockly.Msg.MATH_NUMBER_HELPURL = 'https://en.wikipedia.org/wiki/Number';
		/// tooltip - Any positive or negative number, not necessarily an integer.
		Blockly.Msg.MATH_NUMBER_TOOLTIP = 'A number.';

		/// {{optional}}\nmath - The symbol for the binary operation addition.
		Blockly.Msg.MATH_ADDITION_SYMBOL = '+';
		/// {{optional}}\nmath - The symbol for the binary operation indicating that the right operand should be
		/// subtracted from the left operand.
		Blockly.Msg.MATH_SUBTRACTION_SYMBOL = '-';
		/// {{optional}}\nmath - The binary operation indicating that the left operand should be divided by
		/// the right operand.
		Blockly.Msg.MATH_DIVISION_SYMBOL = '÷';
		/// {{optional}}\nmath - The symbol for the binary operation multiplication.
		Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = '×';
		/// {{optional}}\nmath - The symbol for the binary operation exponentiation.  Specifically, if the
		/// value of the left operand is L and the value of the right operand (the exponent) is
		/// R, multiply L by itself R times.  (Fractional and negative exponents are also legal.)
		Blockly.Msg.MATH_POWER_SYMBOL = '^';

		/// math - The short name of the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent sine].
		Blockly.Msg.MATH_TRIG_SIN = 'sin';
		/// math - The short name of the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent cosine].
		Blockly.Msg.MATH_TRIG_COS = 'cos';
		/// math - The short name of the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent tangent].
		Blockly.Msg.MATH_TRIG_TAN = 'tan';
		/// math - The short name of the ''inverse of'' the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent sine].
		Blockly.Msg.MATH_TRIG_ASIN = 'asin';
		/// math - The short name of the ''inverse of'' the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent cosine].
		Blockly.Msg.MATH_TRIG_ACOS = 'acos';
		/// math - The short name of the ''inverse of'' the trigonometric function
		/// [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent tangent].
		Blockly.Msg.MATH_TRIG_ATAN = 'atan';

		/// url - Information about addition, subtraction, multiplication, division, and exponentiation.
		Blockly.Msg.MATH_ARITHMETIC_HELPURL = 'https://en.wikipedia.org/wiki/Arithmetic';
		/// tooltip - See [https://en.wikipedia.org/wiki/Addition https://en.wikipedia.org/wiki/Addition].
		Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = 'Return the sum of the two numbers.';
		/// tooltip - See [https://en.wikipedia.org/wiki/Subtraction https://en.wikipedia.org/wiki/Subtraction].
		Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = 'Return the difference of the two numbers.';
		/// tooltip - See [https://en.wikipedia.org/wiki/Multiplication https://en.wikipedia.org/wiki/Multiplication].
		Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = 'Return the product of the two numbers.';
		/// tooltip - See [https://en.wikipedia.org/wiki/Division_(mathematics) https://en.wikipedia.org/wiki/Division_(mathematics)].
		Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = 'Return the quotient of the two numbers.';
		/// tooltip - See [https://en.wikipedia.org/wiki/Exponentiation https://en.wikipedia.org/wiki/Exponentiation].
		Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = 'Return the first number raised to the power of the second number.';

		/// url - Information about the square root operation.
		Blockly.Msg.MATH_SINGLE_HELPURL = 'https://en.wikipedia.org/wiki/Square_root';
		/// dropdown - This computes the positive [https://en.wikipedia.org/wiki/Square_root square root] of its input.  For example, the square root of 16 is 4.
		Blockly.Msg.MATH_SINGLE_OP_ROOT = 'square root';
		/// tooltip - Please use the same term as in the previous message.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = 'Return the square root of a number.';
		/// dropdown - This leaves positive numeric inputs changed and inverts negative inputs.  For example, the absolute value of 5 is 5; the absolute value of -5 is also 5.  For more information, see [https://en.wikipedia.org/wiki/Absolute_value https://en.wikipedia.org/wiki/Absolute_value].
		Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = 'absolute';
		/// tooltip - Please use the same term as in the previous message.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = 'Return the absolute value of a number.';

		/// tooltip - Calculates '''0-n''', where '''n''' is the single numeric input.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = 'Return the negation of a number.';
		/// tooltip - Calculates the [https://en.wikipedia.org/wiki/Natural_logarithm|natural logarithm] of its single numeric input.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = 'Return the natural logarithm of a number.';
		/// tooltip - Calculates the [https://en.wikipedia.org/wiki/Common_logarithm common logarithm] of its single numeric input.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = 'Return the base 10 logarithm of a number.';
		/// tooltip - Multiplies [https://en.wikipedia.org/wiki/E_%28mathematical_constant%29 e] by itself n times, where n is the single numeric input.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = 'Return e to the power of a number.';
		/// tooltip - Multiplies 10 by itself n times, where n is the single numeric input.
		Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = 'Return 10 to the power of a number.';

		/// url - Information about the trigonometric functions sine, cosine, tangent, and their inverses (ideally using degrees, not radians).
		Blockly.Msg.MATH_TRIG_HELPURL = 'https://en.wikipedia.org/wiki/Trigonometric_functions';
		/// tooltip - Return the [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent sine] of an [https://en.wikipedia.org/wiki/Degree_(angle) angle in degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = 'Return the sine of a degree (not radian).';
		/// tooltip - Return the [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent cosine] of an [https://en.wikipedia.org/wiki/Degree_(angle) angle in degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_COS = 'Return the cosine of a degree (not radian).';
		/// tooltip - Return the [https://en.wikipedia.org/wiki/Trigonometric_functions#Sine.2C_cosine_and_tangent tangent] of an [https://en.wikipedia.org/wiki/Degree_(angle) angle in degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = 'Return the tangent of a degree (not radian).';
		/// tooltip - The [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions inverse] of the [https://en.wikipedia.org/wiki/Cosine#Sine.2C_cosine_and_tangent sine function], using [https://en.wikipedia.org/wiki/Degree_(angle) degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = 'Return the arcsine of a number.';
		/// tooltip - The [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions inverse] of the [https://en.wikipedia.org/wiki/Cosine#Sine.2C_cosine_and_tangent cosine] function, using [https://en.wikipedia.org/wiki/Degree_(angle) degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = 'Return the arccosine of a number.';
		/// tooltip - The [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions inverse] of the [https://en.wikipedia.org/wiki/Cosine#Sine.2C_cosine_and_tangent tangent] function, using [https://en.wikipedia.org/wiki/Degree_(angle) degrees], not radians.
		Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = 'Return the arctangent of a number.';

		/// url - Information about the mathematical constants Pi (π), e, the golden ratio (φ), √ 2, √ 1/2, and infinity (∞).
		Blockly.Msg.MATH_CONSTANT_HELPURL = 'https://en.wikipedia.org/wiki/Mathematical_constant';
		/// tooltip - Provides the specified [https://en.wikipedia.org/wiki/Mathematical_constant mathematical constant].
		Blockly.Msg.MATH_CONSTANT_TOOLTIP = 'Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).';
		/// dropdown - A number is '''even''' if it is a multiple of 2.  For example, 4 is even (yielding true), but 3 is not (false).
		Blockly.Msg.MATH_IS_EVEN = 'is even';
		/// dropdown - A number is '''odd''' if it is not a multiple of 2.  For example, 3 is odd (yielding true), but 4 is not (false).  The opposite of "odd" is "even".
		Blockly.Msg.MATH_IS_ODD = 'is odd';
		/// dropdown - A number is [https://en.wikipedia.org/wiki/Prime prime] if it cannot be evenly divided by any positive integers except for 1 and itself.  For example, 5 is prime, but 6 is not because 2 × 3 = 6.
		Blockly.Msg.MATH_IS_PRIME = 'is prime';
		/// dropdown - A number is '''whole''' if it is an [https://en.wikipedia.org/wiki/Integer integer].  For example, 5 is whole, but 5.1 is not.
		Blockly.Msg.MATH_IS_WHOLE = 'is whole';
		/// dropdown - A number is '''positive''' if it is greater than 0.  (0 is neither negative nor positive.)
		Blockly.Msg.MATH_IS_POSITIVE = 'is positive';
		/// dropdown - A number is '''negative''' if it is less than 0.  (0 is neither negative nor positive.)
		Blockly.Msg.MATH_IS_NEGATIVE = 'is negative';
		/// dropdown - A number x is divisible by y if y goes into x evenly.  For example, 10 is divisible by 5, but 10 is not divisible by 3.
		Blockly.Msg.MATH_IS_DIVISIBLE_BY = 'is divisible by';
		/// tooltip - This block lets the user specify via a dropdown menu whether to check if the numeric input is even, odd, prime, whole, positive, negative, or divisible by a given value.
		Blockly.Msg.MATH_IS_TOOLTIP = 'Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.';

		/// url - Information about incrementing (increasing the value of) a variable.
		/// For other languages, just use the translation of the Wikipedia page about
		/// addition ([https://en.wikipedia.org/wiki/Addition https://en.wikipedia.org/wiki/Addition]).
		Blockly.Msg.MATH_CHANGE_HELPURL = 'https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter';
		/// - As in: ''change'' [the value of variable] ''item'' ''by'' 1 (e.g., if the variable named 'item' had the value 5, change it to 6).
		/// %1 is a variable name.
		/// %2 is the amount of change.
		Blockly.Msg.MATH_CHANGE_TITLE = 'change %1 by %2';
		Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
		/// tooltip - This updates the value of the variable by adding to it the following numeric input.\n\nParameters:\n* %1 - the name of the variable whose value should be increased.
		Blockly.Msg.MATH_CHANGE_TOOLTIP = 'Add a number to variable "%1".';

		/// url - Information about how numbers are rounded to the nearest integer
		Blockly.Msg.MATH_ROUND_HELPURL = 'https://en.wikipedia.org/wiki/Rounding';
		/// tooltip - See [https://en.wikipedia.org/wiki/Rounding https://en.wikipedia.org/wiki/Rounding].
		Blockly.Msg.MATH_ROUND_TOOLTIP = 'Round a number up or down.';
		/// dropdown - This rounds its input to the nearest whole number.  For example, 3.4 is rounded to 3.
		Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = 'round';
		/// dropdown - This rounds its input up to the nearest whole number.  For example, if the input was 2.2, the result would be 3.
		Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = 'round up';
		/// dropdown - This rounds its input down to the nearest whole number.  For example, if the input was 3.8, the result would be 3.
		Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = 'round down';

		/// url - Information about applying a function to a list of numbers.  (We were unable to find such information in English.  Feel free to skip this and any other URLs that are difficult.)
		Blockly.Msg.MATH_ONLIST_HELPURL = '';
		/// dropdown - This computes the sum of the numeric elements in the list.  For example, the sum of the list {1, 4} is 5.
		Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = 'sum of list';
		/// tooltip - Please use the same term for "sum" as in the previous message.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = 'Return the sum of all the numbers in the list.';
		/// dropdown - This finds the smallest (minimum) number in a list.  For example, the smallest number in the list [-5, 0, 3] is -5.
		Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = 'min of list';
		/// tooltip - Please use the same term for "min" or "minimum" as in the previous message.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = 'Return the smallest number in the list.';
		/// dropdown - This finds the largest (maximum) number in a list.  For example, the largest number in the list [-5, 0, 3] is 3.
		Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = 'max of list';
		/// tooltip
		Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = 'Return the largest number in the list.';
		/// dropdown - This adds up all of the numbers in a list and divides the sum by the number of elements in the list.  For example, the [https://en.wikipedia.org/wiki/Arithmetic_mean average] of the list [1, 2, 3, 4] is 2.5 (10/4).
		Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = 'average of list';
		/// tooltip - See [https://en.wikipedia.org/wiki/Arithmetic_mean https://en.wikipedia.org/wiki/Arithmetic_mean] for more informatin.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = 'Return the average (arithmetic mean) of the numeric values in the list.';
		/// dropdown - This finds the [https://en.wikipedia.org/wiki/Median median] of the numeric values in a list.  For example, the median of the list {1, 2, 7, 12, 13} is 7.
		Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = 'median of list';
		/// tooltip - See [https://en.wikipedia.org/wiki/Median median https://en.wikipedia.org/wiki/Median median] for more information.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = 'Return the median number in the list.';
		/// dropdown - This finds the most common numbers ([https://en.wikipedia.org/wiki/Mode_(statistics) modes]) in a list.  For example, the modes of the list {1, 3, 9, 3, 9}  are {3, 9}.
		Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = 'modes of list';
		/// tooltip - See [https://en.wikipedia.org/wiki/Mode_(statistics) https://en.wikipedia.org/wiki/Mode_(statistics)] for more information.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = 'Return a list of the most common item(s) in the list.';
		/// dropdown - This finds the [https://en.wikipedia.org/wiki/Standard_deviation standard deviation] of the numeric values in a list.
		Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = 'standard deviation of list';
		/// tooltip - See [https://en.wikipedia.org/wiki/Standard_deviation https://en.wikipedia.org/wiki/Standard_deviation] for more information.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = 'Return the standard deviation of the list.';
		/// dropdown - This choose an element at random from a list.  Each element is chosen with equal probability.
		Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = 'random item of list';
		/// tooltip - Please use same term for 'random' as in previous entry.
		Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = 'Return a random element from the list.';

		/// url - information about the modulo (remainder) operation.
		Blockly.Msg.MATH_MODULO_HELPURL = 'https://en.wikipedia.org/wiki/Modulo_operation';
		/// block text - Title of block providing the remainder when dividing the first numerical input by the second.  For example, the remainder of 10 divided by 3 is 1.\n\nParameters:\n* %1 - the dividend (10, in our example)\n* %2 - the divisor (3 in our example).
		Blockly.Msg.MATH_MODULO_TITLE = 'remainder of %1 ÷ %2';
		/// tooltip - For example, the remainder of 10 divided by 3 is 1.
		Blockly.Msg.MATH_MODULO_TOOLTIP = 'Return the remainder from dividing the two numbers.';

		/// url - Information about constraining a numeric value to be in a specific range.  (The English URL is not ideal.  Recall that translating URLs is the lowest priority.)
		Blockly.Msg.MATH_CONSTRAIN_HELPURL = 'https://en.wikipedia.org/wiki/Clamping_%28graphics%29';
		/// block text - The title of the block that '''constrain'''s (forces) a number to be in a given range.
		///For example, if the number 150 is constrained to be between 5 and 100, the result will be 100.
		///\n\nParameters:\n* %1 - the value to constrain (e.g., 150)\n* %2 - the minimum value (e.g., 5)\n* %3 - the maximum value (e.g., 100).
		Blockly.Msg.MATH_CONSTRAIN_TITLE = 'constrain %1 low %2 high %3';
		/// tooltip - This compares a number ''x'' to a low value ''L'' and a high value ''H''.  If ''x'' is less then ''L'', the result is ''L''.  If ''x'' is greater than ''H'', the result is ''H''.  Otherwise, the result is ''x''.
		Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = 'Constrain a number to be between the specified limits (inclusive).';

		/// url - Information about how computers generate random numbers.
		Blockly.Msg.MATH_RANDOM_INT_HELPURL = 'https://en.wikipedia.org/wiki/Random_number_generation';
		/// block text - The title of the block that generates a random integer (whole number) in the specified range.  For example, if the range is from 5 to 7, this returns 5, 6, or 7 with equal likelihood. %1 is a placeholder for the lower number, %2 is the placeholder for the larger number.
		Blockly.Msg.MATH_RANDOM_INT_TITLE = 'random integer from %1 to %2';
		/// tooltip - Return a random integer between two values specified as inputs.  For example, if one input was 7 and another 9, any of the numbers 7, 8, or 9 could be produced.
		Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = 'Return a random integer between the two specified limits, inclusive.';

		/// url - Information about how computers generate random numbers (specifically, numbers in the range from 0 to just below 1).
		Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = 'https://en.wikipedia.org/wiki/Random_number_generation';
		/// block text - The title of the block that generates a random number greater than or equal to 0 and less than 1.
		Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = 'random fraction';
		/// tooltip - Return a random fraction between 0 and 1.  The value may be equal to 0 but must be less than 1.
		Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = 'Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).';

		// Text Blocks.
		/// url - Information about how computers represent text (sometimes referred to as ''string''s).
		Blockly.Msg.TEXT_TEXT_HELPURL = 'https://en.wikipedia.org/wiki/String_(computer_science)';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text https://github.com/google/blockly/wiki/Text].
		Blockly.Msg.TEXT_TEXT_TOOLTIP = 'A letter, word, or line of text.';

		/// url - Information on concatenating/appending pieces of text.
		Blockly.Msg.TEXT_JOIN_HELPURL = 'https://github.com/google/blockly/wiki/Text#text-creation';
		/// block text - See [https://github.com/google/blockly/wiki/Text#text-creation https://github.com/google/blockly/wiki/Text#text-creation].
		Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = 'create text with';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#text-creation create text with] for more information.
		Blockly.Msg.TEXT_JOIN_TOOLTIP = 'Create a piece of text by joining together any number of items.';

		/// block text - This is shown when the programmer wants to change the number of pieces of text being joined together.  See [https://github.com/google/blockly/wiki/Text#text-creation https://github.com/google/blockly/wiki/Text#text-creation], specifically the last picture in the 'Text creation' section.\n{{Identical|Join}}
		Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = 'join';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#text-creation https://github.com/google/blockly/wiki/Text#text-creation], specifically the last picture in the 'Text creation' section.
		Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = 'Add, remove, or reorder sections to reconfigure this text block.';
		Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
		/// block text - See [https://github.com/google/blockly/wiki/Text#text-creation https://github.com/google/blockly/wiki/Text#text-creation], specifically the last picture in the 'Text creation' section.
		Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = 'Add an item to the text.';

		/// url - This and the other text-related URLs are going to be hard to translate.  As always, it is okay to leave untranslated or paste in the English-language URL.  For these URLs, you might also consider a general URL about how computers represent text (such as the translation of [https://en.wikipedia.org/wiki/String_(computer_science) this Wikipedia page]).
		Blockly.Msg.TEXT_APPEND_HELPURL = 'https://github.com/google/blockly/wiki/Text#text-modification';
		/// block input text - Message preceding the name of a variable to which text should be appended.
		/// [[File:blockly-append-text.png]]
		Blockly.Msg.TEXT_APPEND_TO = 'to';
		/// block input text - Message following the variable and preceding the piece of text that should
		/// be appended, as shown below.
		/// [[File:blockly-append-text.png]]
		Blockly.Msg.TEXT_APPEND_APPENDTEXT = 'append text';
		Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#text-modification https://github.com/google/blockly/wiki/Text#text-modification] for more information.\n\nParameters:\n* %1 - the name of the variable to which text should be appended
		Blockly.Msg.TEXT_APPEND_TOOLTIP = 'Append some text to variable "%1".';

		/// url - Information about text on computers (usually referred to as 'strings').
		Blockly.Msg.TEXT_LENGTH_HELPURL = 'https://github.com/google/blockly/wiki/Text#text-modification';
		/// block text - See [https://github.com/google/blockly/wiki/Text#text-length https://github.com/google/blockly/wiki/Text#text-length].
		/// \n\nParameters:\n* %1 - the piece of text to take the length of
		Blockly.Msg.TEXT_LENGTH_TITLE = 'length of %1';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#text-length https://github.com/google/blockly/wiki/Text#text-length].
		Blockly.Msg.TEXT_LENGTH_TOOLTIP = 'Returns the number of letters (including spaces) in the provided text.';

		/// url - Information about empty pieces of text on computers (usually referred to as 'empty strings').
		Blockly.Msg.TEXT_ISEMPTY_HELPURL = 'https://github.com/google/blockly/wiki/Text#checking-for-empty-text';
		/// block text - See [https://github.com/google/blockly/wiki/Text#checking-for-empty-text https://github.com/google/blockly/wiki/Text#checking-for-empty-text].
		/// \n\nParameters:\n* %1 - the piece of text to test for emptiness
		Blockly.Msg.TEXT_ISEMPTY_TITLE = '%1 is empty';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#checking-for-empty-text https://github.com/google/blockly/wiki/Text#checking-for-empty-text].
		Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = 'Returns true if the provided text is empty.';

		/// url - Information about finding a character in a piece of text.
		Blockly.Msg.TEXT_INDEXOF_HELPURL = 'https://github.com/google/blockly/wiki/Text#finding-text';
		/// tooltip - %1 will be replaced by either the number 0 or -1 depending on the indexing mode. See [https://github.com/google/blockly/wiki/Text#finding-text https://github.com/google/blockly/wiki/Text#finding-text].
		Blockly.Msg.TEXT_INDEXOF_TOOLTIP = 'Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.';
		/// block text - Title of blocks allowing users to find text.  See
		/// [https://github.com/google/blockly/wiki/Text#finding-text
		/// https://github.com/google/blockly/wiki/Text#finding-text].
		/// [[File:Blockly-find-text.png]].
		Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = 'in text';
		/// dropdown - See [https://github.com/google/blockly/wiki/Text#finding-text
		/// https://github.com/google/blockly/wiki/Text#finding-text].
		/// [[File:Blockly-find-text.png]].
		Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = 'find first occurrence of text';
		/// dropdown - See [https://github.com/google/blockly/wiki/Text#finding-text
		/// https://github.com/google/blockly/wiki/Text#finding-text].  This would
		/// replace "find first occurrence of text" below.  (For more information on
		/// how common text is factored out of dropdown menus, see
		/// [https://translatewiki.net/wiki/Translating:Blockly#Drop-Down_Menus
		/// https://translatewiki.net/wiki/Translating:Blockly#Drop-Down_Menus)].)
		/// [[File:Blockly-find-text.png]].
		Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = 'find last occurrence of text';
		/// block text - Optional text to follow the rightmost block in a
		/// [https://github.com/google/blockly/wiki/Text#finding-text
		/// https://github.com/google/blockly/wiki/Text#finding-text in text ... find block]
		/// (after the "a" in the below picture).  This will be the empty string in most languages.
		/// [[File:Blockly-find-text.png]].
		Blockly.Msg.TEXT_INDEXOF_TAIL = '';

		/// url - Information about extracting characters (letters, number, symbols, etc.) from text.
		Blockly.Msg.TEXT_CHARAT_HELPURL = 'https://github.com/google/blockly/wiki/Text#extracting-text';
		/// block text - Appears before the piece of text from which a letter (or number,
		/// punctuation character, etc.) should be extracted, as shown below.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = 'in text';
		/// dropdown - Indicates that the letter (or number, punctuation character, etc.) with the
		/// specified index should be obtained from the preceding piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_FROM_START = 'get letter #';
		/// block text - Indicates that the letter (or number, punctuation character, etc.) with the
		/// specified index from the end of a given piece of text should be obtained. See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_FROM_END = 'get letter # from end';
		/// block text - Indicates that the first letter of the following piece of text should be
		/// retrieved.  See [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_FIRST = 'get first letter';
		/// block text - Indicates that the last letter (or number, punctuation mark, etc.) of the
		/// following piece of text should be retrieved.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_LAST = 'get last letter';
		/// block text - Indicates that any letter (or number, punctuation mark, etc.) in the
		/// following piece of text should be randomly selected.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_RANDOM = 'get random letter';
		/// block text - Text that goes after the rightmost block/dropdown when getting a single letter from
		/// a piece of text, as in [https://blockly-demo.appspot.com/static/apps/code/index.html#3m23km these
		/// blocks] or shown below.  For most languages, this will be blank.
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_TAIL = '';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#extracting-a-single-character
		/// https://github.com/google/blockly/wiki/Text#extracting-a-single-character].
		/// [[File:Blockly-text-get.png]]
		Blockly.Msg.TEXT_CHARAT_TOOLTIP = 'Returns the letter at the specified position.';

		/// See [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = 'Returns a specified portion of the text.';
		/// url - Information about extracting characters from text.  Reminder: urls are the
		/// lowest priority translations.  Feel free to skip.
		Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = 'https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text';
		/// block text - Precedes a piece of text from which a portion should be extracted.
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = 'in text';
		/// dropdown - Indicates that the following number specifies the position (relative to the start
		/// position) of the beginning of the region of text that should be obtained from the preceding
		/// piece of text.  See [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = 'get substring from letter #';
		/// dropdown - Indicates that the following number specifies the position (relative to the end
		/// position) of the beginning of the region of text that should be obtained from the preceding
		/// piece of text.  See [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// Note: If {{msg-Blockly|ORDINAL_NUMBER_SUFFIX}} is defined, it will
		/// automatically appear ''after'' this and any other
		/// [https://translatewiki.net/wiki/Translating:Blockly#Ordinal_numbers ordinal numbers]
		/// on this block.
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = 'get substring from letter # from end';
		/// block text - Indicates that a region starting with the first letter of the preceding piece
		/// of text should be extracted.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = 'get substring from first letter';
		/// dropdown - Indicates that the following number specifies the position (relative to
		/// the start position) of the end of the region of text that should be obtained from the
		/// preceding piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = 'to letter #';
		/// dropdown - Indicates that the following number specifies the position (relative to the
		/// end position) of the end of the region of text that should be obtained from the preceding
		/// piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = 'to letter # from end';
		/// block text - Indicates that a region ending with the last letter of the preceding piece
		/// of text should be extracted.  See
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text].
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = 'to last letter';
		/// block text - Text that should go after the rightmost block/dropdown when
		/// [https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text
		/// extracting a region of text].  In most languages, this will be the empty string.
		/// [[File:Blockly-get-substring.png]]
		Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = '';

		/// url - Information about the case of letters (upper-case and lower-case).
		Blockly.Msg.TEXT_CHANGECASE_HELPURL = 'https://github.com/google/blockly/wiki/Text#adjusting-text-case';
		/// tooltip - Describes a block to adjust the case of letters.  For more information on this block,
		/// see [https://github.com/google/blockly/wiki/Text#adjusting-text-case
		/// https://github.com/google/blockly/wiki/Text#adjusting-text-case].
		Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = 'Return a copy of the text in a different case.';
		/// block text - Indicates that all of the letters in the following piece of text should be
		/// capitalized.  If your language does not use case, you may indicate that this is not
		/// applicable to your language.  For more information on this block, see
		/// [https://github.com/google/blockly/wiki/Text#adjusting-text-case
		/// https://github.com/google/blockly/wiki/Text#adjusting-text-case].
		Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = 'to UPPER CASE';
		/// block text - Indicates that all of the letters in the following piece of text should be converted to lower-case.  If your language does not use case, you may indicate that this is not applicable to your language.  For more information on this block, see [https://github.com/google/blockly/wiki/Text#adjusting-text-case https://github.com/google/blockly/wiki/Text#adjusting-text-case].
		Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = 'to lower case';
		/// block text - Indicates that the first letter of each of the following words should be capitalized and the rest converted to lower-case.  If your language does not use case, you may indicate that this is not applicable to your language.  For more information on this block, see [https://github.com/google/blockly/wiki/Text#adjusting-text-case https://github.com/google/blockly/wiki/Text#adjusting-text-case].
		Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = 'to Title Case';

		/// url - Information about trimming (removing) text off the beginning and ends of pieces of text.
		Blockly.Msg.TEXT_TRIM_HELPURL = 'https://github.com/google/blockly/wiki/Text#trimming-removing-spaces';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#trimming-removing-spaces
		/// https://github.com/google/blockly/wiki/Text#trimming-removing-spaces].
		Blockly.Msg.TEXT_TRIM_TOOLTIP = 'Return a copy of the text with spaces removed from one or both ends.';
		/// dropdown - Removes spaces from the beginning and end of a piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#trimming-removing-spaces
		/// https://github.com/google/blockly/wiki/Text#trimming-removing-spaces].  Note that neither
		/// this nor the other options modify the original piece of text (that follows);
		/// the block just returns a version of the text without the specified spaces.
		Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = 'trim spaces from both sides of';
		/// dropdown - Removes spaces from the beginning of a piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#trimming-removing-spaces
		/// https://github.com/google/blockly/wiki/Text#trimming-removing-spaces].
		/// Note that in right-to-left scripts, this will remove spaces from the right side.
		Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = 'trim spaces from left side of';
		/// dropdown - Removes spaces from the end of a piece of text.  See
		/// [https://github.com/google/blockly/wiki/Text#trimming-removing-spaces
		/// https://github.com/google/blockly/wiki/Text#trimming-removing-spaces].
		/// Note that in right-to-left scripts, this will remove spaces from the left side.
		Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = 'trim spaces from right side of';

		/// url - Information about displaying text on computers.
		Blockly.Msg.TEXT_PRINT_HELPURL = 'https://github.com/google/blockly/wiki/Text#printing-text';
		/// block text - Display the input on the screen.  See
		/// [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		/// \n\nParameters:\n* %1 - the value to print
		Blockly.Msg.TEXT_PRINT_TITLE = 'print %1';
		/// tooltip - See [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		Blockly.Msg.TEXT_PRINT_TOOLTIP = 'Print the specified text, number or other value.';
		/// url - Information about getting text from users.
		Blockly.Msg.TEXT_PROMPT_HELPURL = 'https://github.com/google/blockly/wiki/Text#getting-input-from-the-user';
		/// dropdown - Specifies that a piece of text should be requested from the user with
		/// the following message.  See [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = 'prompt for text with message';
		/// dropdown - Specifies that a number should be requested from the user with the
		/// following message.  See [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = 'prompt for number with message';
		/// dropdown - Precedes the message with which the user should be prompted for
		/// a number.  See [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = 'Prompt for user for a number.';
		/// dropdown - Precedes the message with which the user should be prompted for some text.
		/// See [https://github.com/google/blockly/wiki/Text#printing-text
		/// https://github.com/google/blockly/wiki/Text#printing-text].
		Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = 'Prompt for user for some text.';

		// Lists Blocks.
		/// url - Information on empty lists.
		Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = 'https://github.com/google/blockly/wiki/Lists#create-empty-list';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#create-empty-list https://github.com/google/blockly/wiki/Lists#create-empty-list].
		Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = 'create empty list';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#create-empty-list https://github.com/google/blockly/wiki/Lists#create-empty-list].
		Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = 'Returns a list, of length 0, containing no data records';

		/// url - Information on building lists.
		Blockly.Msg.LISTS_CREATE_WITH_HELPURL = 'https://github.com/google/blockly/wiki/Lists#create-list-with';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#create-list-with https://github.com/google/blockly/wiki/Lists#create-list-with].
		Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = 'Create a list with any number of items.';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#create-list-with https://github.com/google/blockly/wiki/Lists#create-list-with].
		Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = 'create list with';
		/// block text - This appears in a sub-block when [https://github.com/google/blockly/wiki/Lists#changing-number-of-inputs changing the number of inputs in a ''''create list with'''' block].\n{{Identical|List}}
		Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = 'list';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#changing-number-of-inputs https://github.com/google/blockly/wiki/Lists#changing-number-of-inputs].
		Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = 'Add, remove, or reorder sections to reconfigure this list block.';
		Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#changing-number-of-inputs https://github.com/google/blockly/wiki/Lists#changing-number-of-inputs].
		Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = 'Add an item to the list.';

		/// url - Information about [https://github.com/google/blockly/wiki/Lists#create-list-with creating a list with multiple copies of a single item].
		Blockly.Msg.LISTS_REPEAT_HELPURL = 'https://github.com/google/blockly/wiki/Lists#create-list-with';
		/// url - See [https://github.com/google/blockly/wiki/Lists#create-list-with creating a list with multiple copies of a single item].
		Blockly.Msg.LISTS_REPEAT_TOOLTIP = 'Creates a list consisting of the given value repeated the specified number of times.';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#create-list-with
		/// https://github.com/google/blockly/wiki/Lists#create-list-with].
		///\n\nParameters:\n* %1 - the item (text) to be repeated\n* %2 - the number of times to repeat it
		Blockly.Msg.LISTS_REPEAT_TITLE = 'create list with item %1 repeated %2 times';

		/// url - Information about how the length of a list is computed (i.e., by the total number of elements, not the number of different elements).
		Blockly.Msg.LISTS_LENGTH_HELPURL = 'https://github.com/google/blockly/wiki/Lists#length-of';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#length-of https://github.com/google/blockly/wiki/Lists#length-of].
		/// \n\nParameters:\n* %1 - the list whose length is desired
		Blockly.Msg.LISTS_LENGTH_TITLE = 'length of %1';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#length-of https://github.com/google/blockly/wiki/Lists#length-of Blockly:Lists:length of].
		Blockly.Msg.LISTS_LENGTH_TOOLTIP = 'Returns the length of a list.';

		/// url - See [https://github.com/google/blockly/wiki/Lists#is-empty https://github.com/google/blockly/wiki/Lists#is-empty].
		Blockly.Msg.LISTS_ISEMPTY_HELPURL = 'https://github.com/google/blockly/wiki/Lists#is-empty';
		/// block text - See [https://github.com/google/blockly/wiki/Lists#is-empty
		/// https://github.com/google/blockly/wiki/Lists#is-empty].
		/// \n\nParameters:\n* %1 - the list to test
		Blockly.Msg.LISTS_ISEMPTY_TITLE = '%1 is empty';
		/// block tooltip - See [https://github.com/google/blockly/wiki/Lists#is-empty
		/// https://github.com/google/blockly/wiki/Lists#is-empty].
		Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = 'Returns true if the list is empty.';

		/// block text - Title of blocks operating on [https://github.com/google/blockly/wiki/Lists lists].
		Blockly.Msg.LISTS_INLIST = 'in list';

		/// url - See [https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list
		/// https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list].
		Blockly.Msg.LISTS_INDEX_OF_HELPURL = 'https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list';
		Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
		/// dropdown - See [https://github.com/google/blockly/wiki/Lists#finding-items-in-a-list
		/// Lists#finding-items-in-a-list].
		/// [[File:Blockly-list-find.png]]
		Blockly.Msg.LISTS_INDEX_OF_FIRST = 'find first occurrence of item';
		/// dropdown - See [https://github.com/google/blockly/wiki/Lists#finding-items-in-a-list
		/// https://github.com/google/blockly/wiki/Lists#finding-items-in-a-list].
		/// [[File:Blockly-list-find.png]]
		Blockly.Msg.LISTS_INDEX_OF_LAST = 'find last occurrence of item';
		/// tooltip - %1 will be replaced by either the number 0 or -1 depending on the indexing mode.  See [https://github.com/google/blockly/wiki/Lists#finding-items-in-a-list
		/// https://github.com/google/blockly/wiki/Lists#finding-items-in-a-list].
		/// [[File:Blockly-list-find.png]]
		Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = 'Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.';

		Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
		/// dropdown - Indicates that the user wishes to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item
		/// get an item from a list] without removing it from the list.
		Blockly.Msg.LISTS_GET_INDEX_GET = 'get';
		/// dropdown - Indicates that the user wishes to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item
		/// get and remove an item from a list], as opposed to merely getting
		/// it without modifying the list.
		Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = 'get and remove';
		/// dropdown - Indicates that the user wishes to
		/// [https://github.com/google/blockly/wiki/Lists#removing-an-item
		/// remove an item from a list].\n{{Identical|Remove}}
		Blockly.Msg.LISTS_GET_INDEX_REMOVE = 'remove';
		/// dropdown - Indicates that an index relative to the front of the list should be used to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item get and/or remove
		/// an item from a list].  Note: If {{msg-Blockly|ORDINAL_NUMBER_SUFFIX}} is defined, it will
		/// automatically appear ''after'' this number (and any other ordinal numbers on this block).
		/// See [[Translating:Blockly#Ordinal_numbers]] for more information on ordinal numbers in Blockly.
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_FROM_START = '#';
		/// dropdown - Indicates that an index relative to the end of the list should be used
		/// to [https://github.com/google/blockly/wiki/Lists#getting-a-single-item access an item in a list].
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_FROM_END = '# from end';
		/// dropdown - Indicates that the '''first''' item should be
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item accessed in a list].
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_FIRST = 'first';
		/// dropdown - Indicates that the '''last''' item should be
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item accessed in a list].
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_LAST = 'last';
		/// dropdown - Indicates that a '''random''' item should be
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item accessed in a list].
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_RANDOM = 'random';
		/// block text - Text that should go after the rightmost block/dropdown when
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-single-item
		/// accessing an item from a list].  In most languages, this will be the empty string.
		/// [[File:Blockly-list-get-item.png]]
		Blockly.Msg.LISTS_GET_INDEX_TAIL = '';
		Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
		/// tooltip - Indicates the ordinal number that the first item in a list is referenced by.  %1 will be replaced by either "#0" or "#1" depending on the indexing mode.
		Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = '%1 is the first item.';
		/// tooltip - Indicates the ordinal number that the last item in a list is referenced by.  %1 will be replaced by either "#0" or "#1" depending on the indexing mode.
		Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = '%1 is the last item.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for more information.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = 'Returns the item at the specified position in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for more information.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = 'Returns the first item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for more information.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = 'Returns the last item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for more information.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = 'Returns a random item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for '#' or '# from end'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = 'Removes and returns the item at the specified position in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'first'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = 'Removes and returns the first item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'last'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = 'Removes and returns the last item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'random'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = 'Removes and returns a random item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for '#' or '# from end'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = 'Removes the item at the specified position in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'first'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = 'Removes the first item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'last'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = 'Removes the last item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-and-removing-an-item] (for remove and return) and [https://github.com/google/blockly/wiki/Lists#getting-a-single-item] for 'random'.
		Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = 'Removes a random item in a list.';
		/// url - Information about putting items in lists.
		Blockly.Msg.LISTS_SET_INDEX_HELPURL = 'https://github.com/google/blockly/wiki/Lists#in-list--set';
		Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
		/// block text - [https://github.com/google/blockly/wiki/Lists#in-list--set
		/// Replaces an item in a list].
		/// [[File:Blockly-in-list-set-insert.png]]
		Blockly.Msg.LISTS_SET_INDEX_SET = 'set';
		/// block text - [https://github.com/google/blockly/wiki/Lists#in-list--insert-at
		/// Inserts an item into a list].
		/// [[File:Blockly-in-list-set-insert.png]]
		Blockly.Msg.LISTS_SET_INDEX_INSERT = 'insert at';
		/// block text - The word(s) after the position in the list and before the item to be set/inserted.
		/// [[File:Blockly-in-list-set-insert.png]]
		Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = 'as';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "set" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = 'Sets the item at the specified position in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "set" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = 'Sets the first item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "set" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = 'Sets the last item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "set" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = 'Sets a random item in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "insert" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = 'Inserts the item at the specified position in a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "insert" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = 'Inserts the item at the start of a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "insert" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = 'Append the item to the end of a list.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-single-item} (even though the page describes the "get" block, the idea is the same for the "insert" block).
		Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = 'Inserts the item randomly in a list.';

		/// url - Information describing extracting a sublist from an existing list.
		Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = 'https://github.com/google/blockly/wiki/Lists#getting-a-sublist';
		Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
		/// dropdown - Indicates that an index relative to the front of the list should be used
		/// to specify the beginning of the range from which to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist get a sublist].
		/// [[File:Blockly-get-sublist.png]]
		/// Note: If {{msg-Blockly|ORDINAL_NUMBER_SUFFIX}} is defined, it will
		/// automatically appear ''after'' this number (and any other ordinal numbers on this block).
		/// See [[Translating:Blockly#Ordinal_numbers]] for more information on ordinal numbers in Blockly.
		Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = 'get sub-list from #';
		/// dropdown - Indicates that an index relative to the end of the list should be used
		/// to specify the beginning of the range from which to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist get a sublist].
		Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = 'get sub-list from # from end';
		/// dropdown - Indicates that the
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist sublist to extract]
		/// should begin with the list's first item.
		Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = 'get sub-list from first';
		/// dropdown - Indicates that an index relative to the front of the list should be
		/// used to specify the end of the range from which to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist get a sublist].
		/// [[File:Blockly-get-sublist.png]]
		Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = 'to #';
		/// dropdown - Indicates that an index relative to the end of the list should be
		/// used to specify the end of the range from which to
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist get a sublist].
		/// [[File:Blockly-get-sublist.png]]
		Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = 'to # from end';
		/// dropdown - Indicates that the '''last''' item in the given list should be
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist the end
		/// of the selected sublist].
		/// [[File:Blockly-get-sublist.png]]
		Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = 'to last';
		/// block text - This appears in the rightmost position ("tail") of the
		/// sublist block, as described at
		/// [https://github.com/google/blockly/wiki/Lists#getting-a-sublist
		/// https://github.com/google/blockly/wiki/Lists#getting-a-sublist].
		/// In English and most other languages, this is the empty string.
		/// [[File:Blockly-get-sublist.png]]
		Blockly.Msg.LISTS_GET_SUBLIST_TAIL = '';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#getting-a-sublist
		/// https://github.com/google/blockly/wiki/Lists#getting-a-sublist] for more information.
		/// [[File:Blockly-get-sublist.png]]
		Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = 'Creates a copy of the specified portion of a list.';

		/// url - Information describing sorting a list.
		Blockly.Msg.LISTS_SORT_HELPURL = 'https://github.com/google/blockly/wiki/Lists#sorting-a-list';
		/// Sort as type %1 (numeric or alphabetic) in order %2 (ascending or descending) a list of items %3.\n{{Identical|Sort}}
		Blockly.Msg.LISTS_SORT_TITLE = 'sort %1 %2 %3';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#sorting-a-list].
		Blockly.Msg.LISTS_SORT_TOOLTIP = 'Sort a copy of a list.';
		/// sorting order or direction from low to high value for numeric, or A-Z for alphabetic.\n{{Identical|Ascending}}
		Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = 'ascending';
		/// sorting order or direction from high to low value for numeric, or Z-A for alphabetic.\n{{Identical|Descending}}
		Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = 'descending';
		/// sort by treating each item as a number.
		Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = 'numeric';
		/// sort by treating each item alphabetically, case-sensitive.
		Blockly.Msg.LISTS_SORT_TYPE_TEXT = 'alphabetic';
		/// sort by treating each item alphabetically, ignoring differences in case.
		Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = 'alphabetic, ignore case';

		/// url - Information describing splitting text into a list, or joining a list into text.
		Blockly.Msg.LISTS_SPLIT_HELPURL = 'https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists';
		/// dropdown - Indicates that text will be split up into a list (e.g. "a-b-c" -> ["a", "b", "c"]).
		Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = 'make list from text';
		/// dropdown - Indicates that a list will be joined together to form text (e.g. ["a", "b", "c"] -> "a-b-c").
		Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = 'make text from list';
		/// block text - Prompts for a letter to be used as a separator when splitting or joining text.
		Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = 'with delimiter';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#make-list-from-text
		/// https://github.com/google/blockly/wiki/Lists#make-list-from-text] for more information.
		Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = 'Split text into a list of texts, breaking at each delimiter.';
		/// tooltip - See [https://github.com/google/blockly/wiki/Lists#make-text-from-list
		/// https://github.com/google/blockly/wiki/Lists#make-text-from-list] for more information.
		Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = 'Join a list of texts into one text, separated by a delimiter.';

		/// grammar - Text that follows an ordinal number (a number that indicates
		/// position relative to other numbers).  In most languages, such text appears
		/// before the number, so this should be blank.  An exception is Hungarian.
		/// See [[Translating:Blockly#Ordinal_numbers]] for more information.
		Blockly.Msg.ORDINAL_NUMBER_SUFFIX = '';

		// Variables Blocks.
		/// url - Information about ''variables'' in computer programming.  Consider using your language's translation of [https://en.wikipedia.org/wiki/Variable_(computer_science) https://en.wikipedia.org/wiki/Variable_(computer_science)], if it exists.
		Blockly.Msg.VARIABLES_GET_HELPURL = 'https://github.com/google/blockly/wiki/Variables#get';
		/// tooltip - This gets the value of the named variable without modifying it.
		Blockly.Msg.VARIABLES_GET_TOOLTIP = 'Returns the value of this variable.';
		/// context menu - Selecting this creates a block to set (change) the value of this variable.
		/// \n\nParameters:\n* %1 - the name of the variable.
		Blockly.Msg.VARIABLES_GET_CREATE_SET = 'Create "set %1"';

		/// url - Information about ''variables'' in computer programming.  Consider using your language's translation of [https://en.wikipedia.org/wiki/Variable_(computer_science) https://en.wikipedia.org/wiki/Variable_(computer_science)], if it exists.
		Blockly.Msg.VARIABLES_SET_HELPURL = 'https://github.com/google/blockly/wiki/Variables#set';
		/// block text - Change the value of a mathematical variable: '''set [the value of] x to 7'''.\n\nParameters:\n* %1 - the name of the variable.\n* %2 - the value to be assigned.
		Blockly.Msg.VARIABLES_SET = 'set %1 to %2';
		/// tooltip - This initializes or changes the value of the named variable.
		Blockly.Msg.VARIABLES_SET_TOOLTIP = 'Sets this variable to be equal to the input.';
		/// context menu - Selecting this creates a block to get (change) the value of
		/// this variable.\n\nParameters:\n* %1 - the name of the variable.
		Blockly.Msg.VARIABLES_SET_CREATE_GET = 'Create "get %1"';

		// Procedures Blocks.
		/// url - Information about defining [https://en.wikipedia.org/wiki/Procedure_(computer_science) functions] that do not have return values.
		Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = 'https://en.wikipedia.org/wiki/Procedure_%28computer_science%29';
		/// block text - This precedes the name of the function when defining it.  See
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#c84aoc this sample
		/// function definition].
		Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = 'to';
		/// default name - This acts as a placeholder for the name of a function on a
		/// function definition block, as shown on
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#w7cfju this block].
		/// The user will replace it with the function's name.
		Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = 'do something';
		/// block text - This precedes the list of parameters on a function's defiition block.  See
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#voztpd this sample
		/// function with parameters].
		Blockly.Msg.PROCEDURES_BEFORE_PARAMS = 'with:';
		/// block text - This precedes the list of parameters on a function's caller block.  See
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#voztpd this sample
		/// function with parameters].
		Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = 'with:';
		/// block text - This appears next to the function's "body", the blocks that should be
		/// run when the function is called, as shown in
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#voztpd this sample
		/// function definition].
		Blockly.Msg.PROCEDURES_DEFNORETURN_DO = '';
		/// tooltip
		Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = 'Creates a function with no output.';
		/// Placeholder text that the user is encouraged to replace with a description of what their function does.
		Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = 'Describe this function...';
		/// url - Information about defining [https://en.wikipedia.org/wiki/Procedure_(computer_science) functions] that have return values.
		Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = 'https://en.wikipedia.org/wiki/Procedure_%28computer_science%29';
		Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
		Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
		Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
		Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;
		/// block text - This imperative or infinite verb precedes the value that is used as the return value
		/// (output) of this function.  See
		/// [https://blockly-demo.appspot.com/static/apps/code/index.html?lang=en#6ot5y5 this sample
		/// function that returns a value].
		Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = 'return';
		/// tooltip
		Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = 'Creates a function with an output.';
		/// Label for a checkbox that controls if statements are allowed in a function.
		Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = 'allow statements';

		/// alert - The user has created a function with two parameters that have the same name.  Every parameter must have a different name.
		Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = 'Warning: This function has duplicate parameters.';

		/// url - Information about calling [https://en.wikipedia.org/wiki/Procedure_(computer_science) functions] that do not return values.
		Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = 'https://en.wikipedia.org/wiki/Procedure_%28computer_science%29';
		/// tooltip - This block causes the body (blocks inside) of the named function definition to be run.
		Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = 'Run the user-defined function "%1".';

		/// url - Information about calling [https://en.wikipedia.org/wiki/Procedure_(computer_science) functions] that return values.
		Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = 'https://en.wikipedia.org/wiki/Procedure_%28computer_science%29';
		/// tooltip - This block causes the body (blocks inside) of the named function definition to be run.\n\nParameters:\n* %1 - the name of the function.
		Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = 'Run the user-defined function "%1" and use its output.';

		/// block text - This text appears on a block in a window that appears when the user clicks
		/// on the plus sign or star on a function definition block.  It refers to the set of parameters
		/// (referred to by the simpler term "inputs") to the function.  See
		/// [[Translating:Blockly#function_definitions]].
		Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = 'inputs';
		/// tooltip
		Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = 'Add, remove, or reorder inputs to this function.';
		/// block text - This text appears on a block in a window that appears when the user clicks
		/// on the plus sign or star on a function definition block].  It appears on the block for
		/// adding an individual parameter (referred to by the simpler term "inputs") to the function.
		/// See [[Translating:Blockly#function_definitions]].
		Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = 'input name:';
		/// tooltip
		Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = 'Add an input to the function.';

		/// context menu - This appears on the context menu for function calls.  Selecting
		/// it causes the corresponding function definition to be highlighted (as shown at
		/// [[Translating:Blockly#context_menus]].
		Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = 'Highlight function definition';
		/// context menu - This appears on the context menu for function definitions.
		/// Selecting it creates a block to call the function.\n\nParameters:\n* %1 - the name of the function.\n{{Identical|Create}}
		Blockly.Msg.PROCEDURES_CREATE_DO = 'Create "%1"';

		/// tooltip - If the first value is true, this causes the second value to be returned
		/// immediately from the enclosing function.
		Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = 'If a value is true, then return a second value.';
		/// url - Information about guard clauses.
		Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = 'http://c2.com/cgi/wiki?GuardClause';
		/// warning - This appears if the user tries to use this block outside of a function definition.
		Blockly.Msg.PROCEDURES_IFRETURN_WARNING = 'Warning: This block may be used only within a function definition.';


		/*** EXPORTS FROM exports-loader ***/
		module.exports = Blockly;


	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(12);


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		/*** IMPORTS FROM imports-loader ***/
		var goog = __webpack_require__(13);
		var Blockly = __webpack_require__(16);

		// Do not edit this file; automatically generated by build.py.
		'use strict';

		/*

		 Visual Blocks Editor

		 Copyright 2016 Massachusetts Institute of Technology
		 All rights reserved.

		 Licensed under the Apache License, Version 2.0 (the "License");
		 you may not use this file except in compliance with the License.
		 You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

		 Unless required by applicable law or agreed to in writing, software
		 distributed under the License is distributed on an "AS IS" BASIS,
		 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 See the License for the specific language governing permissions and
		 limitations under the License.
		*/
		Blockly.Colours={motion:{primary:"#4C97FF",secondary:"#4280D7",tertiary:"#3373CC"},looks:{primary:"#9966FF",secondary:"#855CD6",tertiary:"#774DCB"},sounds:{primary:"#CF63CF",secondary:"#C94FC9",tertiary:"#BD42BD"},control:{primary:"#FFAB19",secondary:"#EC9C13",tertiary:"#CF8B17"},event:{primary:"#FFBF00",secondary:"#E6AC00",tertiary:"#CC9900"},sensing:{primary:"#5CB1D6",secondary:"#47A8D1",tertiary:"#2E8EB8"},pen:{primary:"#0fBD8C",secondary:"#0DA57A",tertiary:"#0B8E69"},operators:{primary:"#59C059",
		secondary:"#46B946",tertiary:"#389438"},data:{primary:"#FF8C1A",secondary:"#FF8000",tertiary:"#DB6E00"},more:{primary:"#FF6680",secondary:"#FF4D6A",tertiary:"#FF3355"},text:"#575E75",workspace:"#F5F8FF",toolboxHover:"#4C97FF",toolboxSelected:"#e9eef2",toolboxText:"#575E75",toolbox:"#FFFFFF",flyout:"#DDDDDD",scrollbar:"#CCCCCC",scrollbarHover:"#BBBBBB",textField:"#FFFFFF",insertionMarker:"#949494",insertionMarkerOpacity:.6,dragShadowOpacity:.3,stackGlow:"#FFF200",stackGlowOpacity:1,replacementGlow:"#FFFFFF",
		replacementGlowOpacity:1,colourPickerStroke:"#FFFFFF",fieldShadow:"rgba(0,0,0,0.1)",dropDownShadow:"rgba(0, 0, 0, .3)",numPadBackground:"#547AB2",numPadBorder:"#435F91",numPadActiveBackground:"#435F91",numPadText:"#FFFFFF",valueReportBackground:"#FFFFFF",valueReportBorder:"#AAAAAA"};Blockly.Blocks.control={};
		Blockly.Blocks.control_forever={init:function(){this.jsonInit({id:"control_forever",message0:"forever",message1:"%1",message2:"%1",lastDummyAlign2:"RIGHT",args1:[{type:"input_statement",name:"SUBSTACK"}],args2:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"/c_arrow.svg",width:16,height:16,alt:"*",flip_rtl:!0}],inputsInline:!0,previousStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_repeat={init:function(){this.jsonInit({id:"control_repeat",message0:"repeat %1",message1:"%1",message2:"%1",lastDummyAlign2:"RIGHT",args0:[{type:"input_value",name:"TIMES"}],args1:[{type:"input_statement",name:"SUBSTACK"}],args2:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"/c_arrow.svg",width:16,height:16,alt:"*",flip_rtl:!0}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,
		colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_if={init:function(){this.jsonInit({type:"control_if",message0:"if %1 then",message1:"%1",args0:[{type:"input_value",name:"CONDITION",check:"Boolean"}],args1:[{type:"input_statement",name:"SUBSTACK"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_if_else={init:function(){this.jsonInit({type:"control_if_else",message0:"if %1 then",message1:"%1",message2:"else",message3:"%1",args0:[{type:"input_value",name:"CONDITION",check:"Boolean"}],args1:[{type:"input_statement",name:"SUBSTACK"}],args3:[{type:"input_statement",name:"SUBSTACK2"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_stop={init:function(){var a=new Blockly.FieldDropdown(function(){return this.sourceBlock_&&this.sourceBlock_.nextConnection&&this.sourceBlock_.nextConnection.isConnected()?[["other scripts in sprite","other scripts in sprite"]]:[["all","all"],["this script","this script"],["other scripts in sprite","other scripts in sprite"]]},function(a){this.sourceBlock_.setNextStatement("other scripts in sprite"==a)});this.appendDummyInput().appendField("stop").appendField(a,"STOP_OPTION");
		this.setCategory(Blockly.Categories.control);this.setColour(Blockly.Colours.control.primary,Blockly.Colours.control.secondary,Blockly.Colours.control.tertiary);this.setPreviousStatement(!0)},mutationToDom:function(){var a=document.createElement("mutation"),b="other scripts in sprite"==this.getFieldValue("STOP_OPTION");a.setAttribute("hasnext",b);return a},domToMutation:function(a){a="true"==a.getAttribute("hasnext");this.setNextStatement(a)}};
		Blockly.Blocks.control_wait={init:function(){this.jsonInit({id:"control_wait",message0:"wait %1 secs",args0:[{type:"input_value",name:"DURATION"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_wait_until={init:function(){this.jsonInit({message0:"wait until %1",args0:[{type:"input_value",name:"CONDITION",check:"Boolean"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_repeat_until={init:function(){this.jsonInit({message0:"repeat until %1",message1:"%1",message2:"%1",lastDummyAlign2:"RIGHT",args0:[{type:"input_value",name:"CONDITION",check:"Boolean"}],args1:[{type:"input_statement",name:"SUBSTACK"}],args2:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"/c_arrow.svg",width:16,height:16,alt:"*",flip_rtl:!0}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,
		colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};Blockly.Blocks.control_start_as_clone={init:function(){this.jsonInit({id:"control_start_as_clone",message0:"when I start as a clone",args0:[],inputsInline:!0,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_create_clone_of_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"CLONE_OPTION",options:[["myself","_myself_"]]}],inputsInline:!0,output:"String",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.control.secondary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_create_clone_of={init:function(){this.jsonInit({id:"control_start_as_clone",message0:"create clone of %1",args0:[{type:"input_value",name:"CLONE_OPTION"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		Blockly.Blocks.control_delete_this_clone={init:function(){this.jsonInit({message0:"delete this clone",args0:[],inputsInline:!0,previousStatement:null,category:Blockly.Categories.control,colour:Blockly.Colours.control.primary,colourSecondary:Blockly.Colours.control.secondary,colourTertiary:Blockly.Colours.control.tertiary})}};
		// Copyright 2016 Google Inc.  Apache License 2.0
		Blockly.constants={};Blockly.DRAG_RADIUS=3;Blockly.SNAP_RADIUS=48;Blockly.CONNECTING_SNAP_RADIUS=96;Blockly.CURRENT_CONNECTION_PREFERENCE=20;Blockly.BUMP_DELAY=0;Blockly.COLLAPSE_CHARS=30;Blockly.LONGPRESS=750;Blockly.SOUND_LIMIT=100;Blockly.HSV_SATURATION=.45;Blockly.HSV_VALUE=.65;Blockly.SPRITE={width:96,height:124,url:"sprites.png"};Blockly.SVG_NS="http://www.w3.org/2000/svg";Blockly.HTML_NS="http://www.w3.org/1999/xhtml";Blockly.INPUT_VALUE=1;Blockly.OUTPUT_VALUE=2;Blockly.NEXT_STATEMENT=3;
		Blockly.PREVIOUS_STATEMENT=4;Blockly.DUMMY_INPUT=5;Blockly.ALIGN_LEFT=-1;Blockly.ALIGN_CENTRE=0;Blockly.ALIGN_RIGHT=1;Blockly.DRAG_NONE=0;Blockly.DRAG_STICKY=1;Blockly.DRAG_BEGIN=1;Blockly.DRAG_FREE=2;Blockly.OPPOSITE_TYPE=[];Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE]=Blockly.OUTPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE]=Blockly.INPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT]=Blockly.PREVIOUS_STATEMENT;Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT]=Blockly.NEXT_STATEMENT;
		Blockly.TOOLBOX_AT_TOP=0;Blockly.TOOLBOX_AT_BOTTOM=1;Blockly.TOOLBOX_AT_LEFT=2;Blockly.TOOLBOX_AT_RIGHT=3;Blockly.OUTPUT_SHAPE_HEXAGONAL=1;Blockly.OUTPUT_SHAPE_ROUND=2;Blockly.OUTPUT_SHAPE_SQUARE=3;Blockly.STACK_GLOW_RADIUS=1.3;Blockly.REPLACEMENT_GLOW_RADIUS=2;Blockly.Categories={motion:"motion",looks:"looks",sound:"sounds",pen:"pen",data:"data",event:"events",control:"control",sensing:"sensing",operators:"operators",more:"more"};Blockly.Blocks.data={};Blockly.Blocks.data_variablemenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_variable",name:"VARIABLE"}],inputsInline:!0,output:"String",colour:Blockly.Colours.data.secondary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.data_variable={init:function(){this.jsonInit({message0:"%1",args0:[{type:"input_value",name:"VARIABLE"}],category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary,output:"String",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.data_setvariableto={init:function(){this.jsonInit({message0:"set %1 to %2",args0:[{type:"input_value",name:"VARIABLE"},{type:"input_value",name:"VALUE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_changevariableby={init:function(){this.jsonInit({message0:"change %1 by %2",args0:[{type:"input_value",name:"VARIABLE"},{type:"input_value",name:"VALUE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_showvariable={init:function(){this.jsonInit({message0:"show variable %1",args0:[{type:"input_value",name:"VARIABLE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_hidevariable={init:function(){this.jsonInit({message0:"hide variable %1",args0:[{type:"input_value",name:"VARIABLE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_listcontents={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_variable",name:"LIST"}],category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary,output:"String",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.data_listindexall={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_numberdropdown",name:"INDEX",value:"1",min:1,precision:1,options:[["1","1"],["last","last"],["all","all"]]}],output:"String",category:Blockly.Categories.data,outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};
		Blockly.Blocks.data_listindexrandom={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_numberdropdown",name:"INDEX",value:"1",min:1,precision:1,options:[["1","1"],["last","last"],["random","random"]]}],output:"String",category:Blockly.Categories.data,outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};
		Blockly.Blocks.data_addtolist={init:function(){this.jsonInit({message0:"add %1 to %2",args0:[{type:"input_value",name:"ITEM"},{type:"field_variable",name:"LIST"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_deleteoflist={init:function(){this.jsonInit({message0:"delete %1 of %2",args0:[{type:"input_value",name:"INDEX"},{type:"field_variable",name:"LIST"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_insertatlist={init:function(){this.jsonInit({message0:"insert %1 at %2 of %3",args0:[{type:"input_value",name:"ITEM"},{type:"input_value",name:"INDEX"},{type:"field_variable",name:"LIST"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_replaceitemoflist={init:function(){this.jsonInit({message0:"replace item %1 of %2 with %3",args0:[{type:"input_value",name:"INDEX"},{type:"field_variable",name:"LIST"},{type:"input_value",name:"ITEM"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_itemoflist={init:function(){this.jsonInit({message0:"item %1 of %2",args0:[{type:"input_value",name:"INDEX"},{type:"field_variable",name:"LIST"}],output:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.data_lengthoflist={init:function(){this.jsonInit({message0:"length of %1",args0:[{type:"field_variable",name:"LIST"}],output:"Number",category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.data_listcontainsitem={init:function(){this.jsonInit({message0:"%1 contains %2?",args0:[{type:"field_variable",name:"LIST"},{type:"input_value",name:"ITEM"}],output:"Boolean",outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_showlist={init:function(){this.jsonInit({message0:"show list %1",args0:[{type:"field_variable",name:"LIST"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};
		Blockly.Blocks.data_hidelist={init:function(){this.jsonInit({message0:"hide list %1",args0:[{type:"field_variable",name:"LIST"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.data,colour:Blockly.Colours.data.primary,colourSecondary:Blockly.Colours.data.secondary,colourTertiary:Blockly.Colours.data.tertiary})}};Blockly.Blocks.defaultToolbox='<xml id="toolbox-categories" style="display: none"><category name="Motion" colour="#4C97FF" secondaryColour="#3373CC"><block type="motion_movesteps"><value name="STEPS"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="motion_turnright"><value name="DEGREES"><shadow type="math_number"><field name="NUM">15</field></shadow></value></block><block type="motion_turnleft"><value name="DEGREES"><shadow type="math_number"><field name="NUM">15</field></shadow></value></block><block type="motion_pointindirection"><value name="DIRECTION"><shadow type="math_angle"><field name="NUM">90</field></shadow></value></block><block type="motion_pointtowards"><value name="TOWARDS"><shadow type="motion_pointtowards_menu"></shadow></value></block><block type="motion_gotoxy"><value name="X"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="Y"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block><block type="motion_goto"><value name="TO"><shadow type="motion_goto_menu"></shadow></value></block><block type="motion_glidesecstoxy"><value name="SECS"><shadow type="math_number"><field name="NUM">1</field></shadow></value><value name="X"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="Y"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block><block type="motion_changexby"><value name="DX"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="motion_setx"><value name="X"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block><block type="motion_changeyby"><value name="DY"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="motion_sety"><value name="Y"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block><block type="motion_ifonedgebounce"></block><block type="motion_setrotationstyle"><value name="STYLE"><shadow type="motion_setrotationstyle_menu"></shadow></value></block><block type="motion_xposition"></block><block type="motion_yposition"></block><block type="motion_direction"></block></category><category name="Looks" colour="#9966FF" secondaryColour="#774DCB"><block type="looks_sayforsecs"><value name="MESSAGE"><shadow type="text"><field name="TEXT">Hello!</field></shadow></value><value name="SECS"><shadow type="math_number"><field name="NUM">2</field></shadow></value></block><block type="looks_say"><value name="MESSAGE"><shadow type="text"><field name="TEXT">Hello!</field></shadow></value></block><block type="looks_thinkforsecs"><value name="MESSAGE"><shadow type="text"><field name="TEXT">Hmm...</field></shadow></value><value name="SECS"><shadow type="math_number"><field name="NUM">2</field></shadow></value></block><block type="looks_think"><value name="MESSAGE"><shadow type="text"><field name="TEXT">Hmm...</field></shadow></value></block><block type="looks_show"></block><block type="looks_hide"></block><block type="looks_switchcostumeto"><value name="COSTUME"><shadow type="looks_costume"></shadow></value></block><block type="looks_nextcostume"></block><block type="looks_nextbackdrop"></block><block type="looks_switchbackdropto"><value name="BACKDROP"><shadow type="looks_backdrops"></shadow></value></block><block type="looks_switchbackdroptoandwait"><value name="BACKDROP"><shadow type="looks_backdrops"></shadow></value></block><block type="looks_changeeffectby"><value name="EFFECT"><shadow type="looks_effectmenu"></shadow></value><value name="CHANGE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="looks_seteffectto"><value name="EFFECT"><shadow type="looks_effectmenu"></shadow></value><value name="VALUE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="looks_cleargraphiceffects"></block><block type="looks_changesizeby"><value name="CHANGE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="looks_setsizeto"><value name="SIZE"><shadow type="math_number"><field name="NUM">100</field></shadow></value></block><block type="looks_gotofront"></block><block type="looks_gobacklayers"><value name="NUM"><shadow type="math_integer"><field name="NUM">1</field></shadow></value></block><block type="looks_costumeorder"></block><block type="looks_backdroporder"></block><block type="looks_backdropname"></block><block type="looks_size"></block></category><category name="Sound" colour="#D65CD6" secondaryColour="#BD42BD"><block type="sound_play"><value name="SOUND_MENU"><shadow type="sound_sounds_option"></shadow></value></block><block type="sound_playuntildone"><value name="SOUND_MENU"><shadow type="sound_sounds_option"></shadow></value></block><block type="sound_stopallsounds"></block><block type="sound_playdrumforbeats"><value name="DRUMTYPE"><shadow type="math_number"><field name="NUM">1</field></shadow></value><value name="BEATS"><shadow type="math_number"><field name="NUM">0.25</field></shadow></value></block><block type="sound_restforbeats"><value name="BEATS"><shadow type="math_number"><field name="NUM">0.25</field></shadow></value></block><block type="sound_playnoteforbeats"><value name="NOTE"><shadow type="math_number"><field name="NUM">1</field></shadow></value><value name="BEATS"><shadow type="math_number"><field name="NUM">0.5</field></shadow></value></block><block type="sound_setinstrumentto"><value name="INSTRUMENT"><shadow type="math_number"><field name="NUM">1</field></shadow></value></block><block type="sound_seteffectto"><value name="EFFECT"><shadow type="sound_effects_menu"></shadow></value><value name="VALUE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="sound_changeeffectby"><value name="EFFECT"><shadow type="sound_effects_menu"></shadow></value><value name="VALUE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="sound_cleareffects"></block><block type="sound_changevolumeby"><value name="VOLUME"><shadow type="math_number"><field name="NUM">-10</field></shadow></value></block><block type="sound_setvolumeto"><value name="VOLUME"><shadow type="math_number"><field name="NUM">100</field></shadow></value></block><block type="sound_volume"></block><block type="sound_changetempoby"><value name="TEMPO"><shadow type="math_number"><field name="NUM">20</field></shadow></value></block><block type="sound_settempotobpm"><value name="TEMPO"><shadow type="math_number"><field name="NUM">60</field></shadow></value></block><block type="sound_tempo"></block></category><category name="Pen" colour="#00B295" secondaryColour="#0B8E69"><block type="pen_clear"></block><block type="pen_stamp"></block><block type="pen_pendown"></block><block type="pen_penup"></block><block type="pen_setpencolortocolor"><value name="COLOR"><shadow type="colour_picker"></shadow></value></block><block type="pen_changepencolorby"><value name="COLOR"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="pen_setpencolortonum"><value name="COLOR"><shadow type="math_number"><field name="NUM">0</field></shadow></value></block><block type="pen_changepenshadeby"><value name="SHADE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="pen_setpenshadeto"><value name="SHADE"><shadow type="math_number"><field name="NUM">50</field></shadow></value></block><block type="pen_changepensizeby"><value name="SIZE"><shadow type="math_number"><field name="NUM">1</field></shadow></value></block><block type="pen_setpensizeto"><value name="SIZE"><shadow type="math_number"><field name="NUM">1</field></shadow></value></block></category><category name="Data" colour="#FF8C1A" secondaryColour="#DB6E00" custom="VARIABLE"></category><category name="Lists" colour="#FF8C1A" secondaryColour="#DB6E00"><block type="data_listcontents"></block><block type="data_addtolist"><value name="ITEM"><shadow type="text"><field name="TEXT">thing</field></shadow></value></block><block type="data_deleteoflist"><value name="INDEX"><shadow type="data_listindexall"><field name="INDEX">1</field></shadow></value></block><block type="data_insertatlist"><value name="INDEX"><shadow type="data_listindexrandom"><field name="INDEX">1</field></shadow></value><value name="ITEM"><shadow type="text"><field name="TEXT">thing</field></shadow></value></block><block type="data_replaceitemoflist"><value name="INDEX"><shadow type="data_listindexrandom"><field name="INDEX">1</field></shadow></value><value name="ITEM"><shadow type="text"><field name="TEXT">thing</field></shadow></value></block><block type="data_itemoflist"><value name="INDEX"><shadow type="data_listindexrandom"><field name="INDEX">1</field></shadow></value></block><block type="data_lengthoflist"></block><block type="data_listcontainsitem"><value name="ITEM"><shadow type="text"><field name="TEXT">thing</field></shadow></value></block><block type="data_showlist"></block><block type="data_hidelist"></block></category><category name="Events" colour="#FFD500" secondaryColour="#CC9900"><block type="event_whenflagclicked"></block><block type="event_whenkeypressed"></block><block type="event_whenthisspriteclicked"></block><block type="event_whenbackdropswitchesto"></block><block type="event_whengreaterthan"><value name="VALUE"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="event_whenbroadcastreceived"></block><block type="event_broadcast"><value name="BROADCAST_OPTION"><shadow type="event_broadcast_menu"></shadow></value></block><block type="event_broadcastandwait"><value name="BROADCAST_OPTION"><shadow type="event_broadcast_menu"></shadow></value></block></category><category name="Control" colour="#FFAB19" secondaryColour="#CF8B17"><block type="control_wait"><value name="DURATION"><shadow type="math_positive_number"><field name="NUM">1</field></shadow></value></block><block type="control_repeat"><value name="TIMES"><shadow type="math_whole_number"><field name="NUM">10</field></shadow></value></block><block type="control_forever"></block><block type="control_if"></block><block type="control_if_else"></block><block type="control_wait_until"></block><block type="control_repeat_until"></block><block type="control_stop"></block><block type="control_start_as_clone"></block><block type="control_create_clone_of"><value name="CLONE_OPTION"><shadow type="control_create_clone_of_menu"></shadow></value></block><block type="control_delete_this_clone"></block></category><category name="Sensing" colour="#4CBFE6" secondaryColour="#2E8EB8"><block type="sensing_touchingobject"><value name="TOUCHINGOBJECTMENU"><shadow type="sensing_touchingobjectmenu"></shadow></value></block><block type="sensing_touchingcolor"><value name="COLOR"><shadow type="colour_picker"></shadow></value></block><block type="sensing_coloristouchingcolor"><value name="COLOR"><shadow type="colour_picker"></shadow></value><value name="COLOR2"><shadow type="colour_picker"></shadow></value></block><block type="sensing_distanceto"><value name="DISTANCETOMENU"><shadow type="sensing_distancetomenu"></shadow></value></block><block type="sensing_askandwait"><value name="QUESTION"><shadow type="text"><field name="TEXT">What\'s your name?</field></shadow></value></block><block type="sensing_answer"></block><block type="sensing_keypressed"><value name="KEY_OPTION"><shadow type="sensing_keyoptions"></shadow></value></block><block type="sensing_mousedown"></block><block type="sensing_mousex"></block><block type="sensing_mousey"></block><block type="sensing_loudness"></block><block type="sensing_videoon"><value name="VIDEOONMENU1"><shadow type="sensing_videoonmenuone"></shadow></value><value name="VIDEOONMENU2"><shadow type="sensing_videoonmenutwo"></shadow></value></block><block type="sensing_videotoggle"><value name="VIDEOTOGGLEMENU"><shadow type="sensing_videotogglemenu"></shadow></value></block><block type="sensing_setvideotransparency"><value name="TRANSPARENCY"><shadow type="math_number"><field name="NUM">50</field></shadow></value></block><block type="sensing_timer"></block><block type="sensing_resettimer"></block><block type="sensing_of"><value name="PROPERTY"><shadow type="sensing_of_property_menu"></shadow></value><value name="OBJECT"><shadow type="sensing_of_object_menu"></shadow></value></block><block type="sensing_current"><value name="CURRENTMENU"><shadow type="sensing_currentmenu"></shadow></value></block><block type="sensing_dayssince2000"></block><block type="sensing_username"></block></category><category name="Operators" colour="#40BF4A" secondaryColour="#389438"><block type="operator_add"><value name="NUM1"><shadow type="math_number"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_subtract"><value name="NUM1"><shadow type="math_number"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_multiply"><value name="NUM1"><shadow type="math_number"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_divide"><value name="NUM1"><shadow type="math_number"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_random"><value name="FROM"><shadow type="math_number"><field name="NUM">1</field></shadow></value><value name="TO"><shadow type="math_number"><field name="NUM">10</field></shadow></value></block><block type="operator_lt"><value name="OPERAND1"><shadow type="text"><field name="TEXT"></field></shadow></value><value name="OPERAND2"><shadow type="text"><field name="TEXT"></field></shadow></value></block><block type="operator_equals"><value name="OPERAND1"><shadow type="text"><field name="TEXT"></field></shadow></value><value name="OPERAND2"><shadow type="text"><field name="TEXT"></field></shadow></value></block><block type="operator_gt"><value name="OPERAND1"><shadow type="text"><field name="TEXT"></field></shadow></value><value name="OPERAND2"><shadow type="text"><field name="TEXT"></field></shadow></value></block><block type="operator_and"></block><block type="operator_or"></block><block type="operator_not"></block><block type="operator_join"><value name="STRING1"><shadow type="text"><field name="TEXT">hello</field></shadow></value><value name="STRING2"><shadow type="text"><field name="TEXT">world</field></shadow></value></block><block type="operator_letter_of"><value name="LETTER"><shadow type="math_whole_number"><field name="NUM">1</field></shadow></value><value name="STRING"><shadow type="text"><field name="TEXT">world</field></shadow></value></block><block type="operator_length"><value name="STRING"><shadow type="text"><field name="TEXT">world</field></shadow></value></block><block type="operator_mod"><value name="NUM1"><shadow type="math_number"><field name="NUM"></field></shadow></value><value name="NUM2"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_round"><value name="NUM"><shadow type="math_number"><field name="NUM"></field></shadow></value></block><block type="operator_mathop"><value name="OPERATOR"><shadow type="operator_mathop_menu"></shadow></value><value name="NUM"><shadow type="math_number"><field name="NUM"></field></shadow></value></block></category><category name="More Blocks" colour="#FF6680" secondaryColour="#FF3355" custom="PROCEDURE"></category></xml>';Blockly.Blocks.event={};Blockly.Blocks.event_whenflagclicked={init:function(){this.jsonInit({id:"event_whenflagclicked",message0:"when %1 clicked",args0:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"icons/event_whenflagclicked.svg",width:24,height:24,alt:"flag",flip_rtl:!0}],inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_whenthisspriteclicked={init:function(){this.jsonInit({message0:"when this sprite clicked",inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_whenbroadcastreceived={init:function(){this.jsonInit({id:"event_whenbroadcastreceived",message0:"when I receive %1",args0:[{type:"field_dropdown",name:"BROADCAST_OPTION",options:[["message1","message1"],["message2","message2"],["new message","new message"]]}],inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_whenbackdropswitchesto={init:function(){this.jsonInit({message0:"when backdrop switches to %1",args0:[{type:"field_dropdown",name:"BACKDROP",options:[["backdrop1","BACKDROP1"]]}],inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_whengreaterthan={init:function(){this.jsonInit({message0:"when %1 > %2",args0:[{type:"field_dropdown",name:"WHENGREATERTHANMENU",options:[["loudness","LOUDNESS"],["timer","TIMER"],["video motion","VIDEOMOTION"]]},{type:"input_value",name:"VALUE"}],inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_broadcast_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"BROADCAST_OPTION",options:[["message1","message1"],["message2","message2"],["new message","new message"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.event.secondary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.event_broadcast={init:function(){this.jsonInit({id:"event_broadcast",message0:"broadcast %1",args0:[{type:"input_value",name:"BROADCAST_OPTION"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_broadcastandwait={init:function(){this.jsonInit({message0:"broadcast %1 and wait",args0:[{type:"input_value",name:"BROADCAST_OPTION"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};
		Blockly.Blocks.event_whenkeypressed={init:function(){this.jsonInit({id:"event_whenkeypressed",message0:"when %1 key pressed",args0:[{type:"field_dropdown",name:"KEY_OPTION",options:[["space","space"],["left arrow","left arrow"],["right arrow","right arrow"],["down arrow","down arrow"],["up arrow","up arrow"],["any","any"],["a","a"],["b","b"],["c","c"],["d","d"],["e","e"],["f","f"],["g","g"],["h","h"],["i","i"],["j","j"],["k","k"],["l","l"],["m","m"],["n","n"],["o","o"],["p","p"],["q","q"],["r","r"],
		["s","s"],["t","t"],["u","u"],["v","v"],["w","w"],["x","x"],["y","y"],["z","z"],["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"]]}],inputsInline:!0,nextStatement:null,category:Blockly.Categories.event,colour:Blockly.Colours.event.primary,colourSecondary:Blockly.Colours.event.secondary,colourTertiary:Blockly.Colours.event.tertiary})}};Blockly.Blocks.looks={};Blockly.Blocks.looks_sayforsecs={init:function(){this.jsonInit({message0:"say %1 for %2 secs",args0:[{type:"input_value",name:"MESSAGE"},{type:"input_value",name:"SECS"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_say={init:function(){this.jsonInit({message0:"say %1",args0:[{type:"input_value",name:"MESSAGE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_thinkforsecs={init:function(){this.jsonInit({message0:"think %1 for %2 secs",args0:[{type:"input_value",name:"MESSAGE"},{type:"input_value",name:"SECS"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_think={init:function(){this.jsonInit({message0:"think %1",args0:[{type:"input_value",name:"MESSAGE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_show={init:function(){this.jsonInit({message0:"show",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_hide={init:function(){this.jsonInit({message0:"hide",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_effectmenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"EFFECT",options:[["color","COLOR"],["fisheye","FISHEYE"],["whirl","WHIRL"],["pixelate","PIXELATE"],["mosaic","MOSAIC"],["brightness","BRIGHTNESS"],["ghost","GHOST"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.looks.secondary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.looks_changeeffectby={init:function(){this.jsonInit({message0:"change effect %1 by %2",args0:[{type:"input_value",name:"EFFECT"},{type:"input_value",name:"CHANGE"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_seteffectto={init:function(){this.jsonInit({message0:"set effect %1 to %2",args0:[{type:"input_value",name:"EFFECT"},{type:"input_value",name:"VALUE"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_cleargraphiceffects={init:function(){this.jsonInit({message0:"clear graphic effects",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_changesizeby={init:function(){this.jsonInit({message0:"change size by %1",args0:[{type:"input_value",name:"CHANGE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_setsizeto={init:function(){this.jsonInit({message0:"set size to %1 %",args0:[{type:"input_value",name:"SIZE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_size={init:function(){this.jsonInit({message0:"size",category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.looks_costume={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"COSTUME",options:[["costume1","COSTUME1"],["costume2","COSTUME2"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.looks.secondary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.looks_switchcostumeto={init:function(){this.jsonInit({message0:"switch costume to %1",args0:[{type:"input_value",name:"COSTUME"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_nextcostume={init:function(){this.jsonInit({message0:"next costume",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_switchbackdropto={init:function(){this.jsonInit({message0:"switch backdrop to %1",args0:[{type:"input_value",name:"BACKDROP"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_backdrops={init:function(){this.jsonInit({id:"looks_backdrops",message0:"%1",args0:[{type:"field_dropdown",name:"BACKDROP",options:[["backdrop1","BACKDROP1"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.looks.secondary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.looks_gotofront={init:function(){this.jsonInit({message0:"go to front",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_gobacklayers={init:function(){this.jsonInit({message0:"go back %1 layers",args0:[{type:"input_value",name:"NUM"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_backdropname={init:function(){this.jsonInit({message0:"backdrop name",category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.looks_costumeorder={init:function(){this.jsonInit({message0:"costume #",category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.looks_backdroporder={init:function(){this.jsonInit({message0:"backdrop #",category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.looks_switchbackdroptoandwait={init:function(){this.jsonInit({message0:"switch backdrop to %1 and wait",args0:[{type:"input_value",name:"BACKDROP"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};
		Blockly.Blocks.looks_nextbackdrop={init:function(){this.jsonInit({message0:"next backdrop",previousStatement:null,nextStatement:null,category:Blockly.Categories.looks,colour:Blockly.Colours.looks.primary,colourSecondary:Blockly.Colours.looks.secondary,colourTertiary:Blockly.Colours.looks.tertiary})}};Blockly.Blocks.motion={};Blockly.Blocks.motion_movesteps={init:function(){this.jsonInit({message0:"move %1 steps",args0:[{type:"input_value",name:"STEPS"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_turnright={init:function(){this.jsonInit({message0:"turn %1 %2 degrees",args0:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"/turnright_arrow.png",width:16,height:16},{type:"input_value",name:"DEGREES"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_turnleft={init:function(){this.jsonInit({message0:"turn %1 %2 degrees",args0:[{type:"field_image",src:Blockly.mainWorkspace.options.pathToMedia+"/turnleft_arrow.png",width:16,height:16},{type:"input_value",name:"DEGREES"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_pointindirection={init:function(){this.jsonInit({message0:"point in direction %1",args0:[{type:"input_value",name:"DIRECTION"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_pointtowards_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"TOWARDS",options:[["mouse-pointer","_mouse_"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.motion.secondary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.motion_pointtowards={init:function(){this.jsonInit({message0:"point towards %1",args0:[{type:"input_value",name:"TOWARDS"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_goto_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"TO",options:[["mouse-pointer","_mouse_"],["random position","_random_"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.motion.secondary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.motion_gotoxy={init:function(){this.jsonInit({message0:"go to x: %1 y: %2",args0:[{type:"input_value",name:"X"},{type:"input_value",name:"Y"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_goto={init:function(){this.jsonInit({message0:"go to %1",args0:[{type:"input_value",name:"TO"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_glidesecstoxy={init:function(){this.jsonInit({message0:"glide %1 secs to x: %2 y: %3",args0:[{type:"input_value",name:"SECS"},{type:"input_value",name:"X"},{type:"input_value",name:"Y"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_changexby={init:function(){this.jsonInit({message0:"change x by %1",args0:[{type:"input_value",name:"DX"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_setx={init:function(){this.jsonInit({message0:"set x to %1",args0:[{type:"input_value",name:"X"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_changeyby={init:function(){this.jsonInit({message0:"change y by %1",args0:[{type:"input_value",name:"DY"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_sety={init:function(){this.jsonInit({message0:"set y to %1",args0:[{type:"input_value",name:"Y"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_ifonedgebounce={init:function(){this.jsonInit({message0:"if on edge, bounce",previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_setrotationstyle_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"STYLE",options:[["left-right","left-right"],["don't rotate","don't rotate"],["all around","all around"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.motion.secondary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.motion_setrotationstyle={init:function(){this.jsonInit({message0:"set rotation style %1",args0:[{type:"input_value",name:"STYLE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary})}};
		Blockly.Blocks.motion_xposition={init:function(){this.jsonInit({message0:"x position",output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,checkboxInFlyout:!0})}};
		Blockly.Blocks.motion_yposition={init:function(){this.jsonInit({message0:"y position",output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,checkboxInFlyout:!0})}};
		Blockly.Blocks.motion_direction={init:function(){this.jsonInit({message0:"direction",output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,category:Blockly.Categories.motion,colour:Blockly.Colours.motion.primary,colourSecondary:Blockly.Colours.motion.secondary,colourTertiary:Blockly.Colours.motion.tertiary,checkboxInFlyout:!0})}};
		// Copyright 2012 Google Inc.  Apache License 2.0
		Blockly.Blocks.operators={};Blockly.Blocks.operator_add={init:function(){this.jsonInit({message0:"%1 + %2",args0:[{type:"input_value",name:"NUM1"},{type:"input_value",name:"NUM2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_subtract={init:function(){this.jsonInit({message0:"%1 - %2",args0:[{type:"input_value",name:"NUM1"},{type:"input_value",name:"NUM2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_multiply={init:function(){this.jsonInit({message0:"%1 * %2",args0:[{type:"input_value",name:"NUM1"},{type:"input_value",name:"NUM2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_divide={init:function(){this.jsonInit({message0:"%1 / %2",args0:[{type:"input_value",name:"NUM1"},{type:"input_value",name:"NUM2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_random={init:function(){this.jsonInit({message0:"pick random %1 to %2",args0:[{type:"input_value",name:"FROM"},{type:"input_value",name:"TO"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_lt={init:function(){this.jsonInit({message0:"%1 < %2",args0:[{type:"input_value",name:"OPERAND1"},{type:"input_value",name:"OPERAND2"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_equals={init:function(){this.jsonInit({message0:"%1 = %2",args0:[{type:"input_value",name:"OPERAND1"},{type:"input_value",name:"OPERAND2"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_gt={init:function(){this.jsonInit({message0:"%1 > %2",args0:[{type:"input_value",name:"OPERAND1"},{type:"input_value",name:"OPERAND2"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_and={init:function(){this.jsonInit({message0:"%1 and %2",args0:[{type:"input_value",name:"OPERAND1",check:"Boolean"},{type:"input_value",name:"OPERAND2",check:"Boolean"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_or={init:function(){this.jsonInit({message0:"%1 or %2",args0:[{type:"input_value",name:"OPERAND1",check:"Boolean"},{type:"input_value",name:"OPERAND2",check:"Boolean"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_not={init:function(){this.jsonInit({message0:"not %1",args0:[{type:"input_value",name:"OPERAND",check:"Boolean"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.operator_join={init:function(){this.jsonInit({message0:"join %1 %2",args0:[{type:"input_value",name:"STRING1"},{type:"input_value",name:"STRING2"}],inputsInline:!0,output:"String",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_letter_of={init:function(){this.jsonInit({message0:"letter %1 of %2",args0:[{type:"input_value",name:"LETTER"},{type:"input_value",name:"STRING"}],inputsInline:!0,output:"String",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_length={init:function(){this.jsonInit({message0:"length of %1",args0:[{type:"input_value",name:"STRING"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_mod={init:function(){this.jsonInit({message0:"%1 mod %2",args0:[{type:"input_value",name:"NUM1"},{type:"input_value",name:"NUM2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_round={init:function(){this.jsonInit({message0:"round %1",args0:[{type:"input_value",name:"NUM"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.operator_mathop_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"OPERATOR",options:[["abs","abs"],["floor","floor"],["ceiling","ceiling"],["sqrt","sqrt"],["sin","sin"],["cos","cos"],["tan","tan"],["asin","asin"],["acos","acos"],["atan","atan"],["ln","ln"],["log","log"],["e ^","e ^"],["10 ^","10 ^"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.operators.secondary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,
		outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};Blockly.Blocks.operator_mathop={init:function(){this.jsonInit({message0:"%1 of %2",args0:[{type:"input_value",name:"OPERATOR"},{type:"input_value",name:"NUM"}],inputsInline:!0,output:"Number",category:Blockly.Categories.operators,colour:Blockly.Colours.operators.primary,colourSecondary:Blockly.Colours.operators.secondary,colourTertiary:Blockly.Colours.operators.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};Blockly.Blocks.pen={};Blockly.Blocks.pen_clear={init:function(){this.jsonInit({message0:"clear",previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_stamp={init:function(){this.jsonInit({message0:"stamp",previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_pendown={init:function(){this.jsonInit({message0:"pen down",previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_penup={init:function(){this.jsonInit({message0:"pen up",previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_setpencolortocolor={init:function(){this.jsonInit({message0:"set pen color to %1",args0:[{type:"input_value",name:"COLOR"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_changepencolorby={init:function(){this.jsonInit({message0:"change pen color by %1",args0:[{type:"input_value",name:"COLOR"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_setpencolortonum={init:function(){this.jsonInit({message0:"set pen color to %1",args0:[{type:"input_value",name:"COLOR"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_changepenshadeby={init:function(){this.jsonInit({message0:"change pen shade by %1",args0:[{type:"input_value",name:"SHADE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_setpenshadeto={init:function(){this.jsonInit({message0:"set pen shade to %1",args0:[{type:"input_value",name:"SHADE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_changepensizeby={init:function(){this.jsonInit({message0:"change pen size by %1",args0:[{type:"input_value",name:"SIZE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};
		Blockly.Blocks.pen_setpensizeto={init:function(){this.jsonInit({message0:"set pen size to %1",args0:[{type:"input_value",name:"SIZE"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.pen,colour:Blockly.Colours.pen.primary,colourSecondary:Blockly.Colours.pen.secondary,colourTertiary:Blockly.Colours.pen.tertiary})}};Blockly.Blocks.procedures={};
		Blockly.Blocks.procedures_defnoreturn={init:function(){this.appendDummyInput().appendField(new Blockly.FieldLabel,"procCode");this.appendDummyInput().appendField(new Blockly.FieldLabel,"argumentNames");this.appendDummyInput().appendField(new Blockly.FieldLabel,"argumentDefaults");this.appendDummyInput().appendField(new Blockly.FieldLabel,"warp");this.setCategory(Blockly.Categories.more);this.setColour(Blockly.Colours.more.primary,Blockly.Colours.more.secondary,Blockly.Colours.more.tertiary);this.setNextStatement(!0);
		this._procCode="";this._argumentNames=[];this._argumentDefaults=[];this._warp=!1},mutationToDom:function(){var a=document.createElement("mutation"),b=document.createElement("proccode");b.setAttribute("value",this._procCode);a.appendChild(b);b=document.createElement("argumentnames");b.setAttribute("value",JSON.stringify(this._argumentNames));a.appendChild(b);b=document.createElement("argumentdefaults");b.setAttribute("value",JSON.stringify(this._argumentDefaults));a.appendChild(b);b=document.createElement("warp");
		b.setAttribute("value",this._warp);a.appendChild(b);return a},domToMutation:function(a){this._procCode=a.getAttribute("proccode");this._argumentNames=JSON.parse(a.getAttribute("argumentnames"));this._argumentValues=JSON.parse(a.getAttribute("argumentvalues"));this._warp=a.getAttribute("warp");this._updateDisplay()},_updateDisplay:function(){this.setFieldValue(this._procCode,"procCode");this.setFieldValue(this._argumentNames,"argumentNames");this.setFieldValue(this._argumentDefaults,"argumentDefaults");
		this.setFieldValue(this._warp,"warp")}};
		Blockly.Blocks.procedures_callnoreturn={init:function(){this.setPreviousStatement(!0);this.setNextStatement(!0);this.setCategory(Blockly.Categories.more);this.setColour(Blockly.Colours.more.primary,Blockly.Colours.more.secondary,Blockly.Colours.more.tertiary);this._procCode=""},mutationToDom:function(){var a=document.createElement("mutation");a.setAttribute("proccode",this._procCode);return a},domToMutation:function(a){this._procCode=a.getAttribute("proccode");this._updateDisplay()},_updateDisplay:function(){for(var a=
		this._procCode.split(/(?=[^\\]\%[nbs])/),a=a.map(function(a){return a.trim()}),b=0,f=0,d;d=a[f];f++){if("%"==d.substring(0,1)){var e=d.substring(1,2);d=d.substring(2).trim();var c="input"+b++;switch(e){case "n":e=this.appendValueInput(c);c=this.workspace.newBlock("math_number");c.setShadow(!0);c.outputConnection.connect(e.connection);break;case "b":e=this.appendValueInput(c);e.setCheck("Boolean");break;case "s":e=this.appendValueInput(c),c=this.workspace.newBlock("text"),c.setShadow(!0),c.outputConnection.connect(e.connection)}}else d=
		d.trim();this.appendDummyInput().appendField(d.replace(/\\%/,"%"))}}};
		Blockly.Blocks.procedures_param={init:function(){this.appendDummyInput().appendField(new Blockly.FieldLabel,"paramName");this.setPreviousStatement(!1);this.setNextStatement(!1);this.setOutput(!0);this.setCategory(Blockly.Categories.more);this.setColour(Blockly.Colours.more.primary,Blockly.Colours.more.secondary,Blockly.Colours.more.tertiary);this._paramName="undefined";this._shape="r"},mutationToDom:function(){var a=document.createElement("mutation");a.setAttribute("paramname",this._paramName);a.setAttribute("shape",
		this._shape);return a},domToMutation:function(a){this._paramName=a.getAttribute("paramname");this._shape=a.getAttribute("shape");this._updateDisplay()},_updateDisplay:function(){this.setFieldValue(this._paramName,"paramName");switch(this._shape){case "b":this.setOutputShape(Blockly.OUTPUT_SHAPE_HEXAGONAL);this.setOutput(!0,"Boolean");break;default:this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND),this.setOutput(!0,"String")}}};Blockly.Blocks.sensing={};Blockly.Blocks.sensing_touchingobject={init:function(){this.jsonInit({message0:"touching %1?",args0:[{type:"input_value",name:"TOUCHINGOBJECTMENU"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.sensing_touchingobjectmenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"TOUCHINGOBJECTMENU",options:[["mouse-pointer","_mouse_"],["edge","_edge_"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_touchingcolor={init:function(){this.jsonInit({message0:"touching color %1?",args0:[{type:"input_value",name:"COLOR"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.sensing_coloristouchingcolor={init:function(){this.jsonInit({message0:"color %1 is touching %2?",args0:[{type:"input_value",name:"COLOR"},{type:"input_value",name:"COLOR2"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.sensing_distanceto={init:function(){this.jsonInit({message0:"distance to %1",args0:[{type:"input_value",name:"DISTANCETOMENU"}],category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_distancetomenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"DISTANCETOMENU",options:[["mouse-pointer","_mouse_"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_askandwait={init:function(){this.jsonInit({message0:"ask %1 and wait",args0:[{type:"input_value",name:"QUESTION"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary})}};
		Blockly.Blocks.sensing_answer={init:function(){this.jsonInit({message0:"answer",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_keypressed={init:function(){this.jsonInit({message0:"key %1 pressed?",args0:[{type:"input_value",name:"KEY_OPTION"}],inputsInline:!0,output:"Boolean",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.sensing_keyoptions={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"KEY_OPTION",options:[["space","space"],["left arrow","left arrow"],["right arrow","right arrow"],["down arrow","down arrow"],["up arrow","up arrow"],["any","any"],["a","a"],["b","b"],["c","c"],["d","d"],["e","e"],["f","f"],["g","g"],["h","h"],["i","i"],["j","j"],["k","k"],["l","l"],["m","m"],["n","n"],["o","o"],["p","p"],["q","q"],["r","r"],["s","s"],["t","t"],["u","u"],["v","v"],["w",
		"w"],["x","x"],["y","y"],["z","z"],["0","0"],["1","1"],["2","2"],["3","3"],["4","4"],["5","5"],["6","6"],["7","7"],["8","8"],["9","9"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_mousedown={init:function(){this.jsonInit({message0:"mouse down?",inputsInline:!0,output:"Boolean",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_HEXAGONAL})}};
		Blockly.Blocks.sensing_mousex={init:function(){this.jsonInit({message0:"mouse x",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_mousey={init:function(){this.jsonInit({message0:"mouse y",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_loudness={init:function(){this.jsonInit({message0:"loudness",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_videoon={init:function(){this.jsonInit({message0:"video %1 on %2",args0:[{type:"input_value",name:"VIDEOONMENU1"},{type:"input_value",name:"VIDEOONMENU2"}],inputsInline:!0,output:"Number",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_videoonmenuone={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"VIDEOONMENU1",options:[["motion","MOTION"],["direction","DIRECTION"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_videoonmenutwo={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"VIDEOONMENU2",options:[["stage","STAGE"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_videotoggle={init:function(){this.jsonInit({message0:"turn video %1",args0:[{type:"input_value",name:"VIDEOTOGGLEMENU"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary})}};
		Blockly.Blocks.sensing_videotogglemenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"VIDEOTOGGLEMENU",options:[["on","ON"],["off","OFF"],["on-flipped","ONFLIPPED"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_setvideotransparency={init:function(){this.jsonInit({message0:"set video transparency to %1%",args0:[{type:"input_value",name:"TRANSPARENCY"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary})}};
		Blockly.Blocks.sensing_timer={init:function(){this.jsonInit({message0:"timer",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_resettimer={init:function(){this.jsonInit({message0:"reset timer",previousStatement:null,nextStatement:null,category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary})}};
		Blockly.Blocks.sensing_of_property_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"PROPERTY",options:[["x position","x position"],["y position","y position"],["direction","direction"],["costume #","costume #"],["costume name","costume name"],["size","size"],["volume","volume"],["backdrop #","backdrop #"],["backdrop name","backdrop name"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,
		colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};Blockly.Blocks.sensing_of_object_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"OBJECT",options:[["Sprite1","Sprite1"],["Stage","_stage_"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_of={init:function(){this.jsonInit({message0:"%1 of %2",args0:[{type:"input_value",name:"PROPERTY"},{type:"input_value",name:"OBJECT"}],output:!0,category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_current={init:function(){this.jsonInit({message0:"current %1",args0:[{type:"input_value",name:"CURRENTMENU"}],inputsInline:!0,output:"Number",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sensing_currentmenu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"CURRENTMENU",options:[["year","YEAR"],["month","MONTH"],["date","DATE"],["day of week","DAYOFWEEK"],["hour","HOUR"],["minute","MINUTE"],["second","SECOND"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sensing.secondary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_dayssince2000={init:function(){this.jsonInit({message0:"days since 2000",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sensing_username={init:function(){this.jsonInit({message0:"username",category:Blockly.Categories.sensing,colour:Blockly.Colours.sensing.primary,colourSecondary:Blockly.Colours.sensing.secondary,colourTertiary:Blockly.Colours.sensing.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};Blockly.Blocks.sound={};Blockly.Blocks.sound_sounds_option={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"SOUND_MENU",options:[["meow","0"],["boing","1"],["cave","2"],["drip drop","3"],["drum machine","4"],["eggs","5"],["zoop","6"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sounds.secondary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sound_play={init:function(){this.jsonInit({message0:"play sound %1",args0:[{type:"input_value",name:"SOUND_MENU"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_playuntildone={init:function(){this.jsonInit({message0:"play sound %1 until done",args0:[{type:"input_value",name:"SOUND_MENU"}],inputsInline:!0,previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_playwithpitch={init:function(){this.jsonInit({message0:"play sound %1 with pitch %2",args0:[{type:"input_value",name:"SOUND_NUM"},{type:"input_value",name:"PITCH"}],inputsInline:!0,previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_stopallsounds={init:function(){this.jsonInit({message0:"stop all sounds",previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_beats_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"BEATS",options:[["1/8","0.125"],["1/4","0.25"],["1/2","0.5"],["1","1"],["2","2"],["4","4"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sounds.secondary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sound_playdrum={init:function(){this.jsonInit({message0:"play drum %1",args0:[{type:"input_value",name:"DRUMTYPE"}],previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_playdrumforbeats={init:function(){this.jsonInit({message0:"play drum %1 for %2 beats",args0:[{type:"input_value",name:"DRUMTYPE"},{type:"input_value",name:"BEATS"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_restforbeats={init:function(){this.jsonInit({message0:"rest for %1 beats",args0:[{type:"input_value",name:"BEATS"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_playnote={init:function(){this.jsonInit({message0:"play note %1",args0:[{type:"input_value",name:"NOTE"}],previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_playnoteforbeats={init:function(){this.jsonInit({message0:"play note %1 for %2 beats",args0:[{type:"input_value",name:"NOTE"},{type:"input_value",name:"BEATS"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_scales_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"SCALE",options:[["major","MAJOR"],["minor","MINOR"],["pentatonic","PENTATONIC"],["chromatic","CHROMATIC"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sounds.secondary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sound_roots_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"ROOT",options:[["C","0"],["C#","1"],["D","2"],["D#","3"],["E","4"],["F","5"],["F#","6"],["G","7"],["G#","8"],["A","9"],["A#","10"],["B","11"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sounds.secondary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sound_setkey={init:function(){this.jsonInit({message0:"set key %1 %2",args0:[{type:"input_value",name:"ROOT"},{type:"input_value",name:"SCALE"}],previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_effects_menu={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_dropdown",name:"EFFECT",options:[["echo","ECHO"],["pan left/right","PAN"],["reverb","REVERB"],["pitch","PITCH"]]}],inputsInline:!0,output:"String",colour:Blockly.Colours.sounds.secondary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,outputShape:Blockly.OUTPUT_SHAPE_ROUND})}};
		Blockly.Blocks.sound_seteffectto={init:function(){this.jsonInit({message0:"set effect %1 to %2",args0:[{type:"input_value",name:"EFFECT"},{type:"input_value",name:"VALUE"}],previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_changeeffectby={init:function(){this.jsonInit({message0:"change effect %1 by %2",args0:[{type:"input_value",name:"EFFECT"},{type:"input_value",name:"VALUE"}],previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_cleareffects={init:function(){this.jsonInit({message0:"clear audio effects",previousStatement:null,nextStatement:null,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_setinstrumentto={init:function(){this.jsonInit({message0:"set instrument to %1",args0:[{type:"input_value",name:"INSTRUMENT"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_changevolumeby={init:function(){this.jsonInit({message0:"change volume by %1",args0:[{type:"input_value",name:"VOLUME"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_setvolumeto={init:function(){this.jsonInit({message0:"set volume to %1%",args0:[{type:"input_value",name:"VOLUME"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_volume={init:function(){this.jsonInit({message0:"volume",category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};
		Blockly.Blocks.sound_changetempoby={init:function(){this.jsonInit({message0:"change tempo by %1",args0:[{type:"input_value",name:"TEMPO"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_settempotobpm={init:function(){this.jsonInit({message0:"set tempo to %1 bpm",args0:[{type:"input_value",name:"TEMPO"}],previousStatement:null,nextStatement:null,category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary})}};
		Blockly.Blocks.sound_tempo={init:function(){this.jsonInit({message0:"tempo",category:Blockly.Categories.sound,colour:Blockly.Colours.sounds.primary,colourSecondary:Blockly.Colours.sounds.secondary,colourTertiary:Blockly.Colours.sounds.tertiary,output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,checkboxInFlyout:!0})}};

		/*** EXPORTS FROM exports-loader ***/
		module.exports = Blockly;


	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(14).goog;


	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(15);


	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		/*** IMPORTS FROM imports-loader ***/
		(function() {

		// Do not edit this file; automatically generated by build.py.
		'use strict';

		var COMPILED=!0,goog=goog||{};goog.global=this;goog.isDef=function(a){return void 0!==a};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||!c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());)!a.length&&goog.isDef(b)?c[d]=b:c=c[d]?c[d]:c[d]={}};
		goog.define=function(a,b){var c=b;COMPILED||(goog.global.CLOSURE_UNCOMPILED_DEFINES&&Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES,a)?c=goog.global.CLOSURE_UNCOMPILED_DEFINES[a]:goog.global.CLOSURE_DEFINES&&Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES,a)&&(c=goog.global.CLOSURE_DEFINES[a]));goog.exportPath_(a,c)};goog.DEBUG=!1;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG;
		goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;goog.provide=function(a){if(goog.isInModuleLoader_())throw Error("goog.provide can not be used within a goog.module.");if(!COMPILED&&goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');goog.constructNamespace_(a)};goog.constructNamespace_=function(a,b){if(!COMPILED){delete goog.implicitNamespaces_[a];for(var c=a;(c=c.substring(0,c.lastIndexOf(".")))&&!goog.getObjectByName(c);)goog.implicitNamespaces_[c]=!0}goog.exportPath_(a,b)};
		goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
		goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");
		goog.moduleLoaderState_.moduleName=a;if(!COMPILED){if(goog.isProvided_(a))throw Error('Namespace "'+a+'" already declared.');delete goog.implicitNamespaces_[a]}};goog.module.get=function(a){return goog.module.getInternal_(a)};goog.module.getInternal_=function(a){if(!COMPILED)return goog.isProvided_(a)?a in goog.loadedModules_?goog.loadedModules_[a]:goog.getObjectByName(a):null};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return null!=goog.moduleLoaderState_};
		goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0};
		goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};COMPILED||(goog.isProvided_=function(a){return a in goog.loadedModules_||!goog.implicitNamespaces_[a]&&goog.isDefAndNotNull(goog.getObjectByName(a))},goog.implicitNamespaces_={"goog.module":!0});
		goog.getObjectByName=function(a,b){for(var c=a.split("."),d=b||goog.global,e;e=c.shift();)if(goog.isDefAndNotNull(d[e]))d=d[e];else return null;return d};goog.globalize=function(a,b){var c=b||goog.global,d;for(d in a)c[d]=a[d]};
		goog.addDependency=function(a,b,c,d){if(goog.DEPENDENCIES_ENABLED){var e;a=a.replace(/\\/g,"/");var f=goog.dependencies_;d&&"boolean"!==typeof d||(d=d?{module:"goog"}:{});for(var g=0;e=b[g];g++)f.nameToPath[e]=a,f.loadFlags[a]=d;for(d=0;b=c[d];d++)a in f.requires||(f.requires[a]={}),f.requires[a][b]=!0}};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a)};
		goog.require=function(a){if(!COMPILED){goog.ENABLE_DEBUG_LOADER&&goog.IS_OLD_IE_&&goog.maybeProcessDeferredDep_(a);if(goog.isProvided_(a)){if(goog.isInModuleLoader_())return goog.module.getInternal_(a)}else if(goog.ENABLE_DEBUG_LOADER){var b=goog.getPathFromDeps_(a);if(b)goog.writeScripts_(b);else throw a="goog.require could not find: "+a,goog.logToConsole_(a),Error(a);}return null}};goog.basePath="";goog.nullFunction=function(){};
		goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a}};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER;goog.TRANSPILE="detect";
		goog.TRANSPILER="transpile.js";
		goog.DEPENDENCIES_ENABLED&&(goog.dependencies_={loadFlags:{},nameToPath:{},requires:{},visited:{},written:{},deferred:{}},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_())for(var a=goog.global.document.getElementsByTagName("SCRIPT"),b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?"),d=-1==d?c.length:d;if("base.js"==
		c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break}}},goog.importScript_=function(a,b){(goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_)(a,b)&&(goog.dependencies_.written[a]=!0)},goog.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.importProcessedScript_=function(a,b,c){goog.importScript_("",'goog.retrieveAndExec_("'+a+'", '+b+", "+c+");")},goog.queuedModules_=[],goog.wrapModule_=function(a,b){return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?
		"goog.loadModule("+goog.global.JSON.stringify(b+"\n//# sourceURL="+a+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+b+"\n;return exports});\n//# sourceURL="+a+"\n"},goog.loadQueuedModules_=function(){var a=goog.queuedModules_.length;if(0<a){var b=goog.queuedModules_;goog.queuedModules_=[];for(var c=0;c<a;c++)goog.maybeProcessDeferredPath_(b[c])}},goog.maybeProcessDeferredDep_=function(a){goog.isDeferredModule_(a)&&goog.allDepsAreAvailable_(a)&&(a=goog.getPathFromDeps_(a),goog.maybeProcessDeferredPath_(goog.basePath+
		a))},goog.isDeferredModule_=function(a){var b=(a=goog.getPathFromDeps_(a))&&goog.dependencies_.loadFlags[a]||{},c=b.lang||"es3";return a&&("goog"==b.module||goog.needsTranspile_(c))?goog.basePath+a in goog.dependencies_.deferred:!1},goog.allDepsAreAvailable_=function(a){if((a=goog.getPathFromDeps_(a))&&a in goog.dependencies_.requires)for(var b in goog.dependencies_.requires[a])if(!goog.isProvided_(b)&&!goog.isDeferredModule_(b))return!1;return!0},goog.maybeProcessDeferredPath_=function(a){if(a in
		goog.dependencies_.deferred){var b=goog.dependencies_.deferred[a];delete goog.dependencies_.deferred[a];goog.globalEval(b)}},goog.loadModuleFromUrl=function(a){goog.retrieveAndExec_(a,!0,!1)},goog.writeScriptSrcNode_=function(a){goog.global.document.write('<script type="text/javascript" src="'+a+'">\x3c/script>')},goog.appendScriptSrcNode_=function(a){var b=goog.global.document,c=b.createElement("script");c.type="text/javascript";c.src=a;c.defer=!1;c.async=!1;b.head.appendChild(c)},goog.writeScriptTag_=
		function(a,b){if(goog.inHtmlDocument_()){var c=goog.global.document;if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&"complete"==c.readyState){if(/\bdeps.js$/.test(a))return!1;throw Error('Cannot write "'+a+'" after document load');}if(void 0===b)if(goog.IS_OLD_IE_){var d=" onreadystatechange='goog.onScriptLoad_(this, "+ ++goog.lastNonModuleScriptIndex_+")' ";c.write('<script type="text/javascript" src="'+a+'"'+d+">\x3c/script>")}else goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING?goog.appendScriptSrcNode_(a):
		goog.writeScriptSrcNode_(a);else c.write('<script type="text/javascript">'+b+"\x3c/script>");return!0}return!1},goog.needsTranspile_=function(a){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;goog.requiresTranspilation_||(goog.requiresTranspilation_=goog.createRequiresTranspilation_());if(a in goog.requiresTranspilation_)return goog.requiresTranspilation_[a];throw Error("Unknown language mode: "+a);},goog.requiresTranspilation_=null,goog.lastNonModuleScriptIndex_=0,goog.onScriptLoad_=
		function(a,b){"complete"==a.readyState&&goog.lastNonModuleScriptIndex_==b&&goog.loadQueuedModules_();return!0},goog.writeScripts_=function(a){function b(a){if(!(a in e.written||a in e.visited)){e.visited[a]=!0;if(a in e.requires)for(var f in e.requires[a])if(!goog.isProvided_(f))if(f in e.nameToPath)b(e.nameToPath[f]);else throw Error("Undefined nameToPath for "+f);a in d||(d[a]=!0,c.push(a))}}var c=[],d={},e=goog.dependencies_;b(a);for(a=0;a<c.length;a++){var f=c[a];goog.dependencies_.written[f]=
		!0}var g=goog.moduleLoaderState_;goog.moduleLoaderState_=null;for(a=0;a<c.length;a++)if(f=c[a]){var h=e.loadFlags[f]||{},k=goog.needsTranspile_(h.lang||"es3");"goog"==h.module||k?goog.importProcessedScript_(goog.basePath+f,"goog"==h.module,k):goog.importScript_(goog.basePath+f)}else throw goog.moduleLoaderState_=g,Error("Undefined script input");goog.moduleLoaderState_=g},goog.getPathFromDeps_=function(a){return a in goog.dependencies_.nameToPath?goog.dependencies_.nameToPath[a]:null},goog.findBasePath_(),
		goog.global.CLOSURE_NO_DEPS||goog.importScript_(goog.basePath+"deps.js"));
		goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:void 0,declareLegacyNamespace:!1};var c;if(goog.isFunction(a))c=a.call(void 0,{});else if(goog.isString(a))c=goog.loadModuleFromSource_.call(void 0,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(!goog.isString(d)||!d)throw Error('Invalid module name "'+d+'"');goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,c):goog.SEAL_MODULE_EXPORTS&&
		Object.seal&&goog.isObject(c)&&Object.seal(c);goog.loadedModules_[d]=c}finally{goog.moduleLoaderState_=b}};goog.loadModuleFromSource_=function(a){eval(a);return{}};goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;)"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;return a.join("/")};
		goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);try{var b=new goog.global.XMLHttpRequest;b.open("get",a,!1);b.send();return 0==b.status||200==b.status?b.responseText:null}catch(c){return null}};
		goog.retrieveAndExec_=function(a,b,c){if(!COMPILED){var d=a;a=goog.normalizePath_(a);var e=goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_,f=goog.loadFileSync_(a);if(null==f)throw Error('Load of "'+a+'" failed');c&&(f=goog.transpile_.call(goog.global,f,a));f=b?goog.wrapModule_(a,f):f+("\n//# sourceURL="+a);goog.IS_OLD_IE_?(goog.dependencies_.deferred[d]=f,goog.queuedModules_.push(d)):e(a,f)}};
		goog.transpile_=function(a,b){var c=goog.global.$jscomp;c||(goog.global.$jscomp=c={});var d=c.transpile;if(!d){var e=goog.basePath+goog.TRANSPILER,f=goog.loadFileSync_(e);if(f){eval(f+"\n//# sourceURL="+e);if(goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=goog.global.$gwtExport.$jscomp.transpile;
		c=goog.global.$jscomp;d=c.transpile}}d||(d=c.transpile=function(a,b){goog.logToConsole_(b+" requires transpilation but no transpiler was found.");return a});return d(a,b)};
		goog.typeOf=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
		else if("function"==b&&"undefined"==typeof a.call)return"object";return b};goog.isNull=function(a){return null===a};goog.isDefAndNotNull=function(a){return null!=a};goog.isArray=function(a){return"array"==goog.typeOf(a)};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear};goog.isString=function(a){return"string"==typeof a};
		goog.isBoolean=function(a){return"boolean"==typeof a};goog.isNumber=function(a){return"number"==typeof a};goog.isFunction=function(a){return"function"==goog.typeOf(a)};goog.isObject=function(a){var b=typeof a;return"object"==b&&null!=a||"function"==b};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_)};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_]};
		goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_]}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(a.clone)return a.clone();var b="array"==b?[]:{},c;for(c in a)b[c]=goog.cloneObject(a[c]);return b}return a};
		goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments)};goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}};
		goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments)};goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}};goog.mixin=function(a,b){for(var c in b)a[c]=b[c]};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date};
		goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_)if(goog.global.eval("var _evalTest_ = 1;"),"undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_}catch(d){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1;if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=!1;c.appendChild(b.createTextNode(a));
		b.body.appendChild(c);b.body.removeChild(c)}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;
		goog.getCssName=function(a,b){if("."==String(a).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+a);var c=function(a){return goog.cssNameMapping_[a]||a},d=function(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++)b.push(c(a[d]));return b.join("-")},d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a},d=b?a+"-"+d(b):d(a);return goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(d):d};
		goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b};!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING);goog.getMsg=function(a,b){b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,d){return null!=b&&d in b?b[d]:a}));return a};goog.getMsgWithFallback=function(a,b){return a};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c)};goog.exportProperty=function(a,b,c){a[b]=c};
		goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.base=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,d)}};
		goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if(d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++)e[f-1]=arguments[f];return d.superClass_.constructor.apply(a,e)}e=Array(arguments.length-2);for(f=2;f<arguments.length;f++)e[f-2]=arguments[f];for(var f=!1,g=a.constructor;g;g=
		g.superClass_&&g.superClass_.constructor)if(g.prototype[b]===d)f=!0;else if(f)return g.prototype[b].apply(a,e);if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a goog.module.");a.call(goog.global)};COMPILED||(goog.global.COMPILED=COMPILED);
		goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;
		goog.defineClass.createSealingConstructor_=function(a,b){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return a;var c=!goog.defineClass.isUnsealable_(b),d=function(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===d&&c&&Object.seal instanceof Function&&Object.seal(b);return b};return d};goog.defineClass.isUnsealable_=function(a){return a&&a.prototype&&a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
		goog.defineClass.applyProperties_=function(a,b){for(var c in b)Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++)c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c])};goog.tagUnsealableClass=function(a){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(a.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";
		goog.createRequiresTranspilation_=function(){function a(a,b){d?c[a]=!0:b()?c[a]=!1:d=c[a]=!0}function b(a){try{return!!eval(a)}catch(f){return!1}}var c={es3:!1},d=!1;a("es5",function(){return b("[1,].length==1")});a("es6",function(){return b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')});
		a("es6-impl",function(){return!0});a("es7",function(){return b("2 ** 2 == 4")});a("es8",function(){return b("async () => 1, true")});return c};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b)}a&&(this.message=String(a));this.reportErrorToServer=!0};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.string={};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\u00a0"};goog.string.startsWith=function(a,b){return 0==a.lastIndexOf(b,0)};goog.string.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c};goog.string.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(0,b.length))};
		goog.string.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length))};goog.string.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase()};goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;)d+=c.shift()+e.shift();return d+c.join("%s")};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")};
		goog.string.isEmptyOrWhitespace=function(a){return/^[\s\xa0]*$/.test(a)};goog.string.isEmptyString=function(a){return 0==a.length};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a))};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a)};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a)};
		goog.string.isNumeric=function(a){return!/[^0-9]/.test(a)};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a)};goog.string.isSpace=function(a){return" "==a};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\u0080"<=a&&"\ufffd">=a};goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ")};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n")};
		goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ")};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ")};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")};goog.string.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"")};
		goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"")};goog.string.caseInsensitiveCompare=function(a,b){var c=String(a).toLowerCase(),d=String(b).toLowerCase();return c<d?-1:c==d?0:1};
		goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1}return d.length!=e.length?d.length-e.length:a<b?-1:1};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g)};
		goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g)};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a))};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "))};goog.string.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>")};
		goog.string.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.AMP_RE_,"&amp;").replace(goog.string.LT_RE_,"&lt;").replace(goog.string.GT_RE_,"&gt;").replace(goog.string.QUOT_RE_,"&quot;").replace(goog.string.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.NULL_RE_,"&#0;"),goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));else{if(!goog.string.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.LT_RE_,
		"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.NULL_RE_,"&#0;"));goog.string.DETECT_DOUBLE_ESCAPING&&-1!=a.indexOf("e")&&(a=a.replace(goog.string.E_RE_,"&#101;"))}return a};goog.string.AMP_RE_=/&/g;goog.string.LT_RE_=/</g;goog.string.GT_RE_=/>/g;goog.string.QUOT_RE_=/"/g;
		goog.string.SINGLE_QUOTE_RE_=/'/g;goog.string.NULL_RE_=/\x00/g;goog.string.E_RE_=/e/g;goog.string.ALL_RE_=goog.string.DETECT_DOUBLE_ESCAPING?/[\x00&<>"'e]/:/[\x00&<>"']/;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a};
		goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a};
		goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var e=c[a];if(e)return e;if("#"==b.charAt(0)){var f=Number("0"+b.substr(1));isNaN(f)||(e=String.fromCharCode(f))}e||(d.innerHTML=a+" ",e=d.firstChild.nodeValue.slice(0,-1));return c[a]=e})};
		goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case "amp":return"&";case "lt":return"<";case "gt":return">";case "quot":return'"';default:if("#"==c.charAt(0)){var b=Number("0"+c.substr(1));if(!isNaN(b))return String.fromCharCode(b)}return a}})};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b)};
		goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1)}return a};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a};
		goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e)}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"<"};goog.string.jsEscapeCache_={"'":"\\'"};
		goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d))}b.push('"');return b.join("")};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++)b[c]=goog.string.escapeChar(a.charAt(c));return b.join("")};
		goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b,c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\x",16>c||256<c)b+="0"}else b="\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase()}return goog.string.jsEscapeCache_[a]=b};goog.string.contains=function(a,b){return-1!=a.indexOf(b)};
		goog.string.caseInsensitiveContains=function(a,b){return goog.string.contains(a.toLowerCase(),b.toLowerCase())};goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d};goog.string.remove=function(a,b){return a.replace(b,"")};goog.string.removeAll=function(a,b){var c=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(c,"")};
		goog.string.replaceAll=function(a,b,c){b=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(b,c.replace(/\$/g,"$$$$"))};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b)}:function(a,b){return Array(b+1).join(a)};
		goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a};goog.string.makeSafe=function(a){return null==a?"":String(a)};goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"")};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)};
		goog.string.compareVersions=function(a,b){for(var c=0,d=goog.string.trim(String(a)).split("."),e=goog.string.trim(String(b)).split("."),f=Math.max(d.length,e.length),g=0;0==c&&g<f;g++){var h=d[g]||"",k=e[g]||"";do{h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];k=/(\d*)(\D*)(.*)/.exec(k)||["","","",""];if(0==h[0].length&&0==k[0].length)break;var c=0==h[1].length?0:parseInt(h[1],10),l=0==k[1].length?0:parseInt(k[1],10),c=goog.string.compareElements_(c,l)||goog.string.compareElements_(0==h[2].length,0==k[2].length)||
		goog.string.compareElements_(h[2],k[2]),h=h[3],k=k[3]}while(0==c)}return c};goog.string.compareElements_=function(a,b){return a<b?-1:a>b?1:0};goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c)b=31*b+a.charCodeAt(c)>>>0;return b};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b};
		goog.string.isLowerCamelCase=function(a){return/^[a-z]+([A-Z][a-z]*)*$/.test(a)};goog.string.isUpperCamelCase=function(a){return/^([A-Z][a-z]*)+$/.test(a)};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase()};
		goog.string.toTitleCase=function(a,b){var c=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(c?"|["+c+"]+":"")+")([a-z])","g"),function(a,b,c){return b+c.toUpperCase()})};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase()};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN};
		goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;)d.push(a.shift()),c--;a.length&&d.push(a.join(b));return d};goog.string.lastComponent=function(a,b){if(b)"string"==typeof b&&(b=[b]);else return a;for(var c=-1,d=0;d<b.length;d++)if(""!=b[d]){var e=a.lastIndexOf(b[d]);e>c&&(c=e)}return-1==c?a:a.slice(c+1)};
		goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++)c[e]=e;for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++)d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));for(f=0;f<c.length;f++)c[f]=d[f]}return d[b.length]};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){b.unshift(a);goog.debug.Error.call(this,goog.string.subs.apply(null,b));b.shift();this.messagePattern=a};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;
		goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a)};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a)};goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a};
		goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)))};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
		goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
		goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
		goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a};
		goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a};goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype)goog.asserts.fail(a+" should not be enumerable in Object.prototype.")};
		goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.debug.entryPointRegistry={};goog.debug.EntryPointMonitor=function(){};goog.debug.entryPointRegistry.refList_=[];goog.debug.entryPointRegistry.monitors_=[];goog.debug.entryPointRegistry.monitorsMayExist_=!1;goog.debug.entryPointRegistry.register=function(a){goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length]=a;if(goog.debug.entryPointRegistry.monitorsMayExist_)for(var b=goog.debug.entryPointRegistry.monitors_,c=0;c<b.length;c++)a(goog.bind(b[c].wrap,b[c]))};
		goog.debug.entryPointRegistry.monitorAll=function(a){goog.debug.entryPointRegistry.monitorsMayExist_=!0;for(var b=goog.bind(a.wrap,a),c=0;c<goog.debug.entryPointRegistry.refList_.length;c++)goog.debug.entryPointRegistry.refList_[c](b);goog.debug.entryPointRegistry.monitors_.push(a)};
		goog.debug.entryPointRegistry.unmonitorAllIfPossible=function(a){var b=goog.debug.entryPointRegistry.monitors_;goog.asserts.assert(a==b[b.length-1],"Only the most recent monitor can be unwrapped.");a=goog.bind(a.unwrap,a);for(var c=0;c<goog.debug.entryPointRegistry.refList_.length;c++)goog.debug.entryPointRegistry.refList_[c](a);b.length--};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=!1;goog.array.peek=function(a){return a[a.length-1]};goog.array.last=goog.array.peek;
		goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1};
		goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c)}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--)if(c in a&&a[c]===b)return c;return-1};
		goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};goog.array.forEachRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;--d)d in e&&b.call(c,e[d],d,a)};
		goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++)if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k)}return e};
		goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++)g in f&&(e[g]=b.call(c,f[g],g,a));return e};
		goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
		goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c)}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a)});return e};
		goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return!0;return!1};
		goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d},c);return d};
		goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b]};
		goog.array.findIndexRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;d--)if(d in e&&b.call(c,e[d],d,a))return d;return-1};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b)};goog.array.isEmpty=function(a){return 0==a.length};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--)delete a[b];a.length=0};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b)};
		goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b)};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b)};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d)};goog.array.remove=function(a,b){var c=goog.array.indexOf(a,b),d;(d=0<=c)&&goog.array.removeAt(a,c);return d};
		goog.array.removeLast=function(a,b){var c=goog.array.lastIndexOf(a,b);return 0<=c?(goog.array.removeAt(a,c),!0):!1};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++});return d};
		goog.array.concat=function(a){return Array.prototype.concat.apply(Array.prototype,arguments)};goog.array.join=function(a){return Array.prototype.concat.apply(Array.prototype,arguments)};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]};goog.array.clone=goog.array.toArray;
		goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++)a[e+g]=d[g]}else a.push(d)}};goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1))};
		goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function(a){return goog.isObject(a)?"o"+goog.getUid(a):(typeof a).charAt(0)+a};c=c||d;for(var d={},e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g)}b.length=e};
		goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b)};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c)};goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1,l;l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l)}return h?f:~f};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare)};
		goog.array.stableSort=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++)c[d]={index:d,value:a[d]};var e=b||goog.array.defaultCompare;goog.array.sort(c,function(a,b){return e(a.value,b.value)||a.index-b.index});for(d=0;d<a.length;d++)a[d]=c[d].value};goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c))})};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b]},c)};
		goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1}return!0};goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++)if(!c(a[e],b[e]))return!1;return!0};
		goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f}return goog.array.defaultCompare(a.length,b.length)};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0};goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b)};goog.array.defaultCompareEquality=function(a,b){return a===b};
		goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1};goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f)}return d};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e});return d};
		goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c)d.push(a);else for(a=e;a>f;a+=c)d.push(a);return d};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++)c[d]=a;return c};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192)for(var f=goog.array.slice(d,e,e+8192),f=goog.array.flatten.apply(null,f),g=0;g<f.length;g++)b.push(f[g]);else b.push(d)}return b};
		goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0])};
		goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++)arguments[d].length<c&&(c=arguments[d].length);for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++)e.push(arguments[f][d]);b.push(e)}return b};goog.array.shuffle=function(a,b){for(var c=b||Math.random,d=a.length-1;0<d;d--){var e=Math.floor(c()*(d+1)),f=a[d];a[d]=a[e];a[e]=f}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b])});return c};
		goog.array.concatMap=function(a,b,c){return goog.array.concat.apply([],goog.array.map(a,b,c))};goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:""};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_()};
		goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.contains(b,a)};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.caseInsensitiveContains(b,a)};
		goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=RegExp("(\\w[\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?","g"),c=[],d;d=b.exec(a);)c.push([d[1],d[2],d[3]||void 0]);return c};goog.object={};goog.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b};goog.object.forEach=function(a,b,c){for(var d in a)b.call(c,a[d],d,a)};goog.object.filter=function(a,b,c){var d={},e;for(e in a)b.call(c,a[e],e,a)&&(d[e]=a[e]);return d};goog.object.map=function(a,b,c){var d={},e;for(e in a)d[e]=b.call(c,a[e],e,a);return d};goog.object.some=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return!0;return!1};
		goog.object.every=function(a,b,c){for(var d in a)if(!b.call(c,a[d],d,a))return!1;return!0};goog.object.getCount=function(a){var b=0,c;for(c in a)b++;return b};goog.object.getAnyKey=function(a){for(var b in a)return b};goog.object.getAnyValue=function(a){for(var b in a)return a[b]};goog.object.contains=function(a,b){return goog.object.containsValue(a,b)};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b};
		goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b};goog.object.getValueByKeys=function(a,b){for(var c=goog.isArrayLike(b),d=c?b:arguments,c=c?0:1;c<d.length&&(a=a[d[c]],goog.isDef(a));c++);return a};goog.object.containsKey=function(a,b){return null!==a&&b in a};goog.object.containsValue=function(a,b){for(var c in a)if(a[c]==b)return!0;return!1};goog.object.findKey=function(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d};
		goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b]};goog.object.isEmpty=function(a){for(var b in a)return!1;return!0};goog.object.clear=function(a){for(var b in a)delete a[b]};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c)};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c};
		goog.object.set=function(a,b,c){a[b]=c};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c};goog.object.equals=function(a,b){for(var c in a)if(!(c in b)||a[c]!==b[c])return!1;for(c in b)if(!(c in a))return!1;return!0};goog.object.clone=function(a){var b={},c;for(c in a)b[c]=a[c];return b};
		goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();var b="array"==b?[]:{},c;for(c in a)b[c]=goog.object.unsafeClone(a[c]);return b}return a};goog.object.transpose=function(a){var b={},c;for(c in a)b[a[c]]=c;return b};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
		goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++)c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};
		goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2)c[arguments[d]]=arguments[d+1];return c};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++)c[arguments[d]]=!0;return c};
		goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a)};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.browser.matchEdge_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")};
		goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdge_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))};goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")};
		goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")};
		goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdge_()};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())};
		goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdge_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;
		goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")};
		goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||""}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);var b=goog.labs.userAgent.util.extractVersionTuples(b),c={};goog.array.forEach(b,function(a){c[a[0]]=a[1]});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):
		goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||""};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(),a)};
		goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];var b="",c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1])if(a&&a[1])switch(a[1]){case "4.0":b="8.0";break;case "5.0":b="9.0";break;case "6.0":b="10.0";break;case "7.0":b="11.0"}else b="7.0";else b=c[1];return b};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")};
		goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()};
		goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){var a=goog.labs.userAgent.util.extractVersionTuples(a),b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];var a=a[0],c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1]}return""};
		goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a)};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){var c=goog.array.find(a,function(a){return b==a[0]});return c&&c[1]||""};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")};
		goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")};
		goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")};
		goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,
		b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||""};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a)};goog.reflect={};goog.reflect.object=function(a,b){return b};goog.reflect.objectProperty=function(a,b){return a};goog.reflect.sinkValue=function(a){goog.reflect.sinkValue[" "](a);return a};goog.reflect.sinkValue[" "]=goog.nullFunction;goog.reflect.canAccessProperty=function(a,b){try{return goog.reflect.sinkValue(a[b]),!0}catch(c){}return!1};goog.reflect.cache=function(a,b,c,d){d=d?d(b):b;return Object.prototype.hasOwnProperty.call(a,d)?a[d]:a[d]=c(b)};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()};
		goog.userAgent.getNavigator=function(){return goog.global.navigator||null};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;
		goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")};goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;
		goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigator();return a&&a.platform||""};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.ASSUME_IPOD=!1;
		goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();
		goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigator();return!!a&&goog.string.contains(a.appVersion||"","X11")};goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();
		goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod();
		goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos();goog.userAgent.determineVersion_=function(){var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),null!=b&&b>parseFloat(a))?String(b):a};
		goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return/rv\:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return/Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return/WebKit\/(\S+)/.exec(a);if(goog.userAgent.OPERA)return/(?:Version)[ \/]?(\S+)/.exec(a)};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0};
		goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b)};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,a,function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,a)})};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;
		goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){var a=goog.global.document,b=goog.userAgent.getDocumentMode_();if(a&&goog.userAgent.IE)return b||("CSS1Compat"==a.compatMode?parseInt(goog.userAgent.VERSION,10):5)}();goog.events={};
		goog.events.BrowserFeature={HAS_W3C_BUTTON:!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9),HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9),SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("9"),HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT||goog.userAgent.isVersionOrHigher("528"),HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO&&goog.userAgent.isVersionOrHigher("1.9b")||goog.userAgent.IE&&goog.userAgent.isVersionOrHigher("8")||
		goog.userAgent.OPERA&&goog.userAgent.isVersionOrHigher("9.5")||goog.userAgent.WEBKIT&&goog.userAgent.isVersionOrHigher("528"),HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO&&!goog.userAgent.isVersionOrHigher("8")||goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("9"),TOUCH_ENABLED:"ontouchstart"in goog.global||!!(goog.global.document&&document.documentElement&&"ontouchstart"in document.documentElement)||!(!goog.global.navigator||!goog.global.navigator.msMaxTouchPoints)};goog.disposable={};goog.disposable.IDisposable=function(){};goog.disposable.IDisposable.prototype.dispose=goog.abstractMethod;goog.disposable.IDisposable.prototype.isDisposed=goog.abstractMethod;goog.Disposable=function(){goog.Disposable.MONITORING_MODE!=goog.Disposable.MonitoringMode.OFF&&(goog.Disposable.INCLUDE_STACK_ON_CREATION&&(this.creationStack=Error().stack),goog.Disposable.instances_[goog.getUid(this)]=this);this.disposed_=this.disposed_;this.onDisposeCallbacks_=this.onDisposeCallbacks_};goog.Disposable.MonitoringMode={OFF:0,PERMANENT:1,INTERACTIVE:2};goog.Disposable.MONITORING_MODE=0;goog.Disposable.INCLUDE_STACK_ON_CREATION=!0;goog.Disposable.instances_={};
		goog.Disposable.getUndisposedObjects=function(){var a=[],b;for(b in goog.Disposable.instances_)goog.Disposable.instances_.hasOwnProperty(b)&&a.push(goog.Disposable.instances_[Number(b)]);return a};goog.Disposable.clearUndisposedObjects=function(){goog.Disposable.instances_={}};goog.Disposable.prototype.disposed_=!1;goog.Disposable.prototype.isDisposed=function(){return this.disposed_};goog.Disposable.prototype.getDisposed=goog.Disposable.prototype.isDisposed;
		goog.Disposable.prototype.dispose=function(){if(!this.disposed_&&(this.disposed_=!0,this.disposeInternal(),goog.Disposable.MONITORING_MODE!=goog.Disposable.MonitoringMode.OFF)){var a=goog.getUid(this);if(goog.Disposable.MONITORING_MODE==goog.Disposable.MonitoringMode.PERMANENT&&!goog.Disposable.instances_.hasOwnProperty(a))throw Error(this+" did not call the goog.Disposable base constructor or was disposed of after a clearUndisposedObjects call");delete goog.Disposable.instances_[a]}};
		goog.Disposable.prototype.registerDisposable=function(a){this.addOnDisposeCallback(goog.partial(goog.dispose,a))};goog.Disposable.prototype.addOnDisposeCallback=function(a,b){this.disposed_?goog.isDef(b)?a.call(b):a():(this.onDisposeCallbacks_||(this.onDisposeCallbacks_=[]),this.onDisposeCallbacks_.push(goog.isDef(b)?goog.bind(a,b):a))};goog.Disposable.prototype.disposeInternal=function(){if(this.onDisposeCallbacks_)for(;this.onDisposeCallbacks_.length;)this.onDisposeCallbacks_.shift()()};
		goog.Disposable.isDisposed=function(a){return a&&"function"==typeof a.isDisposed?a.isDisposed():!1};goog.dispose=function(a){a&&"function"==typeof a.dispose&&a.dispose()};goog.disposeAll=function(a){for(var b=0,c=arguments.length;b<c;++b){var d=arguments[b];goog.isArrayLike(d)?goog.disposeAll.apply(null,d):goog.dispose(d)}};goog.events.EventId=function(a){this.id=a};goog.events.EventId.prototype.toString=function(){return this.id};goog.events.Event=function(a,b){this.type=a instanceof goog.events.EventId?String(a):a;this.currentTarget=this.target=b;this.defaultPrevented=this.propagationStopped_=!1;this.returnValue_=!0};goog.events.Event.prototype.stopPropagation=function(){this.propagationStopped_=!0};goog.events.Event.prototype.preventDefault=function(){this.defaultPrevented=!0;this.returnValue_=!1};goog.events.Event.stopPropagation=function(a){a.stopPropagation()};goog.events.Event.preventDefault=function(a){a.preventDefault()};goog.events.getVendorPrefixedName_=function(a){return goog.userAgent.WEBKIT?"webkit"+a:goog.userAgent.OPERA?"o"+a.toLowerCase():a.toLowerCase()};
		goog.events.EventType={CLICK:"click",RIGHTCLICK:"rightclick",DBLCLICK:"dblclick",MOUSEDOWN:"mousedown",MOUSEUP:"mouseup",MOUSEOVER:"mouseover",MOUSEOUT:"mouseout",MOUSEMOVE:"mousemove",MOUSEENTER:"mouseenter",MOUSELEAVE:"mouseleave",SELECTIONCHANGE:"selectionchange",SELECTSTART:"selectstart",WHEEL:"wheel",KEYPRESS:"keypress",KEYDOWN:"keydown",KEYUP:"keyup",BLUR:"blur",FOCUS:"focus",DEACTIVATE:"deactivate",FOCUSIN:goog.userAgent.IE?"focusin":"DOMFocusIn",FOCUSOUT:goog.userAgent.IE?"focusout":"DOMFocusOut",
		CHANGE:"change",RESET:"reset",SELECT:"select",SUBMIT:"submit",INPUT:"input",PROPERTYCHANGE:"propertychange",DRAGSTART:"dragstart",DRAG:"drag",DRAGENTER:"dragenter",DRAGOVER:"dragover",DRAGLEAVE:"dragleave",DROP:"drop",DRAGEND:"dragend",TOUCHSTART:"touchstart",TOUCHMOVE:"touchmove",TOUCHEND:"touchend",TOUCHCANCEL:"touchcancel",BEFOREUNLOAD:"beforeunload",CONSOLEMESSAGE:"consolemessage",CONTEXTMENU:"contextmenu",DEVICEORIENTATION:"deviceorientation",DOMCONTENTLOADED:"DOMContentLoaded",ERROR:"error",
		HELP:"help",LOAD:"load",LOSECAPTURE:"losecapture",ORIENTATIONCHANGE:"orientationchange",READYSTATECHANGE:"readystatechange",RESIZE:"resize",SCROLL:"scroll",UNLOAD:"unload",CANPLAY:"canplay",CANPLAYTHROUGH:"canplaythrough",DURATIONCHANGE:"durationchange",EMPTIED:"emptied",ENDED:"ended",LOADEDDATA:"loadeddata",LOADEDMETADATA:"loadedmetadata",PAUSE:"pause",PLAY:"play",PLAYING:"playing",RATECHANGE:"ratechange",SEEKED:"seeked",SEEKING:"seeking",STALLED:"stalled",SUSPEND:"suspend",TIMEUPDATE:"timeupdate",
		VOLUMECHANGE:"volumechange",WAITING:"waiting",HASHCHANGE:"hashchange",PAGEHIDE:"pagehide",PAGESHOW:"pageshow",POPSTATE:"popstate",COPY:"copy",PASTE:"paste",CUT:"cut",BEFORECOPY:"beforecopy",BEFORECUT:"beforecut",BEFOREPASTE:"beforepaste",ONLINE:"online",OFFLINE:"offline",MESSAGE:"message",CONNECT:"connect",ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"),ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"),ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"),
		TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"),POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTERCANCEL:"pointercancel",POINTERMOVE:"pointermove",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",GOTPOINTERCAPTURE:"gotpointercapture",LOSTPOINTERCAPTURE:"lostpointercapture",MSGESTURECHANGE:"MSGestureChange",MSGESTUREEND:"MSGestureEnd",MSGESTUREHOLD:"MSGestureHold",MSGESTURESTART:"MSGestureStart",MSGESTURETAP:"MSGestureTap",
		MSGOTPOINTERCAPTURE:"MSGotPointerCapture",MSINERTIASTART:"MSInertiaStart",MSLOSTPOINTERCAPTURE:"MSLostPointerCapture",MSPOINTERCANCEL:"MSPointerCancel",MSPOINTERDOWN:"MSPointerDown",MSPOINTERENTER:"MSPointerEnter",MSPOINTERHOVER:"MSPointerHover",MSPOINTERLEAVE:"MSPointerLeave",MSPOINTERMOVE:"MSPointerMove",MSPOINTEROUT:"MSPointerOut",MSPOINTEROVER:"MSPointerOver",MSPOINTERUP:"MSPointerUp",TEXT:"text",TEXTINPUT:"textInput",COMPOSITIONSTART:"compositionstart",COMPOSITIONUPDATE:"compositionupdate",COMPOSITIONEND:"compositionend",
		EXIT:"exit",LOADABORT:"loadabort",LOADCOMMIT:"loadcommit",LOADREDIRECT:"loadredirect",LOADSTART:"loadstart",LOADSTOP:"loadstop",RESPONSIVE:"responsive",SIZECHANGED:"sizechanged",UNRESPONSIVE:"unresponsive",VISIBILITYCHANGE:"visibilitychange",STORAGE:"storage",DOMSUBTREEMODIFIED:"DOMSubtreeModified",DOMNODEINSERTED:"DOMNodeInserted",DOMNODEREMOVED:"DOMNodeRemoved",DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument",DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument",DOMATTRMODIFIED:"DOMAttrModified",
		DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified",BEFOREPRINT:"beforeprint",AFTERPRINT:"afterprint"};goog.events.BrowserEvent=function(a,b){goog.events.Event.call(this,a?a.type:"");this.relatedTarget=this.currentTarget=this.target=null;this.charCode=this.keyCode=this.button=this.screenY=this.screenX=this.clientY=this.clientX=this.offsetY=this.offsetX=0;this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.state=null;this.platformModifierKey=!1;this.event_=null;a&&this.init(a,b)};goog.inherits(goog.events.BrowserEvent,goog.events.Event);
		goog.events.BrowserEvent.MouseButton={LEFT:0,MIDDLE:1,RIGHT:2};goog.events.BrowserEvent.IEButtonMap=[1,4,2];
		goog.events.BrowserEvent.prototype.init=function(a,b){var c=this.type=a.type,d=a.changedTouches?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.currentTarget=b;var e=a.relatedTarget;e?goog.userAgent.GECKO&&(goog.reflect.canAccessProperty(e,"nodeName")||(e=null)):c==goog.events.EventType.MOUSEOVER?e=a.fromElement:c==goog.events.EventType.MOUSEOUT&&(e=a.toElement);this.relatedTarget=e;goog.isNull(d)?(this.offsetX=goog.userAgent.WEBKIT||void 0!==a.offsetX?a.offsetX:a.layerX,this.offsetY=
		goog.userAgent.WEBKIT||void 0!==a.offsetY?a.offsetY:a.layerY,this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0):(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0);this.button=a.button;this.keyCode=a.keyCode||0;this.charCode=a.charCode||("keypress"==c?a.keyCode:0);this.ctrlKey=a.ctrlKey;this.altKey=
		a.altKey;this.shiftKey=a.shiftKey;this.metaKey=a.metaKey;this.platformModifierKey=goog.userAgent.MAC?a.metaKey:a.ctrlKey;this.state=a.state;this.event_=a;a.defaultPrevented&&this.preventDefault()};goog.events.BrowserEvent.prototype.isButton=function(a){return goog.events.BrowserFeature.HAS_W3C_BUTTON?this.event_.button==a:"click"==this.type?a==goog.events.BrowserEvent.MouseButton.LEFT:!!(this.event_.button&goog.events.BrowserEvent.IEButtonMap[a])};
		goog.events.BrowserEvent.prototype.isMouseActionButton=function(){return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT)&&!(goog.userAgent.WEBKIT&&goog.userAgent.MAC&&this.ctrlKey)};goog.events.BrowserEvent.prototype.stopPropagation=function(){goog.events.BrowserEvent.superClass_.stopPropagation.call(this);this.event_.stopPropagation?this.event_.stopPropagation():this.event_.cancelBubble=!0};
		goog.events.BrowserEvent.prototype.preventDefault=function(){goog.events.BrowserEvent.superClass_.preventDefault.call(this);var a=this.event_;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};goog.events.BrowserEvent.prototype.getBrowserEvent=function(){return this.event_};goog.events.Listenable=function(){};goog.events.Listenable.IMPLEMENTED_BY_PROP="closure_listenable_"+(1E6*Math.random()|0);goog.events.Listenable.addImplementation=function(a){a.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP]=!0};goog.events.Listenable.isImplementedBy=function(a){return!(!a||!a[goog.events.Listenable.IMPLEMENTED_BY_PROP])};goog.events.ListenableKey=function(){};goog.events.ListenableKey.counter_=0;goog.events.ListenableKey.reserveKey=function(){return++goog.events.ListenableKey.counter_};goog.events.Listener=function(a,b,c,d,e,f){goog.events.Listener.ENABLE_MONITORING&&(this.creationStack=Error().stack);this.listener=a;this.proxy=b;this.src=c;this.type=d;this.capture=!!e;this.handler=f;this.key=goog.events.ListenableKey.reserveKey();this.removed=this.callOnce=!1};goog.events.Listener.ENABLE_MONITORING=!1;goog.events.Listener.prototype.markAsRemoved=function(){this.removed=!0;this.handler=this.src=this.proxy=this.listener=null};goog.events.ListenerMap=function(a){this.src=a;this.listeners={};this.typeCount_=0};goog.events.ListenerMap.prototype.getTypeCount=function(){return this.typeCount_};goog.events.ListenerMap.prototype.getListenerCount=function(){var a=0,b;for(b in this.listeners)a+=this.listeners[b].length;return a};
		goog.events.ListenerMap.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.listeners[f];a||(a=this.listeners[f]=[],this.typeCount_++);var g=goog.events.ListenerMap.findListenerIndex_(a,b,d,e);-1<g?(b=a[g],c||(b.callOnce=!1)):(b=new goog.events.Listener(b,null,this.src,f,!!d,e),b.callOnce=c,a.push(b));return b};
		goog.events.ListenerMap.prototype.remove=function(a,b,c,d){a=a.toString();if(!(a in this.listeners))return!1;var e=this.listeners[a];b=goog.events.ListenerMap.findListenerIndex_(e,b,c,d);return-1<b?(e[b].markAsRemoved(),goog.array.removeAt(e,b),0==e.length&&(delete this.listeners[a],this.typeCount_--),!0):!1};
		goog.events.ListenerMap.prototype.removeByKey=function(a){var b=a.type;if(!(b in this.listeners))return!1;var c=goog.array.remove(this.listeners[b],a);c&&(a.markAsRemoved(),0==this.listeners[b].length&&(delete this.listeners[b],this.typeCount_--));return c};goog.events.ListenerMap.prototype.removeAll=function(a){a=a&&a.toString();var b=0,c;for(c in this.listeners)if(!a||c==a){for(var d=this.listeners[c],e=0;e<d.length;e++)++b,d[e].markAsRemoved();delete this.listeners[c];this.typeCount_--}return b};
		goog.events.ListenerMap.prototype.getListeners=function(a,b){var c=this.listeners[a.toString()],d=[];if(c)for(var e=0;e<c.length;++e){var f=c[e];f.capture==b&&d.push(f)}return d};goog.events.ListenerMap.prototype.getListener=function(a,b,c,d){a=this.listeners[a.toString()];var e=-1;a&&(e=goog.events.ListenerMap.findListenerIndex_(a,b,c,d));return-1<e?a[e]:null};
		goog.events.ListenerMap.prototype.hasListener=function(a,b){var c=goog.isDef(a),d=c?a.toString():"",e=goog.isDef(b);return goog.object.some(this.listeners,function(a,g){for(var f=0;f<a.length;++f)if(!(c&&a[f].type!=d||e&&a[f].capture!=b))return!0;return!1})};goog.events.ListenerMap.findListenerIndex_=function(a,b,c,d){for(var e=0;e<a.length;++e){var f=a[e];if(!f.removed&&f.listener==b&&f.capture==!!c&&f.handler==d)return e}return-1};goog.events.LISTENER_MAP_PROP_="closure_lm_"+(1E6*Math.random()|0);goog.events.onString_="on";goog.events.onStringMap_={};goog.events.CaptureSimulationMode={OFF_AND_FAIL:0,OFF_AND_SILENT:1,ON:2};goog.events.CAPTURE_SIMULATION_MODE=2;goog.events.listenerCountEstimate_=0;
		goog.events.listen=function(a,b,c,d,e){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.listen(a,b[f],c,d,e);return null}c=goog.events.wrapListener(c);return goog.events.Listenable.isImplementedBy(a)?a.listen(b,c,d,e):goog.events.listen_(a,b,c,!1,d,e)};
		goog.events.listen_=function(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var g=!!e;if(g&&!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT){if(goog.events.CAPTURE_SIMULATION_MODE==goog.events.CaptureSimulationMode.OFF_AND_FAIL)return goog.asserts.fail("Can not register capture listener in IE8-."),null;if(goog.events.CAPTURE_SIMULATION_MODE==goog.events.CaptureSimulationMode.OFF_AND_SILENT)return null}var h=goog.events.getListenerMap_(a);h||(a[goog.events.LISTENER_MAP_PROP_]=h=new goog.events.ListenerMap(a));
		c=h.add(b,c,d,e,f);if(c.proxy)return c;d=goog.events.getProxy();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)a.addEventListener(b.toString(),d,g);else if(a.attachEvent)a.attachEvent(goog.events.getOnString_(b.toString()),d);else throw Error("addEventListener and attachEvent are unavailable.");goog.events.listenerCountEstimate_++;return c};
		goog.events.getProxy=function(){var a=goog.events.handleBrowserEvent_,b=goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b};
		goog.events.listenOnce=function(a,b,c,d,e){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.listenOnce(a,b[f],c,d,e);return null}c=goog.events.wrapListener(c);return goog.events.Listenable.isImplementedBy(a)?a.listenOnce(b,c,d,e):goog.events.listen_(a,b,c,!0,d,e)};goog.events.listenWithWrapper=function(a,b,c,d,e){b.listen(a,c,d,e)};
		goog.events.unlisten=function(a,b,c,d,e){if(goog.isArray(b)){for(var f=0;f<b.length;f++)goog.events.unlisten(a,b[f],c,d,e);return null}c=goog.events.wrapListener(c);if(goog.events.Listenable.isImplementedBy(a))return a.unlisten(b,c,d,e);if(!a)return!1;d=!!d;if(a=goog.events.getListenerMap_(a))if(b=a.getListener(b,c,d,e))return goog.events.unlistenByKey(b);return!1};
		goog.events.unlistenByKey=function(a){if(goog.isNumber(a)||!a||a.removed)return!1;var b=a.src;if(goog.events.Listenable.isImplementedBy(b))return b.unlistenByKey(a);var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent&&b.detachEvent(goog.events.getOnString_(c),d);goog.events.listenerCountEstimate_--;(c=goog.events.getListenerMap_(b))?(c.removeByKey(a),0==c.getTypeCount()&&(c.src=null,b[goog.events.LISTENER_MAP_PROP_]=null)):a.markAsRemoved();return!0};
		goog.events.unlistenWithWrapper=function(a,b,c,d,e){b.unlisten(a,c,d,e)};goog.events.removeAll=function(a,b){if(!a)return 0;if(goog.events.Listenable.isImplementedBy(a))return a.removeAllListeners(b);var c=goog.events.getListenerMap_(a);if(!c)return 0;var d=0,e=b&&b.toString(),f;for(f in c.listeners)if(!e||f==e)for(var g=c.listeners[f].concat(),h=0;h<g.length;++h)goog.events.unlistenByKey(g[h])&&++d;return d};
		goog.events.getListeners=function(a,b,c){return goog.events.Listenable.isImplementedBy(a)?a.getListeners(b,c):a?(a=goog.events.getListenerMap_(a))?a.getListeners(b,c):[]:[]};goog.events.getListener=function(a,b,c,d,e){c=goog.events.wrapListener(c);d=!!d;return goog.events.Listenable.isImplementedBy(a)?a.getListener(b,c,d,e):a?(a=goog.events.getListenerMap_(a))?a.getListener(b,c,d,e):null:null};
		goog.events.hasListener=function(a,b,c){if(goog.events.Listenable.isImplementedBy(a))return a.hasListener(b,c);a=goog.events.getListenerMap_(a);return!!a&&a.hasListener(b,c)};goog.events.expose=function(a){var b=[],c;for(c in a)a[c]&&a[c].id?b.push(c+" = "+a[c]+" ("+a[c].id+")"):b.push(c+" = "+a[c]);return b.join("\n")};goog.events.getOnString_=function(a){return a in goog.events.onStringMap_?goog.events.onStringMap_[a]:goog.events.onStringMap_[a]=goog.events.onString_+a};
		goog.events.fireListeners=function(a,b,c,d){return goog.events.Listenable.isImplementedBy(a)?a.fireListeners(b,c,d):goog.events.fireListeners_(a,b,c,d)};goog.events.fireListeners_=function(a,b,c,d){var e=!0;if(a=goog.events.getListenerMap_(a))if(b=a.listeners[b.toString()])for(b=b.concat(),a=0;a<b.length;a++){var f=b[a];f&&f.capture==c&&!f.removed&&(f=goog.events.fireListener(f,d),e=e&&!1!==f)}return e};
		goog.events.fireListener=function(a,b){var c=a.listener,d=a.handler||a.src;a.callOnce&&goog.events.unlistenByKey(a);return c.call(d,b)};goog.events.getTotalListenerCount=function(){return goog.events.listenerCountEstimate_};goog.events.dispatchEvent=function(a,b){goog.asserts.assert(goog.events.Listenable.isImplementedBy(a),"Can not use goog.events.dispatchEvent with non-goog.events.Listenable instance.");return a.dispatchEvent(b)};
		goog.events.protectBrowserEventEntryPoint=function(a){goog.events.handleBrowserEvent_=a.protectEntryPoint(goog.events.handleBrowserEvent_)};
		goog.events.handleBrowserEvent_=function(a,b){if(a.removed)return!0;if(!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT){var c=b||goog.getObjectByName("window.event"),d=new goog.events.BrowserEvent(c,this),e=!0;if(goog.events.CAPTURE_SIMULATION_MODE==goog.events.CaptureSimulationMode.ON){if(!goog.events.isMarkedIeEvent_(c)){goog.events.markIeEvent_(c);for(var c=[],f=d.currentTarget;f;f=f.parentNode)c.push(f);for(var f=a.type,g=c.length-1;!d.propagationStopped_&&0<=g;g--){d.currentTarget=c[g];var h=
		goog.events.fireListeners_(c[g],f,!0,d),e=e&&h}for(g=0;!d.propagationStopped_&&g<c.length;g++)d.currentTarget=c[g],h=goog.events.fireListeners_(c[g],f,!1,d),e=e&&h}}else e=goog.events.fireListener(a,d);return e}return goog.events.fireListener(a,new goog.events.BrowserEvent(b,this))};goog.events.markIeEvent_=function(a){var b=!1;if(0==a.keyCode)try{a.keyCode=-1;return}catch(c){b=!0}if(b||void 0==a.returnValue)a.returnValue=!0};goog.events.isMarkedIeEvent_=function(a){return 0>a.keyCode||void 0!=a.returnValue};
		goog.events.uniqueIdCounter_=0;goog.events.getUniqueId=function(a){return a+"_"+goog.events.uniqueIdCounter_++};goog.events.getListenerMap_=function(a){a=a[goog.events.LISTENER_MAP_PROP_];return a instanceof goog.events.ListenerMap?a:null};goog.events.LISTENER_WRAPPER_PROP_="__closure_events_fn_"+(1E9*Math.random()>>>0);
		goog.events.wrapListener=function(a){goog.asserts.assert(a,"Listener can not be null.");if(goog.isFunction(a))return a;goog.asserts.assert(a.handleEvent,"An object listener must have handleEvent method.");a[goog.events.LISTENER_WRAPPER_PROP_]||(a[goog.events.LISTENER_WRAPPER_PROP_]=function(b){return a.handleEvent(b)});return a[goog.events.LISTENER_WRAPPER_PROP_]};goog.debug.entryPointRegistry.register(function(a){goog.events.handleBrowserEvent_=a(goog.events.handleBrowserEvent_)});goog.math={};goog.math.randomInt=function(a){return Math.floor(Math.random()*a)};goog.math.uniformRandom=function(a,b){return a+Math.random()*(b-a)};goog.math.clamp=function(a,b,c){return Math.min(Math.max(a,b),c)};goog.math.modulo=function(a,b){var c=a%b;return 0>c*b?c+b:c};goog.math.lerp=function(a,b,c){return a+c*(b-a)};goog.math.nearlyEquals=function(a,b,c){return Math.abs(a-b)<=(c||1E-6)};goog.math.standardAngle=function(a){return goog.math.modulo(a,360)};
		goog.math.standardAngleInRadians=function(a){return goog.math.modulo(a,2*Math.PI)};goog.math.toRadians=function(a){return a*Math.PI/180};goog.math.toDegrees=function(a){return 180*a/Math.PI};goog.math.angleDx=function(a,b){return b*Math.cos(goog.math.toRadians(a))};goog.math.angleDy=function(a,b){return b*Math.sin(goog.math.toRadians(a))};goog.math.angle=function(a,b,c,d){return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(d-b,c-a)))};
		goog.math.angleDifference=function(a,b){var c=goog.math.standardAngle(b)-goog.math.standardAngle(a);180<c?c-=360:-180>=c&&(c=360+c);return c};goog.math.sign=function(a){return 0<a?1:0>a?-1:a};
		goog.math.longestCommonSubsequence=function(a,b,c,d){c=c||function(a,b){return a==b};d=d||function(b,c){return a[b]};for(var e=a.length,f=b.length,g=[],h=0;h<e+1;h++)g[h]=[],g[h][0]=0;for(var k=0;k<f+1;k++)g[0][k]=0;for(h=1;h<=e;h++)for(k=1;k<=f;k++)c(a[h-1],b[k-1])?g[h][k]=g[h-1][k-1]+1:g[h][k]=Math.max(g[h-1][k],g[h][k-1]);for(var l=[],h=e,k=f;0<h&&0<k;)c(a[h-1],b[k-1])?(l.unshift(d(h-1,k-1)),h--,k--):g[h-1][k]>g[h][k-1]?h--:k--;return l};
		goog.math.sum=function(a){return goog.array.reduce(arguments,function(a,c){return a+c},0)};goog.math.average=function(a){return goog.math.sum.apply(null,arguments)/arguments.length};goog.math.sampleVariance=function(a){var b=arguments.length;if(2>b)return 0;var c=goog.math.average.apply(null,arguments);return goog.math.sum.apply(null,goog.array.map(arguments,function(a){return Math.pow(a-c,2)}))/(b-1)};goog.math.standardDeviation=function(a){return Math.sqrt(goog.math.sampleVariance.apply(null,arguments))};
		goog.math.isInt=function(a){return isFinite(a)&&0==a%1};goog.math.isFiniteNumber=function(a){return isFinite(a)&&!isNaN(a)};goog.math.isNegativeZero=function(a){return 0==a&&0>1/a};goog.math.log10Floor=function(a){if(0<a){var b=Math.round(Math.log(a)*Math.LOG10E);return b-(parseFloat("1e"+b)>a?1:0)}return 0==a?-Infinity:NaN};goog.math.safeFloor=function(a,b){goog.asserts.assert(!goog.isDef(b)||0<b);return Math.floor(a+(b||2E-15))};
		goog.math.safeCeil=function(a,b){goog.asserts.assert(!goog.isDef(b)||0<b);return Math.ceil(a-(b||2E-15))};goog.dom.BrowserFeature={CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9),CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO&&!goog.userAgent.IE||goog.userAgent.IE&&goog.userAgent.isDocumentModeOrHigher(9)||goog.userAgent.GECKO&&goog.userAgent.isVersionOrHigher("1.9.1"),CAN_USE_INNER_TEXT:goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("9"),CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE||goog.userAgent.OPERA||goog.userAgent.WEBKIT,INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE,
		LEGACY_IE_RANGES:goog.userAgent.IE&&!goog.userAgent.isDocumentModeOrHigher(9)};goog.dom.TagName=function(a){this.tagName_=a};goog.dom.TagName.prototype.toString=function(){return this.tagName_};goog.dom.TagName.A=new goog.dom.TagName("A");goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR");goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM");goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS");goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET");goog.dom.TagName.AREA=new goog.dom.TagName("AREA");goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE");
		goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE");goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO");goog.dom.TagName.B=new goog.dom.TagName("B");goog.dom.TagName.BASE=new goog.dom.TagName("BASE");goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT");goog.dom.TagName.BDI=new goog.dom.TagName("BDI");goog.dom.TagName.BDO=new goog.dom.TagName("BDO");goog.dom.TagName.BIG=new goog.dom.TagName("BIG");goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE");goog.dom.TagName.BODY=new goog.dom.TagName("BODY");
		goog.dom.TagName.BR=new goog.dom.TagName("BR");goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON");goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS");goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION");goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER");goog.dom.TagName.CITE=new goog.dom.TagName("CITE");goog.dom.TagName.CODE=new goog.dom.TagName("CODE");goog.dom.TagName.COL=new goog.dom.TagName("COL");goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP");
		goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND");goog.dom.TagName.DATA=new goog.dom.TagName("DATA");goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST");goog.dom.TagName.DD=new goog.dom.TagName("DD");goog.dom.TagName.DEL=new goog.dom.TagName("DEL");goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS");goog.dom.TagName.DFN=new goog.dom.TagName("DFN");goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG");goog.dom.TagName.DIR=new goog.dom.TagName("DIR");goog.dom.TagName.DIV=new goog.dom.TagName("DIV");
		goog.dom.TagName.DL=new goog.dom.TagName("DL");goog.dom.TagName.DT=new goog.dom.TagName("DT");goog.dom.TagName.EM=new goog.dom.TagName("EM");goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED");goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET");goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION");goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE");goog.dom.TagName.FONT=new goog.dom.TagName("FONT");goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER");goog.dom.TagName.FORM=new goog.dom.TagName("FORM");
		goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME");goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET");goog.dom.TagName.H1=new goog.dom.TagName("H1");goog.dom.TagName.H2=new goog.dom.TagName("H2");goog.dom.TagName.H3=new goog.dom.TagName("H3");goog.dom.TagName.H4=new goog.dom.TagName("H4");goog.dom.TagName.H5=new goog.dom.TagName("H5");goog.dom.TagName.H6=new goog.dom.TagName("H6");goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD");goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER");
		goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP");goog.dom.TagName.HR=new goog.dom.TagName("HR");goog.dom.TagName.HTML=new goog.dom.TagName("HTML");goog.dom.TagName.I=new goog.dom.TagName("I");goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME");goog.dom.TagName.IMG=new goog.dom.TagName("IMG");goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT");goog.dom.TagName.INS=new goog.dom.TagName("INS");goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX");goog.dom.TagName.KBD=new goog.dom.TagName("KBD");
		goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN");goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL");goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND");goog.dom.TagName.LI=new goog.dom.TagName("LI");goog.dom.TagName.LINK=new goog.dom.TagName("LINK");goog.dom.TagName.MAP=new goog.dom.TagName("MAP");goog.dom.TagName.MARK=new goog.dom.TagName("MARK");goog.dom.TagName.MATH=new goog.dom.TagName("MATH");goog.dom.TagName.MENU=new goog.dom.TagName("MENU");goog.dom.TagName.META=new goog.dom.TagName("META");
		goog.dom.TagName.METER=new goog.dom.TagName("METER");goog.dom.TagName.NAV=new goog.dom.TagName("NAV");goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES");goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT");goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT");goog.dom.TagName.OL=new goog.dom.TagName("OL");goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP");goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION");goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT");
		goog.dom.TagName.P=new goog.dom.TagName("P");goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM");goog.dom.TagName.PRE=new goog.dom.TagName("PRE");goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS");goog.dom.TagName.Q=new goog.dom.TagName("Q");goog.dom.TagName.RP=new goog.dom.TagName("RP");goog.dom.TagName.RT=new goog.dom.TagName("RT");goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY");goog.dom.TagName.S=new goog.dom.TagName("S");goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP");
		goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT");goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION");goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT");goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL");goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE");goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN");goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE");goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG");goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE");
		goog.dom.TagName.SUB=new goog.dom.TagName("SUB");goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY");goog.dom.TagName.SUP=new goog.dom.TagName("SUP");goog.dom.TagName.SVG=new goog.dom.TagName("SVG");goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE");goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY");goog.dom.TagName.TD=new goog.dom.TagName("TD");goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE");goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA");goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT");
		goog.dom.TagName.TH=new goog.dom.TagName("TH");goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD");goog.dom.TagName.TIME=new goog.dom.TagName("TIME");goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE");goog.dom.TagName.TR=new goog.dom.TagName("TR");goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK");goog.dom.TagName.TT=new goog.dom.TagName("TT");goog.dom.TagName.U=new goog.dom.TagName("U");goog.dom.TagName.UL=new goog.dom.TagName("UL");goog.dom.TagName.VAR=new goog.dom.TagName("VAR");
		goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO");goog.dom.TagName.WBR=new goog.dom.TagName("WBR");goog.dom.tags={};goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};goog.dom.tags.isVoidTag=function(a){return!0===goog.dom.tags.VOID_TAGS_[a]};goog.string.TypedString=function(){};goog.string.Const=function(){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_="";this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_};goog.string.Const.prototype.implementsGoogStringTypedString=!0;goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_};
		goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"};goog.string.Const.unwrap=function(a){if(a instanceof goog.string.Const&&a.constructor===goog.string.Const&&a.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_)return a.stringConstValueWithSecurityContract__googStringSecurityPrivate_;goog.asserts.fail("expected object of type Const, got '"+a+"'");return"type_error:Const"};
		goog.string.Const.from=function(a){return goog.string.Const.create__googStringSecurityPrivate_(a)};goog.string.Const.TYPE_MARKER_={};goog.string.Const.create__googStringSecurityPrivate_=function(a){var b=new goog.string.Const;b.stringConstValueWithSecurityContract__googStringSecurityPrivate_=a;return b};goog.string.Const.EMPTY=goog.string.Const.from("");goog.html={};goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="";this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
		goog.html.SafeStyle.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyle.EMPTY;goog.html.SafeStyle.checkStyle_(a);goog.asserts.assert(goog.string.endsWith(a,";"),"Last character of style string is not ';': "+a);goog.asserts.assert(goog.string.contains(a,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+a);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
		goog.html.SafeStyle.checkStyle_=function(a){goog.asserts.assert(!/[<>]/.test(a),"Forbidden characters in style string: "+a)};goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_};goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"});
		goog.html.SafeStyle.unwrap=function(a){if(a instanceof goog.html.SafeStyle&&a.constructor===goog.html.SafeStyle&&a.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleWrappedValue_;goog.asserts.fail("expected object of type SafeStyle, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyle"};goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(a)};
		goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleWrappedValue_=a;return this};goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez";
		goog.html.SafeStyle.create=function(a){var b="",c;for(c in a){if(!/^[-_a-zA-Z0-9]+$/.test(c))throw Error("Name allows only [-_a-zA-Z0-9], got: "+c);var d=a[c];null!=d&&(d instanceof goog.string.Const?(d=goog.string.Const.unwrap(d),goog.asserts.assert(!/[{;}]/.test(d),"Value does not allow [{;}].")):goog.html.SafeStyle.VALUE_RE_.test(d)?goog.html.SafeStyle.hasBalancedQuotes_(d)||(goog.asserts.fail("String value requires balanced quotes, got: "+d),d=goog.html.SafeStyle.INNOCUOUS_STRING):(goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], rgb() and rgba(), got: "+
		d),d=goog.html.SafeStyle.INNOCUOUS_STRING),b+=c+":"+d+";")}if(!b)return goog.html.SafeStyle.EMPTY;goog.html.SafeStyle.checkStyle_(b);return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};goog.html.SafeStyle.hasBalancedQuotes_=function(a){for(var b=!0,c=!0,d=0;d<a.length;d++){var e=a.charAt(d);"'"==e&&c?b=!b:'"'==e&&b&&(c=!c)}return b&&c};goog.html.SafeStyle.VALUE_RE_=/^([-,."'%_!# a-zA-Z0-9]+|(?:rgb|hsl)a?\([0-9.%, ]+\))$/;
		goog.html.SafeStyle.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyle.unwrap(a)};goog.array.forEach(arguments,c);return b?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b):goog.html.SafeStyle.EMPTY};goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="";this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0;goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
		goog.html.SafeStyleSheet.concat=function(a){var b="",c=function(a){goog.isArray(a)?goog.array.forEach(a,c):b+=goog.html.SafeStyleSheet.unwrap(a)};goog.array.forEach(arguments,c);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.SafeStyleSheet.fromConstant=function(a){a=goog.string.Const.unwrap(a);if(0===a.length)return goog.html.SafeStyleSheet.EMPTY;goog.asserts.assert(!goog.string.contains(a,"<"),"Forbidden '<' character in style sheet string: "+a);return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_};
		goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"});
		goog.html.SafeStyleSheet.unwrap=function(a){if(a instanceof goog.html.SafeStyleSheet&&a.constructor===goog.html.SafeStyleSheet&&a.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;goog.asserts.fail("expected object of type SafeStyleSheet, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeStyleSheet"};
		goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(a)};goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=a;return this};goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");goog.fs={};goog.fs.url={};goog.fs.url.createObjectUrl=function(a){return goog.fs.url.getUrlObject_().createObjectURL(a)};goog.fs.url.revokeObjectUrl=function(a){goog.fs.url.getUrlObject_().revokeObjectURL(a)};goog.fs.url.getUrlObject_=function(){var a=goog.fs.url.findUrlObject_();if(null!=a)return a;throw Error("This browser doesn't seem to support blob URLs");};
		goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null};goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()};goog.i18n={};goog.i18n.bidi={};goog.i18n.bidi.FORCE_RTL=!1;
		goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||
		"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4));goog.i18n.bidi.Format={LRE:"\u202a",RLE:"\u202b",PDF:"\u202c",LRM:"\u200e",RLM:"\u200f"};goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0};goog.i18n.bidi.RIGHT="right";goog.i18n.bidi.LEFT="left";goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT;
		goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT;goog.i18n.bidi.toDir=function(a,b){return"number"==typeof a?0<a?goog.i18n.bidi.Dir.LTR:0>a?goog.i18n.bidi.Dir.RTL:b?null:goog.i18n.bidi.Dir.NEUTRAL:null==a?null:a?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};goog.i18n.bidi.ltrChars_="A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u200e\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";goog.i18n.bidi.rtlChars_="\u0591-\u06ef\u06fa-\u07ff\u200f\ufb1d-\ufdff\ufe70-\ufefc";
		goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g;goog.i18n.bidi.stripHtmlIfNeeded_=function(a,b){return b?a.replace(goog.i18n.bidi.htmlSkipReg_,""):a};goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.hasAnyRtl=function(a,b){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl;
		goog.i18n.bidi.hasAnyLtr=function(a,b){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.isRtlChar=function(a){return goog.i18n.bidi.rtlRe_.test(a)};goog.i18n.bidi.isLtrChar=function(a){return goog.i18n.bidi.ltrRe_.test(a)};goog.i18n.bidi.isNeutralChar=function(a){return!goog.i18n.bidi.isLtrChar(a)&&!goog.i18n.bidi.isRtlChar(a)};
		goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]");goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]");goog.i18n.bidi.startsWithRtl=function(a,b){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl;
		goog.i18n.bidi.startsWithLtr=function(a,b){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr;goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/;goog.i18n.bidi.isNeutralText=function(a,b){a=goog.i18n.bidi.stripHtmlIfNeeded_(a,b);return goog.i18n.bidi.isRequiredLtrRe_.test(a)||!goog.i18n.bidi.hasAnyLtr(a)&&!goog.i18n.bidi.hasAnyRtl(a)};
		goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$");goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$");goog.i18n.bidi.endsWithLtr=function(a,b){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr;
		goog.i18n.bidi.endsWithRtl=function(a,b){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(a,b))};goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl;goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;goog.i18n.bidi.isRtlLanguage=function(a){return goog.i18n.bidi.rtlLocalesRe_.test(a)};goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
		goog.i18n.bidi.guardBracketInText=function(a,b){var c=(void 0===b?goog.i18n.bidi.hasAnyRtl(a):b)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM;return a.replace(goog.i18n.bidi.bracketGuardTextRe_,c+"$&"+c)};goog.i18n.bidi.enforceRtlInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+a+"</span>"};goog.i18n.bidi.enforceRtlInText=function(a){return goog.i18n.bidi.Format.RLE+a+goog.i18n.bidi.Format.PDF};
		goog.i18n.bidi.enforceLtrInHtml=function(a){return"<"==a.charAt(0)?a.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+a+"</span>"};goog.i18n.bidi.enforceLtrInText=function(a){return goog.i18n.bidi.Format.LRE+a+goog.i18n.bidi.Format.PDF};goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;goog.i18n.bidi.leftRe_=/left/gi;goog.i18n.bidi.rightRe_=/right/gi;goog.i18n.bidi.tempRe_=/%%%%/g;
		goog.i18n.bidi.mirrorCSS=function(a){return a.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)};goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g;goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g;
		goog.i18n.bidi.normalizeHebrewQuote=function(a){return a.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1\u05f3")};goog.i18n.bidi.wordSeparatorRe_=/\s+/;goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/;goog.i18n.bidi.rtlDetectionThreshold_=.4;
		goog.i18n.bidi.estimateDirection=function(a,b){for(var c=0,d=0,e=!1,f=goog.i18n.bidi.stripHtmlIfNeeded_(a,b).split(goog.i18n.bidi.wordSeparatorRe_),g=0;g<f.length;g++){var h=f[g];goog.i18n.bidi.startsWithRtl(h)?(c++,d++):goog.i18n.bidi.isRequiredLtrRe_.test(h)?e=!0:goog.i18n.bidi.hasAnyLtr(h)?d++:goog.i18n.bidi.hasNumeralsRe_.test(h)&&(e=!0)}return 0==d?e?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:c/d>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR};
		goog.i18n.bidi.detectRtlDirectionality=function(a,b){return goog.i18n.bidi.estimateDirection(a,b)==goog.i18n.bidi.Dir.RTL};goog.i18n.bidi.setElementDirAndAlign=function(a,b){a&&(b=goog.i18n.bidi.toDir(b))&&(a.style.textAlign=b==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,a.dir=b==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")};
		goog.i18n.bidi.setElementDirByTextDirectionality=function(a,b){switch(goog.i18n.bidi.estimateDirection(b)){case goog.i18n.bidi.Dir.LTR:a.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:a.dir="rtl";break;default:a.removeAttribute("dir")}};goog.i18n.bidi.DirectionalString=function(){};goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez";goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0;goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_};
		goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});
		goog.html.SafeUrl.unwrap=function(a){if(a instanceof goog.html.SafeUrl&&a.constructor===goog.html.SafeUrl&&a.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeUrl"};goog.html.SafeUrl.fromConstant=function(a){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};
		goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;goog.html.SafeUrl.fromBlob=function(a){a=goog.html.SAFE_MIME_TYPE_PATTERN_.test(a.type)?goog.fs.url.createObjectUrl(a):goog.html.SafeUrl.INNOCUOUS_STRING;return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.DATA_URL_PATTERN_=/^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
		goog.html.SafeUrl.fromDataUrl=function(a){var b=a.match(goog.html.DATA_URL_PATTERN_),b=b&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(b[1]);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b?a:goog.html.SafeUrl.INNOCUOUS_STRING)};goog.html.SafeUrl.fromTelUrl=function(a){goog.string.caseInsensitiveStartsWith(a,"tel:")||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
		goog.html.SafeUrl.sanitize=function(a){if(a instanceof goog.html.SafeUrl)return a;a=a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);goog.html.SAFE_URL_PATTERN_.test(a)||(a=goog.html.SafeUrl.INNOCUOUS_STRING);return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};
		goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.SafeUrl;b.privateDoNotAccessOrElseSafeHtmlWrappedValue_=a;return b};goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="";this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0;goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_};
		goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR};goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"});
		goog.html.TrustedResourceUrl.unwrap=function(a){if(a instanceof goog.html.TrustedResourceUrl&&a.constructor===goog.html.TrustedResourceUrl&&a.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+a+"' of type "+goog.typeOf(a));return"type_error:TrustedResourceUrl"};
		goog.html.TrustedResourceUrl.format=function(a,b){var c=goog.string.Const.unwrap(a);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(c))throw Error("Invalid TrustedResourceUrl format: "+c);var d=c.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,function(a,d){if(!Object.prototype.hasOwnProperty.call(b,d))throw Error('Found marker, "'+d+'", in format string, "'+c+'", but no valid label mapping found in args: '+JSON.stringify(b));var e=b[d];return e instanceof goog.string.Const?goog.string.Const.unwrap(e):
		encodeURIComponent(String(e))});return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(d)};goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g;goog.html.TrustedResourceUrl.SCHEME_AND_ORIGIN_="(?:(?:https:)?//[0-9a-z.:[\\]-]+)?";goog.html.TrustedResourceUrl.BASE_ABSOLUTE_PATH_="(?:/[0-9a-z_~-]+(?:[/#?]|$))";
		goog.html.TrustedResourceUrl.BASE_URL_=new RegExp("^"+goog.html.TrustedResourceUrl.SCHEME_AND_ORIGIN_+goog.html.TrustedResourceUrl.BASE_ABSOLUTE_PATH_,"i");goog.html.TrustedResourceUrl.fromConstant=function(a){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(a))};goog.html.TrustedResourceUrl.fromConstants=function(a){for(var b="",c=0;c<a.length;c++)b+=goog.string.Const.unwrap(a[c]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(a){var b=new goog.html.TrustedResourceUrl;b.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=a;return b};goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="";this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;this.dir_=null};goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0;goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_};goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0;goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_};
		goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"});
		goog.html.SafeHtml.unwrap=function(a){if(a instanceof goog.html.SafeHtml&&a.constructor===goog.html.SafeHtml&&a.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeHtmlWrappedValue_;goog.asserts.fail("expected object of type SafeHtml, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeHtml"};
		goog.html.SafeHtml.htmlEscape=function(a){if(a instanceof goog.html.SafeHtml)return a;var b=null;a.implementsGoogI18nBidiDirectionalString&&(b=a.getDirection());a=a.implementsGoogStringTypedString?a.getTypedStringValue():String(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(a),b)};
		goog.html.SafeHtml.htmlEscapePreservingNewlines=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(a)),a.getDirection())};
		goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(a){if(a instanceof goog.html.SafeHtml)return a;a=goog.html.SafeHtml.htmlEscape(a);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(a)),a.getDirection())};goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape;goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/;
		goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0};goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};goog.html.SafeHtml.create=function(a,b,c){goog.html.SafeHtml.verifyTagName(String(a));return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(a),b,c)};
		goog.html.SafeHtml.verifyTagName=function(a){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(a))throw Error("Invalid tag name <"+a+">.");if(a.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+a+"> is not allowed for SafeHtml.");};
		goog.html.SafeHtml.createIframe=function(a,b,c,d){a&&goog.html.TrustedResourceUrl.unwrap(a);var e={};e.src=a||null;e.srcdoc=b&&goog.html.SafeHtml.unwrap(b);a=goog.html.SafeHtml.combineAttributes(e,{sandbox:""},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
		goog.html.SafeHtml.createSandboxIframe=function(a,b,c,d){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var e={};e.src=a?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a)):null;e.srcdoc=b||null;e.sandbox="";a=goog.html.SafeHtml.combineAttributes(e,{},c);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",a,d)};
		goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype};goog.html.SafeHtml.createScriptSrc=function(a,b){goog.html.TrustedResourceUrl.unwrap(a);var c=goog.html.SafeHtml.combineAttributes({src:a},{},b);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",c)};
		goog.html.SafeHtml.createStyle=function(a,b){var c=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},b),d="";a=goog.array.concat(a);for(var e=0;e<a.length;e++)d+=goog.html.SafeStyleSheet.unwrap(a[e]);d=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(d,goog.i18n.bidi.Dir.NEUTRAL);return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",c,d)};
		goog.html.SafeHtml.createMetaRefresh=function(a,b){var c=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(a));(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.contains(c,";")&&(c="'"+c.replace(/'/g,"%27")+"'");return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(b||0)+"; url="+c})};
		goog.html.SafeHtml.getAttrNameAndValue_=function(a,b,c){if(c instanceof goog.string.Const)c=goog.string.Const.unwrap(c);else if("style"==b.toLowerCase())c=goog.html.SafeHtml.getStyleValue_(c);else{if(/^on/i.test(b))throw Error('Attribute "'+b+'" requires goog.string.Const value, "'+c+'" given.');if(b.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(c instanceof goog.html.TrustedResourceUrl)c=goog.html.TrustedResourceUrl.unwrap(c);else if(c instanceof goog.html.SafeUrl)c=goog.html.SafeUrl.unwrap(c);
		else if(goog.isString(c))c=goog.html.SafeUrl.sanitize(c).getTypedStringValue();else throw Error('Attribute "'+b+'" on tag "'+a+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+c+'" given.');}c.implementsGoogStringTypedString&&(c=c.getTypedStringValue());goog.asserts.assert(goog.isString(c)||goog.isNumber(c),"String or number value expected, got "+typeof c+" with value: "+c);return b+'="'+goog.string.htmlEscape(String(c))+'"'};
		goog.html.SafeHtml.getStyleValue_=function(a){if(!goog.isObject(a))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof a+" given: "+a);a instanceof goog.html.SafeStyle||(a=goog.html.SafeStyle.create(a));return goog.html.SafeStyle.unwrap(a)};goog.html.SafeHtml.createWithDir=function(a,b,c,d){b=goog.html.SafeHtml.create(b,c,d);b.dir_=a;return b};
		goog.html.SafeHtml.concat=function(a){var b=goog.i18n.bidi.Dir.NEUTRAL,c="",d=function(a){goog.isArray(a)?goog.array.forEach(a,d):(a=goog.html.SafeHtml.htmlEscape(a),c+=goog.html.SafeHtml.unwrap(a),a=a.getDirection(),b==goog.i18n.bidi.Dir.NEUTRAL?b=a:a!=goog.i18n.bidi.Dir.NEUTRAL&&b!=a&&(b=null))};goog.array.forEach(arguments,d);return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(c,b)};
		goog.html.SafeHtml.concatWithDir=function(a,b){var c=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));c.dir_=a;return c};goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(a,b){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(a,b)};goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a,b){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=a;this.dir_=b;return this};
		goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(a,b,c){var d=null,e;e="<"+a+goog.html.SafeHtml.stringifyAttributes(a,b);goog.isDefAndNotNull(c)?goog.isArray(c)||(c=[c]):c=[];goog.dom.tags.isVoidTag(a.toLowerCase())?(goog.asserts.assert(!c.length,"Void tag <"+a+"> does not allow content."),e+=">"):(d=goog.html.SafeHtml.concat(c),e+=">"+goog.html.SafeHtml.unwrap(d)+"</"+a+">",d=d.getDirection());(a=b&&b.dir)&&(d=/^(ltr|rtl|auto)$/i.test(a)?goog.i18n.bidi.Dir.NEUTRAL:null);
		return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(e,d)};goog.html.SafeHtml.stringifyAttributes=function(a,b){var c="";if(b)for(var d in b){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(d))throw Error('Invalid attribute name "'+d+'".');var e=b[d];goog.isDefAndNotNull(e)&&(c+=" "+goog.html.SafeHtml.getAttrNameAndValue_(a,d,e))}return c};
		goog.html.SafeHtml.combineAttributes=function(a,b,c){var d={},e;for(e in a)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=a[e];for(e in b)goog.asserts.assert(e.toLowerCase()==e,"Must be lower case"),d[e]=b[e];for(e in c){var f=e.toLowerCase();if(f in a)throw Error('Cannot override "'+f+'" attribute, got "'+e+'" with value "'+c[e]+'"');f in b&&delete d[f];d[e]=c[e]}return d};
		goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL);goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL);goog.dom.safe={};goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"};goog.dom.safe.insertAdjacentHtml=function(a,b,c){a.insertAdjacentHTML(b,goog.html.SafeHtml.unwrap(c))};goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0};
		goog.dom.safe.setInnerHtml=function(a,b){if(goog.asserts.ENABLE_ASSERTS){var c=a.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[c])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+a.tagName+".");}a.innerHTML=goog.html.SafeHtml.unwrap(b)};goog.dom.safe.setOuterHtml=function(a,b){a.outerHTML=goog.html.SafeHtml.unwrap(b)};goog.dom.safe.setStyle=function(a,b){a.style.cssText=goog.html.SafeStyle.unwrap(b)};goog.dom.safe.documentWrite=function(a,b){a.write(goog.html.SafeHtml.unwrap(b))};
		goog.dom.safe.setAnchorHref=function(a,b){goog.dom.safe.assertIsHTMLAnchorElement_(a);var c;c=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitize(b);a.href=goog.html.SafeUrl.unwrap(c)};goog.dom.safe.setImageSrc=function(a,b){goog.dom.safe.assertIsHTMLImageElement_(a);var c;c=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitize(b);a.src=goog.html.SafeUrl.unwrap(c)};goog.dom.safe.setEmbedSrc=function(a,b){goog.dom.safe.assertIsHTMLEmbedElement_(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};
		goog.dom.safe.setFrameSrc=function(a,b){goog.dom.safe.assertIsHTMLFrameElement_(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setIframeSrc=function(a,b){goog.dom.safe.assertIsHTMLIFrameElement_(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};
		goog.dom.safe.setLinkHrefAndRel=function(a,b,c){goog.dom.safe.assertIsHTMLLinkElement_(a);a.rel=c;goog.string.caseInsensitiveContains(c,"stylesheet")?(goog.asserts.assert(b instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),a.href=goog.html.TrustedResourceUrl.unwrap(b)):a.href=b instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrap(b):b instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrap(b):goog.html.SafeUrl.sanitize(b).getTypedStringValue()};
		goog.dom.safe.setObjectData=function(a,b){goog.dom.safe.assertIsHTMLObjectElement_(a);a.data=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setScriptSrc=function(a,b){goog.dom.safe.assertIsHTMLScriptElement_(a);a.src=goog.html.TrustedResourceUrl.unwrap(b)};goog.dom.safe.setLocationHref=function(a,b){goog.dom.safe.assertIsLocation_(a);var c;c=b instanceof goog.html.SafeUrl?b:goog.html.SafeUrl.sanitize(b);a.href=goog.html.SafeUrl.unwrap(c)};
		goog.dom.safe.openInWindow=function(a,b,c,d,e){a=a instanceof goog.html.SafeUrl?a:goog.html.SafeUrl.sanitize(a);return(b||window).open(goog.html.SafeUrl.unwrap(a),c?goog.string.Const.unwrap(c):"",d,e)};
		goog.dom.safe.assertIsLocation_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof Location&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof Location||!(a instanceof Element)),"Argument is not a Location (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLAnchorElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLAnchorElement&&"undefined"!=typeof Location&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLAnchorElement||!(a instanceof Location||a instanceof Element)),"Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLLinkElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLLinkElement&&"undefined"!=typeof Location&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLLinkElement||!(a instanceof Location||a instanceof Element)),"Argument is not a HTMLLinkElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLImageElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLImageElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLImageElement||!(a instanceof Element)),"Argument is not a HTMLImageElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLEmbedElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLEmbedElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLEmbedElement||!(a instanceof Element)),"Argument is not a HTMLEmbedElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLFrameElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLFrameElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLFrameElement||!(a instanceof Element)),"Argument is not a HTMLFrameElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLIFrameElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLIFrameElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLIFrameElement||!(a instanceof Element)),"Argument is not a HTMLIFrameElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLObjectElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLObjectElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLObjectElement||!(a instanceof Element)),"Argument is not a HTMLObjectElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.assertIsHTMLScriptElement_=function(a){goog.asserts.ENABLE_ASSERTS&&"undefined"!=typeof HTMLScriptElement&&"undefined"!=typeof Element&&goog.asserts.assert(a&&(a instanceof HTMLScriptElement||!(a instanceof Element)),"Argument is not a HTMLScriptElement (or a non-Element mock); got: %s",goog.dom.safe.debugStringForType_(a));return a};
		goog.dom.safe.debugStringForType_=function(a){return goog.isObject(a)?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):void 0===a?"undefined":null===a?"null":typeof a};goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="";this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_};goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0;goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={};goog.html.SafeScript.fromConstant=function(a){a=goog.string.Const.unwrap(a);return 0===a.length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(a)};
		goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_};goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"});
		goog.html.SafeScript.unwrap=function(a){if(a instanceof goog.html.SafeScript&&a.constructor===goog.html.SafeScript&&a.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_)return a.privateDoNotAccessOrElseSafeScriptWrappedValue_;goog.asserts.fail("expected object of type SafeScript, got '"+a+"' of type "+goog.typeOf(a));return"type_error:SafeScript"};goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(a){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(a)};
		goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(a){this.privateDoNotAccessOrElseSafeScriptWrappedValue_=a;return this};goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");goog.html.uncheckedconversions={};goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(a,b,c){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(b,c||null)};
		goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(b)};
		goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(a,b){goog.asserts.assertString(goog.string.Const.unwrap(a),"must provide justification");goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(a)),"must provide non-empty justification");return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(b)};goog.math.Coordinate=function(a,b){this.x=goog.isDef(a)?a:0;this.y=goog.isDef(b)?b:0};goog.math.Coordinate.prototype.clone=function(){return new goog.math.Coordinate(this.x,this.y)};goog.DEBUG&&(goog.math.Coordinate.prototype.toString=function(){return"("+this.x+", "+this.y+")"});goog.math.Coordinate.prototype.equals=function(a){return a instanceof goog.math.Coordinate&&goog.math.Coordinate.equals(this,a)};goog.math.Coordinate.equals=function(a,b){return a==b?!0:a&&b?a.x==b.x&&a.y==b.y:!1};
		goog.math.Coordinate.distance=function(a,b){var c=a.x-b.x,d=a.y-b.y;return Math.sqrt(c*c+d*d)};goog.math.Coordinate.magnitude=function(a){return Math.sqrt(a.x*a.x+a.y*a.y)};goog.math.Coordinate.azimuth=function(a){return goog.math.angle(0,0,a.x,a.y)};goog.math.Coordinate.squaredDistance=function(a,b){var c=a.x-b.x,d=a.y-b.y;return c*c+d*d};goog.math.Coordinate.difference=function(a,b){return new goog.math.Coordinate(a.x-b.x,a.y-b.y)};
		goog.math.Coordinate.sum=function(a,b){return new goog.math.Coordinate(a.x+b.x,a.y+b.y)};goog.math.Coordinate.prototype.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};goog.math.Coordinate.prototype.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};goog.math.Coordinate.prototype.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};
		goog.math.Coordinate.prototype.translate=function(a,b){a instanceof goog.math.Coordinate?(this.x+=a.x,this.y+=a.y):(this.x+=Number(a),goog.isNumber(b)&&(this.y+=b));return this};goog.math.Coordinate.prototype.scale=function(a,b){var c=goog.isNumber(b)?b:a;this.x*=a;this.y*=c;return this};goog.math.Coordinate.prototype.rotateRadians=function(a,b){var c=b||new goog.math.Coordinate(0,0),d=this.x,e=this.y,f=Math.cos(a),g=Math.sin(a);this.x=(d-c.x)*f-(e-c.y)*g+c.x;this.y=(d-c.x)*g+(e-c.y)*f+c.y};
		goog.math.Coordinate.prototype.rotateDegrees=function(a,b){this.rotateRadians(goog.math.toRadians(a),b)};goog.math.Size=function(a,b){this.width=a;this.height=b};goog.math.Size.equals=function(a,b){return a==b?!0:a&&b?a.width==b.width&&a.height==b.height:!1};goog.math.Size.prototype.clone=function(){return new goog.math.Size(this.width,this.height)};goog.DEBUG&&(goog.math.Size.prototype.toString=function(){return"("+this.width+" x "+this.height+")"});goog.math.Size.prototype.getLongest=function(){return Math.max(this.width,this.height)};
		goog.math.Size.prototype.getShortest=function(){return Math.min(this.width,this.height)};goog.math.Size.prototype.area=function(){return this.width*this.height};goog.math.Size.prototype.perimeter=function(){return 2*(this.width+this.height)};goog.math.Size.prototype.aspectRatio=function(){return this.width/this.height};goog.math.Size.prototype.isEmpty=function(){return!this.area()};goog.math.Size.prototype.ceil=function(){this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};
		goog.math.Size.prototype.fitsInside=function(a){return this.width<=a.width&&this.height<=a.height};goog.math.Size.prototype.floor=function(){this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};goog.math.Size.prototype.round=function(){this.width=Math.round(this.width);this.height=Math.round(this.height);return this};goog.math.Size.prototype.scale=function(a,b){var c=goog.isNumber(b)?b:a;this.width*=a;this.height*=c;return this};
		goog.math.Size.prototype.scaleToCover=function(a){a=this.aspectRatio()<=a.aspectRatio()?a.width/this.width:a.height/this.height;return this.scale(a)};goog.math.Size.prototype.scaleToFit=function(a){a=this.aspectRatio()>a.aspectRatio()?a.width/this.width:a.height/this.height;return this.scale(a)};goog.dom.ASSUME_QUIRKS_MODE=!1;goog.dom.ASSUME_STANDARDS_MODE=!1;goog.dom.COMPAT_MODE_KNOWN_=goog.dom.ASSUME_QUIRKS_MODE||goog.dom.ASSUME_STANDARDS_MODE;goog.dom.getDomHelper=function(a){return a?new goog.dom.DomHelper(goog.dom.getOwnerDocument(a)):goog.dom.defaultDomHelper_||(goog.dom.defaultDomHelper_=new goog.dom.DomHelper)};goog.dom.getDocument=function(){return document};goog.dom.getElement=function(a){return goog.dom.getElementHelper_(document,a)};
		goog.dom.getElementHelper_=function(a,b){return goog.isString(b)?a.getElementById(b):b};goog.dom.getRequiredElement=function(a){return goog.dom.getRequiredElementHelper_(document,a)};goog.dom.getRequiredElementHelper_=function(a,b){goog.asserts.assertString(b);var c=goog.dom.getElementHelper_(a,b);return c=goog.asserts.assertElement(c,"No element found with id: "+b)};goog.dom.$=goog.dom.getElement;goog.dom.getElementsByTagName=function(a,b){return(b||document).getElementsByTagName(String(a))};
		goog.dom.getElementsByTagNameAndClass=function(a,b,c){return goog.dom.getElementsByTagNameAndClass_(document,a,b,c)};goog.dom.getElementsByClass=function(a,b){var c=b||document;return goog.dom.canUseQuerySelector_(c)?c.querySelectorAll("."+a):goog.dom.getElementsByTagNameAndClass_(document,"*",a,b)};
		goog.dom.getElementByClass=function(a,b){var c=b||document;return(c.getElementsByClassName?c.getElementsByClassName(a)[0]:goog.dom.canUseQuerySelector_(c)?c.querySelector("."+a):goog.dom.getElementsByTagNameAndClass_(document,"*",a,b)[0])||null};goog.dom.getRequiredElementByClass=function(a,b){var c=goog.dom.getElementByClass(a,b);return goog.asserts.assert(c,"No element found with className: "+a)};goog.dom.canUseQuerySelector_=function(a){return!(!a.querySelectorAll||!a.querySelector)};
		goog.dom.getElementsByTagNameAndClass_=function(a,b,c,d){a=d||a;b=b&&"*"!=b?String(b).toUpperCase():"";if(goog.dom.canUseQuerySelector_(a)&&(b||c))return a.querySelectorAll(b+(c?"."+c:""));if(c&&a.getElementsByClassName){a=a.getElementsByClassName(c);if(b){d={};for(var e=0,f=0,g;g=a[f];f++)b==g.nodeName&&(d[e++]=g);d.length=e;return d}return a}a=a.getElementsByTagName(b||"*");if(c){d={};for(f=e=0;g=a[f];f++)b=g.className,"function"==typeof b.split&&goog.array.contains(b.split(/\s+/),c)&&(d[e++]=g);
		d.length=e;return d}return a};goog.dom.$$=goog.dom.getElementsByTagNameAndClass;goog.dom.setProperties=function(a,b){goog.object.forEach(b,function(b,d){"style"==d?a.style.cssText=b:"class"==d?a.className=b:"for"==d?a.htmlFor=b:goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(d)?a.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[d],b):goog.string.startsWith(d,"aria-")||goog.string.startsWith(d,"data-")?a.setAttribute(d,b):a[d]=b})};
		goog.dom.DIRECT_ATTRIBUTE_MAP_={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};goog.dom.getViewportSize=function(a){return goog.dom.getViewportSize_(a||window)};goog.dom.getViewportSize_=function(a){a=a.document;a=goog.dom.isCss1CompatMode_(a)?a.documentElement:a.body;return new goog.math.Size(a.clientWidth,a.clientHeight)};
		goog.dom.getDocumentHeight=function(){return goog.dom.getDocumentHeight_(window)};goog.dom.getDocumentHeightForWindow=function(a){return goog.dom.getDocumentHeight_(a)};
		goog.dom.getDocumentHeight_=function(a){var b=a.document,c=0;if(b){var c=b.body,d=b.documentElement;if(!d||!c)return 0;a=goog.dom.getViewportSize_(a).height;if(goog.dom.isCss1CompatMode_(b)&&d.scrollHeight)c=d.scrollHeight!=a?d.scrollHeight:d.offsetHeight;else{var b=d.scrollHeight,e=d.offsetHeight;d.clientHeight!=e&&(b=c.scrollHeight,e=c.offsetHeight);c=b>a?b>e?b:e:b<e?b:e}}return c};goog.dom.getPageScroll=function(a){return goog.dom.getDomHelper((a||goog.global||window).document).getDocumentScroll()};
		goog.dom.getDocumentScroll=function(){return goog.dom.getDocumentScroll_(document)};goog.dom.getDocumentScroll_=function(a){var b=goog.dom.getDocumentScrollElement_(a);a=goog.dom.getWindow_(a);return goog.userAgent.IE&&goog.userAgent.isVersionOrHigher("10")&&a.pageYOffset!=b.scrollTop?new goog.math.Coordinate(b.scrollLeft,b.scrollTop):new goog.math.Coordinate(a.pageXOffset||b.scrollLeft,a.pageYOffset||b.scrollTop)};goog.dom.getDocumentScrollElement=function(){return goog.dom.getDocumentScrollElement_(document)};
		goog.dom.getDocumentScrollElement_=function(a){return a.scrollingElement?a.scrollingElement:!goog.userAgent.WEBKIT&&goog.dom.isCss1CompatMode_(a)?a.documentElement:a.body||a.documentElement};goog.dom.getWindow=function(a){return a?goog.dom.getWindow_(a):window};goog.dom.getWindow_=function(a){return a.parentWindow||a.defaultView};goog.dom.createDom=function(a,b,c){return goog.dom.createDom_(document,arguments)};
		goog.dom.createDom_=function(a,b){var c=String(b[0]),d=b[1];if(!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES&&d&&(d.name||d.type)){c=["<",c];d.name&&c.push(' name="',goog.string.htmlEscape(d.name),'"');if(d.type){c.push(' type="',goog.string.htmlEscape(d.type),'"');var e={};goog.object.extend(e,d);delete e.type;d=e}c.push(">");c=c.join("")}c=a.createElement(c);d&&(goog.isString(d)?c.className=d:goog.isArray(d)?c.className=d.join(" "):goog.dom.setProperties(c,d));2<b.length&&goog.dom.append_(a,
		c,b,2);return c};goog.dom.append_=function(a,b,c,d){function e(c){c&&b.appendChild(goog.isString(c)?a.createTextNode(c):c)}for(;d<c.length;d++){var f=c[d];goog.isArrayLike(f)&&!goog.dom.isNodeLike(f)?goog.array.forEach(goog.dom.isNodeList(f)?goog.array.toArray(f):f,e):e(f)}};goog.dom.$dom=goog.dom.createDom;goog.dom.createElement=function(a){return goog.dom.createElement_(document,a)};goog.dom.createElement_=function(a,b){return a.createElement(String(b))};goog.dom.createTextNode=function(a){return document.createTextNode(String(a))};
		goog.dom.createTable=function(a,b,c){return goog.dom.createTable_(document,a,b,!!c)};goog.dom.createTable_=function(a,b,c,d){for(var e=goog.dom.createElement_(a,"TABLE"),f=e.appendChild(goog.dom.createElement_(a,"TBODY")),g=0;g<b;g++){for(var h=goog.dom.createElement_(a,"TR"),k=0;k<c;k++){var l=goog.dom.createElement_(a,"TD");d&&goog.dom.setTextContent(l,goog.string.Unicode.NBSP);h.appendChild(l)}f.appendChild(h)}return e};
		goog.dom.constHtmlToNode=function(a){var b=goog.array.map(arguments,goog.string.Const.unwrap),b=goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML string, that gets turned into a Node later, so it will be automatically balanced."),b.join(""));return goog.dom.safeHtmlToNode(b)};goog.dom.safeHtmlToNode=function(a){return goog.dom.safeHtmlToNode_(document,a)};
		goog.dom.safeHtmlToNode_=function(a,b){var c=goog.dom.createElement_(a,"DIV");goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT?(goog.dom.safe.setInnerHtml(c,goog.html.SafeHtml.concat(goog.html.SafeHtml.BR,b)),c.removeChild(c.firstChild)):goog.dom.safe.setInnerHtml(c,b);return goog.dom.childrenToNode_(a,c)};goog.dom.childrenToNode_=function(a,b){if(1==b.childNodes.length)return b.removeChild(b.firstChild);for(var c=a.createDocumentFragment();b.firstChild;)c.appendChild(b.firstChild);return c};
		goog.dom.isCss1CompatMode=function(){return goog.dom.isCss1CompatMode_(document)};goog.dom.isCss1CompatMode_=function(a){return goog.dom.COMPAT_MODE_KNOWN_?goog.dom.ASSUME_STANDARDS_MODE:"CSS1Compat"==a.compatMode};goog.dom.canHaveChildren=function(a){if(a.nodeType!=goog.dom.NodeType.ELEMENT)return!1;switch(a.tagName){case "APPLET":case "AREA":case "BASE":case "BR":case "COL":case "COMMAND":case "EMBED":case "FRAME":case "HR":case "IMG":case "INPUT":case "IFRAME":case "ISINDEX":case "KEYGEN":case "LINK":case "NOFRAMES":case "NOSCRIPT":case "META":case "OBJECT":case "PARAM":case "SCRIPT":case "SOURCE":case "STYLE":case "TRACK":case "WBR":return!1}return!0};
		goog.dom.appendChild=function(a,b){a.appendChild(b)};goog.dom.append=function(a,b){goog.dom.append_(goog.dom.getOwnerDocument(a),a,arguments,1)};goog.dom.removeChildren=function(a){for(var b;b=a.firstChild;)a.removeChild(b)};goog.dom.insertSiblingBefore=function(a,b){b.parentNode&&b.parentNode.insertBefore(a,b)};goog.dom.insertSiblingAfter=function(a,b){b.parentNode&&b.parentNode.insertBefore(a,b.nextSibling)};goog.dom.insertChildAt=function(a,b,c){a.insertBefore(b,a.childNodes[c]||null)};
		goog.dom.removeNode=function(a){return a&&a.parentNode?a.parentNode.removeChild(a):null};goog.dom.replaceNode=function(a,b){var c=b.parentNode;c&&c.replaceChild(a,b)};goog.dom.flattenElement=function(a){var b,c=a.parentNode;if(c&&c.nodeType!=goog.dom.NodeType.DOCUMENT_FRAGMENT){if(a.removeNode)return a.removeNode(!1);for(;b=a.firstChild;)c.insertBefore(b,a);return goog.dom.removeNode(a)}};
		goog.dom.getChildren=function(a){return goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE&&void 0!=a.children?a.children:goog.array.filter(a.childNodes,function(a){return a.nodeType==goog.dom.NodeType.ELEMENT})};goog.dom.getFirstElementChild=function(a){return goog.isDef(a.firstElementChild)?a.firstElementChild:goog.dom.getNextElementNode_(a.firstChild,!0)};goog.dom.getLastElementChild=function(a){return goog.isDef(a.lastElementChild)?a.lastElementChild:goog.dom.getNextElementNode_(a.lastChild,!1)};
		goog.dom.getNextElementSibling=function(a){return goog.isDef(a.nextElementSibling)?a.nextElementSibling:goog.dom.getNextElementNode_(a.nextSibling,!0)};goog.dom.getPreviousElementSibling=function(a){return goog.isDef(a.previousElementSibling)?a.previousElementSibling:goog.dom.getNextElementNode_(a.previousSibling,!1)};goog.dom.getNextElementNode_=function(a,b){for(;a&&a.nodeType!=goog.dom.NodeType.ELEMENT;)a=b?a.nextSibling:a.previousSibling;return a};
		goog.dom.getNextNode=function(a){if(!a)return null;if(a.firstChild)return a.firstChild;for(;a&&!a.nextSibling;)a=a.parentNode;return a?a.nextSibling:null};goog.dom.getPreviousNode=function(a){if(!a)return null;if(!a.previousSibling)return a.parentNode;for(a=a.previousSibling;a&&a.lastChild;)a=a.lastChild;return a};goog.dom.isNodeLike=function(a){return goog.isObject(a)&&0<a.nodeType};goog.dom.isElement=function(a){return goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT};
		goog.dom.isWindow=function(a){return goog.isObject(a)&&a.window==a};goog.dom.getParentElement=function(a){var b;if(goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY&&!(goog.userAgent.IE&&goog.userAgent.isVersionOrHigher("9")&&!goog.userAgent.isVersionOrHigher("10")&&goog.global.SVGElement&&a instanceof goog.global.SVGElement)&&(b=a.parentElement))return b;b=a.parentNode;return goog.dom.isElement(b)?b:null};
		goog.dom.contains=function(a,b){if(!a||!b)return!1;if(a.contains&&b.nodeType==goog.dom.NodeType.ELEMENT)return a==b||a.contains(b);if("undefined"!=typeof a.compareDocumentPosition)return a==b||!!(a.compareDocumentPosition(b)&16);for(;b&&a!=b;)b=b.parentNode;return b==a};
		goog.dom.compareNodeOrder=function(a,b){if(a==b)return 0;if(a.compareDocumentPosition)return a.compareDocumentPosition(b)&2?1:-1;if(goog.userAgent.IE&&!goog.userAgent.isDocumentModeOrHigher(9)){if(a.nodeType==goog.dom.NodeType.DOCUMENT)return-1;if(b.nodeType==goog.dom.NodeType.DOCUMENT)return 1}if("sourceIndex"in a||a.parentNode&&"sourceIndex"in a.parentNode){var c=a.nodeType==goog.dom.NodeType.ELEMENT,d=b.nodeType==goog.dom.NodeType.ELEMENT;if(c&&d)return a.sourceIndex-b.sourceIndex;var e=a.parentNode,
		f=b.parentNode;return e==f?goog.dom.compareSiblingOrder_(a,b):!c&&goog.dom.contains(e,b)?-1*goog.dom.compareParentsDescendantNodeIe_(a,b):!d&&goog.dom.contains(f,a)?goog.dom.compareParentsDescendantNodeIe_(b,a):(c?a.sourceIndex:e.sourceIndex)-(d?b.sourceIndex:f.sourceIndex)}d=goog.dom.getOwnerDocument(a);c=d.createRange();c.selectNode(a);c.collapse(!0);d=d.createRange();d.selectNode(b);d.collapse(!0);return c.compareBoundaryPoints(goog.global.Range.START_TO_END,d)};
		goog.dom.compareParentsDescendantNodeIe_=function(a,b){var c=a.parentNode;if(c==b)return-1;for(var d=b;d.parentNode!=c;)d=d.parentNode;return goog.dom.compareSiblingOrder_(d,a)};goog.dom.compareSiblingOrder_=function(a,b){for(var c=b;c=c.previousSibling;)if(c==a)return-1;return 1};
		goog.dom.findCommonAncestor=function(a){var b,c=arguments.length;if(!c)return null;if(1==c)return arguments[0];var d=[],e=Infinity;for(b=0;b<c;b++){for(var f=[],g=arguments[b];g;)f.unshift(g),g=g.parentNode;d.push(f);e=Math.min(e,f.length)}f=null;for(b=0;b<e;b++){for(var g=d[0][b],h=1;h<c;h++)if(g!=d[h][b])return f;f=g}return f};goog.dom.getOwnerDocument=function(a){goog.asserts.assert(a,"Node cannot be null or undefined.");return a.nodeType==goog.dom.NodeType.DOCUMENT?a:a.ownerDocument||a.document};
		goog.dom.getFrameContentDocument=function(a){return a.contentDocument||a.contentWindow.document};goog.dom.getFrameContentWindow=function(a){try{return a.contentWindow||(a.contentDocument?goog.dom.getWindow(a.contentDocument):null)}catch(b){}return null};
		goog.dom.setTextContent=function(a,b){goog.asserts.assert(null!=a,"goog.dom.setTextContent expects a non-null value for node");if("textContent"in a)a.textContent=b;else if(a.nodeType==goog.dom.NodeType.TEXT)a.data=b;else if(a.firstChild&&a.firstChild.nodeType==goog.dom.NodeType.TEXT){for(;a.lastChild!=a.firstChild;)a.removeChild(a.lastChild);a.firstChild.data=b}else{goog.dom.removeChildren(a);var c=goog.dom.getOwnerDocument(a);a.appendChild(c.createTextNode(String(b)))}};
		goog.dom.getOuterHtml=function(a){goog.asserts.assert(null!==a,"goog.dom.getOuterHtml expects a non-null value for element");if("outerHTML"in a)return a.outerHTML;var b=goog.dom.getOwnerDocument(a),b=goog.dom.createElement_(b,"DIV");b.appendChild(a.cloneNode(!0));return b.innerHTML};goog.dom.findNode=function(a,b){var c=[];return goog.dom.findNodes_(a,b,c,!0)?c[0]:void 0};goog.dom.findNodes=function(a,b){var c=[];goog.dom.findNodes_(a,b,c,!1);return c};
		goog.dom.findNodes_=function(a,b,c,d){if(null!=a)for(a=a.firstChild;a;){if(b(a)&&(c.push(a),d)||goog.dom.findNodes_(a,b,c,d))return!0;a=a.nextSibling}return!1};goog.dom.TAGS_TO_IGNORE_={SCRIPT:1,STYLE:1,HEAD:1,IFRAME:1,OBJECT:1};goog.dom.PREDEFINED_TAG_VALUES_={IMG:" ",BR:"\n"};goog.dom.isFocusableTabIndex=function(a){return goog.dom.hasSpecifiedTabIndex_(a)&&goog.dom.isTabIndexFocusable_(a)};goog.dom.setFocusableTabIndex=function(a,b){b?a.tabIndex=0:(a.tabIndex=-1,a.removeAttribute("tabIndex"))};
		goog.dom.isFocusable=function(a){var b;return(b=goog.dom.nativelySupportsFocus_(a)?!a.disabled&&(!goog.dom.hasSpecifiedTabIndex_(a)||goog.dom.isTabIndexFocusable_(a)):goog.dom.isFocusableTabIndex(a))&&goog.userAgent.IE?goog.dom.hasNonZeroBoundingRect_(a):b};goog.dom.hasSpecifiedTabIndex_=function(a){return goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("9")?(a=a.getAttributeNode("tabindex"),goog.isDefAndNotNull(a)&&a.specified):a.hasAttribute("tabindex")};
		goog.dom.isTabIndexFocusable_=function(a){a=a.tabIndex;return goog.isNumber(a)&&0<=a&&32768>a};goog.dom.nativelySupportsFocus_=function(a){return"A"==a.tagName||"INPUT"==a.tagName||"TEXTAREA"==a.tagName||"SELECT"==a.tagName||"BUTTON"==a.tagName};goog.dom.hasNonZeroBoundingRect_=function(a){a=!goog.isFunction(a.getBoundingClientRect)||goog.userAgent.IE&&null==a.parentElement?{height:a.offsetHeight,width:a.offsetWidth}:a.getBoundingClientRect();return goog.isDefAndNotNull(a)&&0<a.height&&0<a.width};
		goog.dom.getTextContent=function(a){if(goog.dom.BrowserFeature.CAN_USE_INNER_TEXT&&null!==a&&"innerText"in a)a=goog.string.canonicalizeNewlines(a.innerText);else{var b=[];goog.dom.getTextContent_(a,b,!0);a=b.join("")}a=a.replace(/ \xAD /g," ").replace(/\xAD/g,"");a=a.replace(/\u200B/g,"");goog.dom.BrowserFeature.CAN_USE_INNER_TEXT||(a=a.replace(/ +/g," "));" "!=a&&(a=a.replace(/^\s*/,""));return a};goog.dom.getRawTextContent=function(a){var b=[];goog.dom.getTextContent_(a,b,!1);return b.join("")};
		goog.dom.getTextContent_=function(a,b,c){if(!(a.nodeName in goog.dom.TAGS_TO_IGNORE_))if(a.nodeType==goog.dom.NodeType.TEXT)c?b.push(String(a.nodeValue).replace(/(\r\n|\r|\n)/g,"")):b.push(a.nodeValue);else if(a.nodeName in goog.dom.PREDEFINED_TAG_VALUES_)b.push(goog.dom.PREDEFINED_TAG_VALUES_[a.nodeName]);else for(a=a.firstChild;a;)goog.dom.getTextContent_(a,b,c),a=a.nextSibling};goog.dom.getNodeTextLength=function(a){return goog.dom.getTextContent(a).length};
		goog.dom.getNodeTextOffset=function(a,b){for(var c=b||goog.dom.getOwnerDocument(a).body,d=[];a&&a!=c;){for(var e=a;e=e.previousSibling;)d.unshift(goog.dom.getTextContent(e));a=a.parentNode}return goog.string.trimLeft(d.join("")).replace(/ +/g," ").length};
		goog.dom.getNodeAtOffset=function(a,b,c){a=[a];for(var d=0,e=null;0<a.length&&d<b;)if(e=a.pop(),!(e.nodeName in goog.dom.TAGS_TO_IGNORE_))if(e.nodeType==goog.dom.NodeType.TEXT)var f=e.nodeValue.replace(/(\r\n|\r|\n)/g,"").replace(/ +/g," "),d=d+f.length;else if(e.nodeName in goog.dom.PREDEFINED_TAG_VALUES_)d+=goog.dom.PREDEFINED_TAG_VALUES_[e.nodeName].length;else for(f=e.childNodes.length-1;0<=f;f--)a.push(e.childNodes[f]);goog.isObject(c)&&(c.remainder=e?e.nodeValue.length+b-d-1:0,c.node=e);return e};
		goog.dom.isNodeList=function(a){if(a&&"number"==typeof a.length){if(goog.isObject(a))return"function"==typeof a.item||"string"==typeof a.item;if(goog.isFunction(a))return"function"==typeof a.item}return!1};goog.dom.getAncestorByTagNameAndClass=function(a,b,c,d){if(!b&&!c)return null;var e=b?String(b).toUpperCase():null;return goog.dom.getAncestor(a,function(a){return(!e||a.nodeName==e)&&(!c||goog.isString(a.className)&&goog.array.contains(a.className.split(/\s+/),c))},!0,d)};
		goog.dom.getAncestorByClass=function(a,b,c){return goog.dom.getAncestorByTagNameAndClass(a,null,b,c)};goog.dom.getAncestor=function(a,b,c,d){c||(a=a.parentNode);for(c=0;a&&(null==d||c<=d);){goog.asserts.assert("parentNode"!=a.name);if(b(a))return a;a=a.parentNode;c++}return null};goog.dom.getActiveElement=function(a){try{return a&&a.activeElement}catch(b){}return null};
		goog.dom.getPixelRatio=function(){var a=goog.dom.getWindow();return goog.isDef(a.devicePixelRatio)?a.devicePixelRatio:a.matchMedia?goog.dom.matchesPixelRatio_(3)||goog.dom.matchesPixelRatio_(2)||goog.dom.matchesPixelRatio_(1.5)||goog.dom.matchesPixelRatio_(1)||.75:1};goog.dom.matchesPixelRatio_=function(a){return goog.dom.getWindow().matchMedia("(min-resolution: "+a+"dppx),(min--moz-device-pixel-ratio: "+a+"),(min-resolution: "+96*a+"dpi)").matches?a:0};goog.dom.getCanvasContext2D=function(a){return a.getContext("2d")};
		goog.dom.DomHelper=function(a){this.document_=a||goog.global.document||document};goog.dom.DomHelper.prototype.getDomHelper=goog.dom.getDomHelper;goog.dom.DomHelper.prototype.setDocument=function(a){this.document_=a};goog.dom.DomHelper.prototype.getDocument=function(){return this.document_};goog.dom.DomHelper.prototype.getElement=function(a){return goog.dom.getElementHelper_(this.document_,a)};
		goog.dom.DomHelper.prototype.getRequiredElement=function(a){return goog.dom.getRequiredElementHelper_(this.document_,a)};goog.dom.DomHelper.prototype.$=goog.dom.DomHelper.prototype.getElement;goog.dom.DomHelper.prototype.getElementsByTagName=function(a,b){return(b||this.document_).getElementsByTagName(String(a))};goog.dom.DomHelper.prototype.getElementsByTagNameAndClass=function(a,b,c){return goog.dom.getElementsByTagNameAndClass_(this.document_,a,b,c)};
		goog.dom.DomHelper.prototype.getElementsByClass=function(a,b){return goog.dom.getElementsByClass(a,b||this.document_)};goog.dom.DomHelper.prototype.getElementByClass=function(a,b){return goog.dom.getElementByClass(a,b||this.document_)};goog.dom.DomHelper.prototype.getRequiredElementByClass=function(a,b){return goog.dom.getRequiredElementByClass(a,b||this.document_)};goog.dom.DomHelper.prototype.$$=goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
		goog.dom.DomHelper.prototype.setProperties=goog.dom.setProperties;goog.dom.DomHelper.prototype.getViewportSize=function(a){return goog.dom.getViewportSize(a||this.getWindow())};goog.dom.DomHelper.prototype.getDocumentHeight=function(){return goog.dom.getDocumentHeight_(this.getWindow())};goog.dom.DomHelper.prototype.createDom=function(a,b,c){return goog.dom.createDom_(this.document_,arguments)};goog.dom.DomHelper.prototype.$dom=goog.dom.DomHelper.prototype.createDom;
		goog.dom.DomHelper.prototype.createElement=function(a){return goog.dom.createElement_(this.document_,a)};goog.dom.DomHelper.prototype.createTextNode=function(a){return this.document_.createTextNode(String(a))};goog.dom.DomHelper.prototype.createTable=function(a,b,c){return goog.dom.createTable_(this.document_,a,b,!!c)};goog.dom.DomHelper.prototype.safeHtmlToNode=function(a){return goog.dom.safeHtmlToNode_(this.document_,a)};goog.dom.DomHelper.prototype.isCss1CompatMode=function(){return goog.dom.isCss1CompatMode_(this.document_)};
		goog.dom.DomHelper.prototype.getWindow=function(){return goog.dom.getWindow_(this.document_)};goog.dom.DomHelper.prototype.getDocumentScrollElement=function(){return goog.dom.getDocumentScrollElement_(this.document_)};goog.dom.DomHelper.prototype.getDocumentScroll=function(){return goog.dom.getDocumentScroll_(this.document_)};goog.dom.DomHelper.prototype.getActiveElement=function(a){return goog.dom.getActiveElement(a||this.document_)};goog.dom.DomHelper.prototype.appendChild=goog.dom.appendChild;
		goog.dom.DomHelper.prototype.append=goog.dom.append;goog.dom.DomHelper.prototype.canHaveChildren=goog.dom.canHaveChildren;goog.dom.DomHelper.prototype.removeChildren=goog.dom.removeChildren;goog.dom.DomHelper.prototype.insertSiblingBefore=goog.dom.insertSiblingBefore;goog.dom.DomHelper.prototype.insertSiblingAfter=goog.dom.insertSiblingAfter;goog.dom.DomHelper.prototype.insertChildAt=goog.dom.insertChildAt;goog.dom.DomHelper.prototype.removeNode=goog.dom.removeNode;
		goog.dom.DomHelper.prototype.replaceNode=goog.dom.replaceNode;goog.dom.DomHelper.prototype.flattenElement=goog.dom.flattenElement;goog.dom.DomHelper.prototype.getChildren=goog.dom.getChildren;goog.dom.DomHelper.prototype.getFirstElementChild=goog.dom.getFirstElementChild;goog.dom.DomHelper.prototype.getLastElementChild=goog.dom.getLastElementChild;goog.dom.DomHelper.prototype.getNextElementSibling=goog.dom.getNextElementSibling;goog.dom.DomHelper.prototype.getPreviousElementSibling=goog.dom.getPreviousElementSibling;
		goog.dom.DomHelper.prototype.getNextNode=goog.dom.getNextNode;goog.dom.DomHelper.prototype.getPreviousNode=goog.dom.getPreviousNode;goog.dom.DomHelper.prototype.isNodeLike=goog.dom.isNodeLike;goog.dom.DomHelper.prototype.isElement=goog.dom.isElement;goog.dom.DomHelper.prototype.isWindow=goog.dom.isWindow;goog.dom.DomHelper.prototype.getParentElement=goog.dom.getParentElement;goog.dom.DomHelper.prototype.contains=goog.dom.contains;goog.dom.DomHelper.prototype.compareNodeOrder=goog.dom.compareNodeOrder;
		goog.dom.DomHelper.prototype.findCommonAncestor=goog.dom.findCommonAncestor;goog.dom.DomHelper.prototype.getOwnerDocument=goog.dom.getOwnerDocument;goog.dom.DomHelper.prototype.getFrameContentDocument=goog.dom.getFrameContentDocument;goog.dom.DomHelper.prototype.getFrameContentWindow=goog.dom.getFrameContentWindow;goog.dom.DomHelper.prototype.setTextContent=goog.dom.setTextContent;goog.dom.DomHelper.prototype.getOuterHtml=goog.dom.getOuterHtml;goog.dom.DomHelper.prototype.findNode=goog.dom.findNode;
		goog.dom.DomHelper.prototype.findNodes=goog.dom.findNodes;goog.dom.DomHelper.prototype.isFocusableTabIndex=goog.dom.isFocusableTabIndex;goog.dom.DomHelper.prototype.setFocusableTabIndex=goog.dom.setFocusableTabIndex;goog.dom.DomHelper.prototype.isFocusable=goog.dom.isFocusable;goog.dom.DomHelper.prototype.getTextContent=goog.dom.getTextContent;goog.dom.DomHelper.prototype.getNodeTextLength=goog.dom.getNodeTextLength;goog.dom.DomHelper.prototype.getNodeTextOffset=goog.dom.getNodeTextOffset;
		goog.dom.DomHelper.prototype.getNodeAtOffset=goog.dom.getNodeAtOffset;goog.dom.DomHelper.prototype.isNodeList=goog.dom.isNodeList;goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass=goog.dom.getAncestorByTagNameAndClass;goog.dom.DomHelper.prototype.getAncestorByClass=goog.dom.getAncestorByClass;goog.dom.DomHelper.prototype.getAncestor=goog.dom.getAncestor;goog.dom.DomHelper.prototype.getCanvasContext2D=goog.dom.getCanvasContext2D;goog.dom.vendor={};goog.dom.vendor.getVendorJsPrefix=function(){return goog.userAgent.WEBKIT?"Webkit":goog.userAgent.GECKO?"Moz":goog.userAgent.IE?"ms":goog.userAgent.OPERA?"O":null};goog.dom.vendor.getVendorPrefix=function(){return goog.userAgent.WEBKIT?"-webkit":goog.userAgent.GECKO?"-moz":goog.userAgent.IE?"-ms":goog.userAgent.OPERA?"-o":null};
		goog.dom.vendor.getPrefixedPropertyName=function(a,b){if(b&&a in b)return a;var c=goog.dom.vendor.getVendorJsPrefix();return c?(c=c.toLowerCase(),c+=goog.string.toTitleCase(a),!goog.isDef(b)||c in b?c:null):null};goog.dom.vendor.getPrefixedEventType=function(a){return((goog.dom.vendor.getVendorJsPrefix()||"")+a).toLowerCase()};goog.html.legacyconversions={};goog.html.legacyconversions.safeHtmlFromString=function(a){goog.html.legacyconversions.reportCallback_();return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(a,null)};goog.html.legacyconversions.safeStyleFromString=function(a){goog.html.legacyconversions.reportCallback_();return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(a)};
		goog.html.legacyconversions.safeStyleSheetFromString=function(a){goog.html.legacyconversions.reportCallback_();return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(a)};goog.html.legacyconversions.safeUrlFromString=function(a){goog.html.legacyconversions.reportCallback_();return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(a)};goog.html.legacyconversions.trustedResourceUrlFromString=function(a){goog.html.legacyconversions.reportCallback_();return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(a)};
		goog.html.legacyconversions.reportCallback_=goog.nullFunction;goog.html.legacyconversions.setReportCallback=function(a){goog.html.legacyconversions.reportCallback_=a};goog.math.Box=function(a,b,c,d){this.top=a;this.right=b;this.bottom=c;this.left=d};goog.math.Box.boundingBox=function(a){for(var b=new goog.math.Box(arguments[0].y,arguments[0].x,arguments[0].y,arguments[0].x),c=1;c<arguments.length;c++)b.expandToIncludeCoordinate(arguments[c]);return b};goog.math.Box.prototype.getWidth=function(){return this.right-this.left};goog.math.Box.prototype.getHeight=function(){return this.bottom-this.top};
		goog.math.Box.prototype.clone=function(){return new goog.math.Box(this.top,this.right,this.bottom,this.left)};goog.DEBUG&&(goog.math.Box.prototype.toString=function(){return"("+this.top+"t, "+this.right+"r, "+this.bottom+"b, "+this.left+"l)"});goog.math.Box.prototype.contains=function(a){return goog.math.Box.contains(this,a)};
		goog.math.Box.prototype.expand=function(a,b,c,d){goog.isObject(a)?(this.top-=a.top,this.right+=a.right,this.bottom+=a.bottom,this.left-=a.left):(this.top-=a,this.right+=Number(b),this.bottom+=Number(c),this.left-=Number(d));return this};goog.math.Box.prototype.expandToInclude=function(a){this.left=Math.min(this.left,a.left);this.top=Math.min(this.top,a.top);this.right=Math.max(this.right,a.right);this.bottom=Math.max(this.bottom,a.bottom)};
		goog.math.Box.prototype.expandToIncludeCoordinate=function(a){this.top=Math.min(this.top,a.y);this.right=Math.max(this.right,a.x);this.bottom=Math.max(this.bottom,a.y);this.left=Math.min(this.left,a.x)};goog.math.Box.equals=function(a,b){return a==b?!0:a&&b?a.top==b.top&&a.right==b.right&&a.bottom==b.bottom&&a.left==b.left:!1};
		goog.math.Box.contains=function(a,b){return a&&b?b instanceof goog.math.Box?b.left>=a.left&&b.right<=a.right&&b.top>=a.top&&b.bottom<=a.bottom:b.x>=a.left&&b.x<=a.right&&b.y>=a.top&&b.y<=a.bottom:!1};goog.math.Box.relativePositionX=function(a,b){return b.x<a.left?b.x-a.left:b.x>a.right?b.x-a.right:0};goog.math.Box.relativePositionY=function(a,b){return b.y<a.top?b.y-a.top:b.y>a.bottom?b.y-a.bottom:0};
		goog.math.Box.distance=function(a,b){var c=goog.math.Box.relativePositionX(a,b),d=goog.math.Box.relativePositionY(a,b);return Math.sqrt(c*c+d*d)};goog.math.Box.intersects=function(a,b){return a.left<=b.right&&b.left<=a.right&&a.top<=b.bottom&&b.top<=a.bottom};goog.math.Box.intersectsWithPadding=function(a,b,c){return a.left<=b.right+c&&b.left<=a.right+c&&a.top<=b.bottom+c&&b.top<=a.bottom+c};
		goog.math.Box.prototype.ceil=function(){this.top=Math.ceil(this.top);this.right=Math.ceil(this.right);this.bottom=Math.ceil(this.bottom);this.left=Math.ceil(this.left);return this};goog.math.Box.prototype.floor=function(){this.top=Math.floor(this.top);this.right=Math.floor(this.right);this.bottom=Math.floor(this.bottom);this.left=Math.floor(this.left);return this};
		goog.math.Box.prototype.round=function(){this.top=Math.round(this.top);this.right=Math.round(this.right);this.bottom=Math.round(this.bottom);this.left=Math.round(this.left);return this};goog.math.Box.prototype.translate=function(a,b){a instanceof goog.math.Coordinate?(this.left+=a.x,this.right+=a.x,this.top+=a.y,this.bottom+=a.y):(goog.asserts.assertNumber(a),this.left+=a,this.right+=a,goog.isNumber(b)&&(this.top+=b,this.bottom+=b));return this};
		goog.math.Box.prototype.scale=function(a,b){var c=goog.isNumber(b)?b:a;this.left*=a;this.right*=a;this.top*=c;this.bottom*=c;return this};goog.math.IRect=function(){};goog.math.Rect=function(a,b,c,d){this.left=a;this.top=b;this.width=c;this.height=d};goog.math.Rect.prototype.clone=function(){return new goog.math.Rect(this.left,this.top,this.width,this.height)};goog.math.Rect.prototype.toBox=function(){return new goog.math.Box(this.top,this.left+this.width,this.top+this.height,this.left)};goog.math.Rect.createFromPositionAndSize=function(a,b){return new goog.math.Rect(a.x,a.y,b.width,b.height)};
		goog.math.Rect.createFromBox=function(a){return new goog.math.Rect(a.left,a.top,a.right-a.left,a.bottom-a.top)};goog.DEBUG&&(goog.math.Rect.prototype.toString=function(){return"("+this.left+", "+this.top+" - "+this.width+"w x "+this.height+"h)"});goog.math.Rect.equals=function(a,b){return a==b?!0:a&&b?a.left==b.left&&a.width==b.width&&a.top==b.top&&a.height==b.height:!1};
		goog.math.Rect.prototype.intersection=function(a){var b=Math.max(this.left,a.left),c=Math.min(this.left+this.width,a.left+a.width);if(b<=c){var d=Math.max(this.top,a.top);a=Math.min(this.top+this.height,a.top+a.height);if(d<=a)return this.left=b,this.top=d,this.width=c-b,this.height=a-d,!0}return!1};
		goog.math.Rect.intersection=function(a,b){var c=Math.max(a.left,b.left),d=Math.min(a.left+a.width,b.left+b.width);if(c<=d){var e=Math.max(a.top,b.top),f=Math.min(a.top+a.height,b.top+b.height);if(e<=f)return new goog.math.Rect(c,e,d-c,f-e)}return null};goog.math.Rect.intersects=function(a,b){return a.left<=b.left+b.width&&b.left<=a.left+a.width&&a.top<=b.top+b.height&&b.top<=a.top+a.height};goog.math.Rect.prototype.intersects=function(a){return goog.math.Rect.intersects(this,a)};
		goog.math.Rect.difference=function(a,b){var c=goog.math.Rect.intersection(a,b);if(!c||!c.height||!c.width)return[a.clone()];var c=[],d=a.top,e=a.height,f=a.left+a.width,g=a.top+a.height,h=b.left+b.width,k=b.top+b.height;b.top>a.top&&(c.push(new goog.math.Rect(a.left,a.top,a.width,b.top-a.top)),d=b.top,e-=b.top-a.top);k<g&&(c.push(new goog.math.Rect(a.left,k,a.width,g-k)),e=k-d);b.left>a.left&&c.push(new goog.math.Rect(a.left,d,b.left-a.left,e));h<f&&c.push(new goog.math.Rect(h,d,f-h,e));return c};
		goog.math.Rect.prototype.difference=function(a){return goog.math.Rect.difference(this,a)};goog.math.Rect.prototype.boundingRect=function(a){var b=Math.max(this.left+this.width,a.left+a.width),c=Math.max(this.top+this.height,a.top+a.height);this.left=Math.min(this.left,a.left);this.top=Math.min(this.top,a.top);this.width=b-this.left;this.height=c-this.top};goog.math.Rect.boundingRect=function(a,b){if(!a||!b)return null;var c=new goog.math.Rect(a.left,a.top,a.width,a.height);c.boundingRect(b);return c};
		goog.math.Rect.prototype.contains=function(a){return a instanceof goog.math.Coordinate?a.x>=this.left&&a.x<=this.left+this.width&&a.y>=this.top&&a.y<=this.top+this.height:this.left<=a.left&&this.left+this.width>=a.left+a.width&&this.top<=a.top&&this.top+this.height>=a.top+a.height};goog.math.Rect.prototype.squaredDistance=function(a){var b=a.x<this.left?this.left-a.x:Math.max(a.x-(this.left+this.width),0);a=a.y<this.top?this.top-a.y:Math.max(a.y-(this.top+this.height),0);return b*b+a*a};
		goog.math.Rect.prototype.distance=function(a){return Math.sqrt(this.squaredDistance(a))};goog.math.Rect.prototype.getSize=function(){return new goog.math.Size(this.width,this.height)};goog.math.Rect.prototype.getTopLeft=function(){return new goog.math.Coordinate(this.left,this.top)};goog.math.Rect.prototype.getCenter=function(){return new goog.math.Coordinate(this.left+this.width/2,this.top+this.height/2)};
		goog.math.Rect.prototype.getBottomRight=function(){return new goog.math.Coordinate(this.left+this.width,this.top+this.height)};goog.math.Rect.prototype.ceil=function(){this.left=Math.ceil(this.left);this.top=Math.ceil(this.top);this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};goog.math.Rect.prototype.floor=function(){this.left=Math.floor(this.left);this.top=Math.floor(this.top);this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};
		goog.math.Rect.prototype.round=function(){this.left=Math.round(this.left);this.top=Math.round(this.top);this.width=Math.round(this.width);this.height=Math.round(this.height);return this};goog.math.Rect.prototype.translate=function(a,b){a instanceof goog.math.Coordinate?(this.left+=a.x,this.top+=a.y):(this.left+=goog.asserts.assertNumber(a),goog.isNumber(b)&&(this.top+=b));return this};
		goog.math.Rect.prototype.scale=function(a,b){var c=goog.isNumber(b)?b:a;this.left*=a;this.width*=a;this.top*=c;this.height*=c;return this};goog.style={};goog.style.setStyle=function(a,b,c){if(goog.isString(b))goog.style.setStyle_(a,c,b);else for(var d in b)goog.style.setStyle_(a,b[d],d)};goog.style.setStyle_=function(a,b,c){(c=goog.style.getVendorJsStyleName_(a,c))&&(a.style[c]=b)};goog.style.styleNameCache_={};
		goog.style.getVendorJsStyleName_=function(a,b){var c=goog.style.styleNameCache_[b];if(!c){var d=goog.string.toCamelCase(b),c=d;void 0===a.style[d]&&(d=goog.dom.vendor.getVendorJsPrefix()+goog.string.toTitleCase(d),void 0!==a.style[d]&&(c=d));goog.style.styleNameCache_[b]=c}return c};
		goog.style.getVendorStyleName_=function(a,b){var c=goog.string.toCamelCase(b);return void 0===a.style[c]&&(c=goog.dom.vendor.getVendorJsPrefix()+goog.string.toTitleCase(c),void 0!==a.style[c])?goog.dom.vendor.getVendorPrefix()+"-"+b:b};goog.style.getStyle=function(a,b){var c=a.style[goog.string.toCamelCase(b)];return"undefined"!==typeof c?c:a.style[goog.style.getVendorJsStyleName_(a,b)]||""};
		goog.style.getComputedStyle=function(a,b){var c=goog.dom.getOwnerDocument(a);return c.defaultView&&c.defaultView.getComputedStyle&&(c=c.defaultView.getComputedStyle(a,null))?c[b]||c.getPropertyValue(b)||"":""};goog.style.getCascadedStyle=function(a,b){return a.currentStyle?a.currentStyle[b]:null};goog.style.getStyle_=function(a,b){return goog.style.getComputedStyle(a,b)||goog.style.getCascadedStyle(a,b)||a.style&&a.style[b]};
		goog.style.getComputedBoxSizing=function(a){return goog.style.getStyle_(a,"boxSizing")||goog.style.getStyle_(a,"MozBoxSizing")||goog.style.getStyle_(a,"WebkitBoxSizing")||null};goog.style.getComputedPosition=function(a){return goog.style.getStyle_(a,"position")};goog.style.getBackgroundColor=function(a){return goog.style.getStyle_(a,"backgroundColor")};goog.style.getComputedOverflowX=function(a){return goog.style.getStyle_(a,"overflowX")};
		goog.style.getComputedOverflowY=function(a){return goog.style.getStyle_(a,"overflowY")};goog.style.getComputedZIndex=function(a){return goog.style.getStyle_(a,"zIndex")};goog.style.getComputedTextAlign=function(a){return goog.style.getStyle_(a,"textAlign")};goog.style.getComputedCursor=function(a){return goog.style.getStyle_(a,"cursor")};goog.style.getComputedTransform=function(a){var b=goog.style.getVendorStyleName_(a,"transform");return goog.style.getStyle_(a,b)||goog.style.getStyle_(a,"transform")};
		goog.style.setPosition=function(a,b,c){var d;b instanceof goog.math.Coordinate?(d=b.x,b=b.y):(d=b,b=c);a.style.left=goog.style.getPixelStyleValue_(d,!1);a.style.top=goog.style.getPixelStyleValue_(b,!1)};goog.style.getPosition=function(a){return new goog.math.Coordinate(a.offsetLeft,a.offsetTop)};
		goog.style.getClientViewportElement=function(a){a=a?goog.dom.getOwnerDocument(a):goog.dom.getDocument();return!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9)||goog.dom.getDomHelper(a).isCss1CompatMode()?a.documentElement:a.body};goog.style.getViewportPageOffset=function(a){var b=a.body;a=a.documentElement;return new goog.math.Coordinate(b.scrollLeft||a.scrollLeft,b.scrollTop||a.scrollTop)};
		goog.style.getBoundingClientRect_=function(a){var b;try{b=a.getBoundingClientRect()}catch(c){return{left:0,top:0,right:0,bottom:0}}goog.userAgent.IE&&a.ownerDocument.body&&(a=a.ownerDocument,b.left-=a.documentElement.clientLeft+a.body.clientLeft,b.top-=a.documentElement.clientTop+a.body.clientTop);return b};
		goog.style.getOffsetParent=function(a){if(goog.userAgent.IE&&!goog.userAgent.isDocumentModeOrHigher(8))return goog.asserts.assert(a&&"offsetParent"in a),a.offsetParent;var b=goog.dom.getOwnerDocument(a),c=goog.style.getStyle_(a,"position"),d="fixed"==c||"absolute"==c;for(a=a.parentNode;a&&a!=b;a=a.parentNode)if(a.nodeType==goog.dom.NodeType.DOCUMENT_FRAGMENT&&a.host&&(a=a.host),c=goog.style.getStyle_(a,"position"),d=d&&"static"==c&&a!=b.documentElement&&a!=b.body,!d&&(a.scrollWidth>a.clientWidth||
		a.scrollHeight>a.clientHeight||"fixed"==c||"absolute"==c||"relative"==c))return a;return null};
		goog.style.getVisibleRectForElement=function(a){for(var b=new goog.math.Box(0,Infinity,Infinity,0),c=goog.dom.getDomHelper(a),d=c.getDocument().body,e=c.getDocument().documentElement,f=c.getDocumentScrollElement();a=goog.style.getOffsetParent(a);)if(!(goog.userAgent.IE&&0==a.clientWidth||goog.userAgent.WEBKIT&&0==a.clientHeight&&a==d)&&a!=d&&a!=e&&"visible"!=goog.style.getStyle_(a,"overflow")){var g=goog.style.getPageOffset(a),h=goog.style.getClientLeftTop(a);g.x+=h.x;g.y+=h.y;b.top=Math.max(b.top,
		g.y);b.right=Math.min(b.right,g.x+a.clientWidth);b.bottom=Math.min(b.bottom,g.y+a.clientHeight);b.left=Math.max(b.left,g.x)}d=f.scrollLeft;f=f.scrollTop;b.left=Math.max(b.left,d);b.top=Math.max(b.top,f);c=c.getViewportSize();b.right=Math.min(b.right,d+c.width);b.bottom=Math.min(b.bottom,f+c.height);return 0<=b.top&&0<=b.left&&b.bottom>b.top&&b.right>b.left?b:null};
		goog.style.getContainerOffsetToScrollInto=function(a,b,c){var d=b||goog.dom.getDocumentScrollElement(),e=goog.style.getPageOffset(a),f=goog.style.getPageOffset(d),g=goog.style.getBorderBox(d);d==goog.dom.getDocumentScrollElement()?(b=e.x-d.scrollLeft,e=e.y-d.scrollTop,goog.userAgent.IE&&!goog.userAgent.isDocumentModeOrHigher(10)&&(b+=g.left,e+=g.top)):(b=e.x-f.x-g.left,e=e.y-f.y-g.top);g=goog.style.getSizeWithDisplay_(a);a=d.clientWidth-g.width;g=d.clientHeight-g.height;f=d.scrollLeft;d=d.scrollTop;
		c?(f+=b-a/2,d+=e-g/2):(f+=Math.min(b,Math.max(b-a,0)),d+=Math.min(e,Math.max(e-g,0)));return new goog.math.Coordinate(f,d)};goog.style.scrollIntoContainerView=function(a,b,c){b=b||goog.dom.getDocumentScrollElement();a=goog.style.getContainerOffsetToScrollInto(a,b,c);b.scrollLeft=a.x;b.scrollTop=a.y};goog.style.getClientLeftTop=function(a){return new goog.math.Coordinate(a.clientLeft,a.clientTop)};
		goog.style.getPageOffset=function(a){var b=goog.dom.getOwnerDocument(a);goog.asserts.assertObject(a,"Parameter is required");var c=new goog.math.Coordinate(0,0),d=goog.style.getClientViewportElement(b);if(a==d)return c;a=goog.style.getBoundingClientRect_(a);b=goog.dom.getDomHelper(b).getDocumentScroll();c.x=a.left+b.x;c.y=a.top+b.y;return c};goog.style.getPageOffsetLeft=function(a){return goog.style.getPageOffset(a).x};goog.style.getPageOffsetTop=function(a){return goog.style.getPageOffset(a).y};
		goog.style.getFramedPageOffset=function(a,b){var c=new goog.math.Coordinate(0,0),d=goog.dom.getWindow(goog.dom.getOwnerDocument(a));if(!goog.reflect.canAccessProperty(d,"parent"))return c;var e=a;do{var f=d==b?goog.style.getPageOffset(e):goog.style.getClientPositionForElement_(goog.asserts.assert(e));c.x+=f.x;c.y+=f.y}while(d&&d!=b&&d!=d.parent&&(e=d.frameElement)&&(d=d.parent));return c};
		goog.style.translateRectForAnotherFrame=function(a,b,c){if(b.getDocument()!=c.getDocument()){var d=b.getDocument().body;c=goog.style.getFramedPageOffset(d,c.getWindow());c=goog.math.Coordinate.difference(c,goog.style.getPageOffset(d));!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9)||b.isCss1CompatMode()||(c=goog.math.Coordinate.difference(c,b.getDocumentScroll()));a.left+=c.x;a.top+=c.y}};
		goog.style.getRelativePosition=function(a,b){var c=goog.style.getClientPosition(a),d=goog.style.getClientPosition(b);return new goog.math.Coordinate(c.x-d.x,c.y-d.y)};goog.style.getClientPositionForElement_=function(a){a=goog.style.getBoundingClientRect_(a);return new goog.math.Coordinate(a.left,a.top)};
		goog.style.getClientPosition=function(a){goog.asserts.assert(a);if(a.nodeType==goog.dom.NodeType.ELEMENT)return goog.style.getClientPositionForElement_(a);a=a.changedTouches?a.changedTouches[0]:a;return new goog.math.Coordinate(a.clientX,a.clientY)};goog.style.setPageOffset=function(a,b,c){var d=goog.style.getPageOffset(a);b instanceof goog.math.Coordinate&&(c=b.y,b=b.x);b=goog.asserts.assertNumber(b)-d.x;goog.style.setPosition(a,a.offsetLeft+b,a.offsetTop+(Number(c)-d.y))};
		goog.style.setSize=function(a,b,c){if(b instanceof goog.math.Size)c=b.height,b=b.width;else if(void 0==c)throw Error("missing height argument");goog.style.setWidth(a,b);goog.style.setHeight(a,c)};goog.style.getPixelStyleValue_=function(a,b){"number"==typeof a&&(a=(b?Math.round(a):a)+"px");return a};goog.style.setHeight=function(a,b){a.style.height=goog.style.getPixelStyleValue_(b,!0)};goog.style.setWidth=function(a,b){a.style.width=goog.style.getPixelStyleValue_(b,!0)};
		goog.style.getSize=function(a){return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_,a)};goog.style.evaluateWithTemporaryDisplay_=function(a,b){if("none"!=goog.style.getStyle_(b,"display"))return a(b);var c=b.style,d=c.display,e=c.visibility,f=c.position;c.visibility="hidden";c.position="absolute";c.display="inline";var g=a(b);c.display=d;c.position=f;c.visibility=e;return g};
		goog.style.getSizeWithDisplay_=function(a){var b=a.offsetWidth,c=a.offsetHeight,d=goog.userAgent.WEBKIT&&!b&&!c;return goog.isDef(b)&&!d||!a.getBoundingClientRect?new goog.math.Size(b,c):(a=goog.style.getBoundingClientRect_(a),new goog.math.Size(a.right-a.left,a.bottom-a.top))};goog.style.getTransformedSize=function(a){if(!a.getBoundingClientRect)return null;a=goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_,a);return new goog.math.Size(a.right-a.left,a.bottom-a.top)};
		goog.style.getBounds=function(a){var b=goog.style.getPageOffset(a);a=goog.style.getSize(a);return new goog.math.Rect(b.x,b.y,a.width,a.height)};goog.style.toCamelCase=function(a){return goog.string.toCamelCase(String(a))};goog.style.toSelectorCase=function(a){return goog.string.toSelectorCase(a)};
		goog.style.getOpacity=function(a){goog.asserts.assert(a);var b=a.style;a="";"opacity"in b?a=b.opacity:"MozOpacity"in b?a=b.MozOpacity:"filter"in b&&(b=b.filter.match(/alpha\(opacity=([\d.]+)\)/))&&(a=String(b[1]/100));return""==a?a:Number(a)};goog.style.setOpacity=function(a,b){goog.asserts.assert(a);var c=a.style;"opacity"in c?c.opacity=b:"MozOpacity"in c?c.MozOpacity=b:"filter"in c&&(c.filter=""===b?"":"alpha(opacity="+100*Number(b)+")")};
		goog.style.setTransparentBackgroundImage=function(a,b){var c=a.style;goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("8")?c.filter='progid:DXImageTransform.Microsoft.AlphaImageLoader(src="'+b+'", sizingMethod="crop")':(c.backgroundImage="url("+b+")",c.backgroundPosition="top left",c.backgroundRepeat="no-repeat")};goog.style.clearTransparentBackgroundImage=function(a){a=a.style;"filter"in a?a.filter="":a.backgroundImage="none"};
		goog.style.showElement=function(a,b){goog.style.setElementShown(a,b)};goog.style.setElementShown=function(a,b){a.style.display=b?"":"none"};goog.style.isElementShown=function(a){return"none"!=a.style.display};goog.style.installStyles=function(a,b){return goog.style.installSafeStyleSheet(goog.html.legacyconversions.safeStyleSheetFromString(a),b)};
		goog.style.installSafeStyleSheet=function(a,b){var c=goog.dom.getDomHelper(b),d,e=c.getDocument();goog.userAgent.IE&&e.createStyleSheet?(d=e.createStyleSheet(),goog.style.setSafeStyleSheet(d,a)):(e=c.getElementsByTagNameAndClass("HEAD")[0],e||(d=c.getElementsByTagNameAndClass("BODY")[0],e=c.createDom("HEAD"),d.parentNode.insertBefore(e,d)),d=c.createDom("STYLE"),goog.style.setSafeStyleSheet(d,a),c.appendChild(e,d));return d};
		goog.style.uninstallStyles=function(a){goog.dom.removeNode(a.ownerNode||a.owningElement||a)};goog.style.setStyles=function(a,b){goog.style.setSafeStyleSheet(a,goog.html.legacyconversions.safeStyleSheetFromString(b))};goog.style.setSafeStyleSheet=function(a,b){var c=goog.html.SafeStyleSheet.unwrap(b);goog.userAgent.IE&&goog.isDef(a.cssText)?a.cssText=c:a.innerHTML=c};
		goog.style.setPreWrap=function(a){a=a.style;goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("8")?(a.whiteSpace="pre",a.wordWrap="break-word"):a.whiteSpace=goog.userAgent.GECKO?"-moz-pre-wrap":"pre-wrap"};goog.style.setInlineBlock=function(a){a=a.style;a.position="relative";goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("8")?(a.zoom="1",a.display="inline"):a.display="inline-block"};goog.style.isRightToLeft=function(a){return"rtl"==goog.style.getStyle_(a,"direction")};
		goog.style.unselectableStyle_=goog.userAgent.GECKO?"MozUserSelect":goog.userAgent.WEBKIT||goog.userAgent.EDGE?"WebkitUserSelect":null;goog.style.isUnselectable=function(a){return goog.style.unselectableStyle_?"none"==a.style[goog.style.unselectableStyle_].toLowerCase():goog.userAgent.IE||goog.userAgent.OPERA?"on"==a.getAttribute("unselectable"):!1};
		goog.style.setUnselectable=function(a,b,c){c=c?null:a.getElementsByTagName("*");var d=goog.style.unselectableStyle_;if(d){if(b=b?"none":"",a.style&&(a.style[d]=b),c){a=0;for(var e;e=c[a];a++)e.style&&(e.style[d]=b)}}else if(goog.userAgent.IE||goog.userAgent.OPERA)if(b=b?"on":"",a.setAttribute("unselectable",b),c)for(a=0;e=c[a];a++)e.setAttribute("unselectable",b)};goog.style.getBorderBoxSize=function(a){return new goog.math.Size(a.offsetWidth,a.offsetHeight)};
		goog.style.setBorderBoxSize=function(a,b){var c=goog.dom.getOwnerDocument(a),d=goog.dom.getDomHelper(c).isCss1CompatMode();if(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10")||d&&goog.userAgent.isVersionOrHigher("8"))goog.style.setBoxSizingSize_(a,b,"border-box");else if(c=a.style,d){var d=goog.style.getPaddingBox(a),e=goog.style.getBorderBox(a);c.pixelWidth=b.width-e.left-d.left-d.right-e.right;c.pixelHeight=b.height-e.top-d.top-d.bottom-e.bottom}else c.pixelWidth=b.width,c.pixelHeight=
		b.height};
		goog.style.getContentBoxSize=function(a){var b=goog.dom.getOwnerDocument(a),c=goog.userAgent.IE&&a.currentStyle;if(c&&goog.dom.getDomHelper(b).isCss1CompatMode()&&"auto"!=c.width&&"auto"!=c.height&&!c.boxSizing)return b=goog.style.getIePixelValue_(a,c.width,"width","pixelWidth"),a=goog.style.getIePixelValue_(a,c.height,"height","pixelHeight"),new goog.math.Size(b,a);c=goog.style.getBorderBoxSize(a);b=goog.style.getPaddingBox(a);a=goog.style.getBorderBox(a);return new goog.math.Size(c.width-a.left-
		b.left-b.right-a.right,c.height-a.top-b.top-b.bottom-a.bottom)};
		goog.style.setContentBoxSize=function(a,b){var c=goog.dom.getOwnerDocument(a),d=goog.dom.getDomHelper(c).isCss1CompatMode();if(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10")||d&&goog.userAgent.isVersionOrHigher("8"))goog.style.setBoxSizingSize_(a,b,"content-box");else if(c=a.style,d)c.pixelWidth=b.width,c.pixelHeight=b.height;else{var d=goog.style.getPaddingBox(a),e=goog.style.getBorderBox(a);c.pixelWidth=b.width+e.left+d.left+d.right+e.right;c.pixelHeight=b.height+e.top+d.top+d.bottom+
		e.bottom}};goog.style.setBoxSizingSize_=function(a,b,c){a=a.style;goog.userAgent.GECKO?a.MozBoxSizing=c:goog.userAgent.WEBKIT?a.WebkitBoxSizing=c:a.boxSizing=c;a.width=Math.max(b.width,0)+"px";a.height=Math.max(b.height,0)+"px"};goog.style.getIePixelValue_=function(a,b,c,d){if(/^\d+px?$/.test(b))return parseInt(b,10);var e=a.style[c],f=a.runtimeStyle[c];a.runtimeStyle[c]=a.currentStyle[c];a.style[c]=b;b=a.style[d];a.style[c]=e;a.runtimeStyle[c]=f;return b};
		goog.style.getIePixelDistance_=function(a,b){var c=goog.style.getCascadedStyle(a,b);return c?goog.style.getIePixelValue_(a,c,"left","pixelLeft"):0};
		goog.style.getBox_=function(a,b){if(goog.userAgent.IE){var c=goog.style.getIePixelDistance_(a,b+"Left"),d=goog.style.getIePixelDistance_(a,b+"Right"),e=goog.style.getIePixelDistance_(a,b+"Top"),f=goog.style.getIePixelDistance_(a,b+"Bottom");return new goog.math.Box(e,d,f,c)}c=goog.style.getComputedStyle(a,b+"Left");d=goog.style.getComputedStyle(a,b+"Right");e=goog.style.getComputedStyle(a,b+"Top");f=goog.style.getComputedStyle(a,b+"Bottom");return new goog.math.Box(parseFloat(e),parseFloat(d),parseFloat(f),
		parseFloat(c))};goog.style.getPaddingBox=function(a){return goog.style.getBox_(a,"padding")};goog.style.getMarginBox=function(a){return goog.style.getBox_(a,"margin")};goog.style.ieBorderWidthKeywords_={thin:2,medium:4,thick:6};
		goog.style.getIePixelBorder_=function(a,b){if("none"==goog.style.getCascadedStyle(a,b+"Style"))return 0;var c=goog.style.getCascadedStyle(a,b+"Width");return c in goog.style.ieBorderWidthKeywords_?goog.style.ieBorderWidthKeywords_[c]:goog.style.getIePixelValue_(a,c,"left","pixelLeft")};
		goog.style.getBorderBox=function(a){if(goog.userAgent.IE&&!goog.userAgent.isDocumentModeOrHigher(9)){var b=goog.style.getIePixelBorder_(a,"borderLeft"),c=goog.style.getIePixelBorder_(a,"borderRight"),d=goog.style.getIePixelBorder_(a,"borderTop");a=goog.style.getIePixelBorder_(a,"borderBottom");return new goog.math.Box(d,c,a,b)}b=goog.style.getComputedStyle(a,"borderLeftWidth");c=goog.style.getComputedStyle(a,"borderRightWidth");d=goog.style.getComputedStyle(a,"borderTopWidth");a=goog.style.getComputedStyle(a,
		"borderBottomWidth");return new goog.math.Box(parseFloat(d),parseFloat(c),parseFloat(a),parseFloat(b))};goog.style.getFontFamily=function(a){var b=goog.dom.getOwnerDocument(a),c="";if(b.body.createTextRange&&goog.dom.contains(b,a)){b=b.body.createTextRange();b.moveToElementText(a);try{c=b.queryCommandValue("FontName")}catch(d){c=""}}c||(c=goog.style.getStyle_(a,"fontFamily"));a=c.split(",");1<a.length&&(c=a[0]);return goog.string.stripQuotes(c,"\"'")};goog.style.lengthUnitRegex_=/[^\d]+$/;
		goog.style.getLengthUnits=function(a){return(a=a.match(goog.style.lengthUnitRegex_))&&a[0]||null};goog.style.ABSOLUTE_CSS_LENGTH_UNITS_={cm:1,"in":1,mm:1,pc:1,pt:1};goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_={em:1,ex:1};
		goog.style.getFontSize=function(a){var b=goog.style.getStyle_(a,"fontSize"),c=goog.style.getLengthUnits(b);if(b&&"px"==c)return parseInt(b,10);if(goog.userAgent.IE){if(String(c)in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_)return goog.style.getIePixelValue_(a,b,"left","pixelLeft");if(a.parentNode&&a.parentNode.nodeType==goog.dom.NodeType.ELEMENT&&String(c)in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_)return a=a.parentNode,c=goog.style.getStyle_(a,"fontSize"),goog.style.getIePixelValue_(a,b==c?"1em":b,
		"left","pixelLeft")}c=goog.dom.createDom("SPAN",{style:"visibility:hidden;position:absolute;line-height:0;padding:0;margin:0;border:0;height:1em;"});goog.dom.appendChild(a,c);b=c.offsetHeight;goog.dom.removeNode(c);return b};goog.style.parseStyleAttribute=function(a){var b={};goog.array.forEach(a.split(/\s*;\s*/),function(a){var c=a.match(/\s*([\w-]+)\s*\:(.+)/);c&&(a=c[1],c=goog.string.trim(c[2]),b[goog.string.toCamelCase(a.toLowerCase())]=c)});return b};
		goog.style.toStyleAttribute=function(a){var b=[];goog.object.forEach(a,function(a,d){b.push(goog.string.toSelectorCase(d),":",a,";")});return b.join("")};goog.style.setFloat=function(a,b){a.style[goog.userAgent.IE?"styleFloat":"cssFloat"]=b};goog.style.getFloat=function(a){return a.style[goog.userAgent.IE?"styleFloat":"cssFloat"]||""};
		goog.style.getScrollbarWidth=function(a){var b=goog.dom.createElement("DIV");a&&(b.className=a);b.style.cssText="overflow:auto;position:absolute;top:0;width:100px;height:100px";a=goog.dom.createElement("DIV");goog.style.setSize(a,"200px","200px");b.appendChild(a);goog.dom.appendChild(goog.dom.getDocument().body,b);a=b.offsetWidth-b.clientWidth;goog.dom.removeNode(b);return a};goog.style.MATRIX_TRANSLATION_REGEX_=/matrix\([0-9\.\-]+, [0-9\.\-]+, [0-9\.\-]+, [0-9\.\-]+, ([0-9\.\-]+)p?x?, ([0-9\.\-]+)p?x?\)/;
		goog.style.getCssTranslation=function(a){a=goog.style.getComputedTransform(a);return a?(a=a.match(goog.style.MATRIX_TRANSLATION_REGEX_))?new goog.math.Coordinate(parseFloat(a[1]),parseFloat(a[2])):new goog.math.Coordinate(0,0):new goog.math.Coordinate(0,0)};goog.events.EventHandler=function(a){goog.Disposable.call(this);this.handler_=a;this.keys_={}};goog.inherits(goog.events.EventHandler,goog.Disposable);goog.events.EventHandler.typeArray_=[];goog.events.EventHandler.prototype.listen=function(a,b,c,d){return this.listen_(a,b,c,d)};goog.events.EventHandler.prototype.listenWithScope=function(a,b,c,d,e){return this.listen_(a,b,c,d,e)};
		goog.events.EventHandler.prototype.listen_=function(a,b,c,d,e){goog.isArray(b)||(b&&(goog.events.EventHandler.typeArray_[0]=b.toString()),b=goog.events.EventHandler.typeArray_);for(var f=0;f<b.length;f++){var g=goog.events.listen(a,b[f],c||this.handleEvent,d||!1,e||this.handler_||this);if(!g)break;this.keys_[g.key]=g}return this};goog.events.EventHandler.prototype.listenOnce=function(a,b,c,d){return this.listenOnce_(a,b,c,d)};
		goog.events.EventHandler.prototype.listenOnceWithScope=function(a,b,c,d,e){return this.listenOnce_(a,b,c,d,e)};goog.events.EventHandler.prototype.listenOnce_=function(a,b,c,d,e){if(goog.isArray(b))for(var f=0;f<b.length;f++)this.listenOnce_(a,b[f],c,d,e);else{a=goog.events.listenOnce(a,b,c||this.handleEvent,d,e||this.handler_||this);if(!a)return this;this.keys_[a.key]=a}return this};goog.events.EventHandler.prototype.listenWithWrapper=function(a,b,c,d){return this.listenWithWrapper_(a,b,c,d)};
		goog.events.EventHandler.prototype.listenWithWrapperAndScope=function(a,b,c,d,e){return this.listenWithWrapper_(a,b,c,d,e)};goog.events.EventHandler.prototype.listenWithWrapper_=function(a,b,c,d,e){b.listen(a,c,d,e||this.handler_||this,this);return this};goog.events.EventHandler.prototype.getListenerCount=function(){var a=0,b;for(b in this.keys_)Object.prototype.hasOwnProperty.call(this.keys_,b)&&a++;return a};
		goog.events.EventHandler.prototype.unlisten=function(a,b,c,d,e){if(goog.isArray(b))for(var f=0;f<b.length;f++)this.unlisten(a,b[f],c,d,e);else if(a=goog.events.getListener(a,b,c||this.handleEvent,d,e||this.handler_||this))goog.events.unlistenByKey(a),delete this.keys_[a.key];return this};goog.events.EventHandler.prototype.unlistenWithWrapper=function(a,b,c,d,e){b.unlisten(a,c,d,e||this.handler_||this,this);return this};
		goog.events.EventHandler.prototype.removeAll=function(){goog.object.forEach(this.keys_,function(a,b){this.keys_.hasOwnProperty(b)&&goog.events.unlistenByKey(a)},this);this.keys_={}};goog.events.EventHandler.prototype.disposeInternal=function(){goog.events.EventHandler.superClass_.disposeInternal.call(this);this.removeAll()};goog.events.EventHandler.prototype.handleEvent=function(a){throw Error("EventHandler.handleEvent not implemented");};goog.events.EventTarget=function(){goog.Disposable.call(this);this.eventTargetListeners_=new goog.events.ListenerMap(this);this.actualEventTarget_=this;this.parentEventTarget_=null};goog.inherits(goog.events.EventTarget,goog.Disposable);goog.events.Listenable.addImplementation(goog.events.EventTarget);goog.events.EventTarget.MAX_ANCESTORS_=1E3;goog.events.EventTarget.prototype.getParentEventTarget=function(){return this.parentEventTarget_};
		goog.events.EventTarget.prototype.setParentEventTarget=function(a){this.parentEventTarget_=a};goog.events.EventTarget.prototype.addEventListener=function(a,b,c,d){goog.events.listen(this,a,b,c,d)};goog.events.EventTarget.prototype.removeEventListener=function(a,b,c,d){goog.events.unlisten(this,a,b,c,d)};
		goog.events.EventTarget.prototype.dispatchEvent=function(a){this.assertInitialized_();var b,c=this.getParentEventTarget();if(c){b=[];for(var d=1;c;c=c.getParentEventTarget())b.push(c),goog.asserts.assert(++d<goog.events.EventTarget.MAX_ANCESTORS_,"infinite loop")}return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_,a,b)};
		goog.events.EventTarget.prototype.disposeInternal=function(){goog.events.EventTarget.superClass_.disposeInternal.call(this);this.removeAllListeners();this.parentEventTarget_=null};goog.events.EventTarget.prototype.listen=function(a,b,c,d){this.assertInitialized_();return this.eventTargetListeners_.add(String(a),b,!1,c,d)};goog.events.EventTarget.prototype.listenOnce=function(a,b,c,d){return this.eventTargetListeners_.add(String(a),b,!0,c,d)};
		goog.events.EventTarget.prototype.unlisten=function(a,b,c,d){return this.eventTargetListeners_.remove(String(a),b,c,d)};goog.events.EventTarget.prototype.unlistenByKey=function(a){return this.eventTargetListeners_.removeByKey(a)};goog.events.EventTarget.prototype.removeAllListeners=function(a){return this.eventTargetListeners_?this.eventTargetListeners_.removeAll(a):0};
		goog.events.EventTarget.prototype.fireListeners=function(a,b,c){a=this.eventTargetListeners_.listeners[String(a)];if(!a)return!0;a=a.concat();for(var d=!0,e=0;e<a.length;++e){var f=a[e];if(f&&!f.removed&&f.capture==b){var g=f.listener,h=f.handler||f.src;f.callOnce&&this.unlistenByKey(f);d=!1!==g.call(h,c)&&d}}return d&&0!=c.returnValue_};goog.events.EventTarget.prototype.getListeners=function(a,b){return this.eventTargetListeners_.getListeners(String(a),b)};
		goog.events.EventTarget.prototype.getListener=function(a,b,c,d){return this.eventTargetListeners_.getListener(String(a),b,c,d)};goog.events.EventTarget.prototype.hasListener=function(a,b){var c=goog.isDef(a)?String(a):void 0;return this.eventTargetListeners_.hasListener(c,b)};goog.events.EventTarget.prototype.setTargetForTesting=function(a){this.actualEventTarget_=a};goog.events.EventTarget.prototype.assertInitialized_=function(){goog.asserts.assert(this.eventTargetListeners_,"Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?")};
		goog.events.EventTarget.dispatchEventInternal_=function(a,b,c){var d=b.type||b;if(goog.isString(b))b=new goog.events.Event(b,a);else if(b instanceof goog.events.Event)b.target=b.target||a;else{var e=b;b=new goog.events.Event(d,a);goog.object.extend(b,e)}var e=!0,f;if(c)for(var g=c.length-1;!b.propagationStopped_&&0<=g;g--)f=b.currentTarget=c[g],e=f.fireListeners(d,!0,b)&&e;b.propagationStopped_||(f=b.currentTarget=a,e=f.fireListeners(d,!0,b)&&e,b.propagationStopped_||(e=f.fireListeners(d,!1,b)&&e));
		if(c)for(g=0;!b.propagationStopped_&&g<c.length;g++)f=b.currentTarget=c[g],e=f.fireListeners(d,!1,b)&&e;return e};goog.ui={};goog.ui.IdGenerator=function(){};goog.addSingletonGetter(goog.ui.IdGenerator);goog.ui.IdGenerator.prototype.nextId_=0;goog.ui.IdGenerator.prototype.getNextUniqueId=function(){return":"+(this.nextId_++).toString(36)};goog.ui.Component=function(a){goog.events.EventTarget.call(this);this.dom_=a||goog.dom.getDomHelper();this.rightToLeft_=goog.ui.Component.defaultRightToLeft_;this.id_=null;this.inDocument_=!1;this.element_=null;this.googUiComponentHandler_=void 0;this.childIndex_=this.children_=this.parent_=this.model_=null;this.wasDecorated_=!1};goog.inherits(goog.ui.Component,goog.events.EventTarget);goog.ui.Component.ALLOW_DETACHED_DECORATION=!1;goog.ui.Component.prototype.idGenerator_=goog.ui.IdGenerator.getInstance();
		goog.ui.Component.DEFAULT_BIDI_DIR=0;goog.ui.Component.defaultRightToLeft_=1==goog.ui.Component.DEFAULT_BIDI_DIR?!1:-1==goog.ui.Component.DEFAULT_BIDI_DIR?!0:null;
		goog.ui.Component.EventType={BEFORE_SHOW:"beforeshow",SHOW:"show",HIDE:"hide",DISABLE:"disable",ENABLE:"enable",HIGHLIGHT:"highlight",UNHIGHLIGHT:"unhighlight",ACTIVATE:"activate",DEACTIVATE:"deactivate",SELECT:"select",UNSELECT:"unselect",CHECK:"check",UNCHECK:"uncheck",FOCUS:"focus",BLUR:"blur",OPEN:"open",CLOSE:"close",ENTER:"enter",LEAVE:"leave",ACTION:"action",CHANGE:"change"};
		goog.ui.Component.Error={NOT_SUPPORTED:"Method not supported",DECORATE_INVALID:"Invalid element to decorate",ALREADY_RENDERED:"Component already rendered",PARENT_UNABLE_TO_BE_SET:"Unable to set parent component",CHILD_INDEX_OUT_OF_BOUNDS:"Child component index out of bounds",NOT_OUR_CHILD:"Child is not in parent component",NOT_IN_DOCUMENT:"Operation not supported while component is not in document",STATE_INVALID:"Invalid component state"};
		goog.ui.Component.State={ALL:255,DISABLED:1,HOVER:2,ACTIVE:4,SELECTED:8,CHECKED:16,FOCUSED:32,OPENED:64};
		goog.ui.Component.getStateTransitionEvent=function(a,b){switch(a){case goog.ui.Component.State.DISABLED:return b?goog.ui.Component.EventType.DISABLE:goog.ui.Component.EventType.ENABLE;case goog.ui.Component.State.HOVER:return b?goog.ui.Component.EventType.HIGHLIGHT:goog.ui.Component.EventType.UNHIGHLIGHT;case goog.ui.Component.State.ACTIVE:return b?goog.ui.Component.EventType.ACTIVATE:goog.ui.Component.EventType.DEACTIVATE;case goog.ui.Component.State.SELECTED:return b?goog.ui.Component.EventType.SELECT:
		goog.ui.Component.EventType.UNSELECT;case goog.ui.Component.State.CHECKED:return b?goog.ui.Component.EventType.CHECK:goog.ui.Component.EventType.UNCHECK;case goog.ui.Component.State.FOCUSED:return b?goog.ui.Component.EventType.FOCUS:goog.ui.Component.EventType.BLUR;case goog.ui.Component.State.OPENED:return b?goog.ui.Component.EventType.OPEN:goog.ui.Component.EventType.CLOSE}throw Error(goog.ui.Component.Error.STATE_INVALID);};
		goog.ui.Component.setDefaultRightToLeft=function(a){goog.ui.Component.defaultRightToLeft_=a};goog.ui.Component.prototype.getId=function(){return this.id_||(this.id_=this.idGenerator_.getNextUniqueId())};goog.ui.Component.prototype.setId=function(a){this.parent_&&this.parent_.childIndex_&&(goog.object.remove(this.parent_.childIndex_,this.id_),goog.object.add(this.parent_.childIndex_,a,this));this.id_=a};goog.ui.Component.prototype.getElement=function(){return this.element_};
		goog.ui.Component.prototype.getElementStrict=function(){var a=this.element_;goog.asserts.assert(a,"Can not call getElementStrict before rendering/decorating.");return a};goog.ui.Component.prototype.setElementInternal=function(a){this.element_=a};goog.ui.Component.prototype.getElementsByClass=function(a){return this.element_?this.dom_.getElementsByClass(a,this.element_):[]};goog.ui.Component.prototype.getElementByClass=function(a){return this.element_?this.dom_.getElementByClass(a,this.element_):null};
		goog.ui.Component.prototype.getRequiredElementByClass=function(a){var b=this.getElementByClass(a);goog.asserts.assert(b,"Expected element in component with class: %s",a);return b};goog.ui.Component.prototype.getHandler=function(){this.googUiComponentHandler_||(this.googUiComponentHandler_=new goog.events.EventHandler(this));return this.googUiComponentHandler_};
		goog.ui.Component.prototype.setParent=function(a){if(this==a)throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);if(a&&this.parent_&&this.id_&&this.parent_.getChild(this.id_)&&this.parent_!=a)throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);this.parent_=a;goog.ui.Component.superClass_.setParentEventTarget.call(this,a)};goog.ui.Component.prototype.getParent=function(){return this.parent_};
		goog.ui.Component.prototype.setParentEventTarget=function(a){if(this.parent_&&this.parent_!=a)throw Error(goog.ui.Component.Error.NOT_SUPPORTED);goog.ui.Component.superClass_.setParentEventTarget.call(this,a)};goog.ui.Component.prototype.getDomHelper=function(){return this.dom_};goog.ui.Component.prototype.isInDocument=function(){return this.inDocument_};goog.ui.Component.prototype.createDom=function(){this.element_=this.dom_.createElement("DIV")};goog.ui.Component.prototype.render=function(a){this.render_(a)};
		goog.ui.Component.prototype.renderBefore=function(a){this.render_(a.parentNode,a)};goog.ui.Component.prototype.render_=function(a,b){if(this.inDocument_)throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.element_||this.createDom();a?a.insertBefore(this.element_,b||null):this.dom_.getDocument().body.appendChild(this.element_);this.parent_&&!this.parent_.isInDocument()||this.enterDocument()};
		goog.ui.Component.prototype.decorate=function(a){if(this.inDocument_)throw Error(goog.ui.Component.Error.ALREADY_RENDERED);if(a&&this.canDecorate(a)){this.wasDecorated_=!0;var b=goog.dom.getOwnerDocument(a);this.dom_&&this.dom_.getDocument()==b||(this.dom_=goog.dom.getDomHelper(a));this.decorateInternal(a);goog.ui.Component.ALLOW_DETACHED_DECORATION&&!goog.dom.contains(b,a)||this.enterDocument()}else throw Error(goog.ui.Component.Error.DECORATE_INVALID);};goog.ui.Component.prototype.canDecorate=function(a){return!0};
		goog.ui.Component.prototype.wasDecorated=function(){return this.wasDecorated_};goog.ui.Component.prototype.decorateInternal=function(a){this.element_=a};goog.ui.Component.prototype.enterDocument=function(){this.inDocument_=!0;this.forEachChild(function(a){!a.isInDocument()&&a.getElement()&&a.enterDocument()})};
		goog.ui.Component.prototype.exitDocument=function(){this.forEachChild(function(a){a.isInDocument()&&a.exitDocument()});this.googUiComponentHandler_&&this.googUiComponentHandler_.removeAll();this.inDocument_=!1};
		goog.ui.Component.prototype.disposeInternal=function(){this.inDocument_&&this.exitDocument();this.googUiComponentHandler_&&(this.googUiComponentHandler_.dispose(),delete this.googUiComponentHandler_);this.forEachChild(function(a){a.dispose()});!this.wasDecorated_&&this.element_&&goog.dom.removeNode(this.element_);this.parent_=this.model_=this.element_=this.childIndex_=this.children_=null;goog.ui.Component.superClass_.disposeInternal.call(this)};
		goog.ui.Component.prototype.makeId=function(a){return this.getId()+"."+a};goog.ui.Component.prototype.makeIds=function(a){var b={},c;for(c in a)b[c]=this.makeId(a[c]);return b};goog.ui.Component.prototype.getModel=function(){return this.model_};goog.ui.Component.prototype.setModel=function(a){this.model_=a};goog.ui.Component.prototype.getFragmentFromId=function(a){return a.substring(this.getId().length+1)};
		goog.ui.Component.prototype.getElementByFragment=function(a){if(!this.inDocument_)throw Error(goog.ui.Component.Error.NOT_IN_DOCUMENT);return this.dom_.getElement(this.makeId(a))};goog.ui.Component.prototype.addChild=function(a,b){this.addChildAt(a,this.getChildCount(),b)};
		goog.ui.Component.prototype.addChildAt=function(a,b,c){goog.asserts.assert(!!a,"Provided element must not be null.");if(a.inDocument_&&(c||!this.inDocument_))throw Error(goog.ui.Component.Error.ALREADY_RENDERED);if(0>b||b>this.getChildCount())throw Error(goog.ui.Component.Error.CHILD_INDEX_OUT_OF_BOUNDS);this.childIndex_&&this.children_||(this.childIndex_={},this.children_=[]);a.getParent()==this?(goog.object.set(this.childIndex_,a.getId(),a),goog.array.remove(this.children_,a)):goog.object.add(this.childIndex_,
		a.getId(),a);a.setParent(this);goog.array.insertAt(this.children_,a,b);a.inDocument_&&this.inDocument_&&a.getParent()==this?(c=this.getContentElement(),b=c.childNodes[b]||null,b!=a.getElement()&&c.insertBefore(a.getElement(),b)):c?(this.element_||this.createDom(),b=this.getChildAt(b+1),a.render_(this.getContentElement(),b?b.element_:null)):this.inDocument_&&!a.inDocument_&&a.element_&&a.element_.parentNode&&a.element_.parentNode.nodeType==goog.dom.NodeType.ELEMENT&&a.enterDocument()};
		goog.ui.Component.prototype.getContentElement=function(){return this.element_};goog.ui.Component.prototype.isRightToLeft=function(){null==this.rightToLeft_&&(this.rightToLeft_=goog.style.isRightToLeft(this.inDocument_?this.element_:this.dom_.getDocument().body));return this.rightToLeft_};goog.ui.Component.prototype.setRightToLeft=function(a){if(this.inDocument_)throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.rightToLeft_=a};
		goog.ui.Component.prototype.hasChildren=function(){return!!this.children_&&0!=this.children_.length};goog.ui.Component.prototype.getChildCount=function(){return this.children_?this.children_.length:0};goog.ui.Component.prototype.getChildIds=function(){var a=[];this.forEachChild(function(b){a.push(b.getId())});return a};goog.ui.Component.prototype.getChild=function(a){return this.childIndex_&&a?goog.object.get(this.childIndex_,a)||null:null};
		goog.ui.Component.prototype.getChildAt=function(a){return this.children_?this.children_[a]||null:null};goog.ui.Component.prototype.forEachChild=function(a,b){this.children_&&goog.array.forEach(this.children_,a,b)};goog.ui.Component.prototype.indexOfChild=function(a){return this.children_&&a?goog.array.indexOf(this.children_,a):-1};
		goog.ui.Component.prototype.removeChild=function(a,b){if(a){var c=goog.isString(a)?a:a.getId();a=this.getChild(c);c&&a&&(goog.object.remove(this.childIndex_,c),goog.array.remove(this.children_,a),b&&(a.exitDocument(),a.element_&&goog.dom.removeNode(a.element_)),a.setParent(null))}if(!a)throw Error(goog.ui.Component.Error.NOT_OUR_CHILD);return a};goog.ui.Component.prototype.removeChildAt=function(a,b){return this.removeChild(this.getChildAt(a),b)};
		goog.ui.Component.prototype.removeChildren=function(a){for(var b=[];this.hasChildren();)b.push(this.removeChildAt(0,a));return b};goog.a11y={};goog.a11y.aria={};
		goog.a11y.aria.Role={ALERT:"alert",ALERTDIALOG:"alertdialog",APPLICATION:"application",ARTICLE:"article",BANNER:"banner",BUTTON:"button",CHECKBOX:"checkbox",COLUMNHEADER:"columnheader",COMBOBOX:"combobox",COMPLEMENTARY:"complementary",CONTENTINFO:"contentinfo",DEFINITION:"definition",DIALOG:"dialog",DIRECTORY:"directory",DOCUMENT:"document",FORM:"form",GRID:"grid",GRIDCELL:"gridcell",GROUP:"group",HEADING:"heading",IMG:"img",LINK:"link",LIST:"list",LISTBOX:"listbox",LISTITEM:"listitem",LOG:"log",
		MAIN:"main",MARQUEE:"marquee",MATH:"math",MENU:"menu",MENUBAR:"menubar",MENU_ITEM:"menuitem",MENU_ITEM_CHECKBOX:"menuitemcheckbox",MENU_ITEM_RADIO:"menuitemradio",NAVIGATION:"navigation",NOTE:"note",OPTION:"option",PRESENTATION:"presentation",PROGRESSBAR:"progressbar",RADIO:"radio",RADIOGROUP:"radiogroup",REGION:"region",ROW:"row",ROWGROUP:"rowgroup",ROWHEADER:"rowheader",SCROLLBAR:"scrollbar",SEARCH:"search",SEPARATOR:"separator",SLIDER:"slider",SPINBUTTON:"spinbutton",STATUS:"status",TAB:"tab",
		TAB_LIST:"tablist",TAB_PANEL:"tabpanel",TEXTBOX:"textbox",TEXTINFO:"textinfo",TIMER:"timer",TOOLBAR:"toolbar",TOOLTIP:"tooltip",TREE:"tree",TREEGRID:"treegrid",TREEITEM:"treeitem"};goog.a11y.aria.State={ACTIVEDESCENDANT:"activedescendant",ATOMIC:"atomic",AUTOCOMPLETE:"autocomplete",BUSY:"busy",CHECKED:"checked",CONTROLS:"controls",DESCRIBEDBY:"describedby",DISABLED:"disabled",DROPEFFECT:"dropeffect",EXPANDED:"expanded",FLOWTO:"flowto",GRABBED:"grabbed",HASPOPUP:"haspopup",HIDDEN:"hidden",INVALID:"invalid",LABEL:"label",LABELLEDBY:"labelledby",LEVEL:"level",LIVE:"live",MULTILINE:"multiline",MULTISELECTABLE:"multiselectable",ORIENTATION:"orientation",OWNS:"owns",POSINSET:"posinset",
		PRESSED:"pressed",READONLY:"readonly",RELEVANT:"relevant",REQUIRED:"required",SELECTED:"selected",SETSIZE:"setsize",SORT:"sort",VALUEMAX:"valuemax",VALUEMIN:"valuemin",VALUENOW:"valuenow",VALUETEXT:"valuetext"};goog.a11y.aria.AutoCompleteValues={INLINE:"inline",LIST:"list",BOTH:"both",NONE:"none"};goog.a11y.aria.DropEffectValues={COPY:"copy",MOVE:"move",LINK:"link",EXECUTE:"execute",POPUP:"popup",NONE:"none"};goog.a11y.aria.LivePriority={OFF:"off",POLITE:"polite",ASSERTIVE:"assertive"};
		goog.a11y.aria.OrientationValues={VERTICAL:"vertical",HORIZONTAL:"horizontal"};goog.a11y.aria.RelevantValues={ADDITIONS:"additions",REMOVALS:"removals",TEXT:"text",ALL:"all"};goog.a11y.aria.SortValues={ASCENDING:"ascending",DESCENDING:"descending",NONE:"none",OTHER:"other"};goog.a11y.aria.CheckedValues={TRUE:"true",FALSE:"false",MIXED:"mixed",UNDEFINED:"undefined"};goog.a11y.aria.ExpandedValues={TRUE:"true",FALSE:"false",UNDEFINED:"undefined"};
		goog.a11y.aria.GrabbedValues={TRUE:"true",FALSE:"false",UNDEFINED:"undefined"};goog.a11y.aria.InvalidValues={FALSE:"false",TRUE:"true",GRAMMAR:"grammar",SPELLING:"spelling"};goog.a11y.aria.PressedValues={TRUE:"true",FALSE:"false",MIXED:"mixed",UNDEFINED:"undefined"};goog.a11y.aria.SelectedValues={TRUE:"true",FALSE:"false",UNDEFINED:"undefined"};goog.a11y.aria.datatables={};
		goog.a11y.aria.datatables.getDefaultValuesMap=function(){goog.a11y.aria.DefaultStateValueMap_||(goog.a11y.aria.DefaultStateValueMap_=goog.object.create(goog.a11y.aria.State.ATOMIC,!1,goog.a11y.aria.State.AUTOCOMPLETE,"none",goog.a11y.aria.State.DROPEFFECT,"none",goog.a11y.aria.State.HASPOPUP,!1,goog.a11y.aria.State.LIVE,"off",goog.a11y.aria.State.MULTILINE,!1,goog.a11y.aria.State.MULTISELECTABLE,!1,goog.a11y.aria.State.ORIENTATION,"vertical",goog.a11y.aria.State.READONLY,!1,goog.a11y.aria.State.RELEVANT,
		"additions text",goog.a11y.aria.State.REQUIRED,!1,goog.a11y.aria.State.SORT,"none",goog.a11y.aria.State.BUSY,!1,goog.a11y.aria.State.DISABLED,!1,goog.a11y.aria.State.HIDDEN,!1,goog.a11y.aria.State.INVALID,"false"));return goog.a11y.aria.DefaultStateValueMap_};goog.a11y.aria.ARIA_PREFIX_="aria-";goog.a11y.aria.ROLE_ATTRIBUTE_="role";goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_=goog.object.createSet("A AREA BUTTON HEAD INPUT LINK MENU META OPTGROUP OPTION PROGRESS STYLE SELECT SOURCE TEXTAREA TITLE TRACK".split(" "));
		goog.a11y.aria.CONTAINER_ROLES_=[goog.a11y.aria.Role.COMBOBOX,goog.a11y.aria.Role.GRID,goog.a11y.aria.Role.GROUP,goog.a11y.aria.Role.LISTBOX,goog.a11y.aria.Role.MENU,goog.a11y.aria.Role.MENUBAR,goog.a11y.aria.Role.RADIOGROUP,goog.a11y.aria.Role.ROW,goog.a11y.aria.Role.ROWGROUP,goog.a11y.aria.Role.TAB_LIST,goog.a11y.aria.Role.TEXTBOX,goog.a11y.aria.Role.TOOLBAR,goog.a11y.aria.Role.TREE,goog.a11y.aria.Role.TREEGRID];
		goog.a11y.aria.setRole=function(a,b){b?(goog.asserts.ENABLE_ASSERTS&&goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.Role,b),"No such ARIA role "+b),a.setAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_,b)):goog.a11y.aria.removeRole(a)};goog.a11y.aria.getRole=function(a){return a.getAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_)||null};goog.a11y.aria.removeRole=function(a){a.removeAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_)};
		goog.a11y.aria.setState=function(a,b,c){goog.isArray(c)&&(c=c.join(" "));var d=goog.a11y.aria.getAriaAttributeName_(b);""===c||void 0==c?(c=goog.a11y.aria.datatables.getDefaultValuesMap(),b in c?a.setAttribute(d,c[b]):a.removeAttribute(d)):a.setAttribute(d,c)};goog.a11y.aria.toggleState=function(a,b){var c=goog.a11y.aria.getState(a,b);goog.string.isEmptyOrWhitespace(goog.string.makeSafe(c))||"true"==c||"false"==c?goog.a11y.aria.setState(a,b,"true"==c?"false":"true"):goog.a11y.aria.removeState(a,b)};
		goog.a11y.aria.removeState=function(a,b){a.removeAttribute(goog.a11y.aria.getAriaAttributeName_(b))};goog.a11y.aria.getState=function(a,b){var c=a.getAttribute(goog.a11y.aria.getAriaAttributeName_(b));return null==c||void 0==c?"":String(c)};goog.a11y.aria.getActiveDescendant=function(a){var b=goog.a11y.aria.getState(a,goog.a11y.aria.State.ACTIVEDESCENDANT);return goog.dom.getOwnerDocument(a).getElementById(b)};
		goog.a11y.aria.setActiveDescendant=function(a,b){var c="";b&&(c=b.id,goog.asserts.assert(c,"The active element should have an id."));goog.a11y.aria.setState(a,goog.a11y.aria.State.ACTIVEDESCENDANT,c)};goog.a11y.aria.getLabel=function(a){return goog.a11y.aria.getState(a,goog.a11y.aria.State.LABEL)};goog.a11y.aria.setLabel=function(a,b){goog.a11y.aria.setState(a,goog.a11y.aria.State.LABEL,b)};
		goog.a11y.aria.assertRoleIsSetInternalUtil=function(a,b){if(!goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_[a.tagName]){var c=goog.a11y.aria.getRole(a);goog.asserts.assert(null!=c,"The element ARIA role cannot be null.");goog.asserts.assert(goog.array.contains(b,c),'Non existing or incorrect role set for element.The role set is "'+c+'". The role should be any of "'+b+'". Check the ARIA specification for more details http://www.w3.org/TR/wai-aria/roles.')}};
		goog.a11y.aria.getStateBoolean=function(a,b){var c=a.getAttribute(goog.a11y.aria.getAriaAttributeName_(b));goog.asserts.assert(goog.isBoolean(c)||null==c||"true"==c||"false"==c);return null==c?c:goog.isBoolean(c)?c:"true"==c};goog.a11y.aria.getStateNumber=function(a,b){var c=a.getAttribute(goog.a11y.aria.getAriaAttributeName_(b));goog.asserts.assert((null==c||!isNaN(Number(c)))&&!goog.isBoolean(c));return null==c?null:Number(c)};
		goog.a11y.aria.getStateString=function(a,b){var c=a.getAttribute(goog.a11y.aria.getAriaAttributeName_(b));goog.asserts.assert((null==c||goog.isString(c))&&(""==c||isNaN(Number(c)))&&"true"!=c&&"false"!=c);return null==c||""==c?null:c};goog.a11y.aria.getStringArrayStateInternalUtil=function(a,b){var c=a.getAttribute(goog.a11y.aria.getAriaAttributeName_(b));return goog.a11y.aria.splitStringOnWhitespace_(c)};goog.a11y.aria.hasState=function(a,b){return a.hasAttribute(goog.a11y.aria.getAriaAttributeName_(b))};
		goog.a11y.aria.isContainerRole=function(a){a=goog.a11y.aria.getRole(a);return goog.array.contains(goog.a11y.aria.CONTAINER_ROLES_,a)};goog.a11y.aria.splitStringOnWhitespace_=function(a){return a?a.split(/\s+/):[]};goog.a11y.aria.getAriaAttributeName_=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.assert(a,"ARIA attribute cannot be empty."),goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.State,a),"No such ARIA attribute "+a));return goog.a11y.aria.ARIA_PREFIX_+a};goog.events.KeyCodes={WIN_KEY_FF_LINUX:0,MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PLUS_SIGN:43,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,FF_SEMICOLON:59,FF_EQUALS:61,FF_DASH:173,QUESTION_MARK:63,AT_SIGN:64,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,
		Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SCROLL_LOCK:145,FIRST_MEDIA_KEY:166,LAST_MEDIA_KEY:183,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,
		SLASH:191,APOSTROPHE:192,TILDE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,MAC_WK_CMD_LEFT:91,MAC_WK_CMD_RIGHT:93,WIN_IME:229,VK_NONAME:252,PHANTOM:255};
		goog.events.KeyCodes.isTextModifyingKeyEvent=function(a){if(a.altKey&&!a.ctrlKey||a.metaKey||a.keyCode>=goog.events.KeyCodes.F1&&a.keyCode<=goog.events.KeyCodes.F12)return!1;switch(a.keyCode){case goog.events.KeyCodes.ALT:case goog.events.KeyCodes.CAPS_LOCK:case goog.events.KeyCodes.CONTEXT_MENU:case goog.events.KeyCodes.CTRL:case goog.events.KeyCodes.DOWN:case goog.events.KeyCodes.END:case goog.events.KeyCodes.ESC:case goog.events.KeyCodes.HOME:case goog.events.KeyCodes.INSERT:case goog.events.KeyCodes.LEFT:case goog.events.KeyCodes.MAC_FF_META:case goog.events.KeyCodes.META:case goog.events.KeyCodes.NUMLOCK:case goog.events.KeyCodes.NUM_CENTER:case goog.events.KeyCodes.PAGE_DOWN:case goog.events.KeyCodes.PAGE_UP:case goog.events.KeyCodes.PAUSE:case goog.events.KeyCodes.PHANTOM:case goog.events.KeyCodes.PRINT_SCREEN:case goog.events.KeyCodes.RIGHT:case goog.events.KeyCodes.SCROLL_LOCK:case goog.events.KeyCodes.SHIFT:case goog.events.KeyCodes.UP:case goog.events.KeyCodes.VK_NONAME:case goog.events.KeyCodes.WIN_KEY:case goog.events.KeyCodes.WIN_KEY_RIGHT:return!1;case goog.events.KeyCodes.WIN_KEY_FF_LINUX:return!goog.userAgent.GECKO;
		default:return a.keyCode<goog.events.KeyCodes.FIRST_MEDIA_KEY||a.keyCode>goog.events.KeyCodes.LAST_MEDIA_KEY}};
		goog.events.KeyCodes.firesKeyPressEvent=function(a,b,c,d,e,f){if(!(goog.userAgent.IE||goog.userAgent.EDGE||goog.userAgent.WEBKIT&&goog.userAgent.isVersionOrHigher("525")))return!0;if(goog.userAgent.MAC&&e)return goog.events.KeyCodes.isCharacterKey(a);if(e&&!d)return!1;goog.isNumber(b)&&(b=goog.events.KeyCodes.normalizeKeyCode(b));e=b==goog.events.KeyCodes.CTRL||b==goog.events.KeyCodes.ALT||goog.userAgent.MAC&&b==goog.events.KeyCodes.META;f=b==goog.events.KeyCodes.SHIFT&&(d||f);if((!c||goog.userAgent.MAC)&&
		e||goog.userAgent.MAC&&f)return!1;if((goog.userAgent.WEBKIT||goog.userAgent.EDGE)&&d&&c)switch(a){case goog.events.KeyCodes.BACKSLASH:case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:case goog.events.KeyCodes.TILDE:case goog.events.KeyCodes.SEMICOLON:case goog.events.KeyCodes.DASH:case goog.events.KeyCodes.EQUALS:case goog.events.KeyCodes.COMMA:case goog.events.KeyCodes.PERIOD:case goog.events.KeyCodes.SLASH:case goog.events.KeyCodes.APOSTROPHE:case goog.events.KeyCodes.SINGLE_QUOTE:return!1}if(goog.userAgent.IE&&
		d&&b==a)return!1;switch(a){case goog.events.KeyCodes.ENTER:return!0;case goog.events.KeyCodes.ESC:return!(goog.userAgent.WEBKIT||goog.userAgent.EDGE)}return goog.events.KeyCodes.isCharacterKey(a)};
		goog.events.KeyCodes.isCharacterKey=function(a){if(a>=goog.events.KeyCodes.ZERO&&a<=goog.events.KeyCodes.NINE||a>=goog.events.KeyCodes.NUM_ZERO&&a<=goog.events.KeyCodes.NUM_MULTIPLY||a>=goog.events.KeyCodes.A&&a<=goog.events.KeyCodes.Z||(goog.userAgent.WEBKIT||goog.userAgent.EDGE)&&0==a)return!0;switch(a){case goog.events.KeyCodes.SPACE:case goog.events.KeyCodes.PLUS_SIGN:case goog.events.KeyCodes.QUESTION_MARK:case goog.events.KeyCodes.AT_SIGN:case goog.events.KeyCodes.NUM_PLUS:case goog.events.KeyCodes.NUM_MINUS:case goog.events.KeyCodes.NUM_PERIOD:case goog.events.KeyCodes.NUM_DIVISION:case goog.events.KeyCodes.SEMICOLON:case goog.events.KeyCodes.FF_SEMICOLON:case goog.events.KeyCodes.DASH:case goog.events.KeyCodes.EQUALS:case goog.events.KeyCodes.FF_EQUALS:case goog.events.KeyCodes.COMMA:case goog.events.KeyCodes.PERIOD:case goog.events.KeyCodes.SLASH:case goog.events.KeyCodes.APOSTROPHE:case goog.events.KeyCodes.SINGLE_QUOTE:case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:case goog.events.KeyCodes.BACKSLASH:case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:return!0;default:return!1}};
		goog.events.KeyCodes.normalizeKeyCode=function(a){return goog.userAgent.GECKO?goog.events.KeyCodes.normalizeGeckoKeyCode(a):goog.userAgent.MAC&&goog.userAgent.WEBKIT?goog.events.KeyCodes.normalizeMacWebKitKeyCode(a):a};
		goog.events.KeyCodes.normalizeGeckoKeyCode=function(a){switch(a){case goog.events.KeyCodes.FF_EQUALS:return goog.events.KeyCodes.EQUALS;case goog.events.KeyCodes.FF_SEMICOLON:return goog.events.KeyCodes.SEMICOLON;case goog.events.KeyCodes.FF_DASH:return goog.events.KeyCodes.DASH;case goog.events.KeyCodes.MAC_FF_META:return goog.events.KeyCodes.META;case goog.events.KeyCodes.WIN_KEY_FF_LINUX:return goog.events.KeyCodes.WIN_KEY;default:return a}};
		goog.events.KeyCodes.normalizeMacWebKitKeyCode=function(a){switch(a){case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:return goog.events.KeyCodes.META;default:return a}};goog.events.KeyHandler=function(a,b){goog.events.EventTarget.call(this);a&&this.attach(a,b)};goog.inherits(goog.events.KeyHandler,goog.events.EventTarget);goog.events.KeyHandler.prototype.element_=null;goog.events.KeyHandler.prototype.keyPressKey_=null;goog.events.KeyHandler.prototype.keyDownKey_=null;goog.events.KeyHandler.prototype.keyUpKey_=null;goog.events.KeyHandler.prototype.lastKey_=-1;goog.events.KeyHandler.prototype.keyCode_=-1;goog.events.KeyHandler.prototype.altKey_=!1;
		goog.events.KeyHandler.EventType={KEY:"key"};
		goog.events.KeyHandler.safariKey_={3:goog.events.KeyCodes.ENTER,12:goog.events.KeyCodes.NUMLOCK,63232:goog.events.KeyCodes.UP,63233:goog.events.KeyCodes.DOWN,63234:goog.events.KeyCodes.LEFT,63235:goog.events.KeyCodes.RIGHT,63236:goog.events.KeyCodes.F1,63237:goog.events.KeyCodes.F2,63238:goog.events.KeyCodes.F3,63239:goog.events.KeyCodes.F4,63240:goog.events.KeyCodes.F5,63241:goog.events.KeyCodes.F6,63242:goog.events.KeyCodes.F7,63243:goog.events.KeyCodes.F8,63244:goog.events.KeyCodes.F9,63245:goog.events.KeyCodes.F10,
		63246:goog.events.KeyCodes.F11,63247:goog.events.KeyCodes.F12,63248:goog.events.KeyCodes.PRINT_SCREEN,63272:goog.events.KeyCodes.DELETE,63273:goog.events.KeyCodes.HOME,63275:goog.events.KeyCodes.END,63276:goog.events.KeyCodes.PAGE_UP,63277:goog.events.KeyCodes.PAGE_DOWN,63289:goog.events.KeyCodes.NUMLOCK,63302:goog.events.KeyCodes.INSERT};
		goog.events.KeyHandler.keyIdentifier_={Up:goog.events.KeyCodes.UP,Down:goog.events.KeyCodes.DOWN,Left:goog.events.KeyCodes.LEFT,Right:goog.events.KeyCodes.RIGHT,Enter:goog.events.KeyCodes.ENTER,F1:goog.events.KeyCodes.F1,F2:goog.events.KeyCodes.F2,F3:goog.events.KeyCodes.F3,F4:goog.events.KeyCodes.F4,F5:goog.events.KeyCodes.F5,F6:goog.events.KeyCodes.F6,F7:goog.events.KeyCodes.F7,F8:goog.events.KeyCodes.F8,F9:goog.events.KeyCodes.F9,F10:goog.events.KeyCodes.F10,F11:goog.events.KeyCodes.F11,F12:goog.events.KeyCodes.F12,
		"U+007F":goog.events.KeyCodes.DELETE,Home:goog.events.KeyCodes.HOME,End:goog.events.KeyCodes.END,PageUp:goog.events.KeyCodes.PAGE_UP,PageDown:goog.events.KeyCodes.PAGE_DOWN,Insert:goog.events.KeyCodes.INSERT};goog.events.KeyHandler.USES_KEYDOWN_=goog.userAgent.IE||goog.userAgent.EDGE||goog.userAgent.WEBKIT&&goog.userAgent.isVersionOrHigher("525");goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_=goog.userAgent.MAC&&goog.userAgent.GECKO;
		goog.events.KeyHandler.prototype.handleKeyDown_=function(a){(goog.userAgent.WEBKIT||goog.userAgent.EDGE)&&(this.lastKey_==goog.events.KeyCodes.CTRL&&!a.ctrlKey||this.lastKey_==goog.events.KeyCodes.ALT&&!a.altKey||goog.userAgent.MAC&&this.lastKey_==goog.events.KeyCodes.META&&!a.metaKey)&&this.resetState();-1==this.lastKey_&&(a.ctrlKey&&a.keyCode!=goog.events.KeyCodes.CTRL?this.lastKey_=goog.events.KeyCodes.CTRL:a.altKey&&a.keyCode!=goog.events.KeyCodes.ALT?this.lastKey_=goog.events.KeyCodes.ALT:a.metaKey&&
		a.keyCode!=goog.events.KeyCodes.META&&(this.lastKey_=goog.events.KeyCodes.META));goog.events.KeyHandler.USES_KEYDOWN_&&!goog.events.KeyCodes.firesKeyPressEvent(a.keyCode,this.lastKey_,a.shiftKey,a.ctrlKey,a.altKey,a.metaKey)?this.handleEvent(a):(this.keyCode_=goog.events.KeyCodes.normalizeKeyCode(a.keyCode),goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_&&(this.altKey_=a.altKey))};goog.events.KeyHandler.prototype.resetState=function(){this.keyCode_=this.lastKey_=-1};
		goog.events.KeyHandler.prototype.handleKeyup_=function(a){this.resetState();this.altKey_=a.altKey};
		goog.events.KeyHandler.prototype.handleEvent=function(a){var b=a.getBrowserEvent(),c,d,e=b.altKey;goog.userAgent.IE&&a.type==goog.events.EventType.KEYPRESS?(c=this.keyCode_,d=c!=goog.events.KeyCodes.ENTER&&c!=goog.events.KeyCodes.ESC?b.keyCode:0):(goog.userAgent.WEBKIT||goog.userAgent.EDGE)&&a.type==goog.events.EventType.KEYPRESS?(c=this.keyCode_,d=0<=b.charCode&&63232>b.charCode&&goog.events.KeyCodes.isCharacterKey(c)?b.charCode:0):goog.userAgent.OPERA&&!goog.userAgent.WEBKIT?(c=this.keyCode_,d=
		goog.events.KeyCodes.isCharacterKey(c)?b.keyCode:0):(c=b.keyCode||this.keyCode_,d=b.charCode||0,goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_&&(e=this.altKey_),goog.userAgent.MAC&&d==goog.events.KeyCodes.QUESTION_MARK&&c==goog.events.KeyCodes.WIN_KEY&&(c=goog.events.KeyCodes.SLASH));var f=c=goog.events.KeyCodes.normalizeKeyCode(c);c?63232<=c&&c in goog.events.KeyHandler.safariKey_?f=goog.events.KeyHandler.safariKey_[c]:25==c&&a.shiftKey&&(f=9):b.keyIdentifier&&b.keyIdentifier in goog.events.KeyHandler.keyIdentifier_&&
		(f=goog.events.KeyHandler.keyIdentifier_[b.keyIdentifier]);a=f==this.lastKey_;this.lastKey_=f;b=new goog.events.KeyEvent(f,d,a,b);b.altKey=e;this.dispatchEvent(b)};goog.events.KeyHandler.prototype.getElement=function(){return this.element_};
		goog.events.KeyHandler.prototype.attach=function(a,b){this.keyUpKey_&&this.detach();this.element_=a;this.keyPressKey_=goog.events.listen(this.element_,goog.events.EventType.KEYPRESS,this,b);this.keyDownKey_=goog.events.listen(this.element_,goog.events.EventType.KEYDOWN,this.handleKeyDown_,b,this);this.keyUpKey_=goog.events.listen(this.element_,goog.events.EventType.KEYUP,this.handleKeyup_,b,this)};
		goog.events.KeyHandler.prototype.detach=function(){this.keyPressKey_&&(goog.events.unlistenByKey(this.keyPressKey_),goog.events.unlistenByKey(this.keyDownKey_),goog.events.unlistenByKey(this.keyUpKey_),this.keyUpKey_=this.keyDownKey_=this.keyPressKey_=null);this.element_=null;this.keyCode_=this.lastKey_=-1};goog.events.KeyHandler.prototype.disposeInternal=function(){goog.events.KeyHandler.superClass_.disposeInternal.call(this);this.detach()};
		goog.events.KeyEvent=function(a,b,c,d){goog.events.BrowserEvent.call(this,d);this.type=goog.events.KeyHandler.EventType.KEY;this.keyCode=a;this.charCode=b;this.repeat=c};goog.inherits(goog.events.KeyEvent,goog.events.BrowserEvent);goog.dom.classlist={};goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST=!1;goog.dom.classlist.get=function(a){if(goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList)return a.classList;a=a.className;return goog.isString(a)&&a.match(/\S+/g)||[]};goog.dom.classlist.set=function(a,b){a.className=b};goog.dom.classlist.contains=function(a,b){return goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList?a.classList.contains(b):goog.array.contains(goog.dom.classlist.get(a),b)};
		goog.dom.classlist.add=function(a,b){goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList?a.classList.add(b):goog.dom.classlist.contains(a,b)||(a.className+=0<a.className.length?" "+b:b)};
		goog.dom.classlist.addAll=function(a,b){if(goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList)goog.array.forEach(b,function(b){goog.dom.classlist.add(a,b)});else{var c={};goog.array.forEach(goog.dom.classlist.get(a),function(a){c[a]=!0});goog.array.forEach(b,function(a){c[a]=!0});a.className="";for(var d in c)a.className+=0<a.className.length?" "+d:d}};
		goog.dom.classlist.remove=function(a,b){goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList?a.classList.remove(b):goog.dom.classlist.contains(a,b)&&(a.className=goog.array.filter(goog.dom.classlist.get(a),function(a){return a!=b}).join(" "))};
		goog.dom.classlist.removeAll=function(a,b){goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST||a.classList?goog.array.forEach(b,function(b){goog.dom.classlist.remove(a,b)}):a.className=goog.array.filter(goog.dom.classlist.get(a),function(a){return!goog.array.contains(b,a)}).join(" ")};goog.dom.classlist.enable=function(a,b,c){c?goog.dom.classlist.add(a,b):goog.dom.classlist.remove(a,b)};goog.dom.classlist.enableAll=function(a,b,c){(c?goog.dom.classlist.addAll:goog.dom.classlist.removeAll)(a,b)};
		goog.dom.classlist.swap=function(a,b,c){return goog.dom.classlist.contains(a,b)?(goog.dom.classlist.remove(a,b),goog.dom.classlist.add(a,c),!0):!1};goog.dom.classlist.toggle=function(a,b){var c=!goog.dom.classlist.contains(a,b);goog.dom.classlist.enable(a,b,c);return c};goog.dom.classlist.addRemove=function(a,b,c){goog.dom.classlist.remove(a,b);goog.dom.classlist.add(a,c)};goog.ui.registry={};goog.ui.registry.getDefaultRenderer=function(a){for(var b;a;){b=goog.getUid(a);if(b=goog.ui.registry.defaultRenderers_[b])break;a=a.superClass_?a.superClass_.constructor:null}return b?goog.isFunction(b.getInstance)?b.getInstance():new b:null};
		goog.ui.registry.setDefaultRenderer=function(a,b){if(!goog.isFunction(a))throw Error("Invalid component class "+a);if(!goog.isFunction(b))throw Error("Invalid renderer class "+b);var c=goog.getUid(a);goog.ui.registry.defaultRenderers_[c]=b};goog.ui.registry.getDecoratorByClassName=function(a){return a in goog.ui.registry.decoratorFunctions_?goog.ui.registry.decoratorFunctions_[a]():null};
		goog.ui.registry.setDecoratorByClassName=function(a,b){if(!a)throw Error("Invalid class name "+a);if(!goog.isFunction(b))throw Error("Invalid decorator function "+b);goog.ui.registry.decoratorFunctions_[a]=b};goog.ui.registry.getDecorator=function(a){goog.asserts.assert(a);for(var b=goog.dom.classlist.get(a),c=0,d=b.length;c<d;c++)if(a=goog.ui.registry.getDecoratorByClassName(b[c]))return a;return null};
		goog.ui.registry.reset=function(){goog.ui.registry.defaultRenderers_={};goog.ui.registry.decoratorFunctions_={}};goog.ui.registry.defaultRenderers_={};goog.ui.registry.decoratorFunctions_={};goog.ui.ContainerRenderer=function(a){this.ariaRole_=a};goog.addSingletonGetter(goog.ui.ContainerRenderer);goog.ui.ContainerRenderer.getCustomRenderer=function(a,b){var c=new a;c.getCssClass=function(){return b};return c};goog.ui.ContainerRenderer.CSS_CLASS="goog-container";goog.ui.ContainerRenderer.prototype.getAriaRole=function(){return this.ariaRole_};goog.ui.ContainerRenderer.prototype.enableTabIndex=function(a,b){a&&(a.tabIndex=b?0:-1)};
		goog.ui.ContainerRenderer.prototype.createDom=function(a){return a.getDomHelper().createDom("DIV",this.getClassNames(a).join(" "))};goog.ui.ContainerRenderer.prototype.getContentElement=function(a){return a};goog.ui.ContainerRenderer.prototype.canDecorate=function(a){return"DIV"==a.tagName};
		goog.ui.ContainerRenderer.prototype.decorate=function(a,b){b.id&&a.setId(b.id);var c=this.getCssClass(),d=!1,e=goog.dom.classlist.get(b);e&&goog.array.forEach(e,function(b){b==c?d=!0:b&&this.setStateFromClassName(a,b,c)},this);d||goog.dom.classlist.add(b,c);this.decorateChildren(a,this.getContentElement(b));return b};
		goog.ui.ContainerRenderer.prototype.setStateFromClassName=function(a,b,c){b==c+"-disabled"?a.setEnabled(!1):b==c+"-horizontal"?a.setOrientation(goog.ui.Container.Orientation.HORIZONTAL):b==c+"-vertical"&&a.setOrientation(goog.ui.Container.Orientation.VERTICAL)};
		goog.ui.ContainerRenderer.prototype.decorateChildren=function(a,b,c){if(b){c=c||b.firstChild;for(var d;c&&c.parentNode==b;){d=c.nextSibling;if(c.nodeType==goog.dom.NodeType.ELEMENT){var e=this.getDecoratorForChild(c);e&&(e.setElementInternal(c),a.isEnabled()||e.setEnabled(!1),a.addChild(e),e.decorate(c))}else c.nodeValue&&""!=goog.string.trim(c.nodeValue)||b.removeChild(c);c=d}}};goog.ui.ContainerRenderer.prototype.getDecoratorForChild=function(a){return goog.ui.registry.getDecorator(a)};
		goog.ui.ContainerRenderer.prototype.initializeDom=function(a){a=a.getElement();goog.asserts.assert(a,"The container DOM element cannot be null.");goog.style.setUnselectable(a,!0,goog.userAgent.GECKO);goog.userAgent.IE&&(a.hideFocus=!0);var b=this.getAriaRole();b&&goog.a11y.aria.setRole(a,b)};goog.ui.ContainerRenderer.prototype.getKeyEventTarget=function(a){return a.getElement()};goog.ui.ContainerRenderer.prototype.getCssClass=function(){return goog.ui.ContainerRenderer.CSS_CLASS};
		goog.ui.ContainerRenderer.prototype.getClassNames=function(a){var b=this.getCssClass(),c=a.getOrientation()==goog.ui.Container.Orientation.HORIZONTAL,c=[b,c?b+"-horizontal":b+"-vertical"];a.isEnabled()||c.push(b+"-disabled");return c};goog.ui.ContainerRenderer.prototype.getDefaultOrientation=function(){return goog.ui.Container.Orientation.VERTICAL};goog.ui.ControlRenderer=function(){};goog.addSingletonGetter(goog.ui.ControlRenderer);goog.tagUnsealableClass(goog.ui.ControlRenderer);goog.ui.ControlRenderer.getCustomRenderer=function(a,b){var c=new a;c.getCssClass=function(){return b};return c};goog.ui.ControlRenderer.CSS_CLASS="goog-control";goog.ui.ControlRenderer.IE6_CLASS_COMBINATIONS=[];
		goog.ui.ControlRenderer.TOGGLE_ARIA_STATE_MAP_=goog.object.create(goog.a11y.aria.Role.BUTTON,goog.a11y.aria.State.PRESSED,goog.a11y.aria.Role.CHECKBOX,goog.a11y.aria.State.CHECKED,goog.a11y.aria.Role.MENU_ITEM,goog.a11y.aria.State.SELECTED,goog.a11y.aria.Role.MENU_ITEM_CHECKBOX,goog.a11y.aria.State.CHECKED,goog.a11y.aria.Role.MENU_ITEM_RADIO,goog.a11y.aria.State.CHECKED,goog.a11y.aria.Role.RADIO,goog.a11y.aria.State.CHECKED,goog.a11y.aria.Role.TAB,goog.a11y.aria.State.SELECTED,goog.a11y.aria.Role.TREEITEM,
		goog.a11y.aria.State.SELECTED);goog.ui.ControlRenderer.prototype.getAriaRole=function(){};goog.ui.ControlRenderer.prototype.createDom=function(a){return a.getDomHelper().createDom("DIV",this.getClassNames(a).join(" "),a.getContent())};goog.ui.ControlRenderer.prototype.getContentElement=function(a){return a};
		goog.ui.ControlRenderer.prototype.enableClassName=function(a,b,c){if(a=a.getElement?a.getElement():a){var d=[b];goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("7")&&(d=this.getAppliedCombinedClassNames_(goog.dom.classlist.get(a),b),d.push(b));goog.dom.classlist.enableAll(a,d,c)}};goog.ui.ControlRenderer.prototype.enableExtraClassName=function(a,b,c){this.enableClassName(a,b,c)};goog.ui.ControlRenderer.prototype.canDecorate=function(a){return!0};
		goog.ui.ControlRenderer.prototype.decorate=function(a,b){b.id&&a.setId(b.id);var c=this.getContentElement(b);c&&c.firstChild?a.setContentInternal(c.firstChild.nextSibling?goog.array.clone(c.childNodes):c.firstChild):a.setContentInternal(null);var d=0,e=this.getCssClass(),f=this.getStructuralCssClass(),g=!1,h=!1,k=!1,l=goog.array.toArray(goog.dom.classlist.get(b));goog.array.forEach(l,function(a){g||a!=e?h||a!=f?d|=this.getStateFromClass(a):h=!0:(g=!0,f==e&&(h=!0));this.getStateFromClass(a)==goog.ui.Component.State.DISABLED&&
		(goog.asserts.assertElement(c),goog.dom.isFocusableTabIndex(c)&&goog.dom.setFocusableTabIndex(c,!1))},this);a.setStateInternal(d);g||(l.push(e),f==e&&(h=!0));h||l.push(f);var m=a.getExtraClassNames();m&&l.push.apply(l,m);if(goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("7")){var n=this.getAppliedCombinedClassNames_(l);0<n.length&&(l.push.apply(l,n),k=!0)}g&&h&&!m&&!k||goog.dom.classlist.set(b,l.join(" "));return b};
		goog.ui.ControlRenderer.prototype.initializeDom=function(a){a.isRightToLeft()&&this.setRightToLeft(a.getElement(),!0);a.isEnabled()&&this.setFocusable(a,a.isVisible())};goog.ui.ControlRenderer.prototype.setAriaRole=function(a,b){var c=b||this.getAriaRole();if(c){goog.asserts.assert(a,"The element passed as a first parameter cannot be null.");var d=goog.a11y.aria.getRole(a);c!=d&&goog.a11y.aria.setRole(a,c)}};
		goog.ui.ControlRenderer.prototype.setAriaStates=function(a,b){goog.asserts.assert(a);goog.asserts.assert(b);var c=a.getAriaLabel();goog.isDefAndNotNull(c)&&this.setAriaLabel(b,c);a.isVisible()||goog.a11y.aria.setState(b,goog.a11y.aria.State.HIDDEN,!a.isVisible());a.isEnabled()||this.updateAriaState(b,goog.ui.Component.State.DISABLED,!a.isEnabled());a.isSupportedState(goog.ui.Component.State.SELECTED)&&this.updateAriaState(b,goog.ui.Component.State.SELECTED,a.isSelected());a.isSupportedState(goog.ui.Component.State.CHECKED)&&
		this.updateAriaState(b,goog.ui.Component.State.CHECKED,a.isChecked());a.isSupportedState(goog.ui.Component.State.OPENED)&&this.updateAriaState(b,goog.ui.Component.State.OPENED,a.isOpen())};goog.ui.ControlRenderer.prototype.setAriaLabel=function(a,b){goog.a11y.aria.setLabel(a,b)};goog.ui.ControlRenderer.prototype.setAllowTextSelection=function(a,b){goog.style.setUnselectable(a,!b,!goog.userAgent.IE&&!goog.userAgent.OPERA)};
		goog.ui.ControlRenderer.prototype.setRightToLeft=function(a,b){this.enableClassName(a,this.getStructuralCssClass()+"-rtl",b)};goog.ui.ControlRenderer.prototype.isFocusable=function(a){var b;return a.isSupportedState(goog.ui.Component.State.FOCUSED)&&(b=a.getKeyEventTarget())?goog.dom.isFocusableTabIndex(b):!1};
		goog.ui.ControlRenderer.prototype.setFocusable=function(a,b){var c;if(a.isSupportedState(goog.ui.Component.State.FOCUSED)&&(c=a.getKeyEventTarget())){if(!b&&a.isFocused()){try{c.blur()}catch(d){}a.isFocused()&&a.handleBlur(null)}goog.dom.isFocusableTabIndex(c)!=b&&goog.dom.setFocusableTabIndex(c,b)}};goog.ui.ControlRenderer.prototype.setVisible=function(a,b){goog.style.setElementShown(a,b);a&&goog.a11y.aria.setState(a,goog.a11y.aria.State.HIDDEN,!b)};
		goog.ui.ControlRenderer.prototype.setState=function(a,b,c){var d=a.getElement();if(d){var e=this.getClassForState(b);e&&this.enableClassName(a,e,c);this.updateAriaState(d,b,c)}};
		goog.ui.ControlRenderer.prototype.updateAriaState=function(a,b,c){goog.ui.ControlRenderer.ariaAttributeMap_||(goog.ui.ControlRenderer.ariaAttributeMap_=goog.object.create(goog.ui.Component.State.DISABLED,goog.a11y.aria.State.DISABLED,goog.ui.Component.State.SELECTED,goog.a11y.aria.State.SELECTED,goog.ui.Component.State.CHECKED,goog.a11y.aria.State.CHECKED,goog.ui.Component.State.OPENED,goog.a11y.aria.State.EXPANDED));goog.asserts.assert(a,"The element passed as a first parameter cannot be null.");
		(b=goog.ui.ControlRenderer.getAriaStateForAriaRole_(a,goog.ui.ControlRenderer.ariaAttributeMap_[b]))&&goog.a11y.aria.setState(a,b,c)};goog.ui.ControlRenderer.getAriaStateForAriaRole_=function(a,b){var c=goog.a11y.aria.getRole(a);if(!c)return b;c=goog.ui.ControlRenderer.TOGGLE_ARIA_STATE_MAP_[c]||b;return goog.ui.ControlRenderer.isAriaState_(b)?c:b};goog.ui.ControlRenderer.isAriaState_=function(a){return a==goog.a11y.aria.State.CHECKED||a==goog.a11y.aria.State.SELECTED};
		goog.ui.ControlRenderer.prototype.setContent=function(a,b){var c=this.getContentElement(a);if(c&&(goog.dom.removeChildren(c),b))if(goog.isString(b))goog.dom.setTextContent(c,b);else{var d=function(a){if(a){var b=goog.dom.getOwnerDocument(c);c.appendChild(goog.isString(a)?b.createTextNode(a):a)}};goog.isArray(b)?goog.array.forEach(b,d):!goog.isArrayLike(b)||"nodeType"in b?d(b):goog.array.forEach(goog.array.clone(b),d)}};goog.ui.ControlRenderer.prototype.getKeyEventTarget=function(a){return a.getElement()};
		goog.ui.ControlRenderer.prototype.getCssClass=function(){return goog.ui.ControlRenderer.CSS_CLASS};goog.ui.ControlRenderer.prototype.getIe6ClassCombinations=function(){return[]};goog.ui.ControlRenderer.prototype.getStructuralCssClass=function(){return this.getCssClass()};
		goog.ui.ControlRenderer.prototype.getClassNames=function(a){var b=this.getCssClass(),c=[b],d=this.getStructuralCssClass();d!=b&&c.push(d);b=this.getClassNamesForState(a.getState());c.push.apply(c,b);(a=a.getExtraClassNames())&&c.push.apply(c,a);goog.userAgent.IE&&!goog.userAgent.isVersionOrHigher("7")&&c.push.apply(c,this.getAppliedCombinedClassNames_(c));return c};
		goog.ui.ControlRenderer.prototype.getAppliedCombinedClassNames_=function(a,b){var c=[];b&&(a=goog.array.concat(a,[b]));goog.array.forEach(this.getIe6ClassCombinations(),function(d){!goog.array.every(d,goog.partial(goog.array.contains,a))||b&&!goog.array.contains(d,b)||c.push(d.join("_"))});return c};goog.ui.ControlRenderer.prototype.getClassNamesForState=function(a){for(var b=[];a;){var c=a&-a;b.push(this.getClassForState(c));a&=~c}return b};
		goog.ui.ControlRenderer.prototype.getClassForState=function(a){this.classByState_||this.createClassByStateMap_();return this.classByState_[a]};goog.ui.ControlRenderer.prototype.getStateFromClass=function(a){this.stateByClass_||this.createStateByClassMap_();a=parseInt(this.stateByClass_[a],10);return isNaN(a)?0:a};
		goog.ui.ControlRenderer.prototype.createClassByStateMap_=function(){var a=this.getStructuralCssClass(),b=!goog.string.contains(goog.string.normalizeWhitespace(a)," ");goog.asserts.assert(b,"ControlRenderer has an invalid css class: '"+a+"'");this.classByState_=goog.object.create(goog.ui.Component.State.DISABLED,a+"-disabled",goog.ui.Component.State.HOVER,a+"-hover",goog.ui.Component.State.ACTIVE,a+"-active",goog.ui.Component.State.SELECTED,a+"-selected",goog.ui.Component.State.CHECKED,a+"-checked",
		goog.ui.Component.State.FOCUSED,a+"-focused",goog.ui.Component.State.OPENED,a+"-open")};goog.ui.ControlRenderer.prototype.createStateByClassMap_=function(){this.classByState_||this.createClassByStateMap_();this.stateByClass_=goog.object.transpose(this.classByState_)};goog.ui.Control=function(a,b,c){goog.ui.Component.call(this,c);this.renderer_=b||goog.ui.registry.getDefaultRenderer(this.constructor);this.setContentInternal(goog.isDef(a)?a:null);this.ariaLabel_=null};goog.inherits(goog.ui.Control,goog.ui.Component);goog.tagUnsealableClass(goog.ui.Control);goog.ui.Control.registerDecorator=goog.ui.registry.setDecoratorByClassName;goog.ui.Control.getDecorator=goog.ui.registry.getDecorator;goog.ui.Control.prototype.content_=null;goog.ui.Control.prototype.state_=0;
		goog.ui.Control.prototype.supportedStates_=goog.ui.Component.State.DISABLED|goog.ui.Component.State.HOVER|goog.ui.Component.State.ACTIVE|goog.ui.Component.State.FOCUSED;goog.ui.Control.prototype.autoStates_=goog.ui.Component.State.ALL;goog.ui.Control.prototype.statesWithTransitionEvents_=0;goog.ui.Control.prototype.visible_=!0;goog.ui.Control.prototype.extraClassNames_=null;goog.ui.Control.prototype.handleMouseEvents_=!0;goog.ui.Control.prototype.allowTextSelection_=!1;
		goog.ui.Control.prototype.preferredAriaRole_=null;goog.ui.Control.prototype.isHandleMouseEvents=function(){return this.handleMouseEvents_};goog.ui.Control.prototype.setHandleMouseEvents=function(a){this.isInDocument()&&a!=this.handleMouseEvents_&&this.enableMouseEventHandling_(a);this.handleMouseEvents_=a};goog.ui.Control.prototype.getKeyEventTarget=function(){return this.renderer_.getKeyEventTarget(this)};
		goog.ui.Control.prototype.getKeyHandler=function(){return this.keyHandler_||(this.keyHandler_=new goog.events.KeyHandler)};goog.ui.Control.prototype.getRenderer=function(){return this.renderer_};goog.ui.Control.prototype.setRenderer=function(a){if(this.isInDocument())throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.getElement()&&this.setElementInternal(null);this.renderer_=a};goog.ui.Control.prototype.getExtraClassNames=function(){return this.extraClassNames_};
		goog.ui.Control.prototype.addClassName=function(a){a&&(this.extraClassNames_?goog.array.contains(this.extraClassNames_,a)||this.extraClassNames_.push(a):this.extraClassNames_=[a],this.renderer_.enableExtraClassName(this,a,!0))};goog.ui.Control.prototype.removeClassName=function(a){a&&this.extraClassNames_&&goog.array.remove(this.extraClassNames_,a)&&(0==this.extraClassNames_.length&&(this.extraClassNames_=null),this.renderer_.enableExtraClassName(this,a,!1))};
		goog.ui.Control.prototype.enableClassName=function(a,b){b?this.addClassName(a):this.removeClassName(a)};goog.ui.Control.prototype.createDom=function(){var a=this.renderer_.createDom(this);this.setElementInternal(a);this.renderer_.setAriaRole(a,this.getPreferredAriaRole());this.isAllowTextSelection()||this.renderer_.setAllowTextSelection(a,!1);this.isVisible()||this.renderer_.setVisible(a,!1)};goog.ui.Control.prototype.getPreferredAriaRole=function(){return this.preferredAriaRole_};
		goog.ui.Control.prototype.setPreferredAriaRole=function(a){this.preferredAriaRole_=a};goog.ui.Control.prototype.getAriaLabel=function(){return this.ariaLabel_};goog.ui.Control.prototype.setAriaLabel=function(a){this.ariaLabel_=a;var b=this.getElement();b&&this.renderer_.setAriaLabel(b,a)};goog.ui.Control.prototype.getContentElement=function(){return this.renderer_.getContentElement(this.getElement())};goog.ui.Control.prototype.canDecorate=function(a){return this.renderer_.canDecorate(a)};
		goog.ui.Control.prototype.decorateInternal=function(a){a=this.renderer_.decorate(this,a);this.setElementInternal(a);this.renderer_.setAriaRole(a,this.getPreferredAriaRole());this.isAllowTextSelection()||this.renderer_.setAllowTextSelection(a,!1);this.visible_="none"!=a.style.display};
		goog.ui.Control.prototype.enterDocument=function(){goog.ui.Control.superClass_.enterDocument.call(this);this.renderer_.setAriaStates(this,this.getElementStrict());this.renderer_.initializeDom(this);if(this.supportedStates_&~goog.ui.Component.State.DISABLED&&(this.isHandleMouseEvents()&&this.enableMouseEventHandling_(!0),this.isSupportedState(goog.ui.Component.State.FOCUSED))){var a=this.getKeyEventTarget();if(a){var b=this.getKeyHandler();b.attach(a);this.getHandler().listen(b,goog.events.KeyHandler.EventType.KEY,
		this.handleKeyEvent).listen(a,goog.events.EventType.FOCUS,this.handleFocus).listen(a,goog.events.EventType.BLUR,this.handleBlur)}}};
		goog.ui.Control.prototype.enableMouseEventHandling_=function(a){var b=this.getHandler(),c=this.getElement();a?(b.listen(c,goog.events.EventType.MOUSEOVER,this.handleMouseOver).listen(c,goog.events.EventType.MOUSEDOWN,this.handleMouseDown).listen(c,goog.events.EventType.MOUSEUP,this.handleMouseUp).listen(c,goog.events.EventType.MOUSEOUT,this.handleMouseOut),this.handleContextMenu!=goog.nullFunction&&b.listen(c,goog.events.EventType.CONTEXTMENU,this.handleContextMenu),goog.userAgent.IE&&(goog.userAgent.isVersionOrHigher(9)||
		b.listen(c,goog.events.EventType.DBLCLICK,this.handleDblClick),this.ieMouseEventSequenceSimulator_||(this.ieMouseEventSequenceSimulator_=new goog.ui.Control.IeMouseEventSequenceSimulator_(this),this.registerDisposable(this.ieMouseEventSequenceSimulator_)))):(b.unlisten(c,goog.events.EventType.MOUSEOVER,this.handleMouseOver).unlisten(c,goog.events.EventType.MOUSEDOWN,this.handleMouseDown).unlisten(c,goog.events.EventType.MOUSEUP,this.handleMouseUp).unlisten(c,goog.events.EventType.MOUSEOUT,this.handleMouseOut),
		this.handleContextMenu!=goog.nullFunction&&b.unlisten(c,goog.events.EventType.CONTEXTMENU,this.handleContextMenu),goog.userAgent.IE&&(goog.userAgent.isVersionOrHigher(9)||b.unlisten(c,goog.events.EventType.DBLCLICK,this.handleDblClick),goog.dispose(this.ieMouseEventSequenceSimulator_),this.ieMouseEventSequenceSimulator_=null))};
		goog.ui.Control.prototype.exitDocument=function(){goog.ui.Control.superClass_.exitDocument.call(this);this.keyHandler_&&this.keyHandler_.detach();this.isVisible()&&this.isEnabled()&&this.renderer_.setFocusable(this,!1)};goog.ui.Control.prototype.disposeInternal=function(){goog.ui.Control.superClass_.disposeInternal.call(this);this.keyHandler_&&(this.keyHandler_.dispose(),delete this.keyHandler_);delete this.renderer_;this.ieMouseEventSequenceSimulator_=this.extraClassNames_=this.content_=null};
		goog.ui.Control.prototype.getContent=function(){return this.content_};goog.ui.Control.prototype.setContent=function(a){this.renderer_.setContent(this.getElement(),a);this.setContentInternal(a)};goog.ui.Control.prototype.setContentInternal=function(a){this.content_=a};goog.ui.Control.prototype.getCaption=function(){var a=this.getContent();if(!a)return"";a=goog.isString(a)?a:goog.isArray(a)?goog.array.map(a,goog.dom.getRawTextContent).join(""):goog.dom.getTextContent(a);return goog.string.collapseBreakingSpaces(a)};
		goog.ui.Control.prototype.setCaption=function(a){this.setContent(a)};goog.ui.Control.prototype.setRightToLeft=function(a){goog.ui.Control.superClass_.setRightToLeft.call(this,a);var b=this.getElement();b&&this.renderer_.setRightToLeft(b,a)};goog.ui.Control.prototype.isAllowTextSelection=function(){return this.allowTextSelection_};goog.ui.Control.prototype.setAllowTextSelection=function(a){this.allowTextSelection_=a;var b=this.getElement();b&&this.renderer_.setAllowTextSelection(b,a)};
		goog.ui.Control.prototype.isVisible=function(){return this.visible_};goog.ui.Control.prototype.setVisible=function(a,b){if(b||this.visible_!=a&&this.dispatchEvent(a?goog.ui.Component.EventType.SHOW:goog.ui.Component.EventType.HIDE)){var c=this.getElement();c&&this.renderer_.setVisible(c,a);this.isEnabled()&&this.renderer_.setFocusable(this,a);this.visible_=a;return!0}return!1};goog.ui.Control.prototype.isEnabled=function(){return!this.hasState(goog.ui.Component.State.DISABLED)};
		goog.ui.Control.prototype.isParentDisabled_=function(){var a=this.getParent();return!!a&&"function"==typeof a.isEnabled&&!a.isEnabled()};goog.ui.Control.prototype.setEnabled=function(a){!this.isParentDisabled_()&&this.isTransitionAllowed(goog.ui.Component.State.DISABLED,!a)&&(a||(this.setActive(!1),this.setHighlighted(!1)),this.isVisible()&&this.renderer_.setFocusable(this,a),this.setState(goog.ui.Component.State.DISABLED,!a,!0))};goog.ui.Control.prototype.isHighlighted=function(){return this.hasState(goog.ui.Component.State.HOVER)};
		goog.ui.Control.prototype.setHighlighted=function(a){this.isTransitionAllowed(goog.ui.Component.State.HOVER,a)&&this.setState(goog.ui.Component.State.HOVER,a)};goog.ui.Control.prototype.isActive=function(){return this.hasState(goog.ui.Component.State.ACTIVE)};goog.ui.Control.prototype.setActive=function(a){this.isTransitionAllowed(goog.ui.Component.State.ACTIVE,a)&&this.setState(goog.ui.Component.State.ACTIVE,a)};goog.ui.Control.prototype.isSelected=function(){return this.hasState(goog.ui.Component.State.SELECTED)};
		goog.ui.Control.prototype.setSelected=function(a){this.isTransitionAllowed(goog.ui.Component.State.SELECTED,a)&&this.setState(goog.ui.Component.State.SELECTED,a)};goog.ui.Control.prototype.isChecked=function(){return this.hasState(goog.ui.Component.State.CHECKED)};goog.ui.Control.prototype.setChecked=function(a){this.isTransitionAllowed(goog.ui.Component.State.CHECKED,a)&&this.setState(goog.ui.Component.State.CHECKED,a)};goog.ui.Control.prototype.isFocused=function(){return this.hasState(goog.ui.Component.State.FOCUSED)};
		goog.ui.Control.prototype.setFocused=function(a){this.isTransitionAllowed(goog.ui.Component.State.FOCUSED,a)&&this.setState(goog.ui.Component.State.FOCUSED,a)};goog.ui.Control.prototype.isOpen=function(){return this.hasState(goog.ui.Component.State.OPENED)};goog.ui.Control.prototype.setOpen=function(a){this.isTransitionAllowed(goog.ui.Component.State.OPENED,a)&&this.setState(goog.ui.Component.State.OPENED,a)};goog.ui.Control.prototype.getState=function(){return this.state_};
		goog.ui.Control.prototype.hasState=function(a){return!!(this.state_&a)};goog.ui.Control.prototype.setState=function(a,b,c){c||a!=goog.ui.Component.State.DISABLED?this.isSupportedState(a)&&b!=this.hasState(a)&&(this.renderer_.setState(this,a,b),this.state_=b?this.state_|a:this.state_&~a):this.setEnabled(!b)};goog.ui.Control.prototype.setStateInternal=function(a){this.state_=a};goog.ui.Control.prototype.isSupportedState=function(a){return!!(this.supportedStates_&a)};
		goog.ui.Control.prototype.setSupportedState=function(a,b){if(this.isInDocument()&&this.hasState(a)&&!b)throw Error(goog.ui.Component.Error.ALREADY_RENDERED);!b&&this.hasState(a)&&this.setState(a,!1);this.supportedStates_=b?this.supportedStates_|a:this.supportedStates_&~a};goog.ui.Control.prototype.isAutoState=function(a){return!!(this.autoStates_&a)&&this.isSupportedState(a)};goog.ui.Control.prototype.setAutoStates=function(a,b){this.autoStates_=b?this.autoStates_|a:this.autoStates_&~a};
		goog.ui.Control.prototype.isDispatchTransitionEvents=function(a){return!!(this.statesWithTransitionEvents_&a)&&this.isSupportedState(a)};goog.ui.Control.prototype.setDispatchTransitionEvents=function(a,b){this.statesWithTransitionEvents_=b?this.statesWithTransitionEvents_|a:this.statesWithTransitionEvents_&~a};
		goog.ui.Control.prototype.isTransitionAllowed=function(a,b){return this.isSupportedState(a)&&this.hasState(a)!=b&&(!(this.statesWithTransitionEvents_&a)||this.dispatchEvent(goog.ui.Component.getStateTransitionEvent(a,b)))&&!this.isDisposed()};goog.ui.Control.prototype.handleMouseOver=function(a){!goog.ui.Control.isMouseEventWithinElement_(a,this.getElement())&&this.dispatchEvent(goog.ui.Component.EventType.ENTER)&&this.isEnabled()&&this.isAutoState(goog.ui.Component.State.HOVER)&&this.setHighlighted(!0)};
		goog.ui.Control.prototype.handleMouseOut=function(a){!goog.ui.Control.isMouseEventWithinElement_(a,this.getElement())&&this.dispatchEvent(goog.ui.Component.EventType.LEAVE)&&(this.isAutoState(goog.ui.Component.State.ACTIVE)&&this.setActive(!1),this.isAutoState(goog.ui.Component.State.HOVER)&&this.setHighlighted(!1))};goog.ui.Control.prototype.handleContextMenu=goog.nullFunction;goog.ui.Control.isMouseEventWithinElement_=function(a,b){return!!a.relatedTarget&&goog.dom.contains(b,a.relatedTarget)};
		goog.ui.Control.prototype.handleMouseDown=function(a){this.isEnabled()&&(this.isAutoState(goog.ui.Component.State.HOVER)&&this.setHighlighted(!0),a.isMouseActionButton()&&(this.isAutoState(goog.ui.Component.State.ACTIVE)&&this.setActive(!0),this.renderer_&&this.renderer_.isFocusable(this)&&this.getKeyEventTarget().focus()));!this.isAllowTextSelection()&&a.isMouseActionButton()&&a.preventDefault()};
		goog.ui.Control.prototype.handleMouseUp=function(a){this.isEnabled()&&(this.isAutoState(goog.ui.Component.State.HOVER)&&this.setHighlighted(!0),this.isActive()&&this.performActionInternal(a)&&this.isAutoState(goog.ui.Component.State.ACTIVE)&&this.setActive(!1))};goog.ui.Control.prototype.handleDblClick=function(a){this.isEnabled()&&this.performActionInternal(a)};
		goog.ui.Control.prototype.performActionInternal=function(a){this.isAutoState(goog.ui.Component.State.CHECKED)&&this.setChecked(!this.isChecked());this.isAutoState(goog.ui.Component.State.SELECTED)&&this.setSelected(!0);this.isAutoState(goog.ui.Component.State.OPENED)&&this.setOpen(!this.isOpen());var b=new goog.events.Event(goog.ui.Component.EventType.ACTION,this);a&&(b.altKey=a.altKey,b.ctrlKey=a.ctrlKey,b.metaKey=a.metaKey,b.shiftKey=a.shiftKey,b.platformModifierKey=a.platformModifierKey);return this.dispatchEvent(b)};
		goog.ui.Control.prototype.handleFocus=function(a){this.isAutoState(goog.ui.Component.State.FOCUSED)&&this.setFocused(!0)};goog.ui.Control.prototype.handleBlur=function(a){this.isAutoState(goog.ui.Component.State.ACTIVE)&&this.setActive(!1);this.isAutoState(goog.ui.Component.State.FOCUSED)&&this.setFocused(!1)};goog.ui.Control.prototype.handleKeyEvent=function(a){return this.isVisible()&&this.isEnabled()&&this.handleKeyEventInternal(a)?(a.preventDefault(),a.stopPropagation(),!0):!1};
		goog.ui.Control.prototype.handleKeyEventInternal=function(a){return a.keyCode==goog.events.KeyCodes.ENTER&&this.performActionInternal(a)};goog.ui.registry.setDefaultRenderer(goog.ui.Control,goog.ui.ControlRenderer);goog.ui.registry.setDecoratorByClassName(goog.ui.ControlRenderer.CSS_CLASS,function(){return new goog.ui.Control(null)});
		goog.ui.Control.IeMouseEventSequenceSimulator_=function(a){goog.Disposable.call(this);this.control_=a;this.clickExpected_=!1;this.handler_=new goog.events.EventHandler(this);this.registerDisposable(this.handler_);a=this.control_.getElementStrict();this.handler_.listen(a,goog.events.EventType.MOUSEDOWN,this.handleMouseDown_).listen(a,goog.events.EventType.MOUSEUP,this.handleMouseUp_).listen(a,goog.events.EventType.CLICK,this.handleClick_)};
		goog.inherits(goog.ui.Control.IeMouseEventSequenceSimulator_,goog.Disposable);goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_=!goog.userAgent.IE||goog.userAgent.isDocumentModeOrHigher(9);goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleMouseDown_=function(){this.clickExpected_=!1};goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleMouseUp_=function(){this.clickExpected_=!0};
		goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_=function(a,b){if(!goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_)return a.button=goog.events.BrowserEvent.MouseButton.LEFT,a.type=b,a;var c=document.createEvent("MouseEvents");c.initMouseEvent(b,a.bubbles,a.cancelable,a.view||null,a.detail,a.screenX,a.screenY,a.clientX,a.clientY,a.ctrlKey,a.altKey,a.shiftKey,a.metaKey,goog.events.BrowserEvent.MouseButton.LEFT,a.relatedTarget||null);return c};
		goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleClick_=function(a){if(this.clickExpected_)this.clickExpected_=!1;else{var b=a.getBrowserEvent(),c=b.button,d=b.type,e=goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_(b,goog.events.EventType.MOUSEDOWN);this.control_.handleMouseDown(new goog.events.BrowserEvent(e,a.currentTarget));e=goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_(b,goog.events.EventType.MOUSEUP);this.control_.handleMouseUp(new goog.events.BrowserEvent(e,
		a.currentTarget));goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_||(b.button=c,b.type=d)}};goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.disposeInternal=function(){this.control_=null;goog.ui.Control.IeMouseEventSequenceSimulator_.superClass_.disposeInternal.call(this)};goog.ui.Container=function(a,b,c){goog.ui.Component.call(this,c);this.renderer_=b||goog.ui.ContainerRenderer.getInstance();this.orientation_=a||this.renderer_.getDefaultOrientation()};goog.inherits(goog.ui.Container,goog.ui.Component);goog.tagUnsealableClass(goog.ui.Container);goog.ui.Container.EventType={AFTER_SHOW:"aftershow",AFTER_HIDE:"afterhide"};goog.ui.Container.Orientation={HORIZONTAL:"horizontal",VERTICAL:"vertical"};goog.ui.Container.prototype.keyEventTarget_=null;
		goog.ui.Container.prototype.keyHandler_=null;goog.ui.Container.prototype.renderer_=null;goog.ui.Container.prototype.orientation_=null;goog.ui.Container.prototype.visible_=!0;goog.ui.Container.prototype.enabled_=!0;goog.ui.Container.prototype.focusable_=!0;goog.ui.Container.prototype.highlightedIndex_=-1;goog.ui.Container.prototype.openItem_=null;goog.ui.Container.prototype.mouseButtonPressed_=!1;goog.ui.Container.prototype.allowFocusableChildren_=!1;
		goog.ui.Container.prototype.openFollowsHighlight_=!0;goog.ui.Container.prototype.childElementIdMap_=null;goog.ui.Container.prototype.getKeyEventTarget=function(){return this.keyEventTarget_||this.renderer_.getKeyEventTarget(this)};
		goog.ui.Container.prototype.setKeyEventTarget=function(a){if(this.focusable_){var b=this.getKeyEventTarget(),c=this.isInDocument();this.keyEventTarget_=a;var d=this.getKeyEventTarget();c&&(this.keyEventTarget_=b,this.enableFocusHandling_(!1),this.keyEventTarget_=a,this.getKeyHandler().attach(d),this.enableFocusHandling_(!0))}else throw Error("Can't set key event target for container that doesn't support keyboard focus!");};
		goog.ui.Container.prototype.getKeyHandler=function(){return this.keyHandler_||(this.keyHandler_=new goog.events.KeyHandler(this.getKeyEventTarget()))};goog.ui.Container.prototype.getRenderer=function(){return this.renderer_};goog.ui.Container.prototype.setRenderer=function(a){if(this.getElement())throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.renderer_=a};goog.ui.Container.prototype.createDom=function(){this.setElementInternal(this.renderer_.createDom(this))};
		goog.ui.Container.prototype.getContentElement=function(){return this.renderer_.getContentElement(this.getElement())};goog.ui.Container.prototype.canDecorate=function(a){return this.renderer_.canDecorate(a)};goog.ui.Container.prototype.decorateInternal=function(a){this.setElementInternal(this.renderer_.decorate(this,a));"none"==a.style.display&&(this.visible_=!1)};
		goog.ui.Container.prototype.enterDocument=function(){goog.ui.Container.superClass_.enterDocument.call(this);this.forEachChild(function(a){a.isInDocument()&&this.registerChildId_(a)},this);var a=this.getElement();this.renderer_.initializeDom(this);this.setVisible(this.visible_,!0);this.getHandler().listen(this,goog.ui.Component.EventType.ENTER,this.handleEnterItem).listen(this,goog.ui.Component.EventType.HIGHLIGHT,this.handleHighlightItem).listen(this,goog.ui.Component.EventType.UNHIGHLIGHT,this.handleUnHighlightItem).listen(this,
		goog.ui.Component.EventType.OPEN,this.handleOpenItem).listen(this,goog.ui.Component.EventType.CLOSE,this.handleCloseItem).listen(a,goog.events.EventType.MOUSEDOWN,this.handleMouseDown).listen(goog.dom.getOwnerDocument(a),goog.events.EventType.MOUSEUP,this.handleDocumentMouseUp).listen(a,[goog.events.EventType.MOUSEDOWN,goog.events.EventType.MOUSEUP,goog.events.EventType.MOUSEOVER,goog.events.EventType.MOUSEOUT,goog.events.EventType.CONTEXTMENU],this.handleChildMouseEvents);this.isFocusable()&&this.enableFocusHandling_(!0)};
		goog.ui.Container.prototype.enableFocusHandling_=function(a){var b=this.getHandler(),c=this.getKeyEventTarget();a?b.listen(c,goog.events.EventType.FOCUS,this.handleFocus).listen(c,goog.events.EventType.BLUR,this.handleBlur).listen(this.getKeyHandler(),goog.events.KeyHandler.EventType.KEY,this.handleKeyEvent):b.unlisten(c,goog.events.EventType.FOCUS,this.handleFocus).unlisten(c,goog.events.EventType.BLUR,this.handleBlur).unlisten(this.getKeyHandler(),goog.events.KeyHandler.EventType.KEY,this.handleKeyEvent)};
		goog.ui.Container.prototype.exitDocument=function(){this.setHighlightedIndex(-1);this.openItem_&&this.openItem_.setOpen(!1);this.mouseButtonPressed_=!1;goog.ui.Container.superClass_.exitDocument.call(this)};goog.ui.Container.prototype.disposeInternal=function(){goog.ui.Container.superClass_.disposeInternal.call(this);this.keyHandler_&&(this.keyHandler_.dispose(),this.keyHandler_=null);this.renderer_=this.openItem_=this.childElementIdMap_=this.keyEventTarget_=null};
		goog.ui.Container.prototype.handleEnterItem=function(a){return!0};
		goog.ui.Container.prototype.handleHighlightItem=function(a){var b=this.indexOfChild(a.target);if(-1<b&&b!=this.highlightedIndex_){var c=this.getHighlighted();c&&c.setHighlighted(!1);this.highlightedIndex_=b;c=this.getHighlighted();this.isMouseButtonPressed()&&c.setActive(!0);this.openFollowsHighlight_&&this.openItem_&&c!=this.openItem_&&(c.isSupportedState(goog.ui.Component.State.OPENED)?c.setOpen(!0):this.openItem_.setOpen(!1))}b=this.getElement();goog.asserts.assert(b,"The DOM element for the container cannot be null.");
		null!=a.target.getElement()&&goog.a11y.aria.setState(b,goog.a11y.aria.State.ACTIVEDESCENDANT,a.target.getElement().id)};goog.ui.Container.prototype.handleUnHighlightItem=function(a){a.target==this.getHighlighted()&&(this.highlightedIndex_=-1);a=this.getElement();goog.asserts.assert(a,"The DOM element for the container cannot be null.");goog.a11y.aria.removeState(a,goog.a11y.aria.State.ACTIVEDESCENDANT)};
		goog.ui.Container.prototype.handleOpenItem=function(a){(a=a.target)&&a!=this.openItem_&&a.getParent()==this&&(this.openItem_&&this.openItem_.setOpen(!1),this.openItem_=a)};goog.ui.Container.prototype.handleCloseItem=function(a){a.target==this.openItem_&&(this.openItem_=null);var b=this.getElement(),c=a.target.getElement();b&&a.target.isHighlighted()&&c&&goog.a11y.aria.setActiveDescendant(b,c)};
		goog.ui.Container.prototype.handleMouseDown=function(a){this.enabled_&&this.setMouseButtonPressed(!0);var b=this.getKeyEventTarget();b&&goog.dom.isFocusableTabIndex(b)?b.focus():a.preventDefault()};goog.ui.Container.prototype.handleDocumentMouseUp=function(a){this.setMouseButtonPressed(!1)};
		goog.ui.Container.prototype.handleChildMouseEvents=function(a){var b=this.getOwnerControl(a.target);if(b)switch(a.type){case goog.events.EventType.MOUSEDOWN:b.handleMouseDown(a);break;case goog.events.EventType.MOUSEUP:b.handleMouseUp(a);break;case goog.events.EventType.MOUSEOVER:b.handleMouseOver(a);break;case goog.events.EventType.MOUSEOUT:b.handleMouseOut(a);break;case goog.events.EventType.CONTEXTMENU:b.handleContextMenu(a)}};
		goog.ui.Container.prototype.getOwnerControl=function(a){if(this.childElementIdMap_)for(var b=this.getElement();a&&a!==b;){var c=a.id;if(c in this.childElementIdMap_)return this.childElementIdMap_[c];a=a.parentNode}return null};goog.ui.Container.prototype.handleFocus=function(a){};goog.ui.Container.prototype.handleBlur=function(a){this.setHighlightedIndex(-1);this.setMouseButtonPressed(!1);this.openItem_&&this.openItem_.setOpen(!1)};
		goog.ui.Container.prototype.handleKeyEvent=function(a){return this.isEnabled()&&this.isVisible()&&(0!=this.getChildCount()||this.keyEventTarget_)&&this.handleKeyEventInternal(a)?(a.preventDefault(),a.stopPropagation(),!0):!1};
		goog.ui.Container.prototype.handleKeyEventInternal=function(a){var b=this.getHighlighted();if(b&&"function"==typeof b.handleKeyEvent&&b.handleKeyEvent(a)||this.openItem_&&this.openItem_!=b&&"function"==typeof this.openItem_.handleKeyEvent&&this.openItem_.handleKeyEvent(a))return!0;if(a.shiftKey||a.ctrlKey||a.metaKey||a.altKey)return!1;switch(a.keyCode){case goog.events.KeyCodes.ESC:if(this.isFocusable())this.getKeyEventTarget().blur();else return!1;break;case goog.events.KeyCodes.HOME:this.highlightFirst();
		break;case goog.events.KeyCodes.END:this.highlightLast();break;case goog.events.KeyCodes.UP:if(this.orientation_==goog.ui.Container.Orientation.VERTICAL)this.highlightPrevious();else return!1;break;case goog.events.KeyCodes.LEFT:if(this.orientation_==goog.ui.Container.Orientation.HORIZONTAL)this.isRightToLeft()?this.highlightNext():this.highlightPrevious();else return!1;break;case goog.events.KeyCodes.DOWN:if(this.orientation_==goog.ui.Container.Orientation.VERTICAL)this.highlightNext();else return!1;
		break;case goog.events.KeyCodes.RIGHT:if(this.orientation_==goog.ui.Container.Orientation.HORIZONTAL)this.isRightToLeft()?this.highlightPrevious():this.highlightNext();else return!1;break;default:return!1}return!0};goog.ui.Container.prototype.registerChildId_=function(a){var b=a.getElement(),b=b.id||(b.id=a.getId());this.childElementIdMap_||(this.childElementIdMap_={});this.childElementIdMap_[b]=a};
		goog.ui.Container.prototype.addChild=function(a,b){goog.asserts.assertInstanceof(a,goog.ui.Control,"The child of a container must be a control");goog.ui.Container.superClass_.addChild.call(this,a,b)};
		goog.ui.Container.prototype.addChildAt=function(a,b,c){goog.asserts.assertInstanceof(a,goog.ui.Control);a.setDispatchTransitionEvents(goog.ui.Component.State.HOVER,!0);a.setDispatchTransitionEvents(goog.ui.Component.State.OPENED,!0);!this.isFocusable()&&this.isFocusableChildrenAllowed()||a.setSupportedState(goog.ui.Component.State.FOCUSED,!1);a.setHandleMouseEvents(!1);var d=a.getParent()==this?this.indexOfChild(a):-1;goog.ui.Container.superClass_.addChildAt.call(this,a,b,c);a.isInDocument()&&this.isInDocument()&&
		this.registerChildId_(a);this.updateHighlightedIndex_(d,b)};goog.ui.Container.prototype.updateHighlightedIndex_=function(a,b){-1==a&&(a=this.getChildCount());a==this.highlightedIndex_?this.highlightedIndex_=Math.min(this.getChildCount()-1,b):a>this.highlightedIndex_&&b<=this.highlightedIndex_?this.highlightedIndex_++:a<this.highlightedIndex_&&b>this.highlightedIndex_&&this.highlightedIndex_--};
		goog.ui.Container.prototype.removeChild=function(a,b){a=goog.isString(a)?this.getChild(a):a;goog.asserts.assertInstanceof(a,goog.ui.Control);if(a){var c=this.indexOfChild(a);-1!=c&&(c==this.highlightedIndex_?(a.setHighlighted(!1),this.highlightedIndex_=-1):c<this.highlightedIndex_&&this.highlightedIndex_--);(c=a.getElement())&&c.id&&this.childElementIdMap_&&goog.object.remove(this.childElementIdMap_,c.id)}a=goog.ui.Container.superClass_.removeChild.call(this,a,b);a.setHandleMouseEvents(!0);return a};
		goog.ui.Container.prototype.getOrientation=function(){return this.orientation_};goog.ui.Container.prototype.setOrientation=function(a){if(this.getElement())throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.orientation_=a};goog.ui.Container.prototype.isVisible=function(){return this.visible_};
		goog.ui.Container.prototype.setVisible=function(a,b){if(b||this.visible_!=a&&this.dispatchEvent(a?goog.ui.Component.EventType.SHOW:goog.ui.Component.EventType.HIDE)){this.visible_=a;var c=this.getElement();c&&(goog.style.setElementShown(c,a),this.isFocusable()&&this.renderer_.enableTabIndex(this.getKeyEventTarget(),this.enabled_&&this.visible_),b||this.dispatchEvent(this.visible_?goog.ui.Container.EventType.AFTER_SHOW:goog.ui.Container.EventType.AFTER_HIDE));return!0}return!1};
		goog.ui.Container.prototype.isEnabled=function(){return this.enabled_};
		goog.ui.Container.prototype.setEnabled=function(a){this.enabled_!=a&&this.dispatchEvent(a?goog.ui.Component.EventType.ENABLE:goog.ui.Component.EventType.DISABLE)&&(a?(this.enabled_=!0,this.forEachChild(function(a){a.wasDisabled?delete a.wasDisabled:a.setEnabled(!0)})):(this.forEachChild(function(a){a.isEnabled()?a.setEnabled(!1):a.wasDisabled=!0}),this.enabled_=!1,this.setMouseButtonPressed(!1)),this.isFocusable()&&this.renderer_.enableTabIndex(this.getKeyEventTarget(),a&&this.visible_))};
		goog.ui.Container.prototype.isFocusable=function(){return this.focusable_};goog.ui.Container.prototype.setFocusable=function(a){a!=this.focusable_&&this.isInDocument()&&this.enableFocusHandling_(a);this.focusable_=a;this.enabled_&&this.visible_&&this.renderer_.enableTabIndex(this.getKeyEventTarget(),a)};goog.ui.Container.prototype.isFocusableChildrenAllowed=function(){return this.allowFocusableChildren_};
		goog.ui.Container.prototype.setFocusableChildrenAllowed=function(a){this.allowFocusableChildren_=a};goog.ui.Container.prototype.isOpenFollowsHighlight=function(){return this.openFollowsHighlight_};goog.ui.Container.prototype.setOpenFollowsHighlight=function(a){this.openFollowsHighlight_=a};goog.ui.Container.prototype.getHighlightedIndex=function(){return this.highlightedIndex_};
		goog.ui.Container.prototype.setHighlightedIndex=function(a){(a=this.getChildAt(a))?a.setHighlighted(!0):-1<this.highlightedIndex_&&this.getHighlighted().setHighlighted(!1)};goog.ui.Container.prototype.setHighlighted=function(a){this.setHighlightedIndex(this.indexOfChild(a))};goog.ui.Container.prototype.getHighlighted=function(){return this.getChildAt(this.highlightedIndex_)};
		goog.ui.Container.prototype.highlightFirst=function(){this.highlightHelper(function(a,b){return(a+1)%b},this.getChildCount()-1)};goog.ui.Container.prototype.highlightLast=function(){this.highlightHelper(function(a,b){a--;return 0>a?b-1:a},0)};goog.ui.Container.prototype.highlightNext=function(){this.highlightHelper(function(a,b){return(a+1)%b},this.highlightedIndex_)};goog.ui.Container.prototype.highlightPrevious=function(){this.highlightHelper(function(a,b){a--;return 0>a?b-1:a},this.highlightedIndex_)};
		goog.ui.Container.prototype.highlightHelper=function(a,b){for(var c=0>b?this.indexOfChild(this.openItem_):b,d=this.getChildCount(),c=a.call(this,c,d),e=0;e<=d;){var f=this.getChildAt(c);if(f&&this.canHighlightItem(f))return this.setHighlightedIndexFromKeyEvent(c),!0;e++;c=a.call(this,c,d)}return!1};goog.ui.Container.prototype.canHighlightItem=function(a){return a.isVisible()&&a.isEnabled()&&a.isSupportedState(goog.ui.Component.State.HOVER)};
		goog.ui.Container.prototype.setHighlightedIndexFromKeyEvent=function(a){this.setHighlightedIndex(a)};goog.ui.Container.prototype.getOpenItem=function(){return this.openItem_};goog.ui.Container.prototype.isMouseButtonPressed=function(){return this.mouseButtonPressed_};goog.ui.Container.prototype.setMouseButtonPressed=function(a){this.mouseButtonPressed_=a};goog.ui.MenuHeaderRenderer=function(){goog.ui.ControlRenderer.call(this)};goog.inherits(goog.ui.MenuHeaderRenderer,goog.ui.ControlRenderer);goog.addSingletonGetter(goog.ui.MenuHeaderRenderer);goog.ui.MenuHeaderRenderer.CSS_CLASS="goog-menuheader";goog.ui.MenuHeaderRenderer.prototype.getCssClass=function(){return goog.ui.MenuHeaderRenderer.CSS_CLASS};goog.ui.MenuHeader=function(a,b,c){goog.ui.Control.call(this,a,c||goog.ui.MenuHeaderRenderer.getInstance(),b);this.setSupportedState(goog.ui.Component.State.DISABLED,!1);this.setSupportedState(goog.ui.Component.State.HOVER,!1);this.setSupportedState(goog.ui.Component.State.ACTIVE,!1);this.setSupportedState(goog.ui.Component.State.FOCUSED,!1);this.setStateInternal(goog.ui.Component.State.DISABLED)};goog.inherits(goog.ui.MenuHeader,goog.ui.Control);
		goog.ui.registry.setDecoratorByClassName(goog.ui.MenuHeaderRenderer.CSS_CLASS,function(){return new goog.ui.MenuHeader(null)});goog.ui.MenuItemRenderer=function(){goog.ui.ControlRenderer.call(this);this.classNameCache_=[]};goog.inherits(goog.ui.MenuItemRenderer,goog.ui.ControlRenderer);goog.addSingletonGetter(goog.ui.MenuItemRenderer);goog.ui.MenuItemRenderer.CSS_CLASS="goog-menuitem";goog.ui.MenuItemRenderer.CompositeCssClassIndex_={HOVER:0,CHECKBOX:1,CONTENT:2};
		goog.ui.MenuItemRenderer.prototype.getCompositeCssClass_=function(a){var b=this.classNameCache_[a];if(!b){switch(a){case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER:b=this.getStructuralCssClass()+"-highlight";break;case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX:b=this.getStructuralCssClass()+"-checkbox";break;case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT:b=this.getStructuralCssClass()+"-content"}this.classNameCache_[a]=b}return b};
		goog.ui.MenuItemRenderer.prototype.getAriaRole=function(){return goog.a11y.aria.Role.MENU_ITEM};goog.ui.MenuItemRenderer.prototype.createDom=function(a){var b=a.getDomHelper().createDom("DIV",this.getClassNames(a).join(" "),this.createContent(a.getContent(),a.getDomHelper()));this.setEnableCheckBoxStructure(a,b,a.isSupportedState(goog.ui.Component.State.SELECTED)||a.isSupportedState(goog.ui.Component.State.CHECKED));return b};
		goog.ui.MenuItemRenderer.prototype.getContentElement=function(a){return a&&a.firstChild};goog.ui.MenuItemRenderer.prototype.decorate=function(a,b){goog.asserts.assert(b);this.hasContentStructure(b)||b.appendChild(this.createContent(b.childNodes,a.getDomHelper()));goog.dom.classlist.contains(b,"goog-option")&&(a.setCheckable(!0),this.setCheckable(a,b,!0));return goog.ui.MenuItemRenderer.superClass_.decorate.call(this,a,b)};
		goog.ui.MenuItemRenderer.prototype.setContent=function(a,b){var c=this.getContentElement(a),d=this.hasCheckBoxStructure(a)?c.firstChild:null;goog.ui.MenuItemRenderer.superClass_.setContent.call(this,a,b);d&&!this.hasCheckBoxStructure(a)&&c.insertBefore(d,c.firstChild||null)};
		goog.ui.MenuItemRenderer.prototype.hasContentStructure=function(a){a=goog.dom.getFirstElementChild(a);var b=this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT);return!!a&&goog.dom.classlist.contains(a,b)};goog.ui.MenuItemRenderer.prototype.createContent=function(a,b){var c=this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT);return b.createDom("DIV",c,a)};
		goog.ui.MenuItemRenderer.prototype.setSelectable=function(a,b,c){a&&b&&this.setEnableCheckBoxStructure(a,b,c)};goog.ui.MenuItemRenderer.prototype.setCheckable=function(a,b,c){a&&b&&this.setEnableCheckBoxStructure(a,b,c)};goog.ui.MenuItemRenderer.prototype.hasCheckBoxStructure=function(a){if(a=this.getContentElement(a)){a=a.firstChild;var b=this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX);return!!a&&goog.dom.isElement(a)&&goog.dom.classlist.contains(a,b)}return!1};
		goog.ui.MenuItemRenderer.prototype.setEnableCheckBoxStructure=function(a,b,c){this.setAriaRole(b,a.getPreferredAriaRole());this.setAriaStates(a,b);c!=this.hasCheckBoxStructure(b)&&(goog.dom.classlist.enable(b,"goog-option",c),b=this.getContentElement(b),c?(c=this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX),b.insertBefore(a.getDomHelper().createDom("DIV",c),b.firstChild||null)):b.removeChild(b.firstChild))};
		goog.ui.MenuItemRenderer.prototype.getClassForState=function(a){switch(a){case goog.ui.Component.State.HOVER:return this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER);case goog.ui.Component.State.CHECKED:case goog.ui.Component.State.SELECTED:return"goog-option-selected";default:return goog.ui.MenuItemRenderer.superClass_.getClassForState.call(this,a)}};
		goog.ui.MenuItemRenderer.prototype.getStateFromClass=function(a){var b=this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER);switch(a){case "goog-option-selected":return goog.ui.Component.State.CHECKED;case b:return goog.ui.Component.State.HOVER;default:return goog.ui.MenuItemRenderer.superClass_.getStateFromClass.call(this,a)}};goog.ui.MenuItemRenderer.prototype.getCssClass=function(){return goog.ui.MenuItemRenderer.CSS_CLASS};goog.ui.MenuItem=function(a,b,c,d){goog.ui.Control.call(this,a,d||goog.ui.MenuItemRenderer.getInstance(),c);this.setValue(b)};goog.inherits(goog.ui.MenuItem,goog.ui.Control);goog.tagUnsealableClass(goog.ui.MenuItem);goog.ui.MenuItem.MNEMONIC_WRAPPER_CLASS_="goog-menuitem-mnemonic-separator";goog.ui.MenuItem.ACCELERATOR_CLASS="goog-menuitem-accel";goog.ui.MenuItem.prototype.getValue=function(){var a=this.getModel();return null!=a?a:this.getCaption()};goog.ui.MenuItem.prototype.setValue=function(a){this.setModel(a)};
		goog.ui.MenuItem.prototype.setSupportedState=function(a,b){goog.ui.MenuItem.superClass_.setSupportedState.call(this,a,b);switch(a){case goog.ui.Component.State.SELECTED:this.setSelectableInternal_(b);break;case goog.ui.Component.State.CHECKED:this.setCheckableInternal_(b)}};goog.ui.MenuItem.prototype.setSelectable=function(a){this.setSupportedState(goog.ui.Component.State.SELECTED,a)};
		goog.ui.MenuItem.prototype.setSelectableInternal_=function(a){this.isChecked()&&!a&&this.setChecked(!1);var b=this.getElement();b&&this.getRenderer().setSelectable(this,b,a)};goog.ui.MenuItem.prototype.setCheckable=function(a){this.setSupportedState(goog.ui.Component.State.CHECKED,a)};goog.ui.MenuItem.prototype.setCheckableInternal_=function(a){var b=this.getElement();b&&this.getRenderer().setCheckable(this,b,a)};
		goog.ui.MenuItem.prototype.getCaption=function(){var a=this.getContent();if(goog.isArray(a)){var b=goog.ui.MenuItem.ACCELERATOR_CLASS,c=goog.ui.MenuItem.MNEMONIC_WRAPPER_CLASS_,a=goog.array.map(a,function(a){return goog.dom.isElement(a)&&(goog.dom.classlist.contains(a,b)||goog.dom.classlist.contains(a,c))?"":goog.dom.getRawTextContent(a)}).join("");return goog.string.collapseBreakingSpaces(a)}return goog.ui.MenuItem.superClass_.getCaption.call(this)};
		goog.ui.MenuItem.prototype.getAccelerator=function(){var a=this.getDomHelper(),b=this.getContent();return goog.isArray(b)&&(b=goog.array.find(b,function(a){return goog.dom.classlist.contains(a,goog.ui.MenuItem.ACCELERATOR_CLASS)}))?a.getTextContent(b):null};
		goog.ui.MenuItem.prototype.handleMouseUp=function(a){var b=this.getParent();if(b){var c=b.openingCoords;b.openingCoords=null;if(c&&goog.isNumber(a.clientX)&&(b=new goog.math.Coordinate(a.clientX,a.clientY),goog.math.Coordinate.equals(c,b)))return}goog.ui.MenuItem.superClass_.handleMouseUp.call(this,a)};goog.ui.MenuItem.prototype.handleKeyEventInternal=function(a){return a.keyCode==this.getMnemonic()&&this.performActionInternal(a)?!0:goog.ui.MenuItem.superClass_.handleKeyEventInternal.call(this,a)};
		goog.ui.MenuItem.prototype.setMnemonic=function(a){this.mnemonicKey_=a};goog.ui.MenuItem.prototype.getMnemonic=function(){return this.mnemonicKey_};goog.ui.registry.setDecoratorByClassName(goog.ui.MenuItemRenderer.CSS_CLASS,function(){return new goog.ui.MenuItem(null)});
		goog.ui.MenuItem.prototype.getPreferredAriaRole=function(){return this.isSupportedState(goog.ui.Component.State.CHECKED)?goog.a11y.aria.Role.MENU_ITEM_CHECKBOX:this.isSupportedState(goog.ui.Component.State.SELECTED)?goog.a11y.aria.Role.MENU_ITEM_RADIO:goog.ui.MenuItem.superClass_.getPreferredAriaRole.call(this)};goog.ui.MenuItem.prototype.getParent=function(){return goog.ui.Control.prototype.getParent.call(this)};goog.ui.MenuItem.prototype.getParentEventTarget=function(){return goog.ui.Control.prototype.getParentEventTarget.call(this)};goog.ui.MenuSeparatorRenderer=function(){goog.ui.ControlRenderer.call(this)};goog.inherits(goog.ui.MenuSeparatorRenderer,goog.ui.ControlRenderer);goog.addSingletonGetter(goog.ui.MenuSeparatorRenderer);goog.ui.MenuSeparatorRenderer.CSS_CLASS="goog-menuseparator";goog.ui.MenuSeparatorRenderer.prototype.createDom=function(a){return a.getDomHelper().createDom("DIV",this.getCssClass())};
		goog.ui.MenuSeparatorRenderer.prototype.decorate=function(a,b){b.id&&a.setId(b.id);if("HR"==b.tagName){var c=b;b=this.createDom(a);goog.dom.insertSiblingBefore(b,c);goog.dom.removeNode(c)}else goog.dom.classlist.add(b,this.getCssClass());return b};goog.ui.MenuSeparatorRenderer.prototype.setContent=function(a,b){};goog.ui.MenuSeparatorRenderer.prototype.getCssClass=function(){return goog.ui.MenuSeparatorRenderer.CSS_CLASS};goog.ui.Separator=function(a,b){goog.ui.Control.call(this,null,a||goog.ui.MenuSeparatorRenderer.getInstance(),b);this.setSupportedState(goog.ui.Component.State.DISABLED,!1);this.setSupportedState(goog.ui.Component.State.HOVER,!1);this.setSupportedState(goog.ui.Component.State.ACTIVE,!1);this.setSupportedState(goog.ui.Component.State.FOCUSED,!1);this.setStateInternal(goog.ui.Component.State.DISABLED)};goog.inherits(goog.ui.Separator,goog.ui.Control);
		goog.ui.Separator.prototype.enterDocument=function(){goog.ui.Separator.superClass_.enterDocument.call(this);var a=this.getElement();goog.asserts.assert(a,"The DOM element for the separator cannot be null.");goog.a11y.aria.setRole(a,"separator")};goog.ui.registry.setDecoratorByClassName(goog.ui.MenuSeparatorRenderer.CSS_CLASS,function(){return new goog.ui.Separator});goog.ui.MenuRenderer=function(a){goog.ui.ContainerRenderer.call(this,a||goog.a11y.aria.Role.MENU)};goog.inherits(goog.ui.MenuRenderer,goog.ui.ContainerRenderer);goog.addSingletonGetter(goog.ui.MenuRenderer);goog.ui.MenuRenderer.CSS_CLASS="goog-menu";goog.ui.MenuRenderer.prototype.canDecorate=function(a){return"UL"==a.tagName||goog.ui.MenuRenderer.superClass_.canDecorate.call(this,a)};
		goog.ui.MenuRenderer.prototype.getDecoratorForChild=function(a){return"HR"==a.tagName?new goog.ui.Separator:goog.ui.MenuRenderer.superClass_.getDecoratorForChild.call(this,a)};goog.ui.MenuRenderer.prototype.containsElement=function(a,b){return goog.dom.contains(a.getElement(),b)};goog.ui.MenuRenderer.prototype.getCssClass=function(){return goog.ui.MenuRenderer.CSS_CLASS};
		goog.ui.MenuRenderer.prototype.initializeDom=function(a){goog.ui.MenuRenderer.superClass_.initializeDom.call(this,a);a=a.getElement();goog.asserts.assert(a,"The menu DOM element cannot be null.");goog.a11y.aria.setState(a,goog.a11y.aria.State.HASPOPUP,"true")};goog.ui.MenuSeparator=function(a){goog.ui.Separator.call(this,goog.ui.MenuSeparatorRenderer.getInstance(),a)};goog.inherits(goog.ui.MenuSeparator,goog.ui.Separator);goog.ui.registry.setDecoratorByClassName(goog.ui.MenuSeparatorRenderer.CSS_CLASS,function(){return new goog.ui.Separator});goog.ui.Menu=function(a,b){goog.ui.Container.call(this,goog.ui.Container.Orientation.VERTICAL,b||goog.ui.MenuRenderer.getInstance(),a);this.setFocusable(!1)};goog.inherits(goog.ui.Menu,goog.ui.Container);goog.tagUnsealableClass(goog.ui.Menu);goog.ui.Menu.EventType={BEFORE_SHOW:goog.ui.Component.EventType.BEFORE_SHOW,SHOW:goog.ui.Component.EventType.SHOW,BEFORE_HIDE:goog.ui.Component.EventType.HIDE,HIDE:goog.ui.Component.EventType.HIDE};goog.ui.Menu.CSS_CLASS=goog.ui.MenuRenderer.CSS_CLASS;
		goog.ui.Menu.prototype.allowAutoFocus_=!0;goog.ui.Menu.prototype.allowHighlightDisabled_=!1;goog.ui.Menu.prototype.getCssClass=function(){return this.getRenderer().getCssClass()};goog.ui.Menu.prototype.containsElement=function(a){if(this.getRenderer().containsElement(this,a))return!0;for(var b=0,c=this.getChildCount();b<c;b++){var d=this.getChildAt(b);if("function"==typeof d.containsElement&&d.containsElement(a))return!0}return!1};goog.ui.Menu.prototype.addItem=function(a){this.addChild(a,!0)};
		goog.ui.Menu.prototype.addItemAt=function(a,b){this.addChildAt(a,b,!0)};goog.ui.Menu.prototype.removeItem=function(a){(a=this.removeChild(a,!0))&&a.dispose()};goog.ui.Menu.prototype.removeItemAt=function(a){(a=this.removeChildAt(a,!0))&&a.dispose()};goog.ui.Menu.prototype.getItemAt=function(a){return this.getChildAt(a)};goog.ui.Menu.prototype.getItemCount=function(){return this.getChildCount()};goog.ui.Menu.prototype.getItems=function(){var a=[];this.forEachChild(function(b){a.push(b)});return a};
		goog.ui.Menu.prototype.setPosition=function(a,b){var c=this.isVisible();c||goog.style.setElementShown(this.getElement(),!0);goog.style.setPageOffset(this.getElement(),a,b);c||goog.style.setElementShown(this.getElement(),!1)};goog.ui.Menu.prototype.getPosition=function(){return this.isVisible()?goog.style.getPageOffset(this.getElement()):null};goog.ui.Menu.prototype.setAllowAutoFocus=function(a){(this.allowAutoFocus_=a)&&this.setFocusable(!0)};goog.ui.Menu.prototype.getAllowAutoFocus=function(){return this.allowAutoFocus_};
		goog.ui.Menu.prototype.setAllowHighlightDisabled=function(a){this.allowHighlightDisabled_=a};goog.ui.Menu.prototype.getAllowHighlightDisabled=function(){return this.allowHighlightDisabled_};goog.ui.Menu.prototype.setVisible=function(a,b,c){(b=goog.ui.Menu.superClass_.setVisible.call(this,a,b))&&a&&this.isInDocument()&&this.allowAutoFocus_&&this.getKeyEventTarget().focus();a&&c&&goog.isNumber(c.clientX)?this.openingCoords=new goog.math.Coordinate(c.clientX,c.clientY):this.openingCoords=null;return b};
		goog.ui.Menu.prototype.handleEnterItem=function(a){this.allowAutoFocus_&&this.getKeyEventTarget().focus();return goog.ui.Menu.superClass_.handleEnterItem.call(this,a)};goog.ui.Menu.prototype.highlightNextPrefix=function(a){var b=new RegExp("^"+goog.string.regExpEscape(a),"i");return this.highlightHelper(function(a,d){var c=0>a?0:a,f=!1;do{++a;a==d&&(a=0,f=!0);var g=this.getChildAt(a).getCaption();if(g&&g.match(b))return a}while(!f||a!=c);return this.getHighlightedIndex()},this.getHighlightedIndex())};
		goog.ui.Menu.prototype.canHighlightItem=function(a){return(this.allowHighlightDisabled_||a.isEnabled())&&a.isVisible()&&a.isSupportedState(goog.ui.Component.State.HOVER)};goog.ui.Menu.prototype.decorateInternal=function(a){this.decorateContent(a);goog.ui.Menu.superClass_.decorateInternal.call(this,a)};
		goog.ui.Menu.prototype.handleKeyEventInternal=function(a){var b=goog.ui.Menu.superClass_.handleKeyEventInternal.call(this,a);b||this.forEachChild(function(c){!b&&c.getMnemonic&&c.getMnemonic()==a.keyCode&&(this.isEnabled()&&this.setHighlighted(c),b=c.handleKeyEvent(a))},this);return b};goog.ui.Menu.prototype.setHighlightedIndex=function(a){goog.ui.Menu.superClass_.setHighlightedIndex.call(this,a);(a=this.getChildAt(a))&&goog.style.scrollIntoContainerView(a.getElement(),this.getElement())};
		goog.ui.Menu.prototype.decorateContent=function(a){var b=this.getRenderer();a=this.getDomHelper().getElementsByTagNameAndClass("DIV",b.getCssClass()+"-content",a);for(var c=a.length,d=0;d<c;d++)b.decorateChildren(this,a[d])};goog.color={};
		goog.color.names={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",
		darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",
		ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",
		lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",
		moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",
		seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};goog.color.parse=function(a){var b={};a=String(a);var c=goog.color.prependHashIfNecessaryHelper(a);if(goog.color.isValidHexColor_(c))return b.hex=goog.color.normalizeHex(c),b.type="hex",b;c=goog.color.isValidRgbColor_(a);if(c.length)return b.hex=goog.color.rgbArrayToHex(c),b.type="rgb",b;if(goog.color.names&&(c=goog.color.names[a.toLowerCase()]))return b.hex=c,b.type="named",b;throw Error(a+" is not a valid color string");};
		goog.color.isValidColor=function(a){var b=goog.color.prependHashIfNecessaryHelper(a);return!!(goog.color.isValidHexColor_(b)||goog.color.isValidRgbColor_(a).length||goog.color.names&&goog.color.names[a.toLowerCase()])};goog.color.parseRgb=function(a){var b=goog.color.isValidRgbColor_(a);if(!b.length)throw Error(a+" is not a valid RGB color");return b};goog.color.hexToRgbStyle=function(a){return goog.color.rgbStyle_(goog.color.hexToRgb(a))};goog.color.hexTripletRe_=/#(.)(.)(.)/;
		goog.color.normalizeHex=function(a){if(!goog.color.isValidHexColor_(a))throw Error("'"+a+"' is not a valid hex color");4==a.length&&(a=a.replace(goog.color.hexTripletRe_,"#$1$1$2$2$3$3"));return a.toLowerCase()};goog.color.hexToRgb=function(a){a=goog.color.normalizeHex(a);var b=parseInt(a.substr(1,2),16),c=parseInt(a.substr(3,2),16);a=parseInt(a.substr(5,2),16);return[b,c,a]};
		goog.color.rgbToHex=function(a,b,c){a=Number(a);b=Number(b);c=Number(c);if(a!=(a&255)||b!=(b&255)||c!=(c&255))throw Error('"('+a+","+b+","+c+'") is not a valid RGB color');a=goog.color.prependZeroIfNecessaryHelper(a.toString(16));b=goog.color.prependZeroIfNecessaryHelper(b.toString(16));c=goog.color.prependZeroIfNecessaryHelper(c.toString(16));return"#"+a+b+c};goog.color.rgbArrayToHex=function(a){return goog.color.rgbToHex(a[0],a[1],a[2])};
		goog.color.rgbToHsl=function(a,b,c){a/=255;b/=255;c/=255;var d=Math.max(a,b,c),e=Math.min(a,b,c),f=0,g=0,h=.5*(d+e);d!=e&&(d==a?f=60*(b-c)/(d-e):d==b?f=60*(c-a)/(d-e)+120:d==c&&(f=60*(a-b)/(d-e)+240),g=0<h&&.5>=h?(d-e)/(2*h):(d-e)/(2-2*h));return[Math.round(f+360)%360,g,h]};goog.color.rgbArrayToHsl=function(a){return goog.color.rgbToHsl(a[0],a[1],a[2])};goog.color.hueToRgb_=function(a,b,c){0>c?c+=1:1<c&&--c;return 1>6*c?a+6*(b-a)*c:1>2*c?b:2>3*c?a+(b-a)*(2/3-c)*6:a};
		goog.color.hslToRgb=function(a,b,c){a/=360;if(0==b)c=b=a=255*c;else{var d,e;e=.5>c?c*(1+b):c+b-b*c;d=2*c-e;c=255*goog.color.hueToRgb_(d,e,a+1/3);b=255*goog.color.hueToRgb_(d,e,a);a=255*goog.color.hueToRgb_(d,e,a-1/3)}return[Math.round(c),Math.round(b),Math.round(a)]};goog.color.hslArrayToRgb=function(a){return goog.color.hslToRgb(a[0],a[1],a[2])};goog.color.validHexColorRe_=/^#(?:[0-9a-f]{3}){1,2}$/i;goog.color.isValidHexColor_=function(a){return goog.color.validHexColorRe_.test(a)};
		goog.color.normalizedHexColorRe_=/^#[0-9a-f]{6}$/;goog.color.isNormalizedHexColor_=function(a){return goog.color.normalizedHexColorRe_.test(a)};goog.color.rgbColorRe_=/^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;goog.color.isValidRgbColor_=function(a){var b=a.match(goog.color.rgbColorRe_);if(b){a=Number(b[1]);var c=Number(b[2]),b=Number(b[3]);if(0<=a&&255>=a&&0<=c&&255>=c&&0<=b&&255>=b)return[a,c,b]}return[]};
		goog.color.prependZeroIfNecessaryHelper=function(a){return 1==a.length?"0"+a:a};goog.color.prependHashIfNecessaryHelper=function(a){return"#"==a.charAt(0)?a:"#"+a};goog.color.rgbStyle_=function(a){return"rgb("+a.join(",")+")"};
		goog.color.hsvToRgb=function(a,b,c){var d=0,e=0,f=0;if(0==b)f=e=d=c;else{var g=Math.floor(a/60),h=a/60-g;a=c*(1-b);var k=c*(1-b*h);b=c*(1-b*(1-h));switch(g){case 1:d=k;e=c;f=a;break;case 2:d=a;e=c;f=b;break;case 3:d=a;e=k;f=c;break;case 4:d=b;e=a;f=c;break;case 5:d=c;e=a;f=k;break;case 6:case 0:d=c,e=b,f=a}}return[Math.floor(d),Math.floor(e),Math.floor(f)]};
		goog.color.rgbToHsv=function(a,b,c){var d=Math.max(Math.max(a,b),c),e=Math.min(Math.min(a,b),c);if(e==d)e=a=0;else{var f=d-e,e=f/d;a=60*(a==d?(b-c)/f:b==d?2+(c-a)/f:4+(a-b)/f);0>a&&(a+=360);360<a&&(a-=360)}return[a,e,d]};goog.color.rgbArrayToHsv=function(a){return goog.color.rgbToHsv(a[0],a[1],a[2])};goog.color.hsvArrayToRgb=function(a){return goog.color.hsvToRgb(a[0],a[1],a[2])};goog.color.hexToHsl=function(a){a=goog.color.hexToRgb(a);return goog.color.rgbToHsl(a[0],a[1],a[2])};
		goog.color.hslToHex=function(a,b,c){return goog.color.rgbArrayToHex(goog.color.hslToRgb(a,b,c))};goog.color.hslArrayToHex=function(a){return goog.color.rgbArrayToHex(goog.color.hslToRgb(a[0],a[1],a[2]))};goog.color.hexToHsv=function(a){return goog.color.rgbArrayToHsv(goog.color.hexToRgb(a))};goog.color.hsvToHex=function(a,b,c){return goog.color.rgbArrayToHex(goog.color.hsvToRgb(a,b,c))};goog.color.hsvArrayToHex=function(a){return goog.color.hsvToHex(a[0],a[1],a[2])};
		goog.color.hslDistance=function(a,b){var c,d;c=.5>=a[2]?a[1]*a[2]:a[1]*(1-a[2]);d=.5>=b[2]?b[1]*b[2]:b[1]*(1-b[2]);return(a[2]-b[2])*(a[2]-b[2])+c*c+d*d-2*c*d*Math.cos(2*(a[0]/360-b[0]/360)*Math.PI)};goog.color.blend=function(a,b,c){c=goog.math.clamp(c,0,1);return[Math.round(c*a[0]+(1-c)*b[0]),Math.round(c*a[1]+(1-c)*b[1]),Math.round(c*a[2]+(1-c)*b[2])]};goog.color.darken=function(a,b){return goog.color.blend([0,0,0],a,b)};goog.color.lighten=function(a,b){return goog.color.blend([255,255,255],a,b)};
		goog.color.highContrast=function(a,b){for(var c=[],d=0;d<b.length;d++)c.push({color:b[d],diff:goog.color.yiqBrightnessDiff_(b[d],a)+goog.color.colorDiff_(b[d],a)});c.sort(function(a,b){return b.diff-a.diff});return c[0].color};goog.color.yiqBrightness_=function(a){return Math.round((299*a[0]+587*a[1]+114*a[2])/1E3)};goog.color.yiqBrightnessDiff_=function(a,b){return Math.abs(goog.color.yiqBrightness_(a)-goog.color.yiqBrightness_(b))};
		goog.color.colorDiff_=function(a,b){return Math.abs(a[0]-b[0])+Math.abs(a[1]-b[1])+Math.abs(a[2]-b[2])};goog.functions={};goog.functions.constant=function(a){return function(){return a}};goog.functions.FALSE=goog.functions.constant(!1);goog.functions.TRUE=goog.functions.constant(!0);goog.functions.NULL=goog.functions.constant(null);goog.functions.identity=function(a,b){return a};goog.functions.error=function(a){return function(){throw Error(a);}};goog.functions.fail=function(a){return function(){throw a;}};
		goog.functions.lock=function(a,b){b=b||0;return function(){return a.apply(this,Array.prototype.slice.call(arguments,0,b))}};goog.functions.nth=function(a){return function(){return arguments[a]}};goog.functions.partialRight=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=Array.prototype.slice.call(arguments);b.push.apply(b,c);return a.apply(this,b)}};goog.functions.withReturnValue=function(a,b){return goog.functions.sequence(a,goog.functions.constant(b))};
		goog.functions.equalTo=function(a,b){return function(c){return b?a==c:a===c}};goog.functions.compose=function(a,b){var c=arguments,d=c.length;return function(){var a;d&&(a=c[d-1].apply(this,arguments));for(var b=d-2;0<=b;b--)a=c[b].call(this,a);return a}};goog.functions.sequence=function(a){var b=arguments,c=b.length;return function(){for(var a,e=0;e<c;e++)a=b[e].apply(this,arguments);return a}};
		goog.functions.and=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(!b[a].apply(this,arguments))return!1;return!0}};goog.functions.or=function(a){var b=arguments,c=b.length;return function(){for(var a=0;a<c;a++)if(b[a].apply(this,arguments))return!0;return!1}};goog.functions.not=function(a){return function(){return!a.apply(this,arguments)}};
		goog.functions.create=function(a,b){var c=function(){};c.prototype=a.prototype;c=new c;a.apply(c,Array.prototype.slice.call(arguments,1));return c};goog.functions.CACHE_RETURN_VALUE=!0;goog.functions.cacheReturnValue=function(a){var b=!1,c;return function(){if(!goog.functions.CACHE_RETURN_VALUE)return a();b||(c=a(),b=!0);return c}};goog.functions.once=function(a){var b=a;return function(){if(b){var a=b;b=null;a()}}};
		goog.functions.debounce=function(a,b,c){c&&(a=goog.bind(a,c));var d=null;return function(c){goog.global.clearTimeout(d);var e=arguments;d=goog.global.setTimeout(function(){a.apply(null,e)},b)}};goog.functions.throttle=function(a,b,c){c&&(a=goog.bind(a,c));var d=null,e=!1,f=[],g=function(){d=null;e&&(e=!1,h())},h=function(){d=goog.global.setTimeout(g,b);a.apply(null,f)};return function(a){f=arguments;d?e=!0:h()}};goog.iter={};goog.iter.StopIteration="StopIteration"in goog.global?goog.global.StopIteration:{message:"StopIteration",stack:""};goog.iter.Iterator=function(){};goog.iter.Iterator.prototype.next=function(){throw goog.iter.StopIteration;};goog.iter.Iterator.prototype.__iterator__=function(a){return this};
		goog.iter.toIterator=function(a){if(a instanceof goog.iter.Iterator)return a;if("function"==typeof a.__iterator__)return a.__iterator__(!1);if(goog.isArrayLike(a)){var b=0,c=new goog.iter.Iterator;c.next=function(){for(;;){if(b>=a.length)throw goog.iter.StopIteration;if(b in a)return a[b++];b++}};return c}throw Error("Not implemented");};
		goog.iter.forEach=function(a,b,c){if(goog.isArrayLike(a))try{goog.array.forEach(a,b,c)}catch(d){if(d!==goog.iter.StopIteration)throw d;}else{a=goog.iter.toIterator(a);try{for(;;)b.call(c,a.next(),void 0,a)}catch(d){if(d!==goog.iter.StopIteration)throw d;}}};goog.iter.filter=function(a,b,c){var d=goog.iter.toIterator(a);a=new goog.iter.Iterator;a.next=function(){for(;;){var a=d.next();if(b.call(c,a,void 0,d))return a}};return a};
		goog.iter.filterFalse=function(a,b,c){return goog.iter.filter(a,goog.functions.not(b),c)};goog.iter.range=function(a,b,c){var d=0,e=a,f=c||1;1<arguments.length&&(d=a,e=b);if(0==f)throw Error("Range step argument must not be zero");var g=new goog.iter.Iterator;g.next=function(){if(0<f&&d>=e||0>f&&d<=e)throw goog.iter.StopIteration;var a=d;d+=f;return a};return g};goog.iter.join=function(a,b){return goog.iter.toArray(a).join(b)};
		goog.iter.map=function(a,b,c){var d=goog.iter.toIterator(a);a=new goog.iter.Iterator;a.next=function(){var a=d.next();return b.call(c,a,void 0,d)};return a};goog.iter.reduce=function(a,b,c,d){var e=c;goog.iter.forEach(a,function(a){e=b.call(d,e,a)});return e};goog.iter.some=function(a,b,c){a=goog.iter.toIterator(a);try{for(;;)if(b.call(c,a.next(),void 0,a))return!0}catch(d){if(d!==goog.iter.StopIteration)throw d;}return!1};
		goog.iter.every=function(a,b,c){a=goog.iter.toIterator(a);try{for(;;)if(!b.call(c,a.next(),void 0,a))return!1}catch(d){if(d!==goog.iter.StopIteration)throw d;}return!0};goog.iter.chain=function(a){return goog.iter.chainFromIterable(arguments)};
		goog.iter.chainFromIterable=function(a){var b=goog.iter.toIterator(a);a=new goog.iter.Iterator;var c=null;a.next=function(){for(;;){if(null==c){var a=b.next();c=goog.iter.toIterator(a)}try{return c.next()}catch(e){if(e!==goog.iter.StopIteration)throw e;c=null}}};return a};goog.iter.dropWhile=function(a,b,c){var d=goog.iter.toIterator(a);a=new goog.iter.Iterator;var e=!0;a.next=function(){for(;;){var a=d.next();if(!e||!b.call(c,a,void 0,d))return e=!1,a}};return a};
		goog.iter.takeWhile=function(a,b,c){var d=goog.iter.toIterator(a);a=new goog.iter.Iterator;a.next=function(){var a=d.next();if(b.call(c,a,void 0,d))return a;throw goog.iter.StopIteration;};return a};goog.iter.toArray=function(a){if(goog.isArrayLike(a))return goog.array.toArray(a);a=goog.iter.toIterator(a);var b=[];goog.iter.forEach(a,function(a){b.push(a)});return b};
		goog.iter.equals=function(a,b,c){a=goog.iter.zipLongest({},a,b);var d=c||goog.array.defaultCompareEquality;return goog.iter.every(a,function(a){return d(a[0],a[1])})};goog.iter.nextOrValue=function(a,b){try{return goog.iter.toIterator(a).next()}catch(c){if(c!=goog.iter.StopIteration)throw c;return b}};
		goog.iter.product=function(a){if(goog.array.some(arguments,function(a){return!a.length})||!arguments.length)return new goog.iter.Iterator;var b=new goog.iter.Iterator,c=arguments,d=goog.array.repeat(0,c.length);b.next=function(){if(d){for(var a=goog.array.map(d,function(a,b){return c[b][a]}),b=d.length-1;0<=b;b--){goog.asserts.assert(d);if(d[b]<c[b].length-1){d[b]++;break}if(0==b){d=null;break}d[b]=0}return a}throw goog.iter.StopIteration;};return b};
		goog.iter.cycle=function(a){var b=goog.iter.toIterator(a),c=[],d=0;a=new goog.iter.Iterator;var e=!1;a.next=function(){var a=null;if(!e)try{return a=b.next(),c.push(a),a}catch(g){if(g!=goog.iter.StopIteration||goog.array.isEmpty(c))throw g;e=!0}a=c[d];d=(d+1)%c.length;return a};return a};goog.iter.count=function(a,b){var c=a||0,d=goog.isDef(b)?b:1,e=new goog.iter.Iterator;e.next=function(){var a=c;c+=d;return a};return e};
		goog.iter.repeat=function(a){var b=new goog.iter.Iterator;b.next=goog.functions.constant(a);return b};goog.iter.accumulate=function(a){var b=goog.iter.toIterator(a),c=0;a=new goog.iter.Iterator;a.next=function(){return c+=b.next()};return a};goog.iter.zip=function(a){var b=arguments,c=new goog.iter.Iterator;if(0<b.length){var d=goog.array.map(b,goog.iter.toIterator);c.next=function(){return goog.array.map(d,function(a){return a.next()})}}return c};
		goog.iter.zipLongest=function(a,b){var c=goog.array.slice(arguments,1),d=new goog.iter.Iterator;if(0<c.length){var e=goog.array.map(c,goog.iter.toIterator);d.next=function(){var b=!1,c=goog.array.map(e,function(c){var d;try{d=c.next(),b=!0}catch(l){if(l!==goog.iter.StopIteration)throw l;d=a}return d});if(!b)throw goog.iter.StopIteration;return c}}return d};goog.iter.compress=function(a,b){var c=goog.iter.toIterator(b);return goog.iter.filter(a,function(){return!!c.next()})};
		goog.iter.GroupByIterator_=function(a,b){this.iterator=goog.iter.toIterator(a);this.keyFunc=b||goog.functions.identity};goog.inherits(goog.iter.GroupByIterator_,goog.iter.Iterator);goog.iter.GroupByIterator_.prototype.next=function(){for(;this.currentKey==this.targetKey;)this.currentValue=this.iterator.next(),this.currentKey=this.keyFunc(this.currentValue);this.targetKey=this.currentKey;return[this.currentKey,this.groupItems_(this.targetKey)]};
		goog.iter.GroupByIterator_.prototype.groupItems_=function(a){for(var b=[];this.currentKey==a;){b.push(this.currentValue);try{this.currentValue=this.iterator.next()}catch(c){if(c!==goog.iter.StopIteration)throw c;break}this.currentKey=this.keyFunc(this.currentValue)}return b};goog.iter.groupBy=function(a,b){return new goog.iter.GroupByIterator_(a,b)};
		goog.iter.starMap=function(a,b,c){var d=goog.iter.toIterator(a);a=new goog.iter.Iterator;a.next=function(){var a=goog.iter.toArray(d.next());return b.apply(c,goog.array.concat(a,void 0,d))};return a};
		goog.iter.tee=function(a,b){var c=goog.iter.toIterator(a),d=goog.isNumber(b)?b:2,e=goog.array.map(goog.array.range(d),function(){return[]}),f=function(){var a=c.next();goog.array.forEach(e,function(b){b.push(a)})};return goog.array.map(e,function(a){var b=new goog.iter.Iterator;b.next=function(){goog.array.isEmpty(a)&&f();goog.asserts.assert(!goog.array.isEmpty(a));return a.shift()};return b})};goog.iter.enumerate=function(a,b){return goog.iter.zip(goog.iter.count(b),a)};
		goog.iter.limit=function(a,b){goog.asserts.assert(goog.math.isInt(b)&&0<=b);var c=goog.iter.toIterator(a),d=new goog.iter.Iterator,e=b;d.next=function(){if(0<e--)return c.next();throw goog.iter.StopIteration;};return d};goog.iter.consume=function(a,b){goog.asserts.assert(goog.math.isInt(b)&&0<=b);for(var c=goog.iter.toIterator(a);0<b--;)goog.iter.nextOrValue(c,null);return c};
		goog.iter.slice=function(a,b,c){goog.asserts.assert(goog.math.isInt(b)&&0<=b);a=goog.iter.consume(a,b);goog.isNumber(c)&&(goog.asserts.assert(goog.math.isInt(c)&&c>=b),a=goog.iter.limit(a,c-b));return a};goog.iter.hasDuplicates_=function(a){var b=[];goog.array.removeDuplicates(a,b);return a.length!=b.length};goog.iter.permutations=function(a,b){var c=goog.iter.toArray(a),d=goog.isNumber(b)?b:c.length,c=goog.array.repeat(c,d),c=goog.iter.product.apply(void 0,c);return goog.iter.filter(c,function(a){return!goog.iter.hasDuplicates_(a)})};
		goog.iter.combinations=function(a,b){function c(a){return d[a]}var d=goog.iter.toArray(a),e=goog.iter.range(d.length),e=goog.iter.permutations(e,b),f=goog.iter.filter(e,function(a){return goog.array.isSorted(a)}),e=new goog.iter.Iterator;e.next=function(){return goog.array.map(f.next(),c)};return e};
		goog.iter.combinationsWithReplacement=function(a,b){function c(a){return d[a]}var d=goog.iter.toArray(a),e=goog.array.range(d.length),e=goog.array.repeat(e,b),e=goog.iter.product.apply(void 0,e),f=goog.iter.filter(e,function(a){return goog.array.isSorted(a)}),e=new goog.iter.Iterator;e.next=function(){return goog.array.map(f.next(),c)};return e};goog.dom.TagWalkType={START_TAG:1,OTHER:0,END_TAG:-1};goog.dom.TagIterator=function(a,b,c,d,e){this.reversed=!!b;this.node=null;this.tagType=goog.dom.TagWalkType.OTHER;this.started_=!1;this.constrained=!c;a&&this.setPosition(a,d);this.depth=void 0!=e?e:this.tagType||0;this.reversed&&(this.depth*=-1)};goog.inherits(goog.dom.TagIterator,goog.iter.Iterator);
		goog.dom.TagIterator.prototype.setPosition=function(a,b,c){if(this.node=a)goog.isNumber(b)?this.tagType=b:this.tagType=this.node.nodeType!=goog.dom.NodeType.ELEMENT?goog.dom.TagWalkType.OTHER:this.reversed?goog.dom.TagWalkType.END_TAG:goog.dom.TagWalkType.START_TAG;goog.isNumber(c)&&(this.depth=c)};goog.dom.TagIterator.prototype.copyFrom=function(a){this.node=a.node;this.tagType=a.tagType;this.depth=a.depth;this.reversed=a.reversed;this.constrained=a.constrained};
		goog.dom.TagIterator.prototype.clone=function(){return new goog.dom.TagIterator(this.node,this.reversed,!this.constrained,this.tagType,this.depth)};goog.dom.TagIterator.prototype.skipTag=function(){var a=this.reversed?goog.dom.TagWalkType.END_TAG:goog.dom.TagWalkType.START_TAG;this.tagType==a&&(this.tagType=-1*a,this.depth+=this.tagType*(this.reversed?-1:1))};
		goog.dom.TagIterator.prototype.restartTag=function(){var a=this.reversed?goog.dom.TagWalkType.START_TAG:goog.dom.TagWalkType.END_TAG;this.tagType==a&&(this.tagType=-1*a,this.depth+=this.tagType*(this.reversed?-1:1))};
		goog.dom.TagIterator.prototype.next=function(){var a;if(this.started_){if(!this.node||this.constrained&&0==this.depth)throw goog.iter.StopIteration;a=this.node;var b=this.reversed?goog.dom.TagWalkType.END_TAG:goog.dom.TagWalkType.START_TAG;if(this.tagType==b){var c=this.reversed?a.lastChild:a.firstChild;c?this.setPosition(c):this.setPosition(a,-1*b)}else(c=this.reversed?a.previousSibling:a.nextSibling)?this.setPosition(c):this.setPosition(a.parentNode,-1*b);this.depth+=this.tagType*(this.reversed?
		-1:1)}else this.started_=!0;a=this.node;if(!this.node)throw goog.iter.StopIteration;return a};goog.dom.TagIterator.prototype.isStarted=function(){return this.started_};goog.dom.TagIterator.prototype.isStartTag=function(){return this.tagType==goog.dom.TagWalkType.START_TAG};goog.dom.TagIterator.prototype.isEndTag=function(){return this.tagType==goog.dom.TagWalkType.END_TAG};goog.dom.TagIterator.prototype.isNonElement=function(){return this.tagType==goog.dom.TagWalkType.OTHER};
		goog.dom.TagIterator.prototype.equals=function(a){return a.node==this.node&&(!this.node||a.tagType==this.tagType)};goog.dom.TagIterator.prototype.splice=function(a){var b=this.node;this.restartTag();this.reversed=!this.reversed;goog.dom.TagIterator.prototype.next.call(this);this.reversed=!this.reversed;for(var c=goog.isArrayLike(arguments[0])?arguments[0]:arguments,d=c.length-1;0<=d;d--)goog.dom.insertSiblingAfter(c[d],b);goog.dom.removeNode(b)};goog.dom.NodeIterator=function(a,b,c,d){goog.dom.TagIterator.call(this,a,b,c,null,d)};goog.inherits(goog.dom.NodeIterator,goog.dom.TagIterator);goog.dom.NodeIterator.prototype.next=function(){do goog.dom.NodeIterator.superClass_.next.call(this);while(this.isEndTag());return this.node};goog.ui.PaletteRenderer=function(){goog.ui.ControlRenderer.call(this)};goog.inherits(goog.ui.PaletteRenderer,goog.ui.ControlRenderer);goog.addSingletonGetter(goog.ui.PaletteRenderer);goog.ui.PaletteRenderer.cellId_=0;goog.ui.PaletteRenderer.CSS_CLASS="goog-palette";
		goog.ui.PaletteRenderer.prototype.createDom=function(a){var b=this.getClassNames(a);a=a.getDomHelper().createDom("DIV",b?b.join(" "):null,this.createGrid(a.getContent(),a.getSize(),a.getDomHelper()));goog.a11y.aria.setRole(a,goog.a11y.aria.Role.GRID);return a};goog.ui.PaletteRenderer.prototype.createGrid=function(a,b,c){for(var d=[],e=0,f=0;e<b.height;e++){for(var g=[],h=0;h<b.width;h++){var k=a&&a[f++];g.push(this.createCell(k,c))}d.push(this.createRow(g,c))}return this.createTable(d,c)};
		goog.ui.PaletteRenderer.prototype.createTable=function(a,b){var c=b.createDom("TABLE",this.getCssClass()+"-table",b.createDom("TBODY",this.getCssClass()+"-body",a));c.cellSpacing="0";c.cellPadding="0";return c};goog.ui.PaletteRenderer.prototype.createRow=function(a,b){var c=b.createDom("TR",this.getCssClass()+"-row",a);goog.a11y.aria.setRole(c,goog.a11y.aria.Role.ROW);return c};
		goog.ui.PaletteRenderer.prototype.createCell=function(a,b){var c=b.createDom("TD",{"class":this.getCssClass()+"-cell",id:this.getCssClass()+"-cell-"+goog.ui.PaletteRenderer.cellId_++},a);goog.a11y.aria.setRole(c,goog.a11y.aria.Role.GRIDCELL);goog.a11y.aria.setState(c,goog.a11y.aria.State.SELECTED,!1);if(!goog.dom.getTextContent(c)&&!goog.a11y.aria.getLabel(c)){var d=this.findAriaLabelForCell_(c);d&&goog.a11y.aria.setLabel(c,d)}return c};
		goog.ui.PaletteRenderer.prototype.findAriaLabelForCell_=function(a){a=new goog.dom.NodeIterator(a);for(var b="",c;!b&&(c=goog.iter.nextOrValue(a,null));)c.nodeType==goog.dom.NodeType.ELEMENT&&(b=goog.a11y.aria.getLabel(c)||c.title);return b};goog.ui.PaletteRenderer.prototype.canDecorate=function(a){return!1};goog.ui.PaletteRenderer.prototype.decorate=function(a,b){return null};
		goog.ui.PaletteRenderer.prototype.setContent=function(a,b){if(a){var c=goog.dom.getElementsByTagNameAndClass("TBODY",this.getCssClass()+"-body",a)[0];if(c){var d=0;goog.array.forEach(c.rows,function(a){goog.array.forEach(a.cells,function(a){goog.dom.removeChildren(a);if(b){var c=b[d++];c&&goog.dom.appendChild(a,c)}})});if(d<b.length){for(var e=[],f=goog.dom.getDomHelper(a),g=c.rows[0].cells.length;d<b.length;){var h=b[d++];e.push(this.createCell(h,f));e.length==g&&(h=this.createRow(e,f),goog.dom.appendChild(c,
		h),e.length=0)}if(0<e.length){for(;e.length<g;)e.push(this.createCell("",f));h=this.createRow(e,f);goog.dom.appendChild(c,h)}}}goog.style.setUnselectable(a,!0,goog.userAgent.GECKO)}};goog.ui.PaletteRenderer.prototype.getContainingItem=function(a,b){for(var c=a.getElement();b&&b.nodeType==goog.dom.NodeType.ELEMENT&&b!=c;){if("TD"==b.tagName&&goog.dom.classlist.contains(b,this.getCssClass()+"-cell"))return b.firstChild;b=b.parentNode}return null};
		goog.ui.PaletteRenderer.prototype.highlightCell=function(a,b,c){b&&(b=this.getCellForItem(b),goog.asserts.assert(b),goog.dom.classlist.enable(b,this.getCssClass()+"-cell-hover",c),c?goog.a11y.aria.setState(a.getElementStrict(),goog.a11y.aria.State.ACTIVEDESCENDANT,b.id):b.id==goog.a11y.aria.getState(a.getElementStrict(),goog.a11y.aria.State.ACTIVEDESCENDANT)&&goog.a11y.aria.removeState(a.getElementStrict(),goog.a11y.aria.State.ACTIVEDESCENDANT))};
		goog.ui.PaletteRenderer.prototype.getCellForItem=function(a){return a?a.parentNode:null};goog.ui.PaletteRenderer.prototype.selectCell=function(a,b,c){b&&(a=b.parentNode,goog.dom.classlist.enable(a,this.getCssClass()+"-cell-selected",c),goog.a11y.aria.setState(a,goog.a11y.aria.State.SELECTED,c))};goog.ui.PaletteRenderer.prototype.getCssClass=function(){return goog.ui.PaletteRenderer.CSS_CLASS};goog.ui.SelectionModel=function(a){goog.events.EventTarget.call(this);this.items_=[];this.addItems(a)};goog.inherits(goog.ui.SelectionModel,goog.events.EventTarget);goog.tagUnsealableClass(goog.ui.SelectionModel);goog.ui.SelectionModel.prototype.selectedItem_=null;goog.ui.SelectionModel.prototype.selectionHandler_=null;goog.ui.SelectionModel.prototype.getSelectionHandler=function(){return this.selectionHandler_};
		goog.ui.SelectionModel.prototype.setSelectionHandler=function(a){this.selectionHandler_=a};goog.ui.SelectionModel.prototype.getItemCount=function(){return this.items_.length};goog.ui.SelectionModel.prototype.indexOfItem=function(a){return a?goog.array.indexOf(this.items_,a):-1};goog.ui.SelectionModel.prototype.getFirst=function(){return this.items_[0]};goog.ui.SelectionModel.prototype.getLast=function(){return this.items_[this.items_.length-1]};
		goog.ui.SelectionModel.prototype.getItemAt=function(a){return this.items_[a]||null};goog.ui.SelectionModel.prototype.addItems=function(a){a&&(goog.array.forEach(a,function(a){this.selectItem_(a,!1)},this),goog.array.extend(this.items_,a))};goog.ui.SelectionModel.prototype.addItem=function(a){this.addItemAt(a,this.getItemCount())};goog.ui.SelectionModel.prototype.addItemAt=function(a,b){a&&(this.selectItem_(a,!1),goog.array.insertAt(this.items_,a,b))};
		goog.ui.SelectionModel.prototype.removeItem=function(a){a&&goog.array.remove(this.items_,a)&&a==this.selectedItem_&&(this.selectedItem_=null,this.dispatchEvent(goog.events.EventType.SELECT))};goog.ui.SelectionModel.prototype.removeItemAt=function(a){this.removeItem(this.getItemAt(a))};goog.ui.SelectionModel.prototype.getSelectedItem=function(){return this.selectedItem_};goog.ui.SelectionModel.prototype.getItems=function(){return goog.array.clone(this.items_)};
		goog.ui.SelectionModel.prototype.setSelectedItem=function(a){a!=this.selectedItem_&&(this.selectItem_(this.selectedItem_,!1),this.selectedItem_=a,this.selectItem_(a,!0));this.dispatchEvent(goog.events.EventType.SELECT)};goog.ui.SelectionModel.prototype.getSelectedIndex=function(){return this.indexOfItem(this.selectedItem_)};goog.ui.SelectionModel.prototype.setSelectedIndex=function(a){this.setSelectedItem(this.getItemAt(a))};
		goog.ui.SelectionModel.prototype.clear=function(){goog.array.clear(this.items_);this.selectedItem_=null};goog.ui.SelectionModel.prototype.disposeInternal=function(){goog.ui.SelectionModel.superClass_.disposeInternal.call(this);delete this.items_;this.selectedItem_=null};goog.ui.SelectionModel.prototype.selectItem_=function(a,b){a&&("function"==typeof this.selectionHandler_?this.selectionHandler_(a,b):"function"==typeof a.setSelected&&a.setSelected(b))};goog.ui.Palette=function(a,b,c){goog.ui.Control.call(this,a,b||goog.ui.PaletteRenderer.getInstance(),c);this.setAutoStates(goog.ui.Component.State.CHECKED|goog.ui.Component.State.SELECTED|goog.ui.Component.State.OPENED,!1);this.currentCellControl_=new goog.ui.Palette.CurrentCell_;this.currentCellControl_.setParentEventTarget(this);this.lastHighlightedIndex_=-1};goog.inherits(goog.ui.Palette,goog.ui.Control);goog.tagUnsealableClass(goog.ui.Palette);goog.ui.Palette.EventType={AFTER_HIGHLIGHT:goog.events.getUniqueId("afterhighlight")};
		goog.ui.Palette.prototype.size_=null;goog.ui.Palette.prototype.highlightedIndex_=-1;goog.ui.Palette.prototype.selectionModel_=null;goog.ui.Palette.prototype.disposeInternal=function(){goog.ui.Palette.superClass_.disposeInternal.call(this);this.selectionModel_&&(this.selectionModel_.dispose(),this.selectionModel_=null);this.size_=null;this.currentCellControl_.dispose()};
		goog.ui.Palette.prototype.setContentInternal=function(a){goog.ui.Palette.superClass_.setContentInternal.call(this,a);this.adjustSize_();this.selectionModel_?(this.selectionModel_.clear(),this.selectionModel_.addItems(a)):(this.selectionModel_=new goog.ui.SelectionModel(a),this.selectionModel_.setSelectionHandler(goog.bind(this.selectItem_,this)),this.getHandler().listen(this.selectionModel_,goog.events.EventType.SELECT,this.handleSelectionChange));this.highlightedIndex_=-1};
		goog.ui.Palette.prototype.getCaption=function(){return""};goog.ui.Palette.prototype.setCaption=function(a){};goog.ui.Palette.prototype.handleMouseOver=function(a){goog.ui.Palette.superClass_.handleMouseOver.call(this,a);var b=this.getRenderer().getContainingItem(this,a.target);b&&a.relatedTarget&&goog.dom.contains(b,a.relatedTarget)||b!=this.getHighlightedItem()&&this.setHighlightedItem(b)};
		goog.ui.Palette.prototype.handleMouseDown=function(a){goog.ui.Palette.superClass_.handleMouseDown.call(this,a);this.isActive()&&(a=this.getRenderer().getContainingItem(this,a.target),a!=this.getHighlightedItem()&&this.setHighlightedItem(a))};goog.ui.Palette.prototype.performActionInternal=function(a){var b=this.getHighlightedItem();return b?(a&&this.shouldSelectHighlightedItem_(a)&&this.setSelectedItem(b),goog.ui.Palette.superClass_.performActionInternal.call(this,a)):!1};
		goog.ui.Palette.prototype.shouldSelectHighlightedItem_=function(a){return this.getSelectedItem()?"mouseup"!=a.type?!0:!!this.getRenderer().getContainingItem(this,a.target):!0};
		goog.ui.Palette.prototype.handleKeyEvent=function(a){var b=this.getContent(),b=b?b.length:0,c=this.size_.width;if(0==b||!this.isEnabled())return!1;if(a.keyCode==goog.events.KeyCodes.ENTER||a.keyCode==goog.events.KeyCodes.SPACE)return this.performActionInternal(a);if(a.keyCode==goog.events.KeyCodes.HOME)return this.setHighlightedIndex(0),!0;if(a.keyCode==goog.events.KeyCodes.END)return this.setHighlightedIndex(b-1),!0;var d=0>this.highlightedIndex_?this.getSelectedIndex():this.highlightedIndex_;switch(a.keyCode){case goog.events.KeyCodes.LEFT:if(-1==
		d||0==d)d=b;this.setHighlightedIndex(d-1);a.preventDefault();return!0;case goog.events.KeyCodes.RIGHT:return d==b-1&&(d=-1),this.setHighlightedIndex(d+1),a.preventDefault(),!0;case goog.events.KeyCodes.UP:-1==d&&(d=b+c-1);if(d>=c)return this.setHighlightedIndex(d-c),a.preventDefault(),!0;break;case goog.events.KeyCodes.DOWN:if(-1==d&&(d=-c),d<b-c)return this.setHighlightedIndex(d+c),a.preventDefault(),!0}return!1};goog.ui.Palette.prototype.handleSelectionChange=function(a){};
		goog.ui.Palette.prototype.getSize=function(){return this.size_};goog.ui.Palette.prototype.setSize=function(a,b){if(this.getElement())throw Error(goog.ui.Component.Error.ALREADY_RENDERED);this.size_=goog.isNumber(a)?new goog.math.Size(a,b):a;this.adjustSize_()};goog.ui.Palette.prototype.getHighlightedIndex=function(){return this.highlightedIndex_};goog.ui.Palette.prototype.getHighlightedItem=function(){var a=this.getContent();return a&&a[this.highlightedIndex_]};
		goog.ui.Palette.prototype.getHighlightedCellElement_=function(){return this.getRenderer().getCellForItem(this.getHighlightedItem())};goog.ui.Palette.prototype.setHighlightedIndex=function(a){a!=this.highlightedIndex_&&(this.highlightIndex_(this.highlightedIndex_,!1),this.lastHighlightedIndex_=this.highlightedIndex_,this.highlightedIndex_=a,this.highlightIndex_(a,!0),this.dispatchEvent(goog.ui.Palette.EventType.AFTER_HIGHLIGHT))};
		goog.ui.Palette.prototype.setHighlightedItem=function(a){var b=this.getContent();this.setHighlightedIndex(b&&a?goog.array.indexOf(b,a):-1)};goog.ui.Palette.prototype.getSelectedIndex=function(){return this.selectionModel_?this.selectionModel_.getSelectedIndex():-1};goog.ui.Palette.prototype.getSelectedItem=function(){return this.selectionModel_?this.selectionModel_.getSelectedItem():null};goog.ui.Palette.prototype.setSelectedIndex=function(a){this.selectionModel_&&this.selectionModel_.setSelectedIndex(a)};
		goog.ui.Palette.prototype.setSelectedItem=function(a){this.selectionModel_&&this.selectionModel_.setSelectedItem(a)};goog.ui.Palette.prototype.highlightIndex_=function(a,b){if(this.getElement()){var c=this.getContent();if(c&&0<=a&&a<c.length){var d=this.getHighlightedCellElement_();this.currentCellControl_.getElement()!=d&&this.currentCellControl_.setElementInternal(d);this.currentCellControl_.tryHighlight(b)&&this.getRenderer().highlightCell(this,c[a],b)}}};
		goog.ui.Palette.prototype.setHighlighted=function(a){a&&-1==this.highlightedIndex_?this.setHighlightedIndex(-1<this.lastHighlightedIndex_?this.lastHighlightedIndex_:0):a||this.setHighlightedIndex(-1);goog.ui.Palette.superClass_.setHighlighted.call(this,a)};goog.ui.Palette.prototype.selectItem_=function(a,b){this.getElement()&&this.getRenderer().selectCell(this,a,b)};
		goog.ui.Palette.prototype.adjustSize_=function(){var a=this.getContent();if(a)if(this.size_&&this.size_.width){if(a=Math.ceil(a.length/this.size_.width),!goog.isNumber(this.size_.height)||this.size_.height<a)this.size_.height=a}else a=Math.ceil(Math.sqrt(a.length)),this.size_=new goog.math.Size(a,a);else this.size_=new goog.math.Size(0,0)};goog.ui.Palette.CurrentCell_=function(){goog.ui.Control.call(this,null);this.setDispatchTransitionEvents(goog.ui.Component.State.HOVER,!0)};
		goog.inherits(goog.ui.Palette.CurrentCell_,goog.ui.Control);goog.ui.Palette.CurrentCell_.prototype.tryHighlight=function(a){this.setHighlighted(a);return this.isHighlighted()==a};goog.ui.ColorPalette=function(a,b,c){this.colors_=a||[];goog.ui.Palette.call(this,null,b||goog.ui.PaletteRenderer.getInstance(),c);this.setColors(this.colors_)};goog.inherits(goog.ui.ColorPalette,goog.ui.Palette);goog.tagUnsealableClass(goog.ui.ColorPalette);goog.ui.ColorPalette.prototype.normalizedColors_=null;goog.ui.ColorPalette.prototype.labels_=null;goog.ui.ColorPalette.prototype.getColors=function(){return this.colors_};
		goog.ui.ColorPalette.prototype.setColors=function(a,b){this.colors_=a;this.labels_=b||null;this.normalizedColors_=null;this.setContent(this.createColorNodes())};goog.ui.ColorPalette.prototype.getSelectedColor=function(){var a=this.getSelectedItem();return a?(a=goog.style.getStyle(a,"background-color"),goog.ui.ColorPalette.parseColor_(a)):null};
		goog.ui.ColorPalette.prototype.setSelectedColor=function(a){a=goog.ui.ColorPalette.parseColor_(a);this.normalizedColors_||(this.normalizedColors_=goog.array.map(this.colors_,function(a){return goog.ui.ColorPalette.parseColor_(a)}));this.setSelectedIndex(a?goog.array.indexOf(this.normalizedColors_,a):-1)};
		goog.ui.ColorPalette.prototype.createColorNodes=function(){return goog.array.map(this.colors_,function(a,b){var c=this.getDomHelper().createDom("DIV",{"class":this.getRenderer().getCssClass()+"-colorswatch",style:"background-color:"+a});c.title=this.labels_&&this.labels_[b]?this.labels_[b]:"#"==a.charAt(0)?"RGB ("+goog.color.hexToRgb(a).join(", ")+")":a;return c},this)};goog.ui.ColorPalette.parseColor_=function(a){if(a)try{return goog.color.parse(a).hex}catch(b){}return null};goog.ui.ColorPicker=function(a,b){goog.ui.Component.call(this,a);this.colorPalette_=b||null;this.getHandler().listen(this,goog.ui.Component.EventType.ACTION,this.onColorPaletteAction_)};goog.inherits(goog.ui.ColorPicker,goog.ui.Component);goog.ui.ColorPicker.DEFAULT_NUM_COLS=5;goog.ui.ColorPicker.EventType={CHANGE:"change"};goog.ui.ColorPicker.prototype.focusable_=!0;goog.ui.ColorPicker.prototype.getColors=function(){return this.colorPalette_?this.colorPalette_.getColors():null};
		goog.ui.ColorPicker.prototype.setColors=function(a){this.colorPalette_?this.colorPalette_.setColors(a):this.createColorPalette_(a)};goog.ui.ColorPicker.prototype.addColors=function(a){this.setColors(a)};goog.ui.ColorPicker.prototype.setSize=function(a){this.colorPalette_||this.createColorPalette_([]);this.colorPalette_.setSize(a)};goog.ui.ColorPicker.prototype.getSize=function(){return this.colorPalette_?this.colorPalette_.getSize():null};goog.ui.ColorPicker.prototype.setColumnCount=function(a){this.setSize(a)};
		goog.ui.ColorPicker.prototype.getSelectedIndex=function(){return this.colorPalette_?this.colorPalette_.getSelectedIndex():-1};goog.ui.ColorPicker.prototype.setSelectedIndex=function(a){this.colorPalette_&&this.colorPalette_.setSelectedIndex(a)};goog.ui.ColorPicker.prototype.getSelectedColor=function(){return this.colorPalette_?this.colorPalette_.getSelectedColor():null};goog.ui.ColorPicker.prototype.setSelectedColor=function(a){this.colorPalette_&&this.colorPalette_.setSelectedColor(a)};
		goog.ui.ColorPicker.prototype.isFocusable=function(){return this.focusable_};goog.ui.ColorPicker.prototype.setFocusable=function(a){this.focusable_=a;this.colorPalette_&&this.colorPalette_.setSupportedState(goog.ui.Component.State.FOCUSED,a)};goog.ui.ColorPicker.prototype.canDecorate=function(a){return!1};
		goog.ui.ColorPicker.prototype.enterDocument=function(){goog.ui.ColorPicker.superClass_.enterDocument.call(this);this.colorPalette_&&this.colorPalette_.render(this.getElement());this.getElement().unselectable="on"};goog.ui.ColorPicker.prototype.disposeInternal=function(){goog.ui.ColorPicker.superClass_.disposeInternal.call(this);this.colorPalette_&&(this.colorPalette_.dispose(),this.colorPalette_=null)};goog.ui.ColorPicker.prototype.focus=function(){this.colorPalette_&&this.colorPalette_.getElement().focus()};
		goog.ui.ColorPicker.prototype.onColorPaletteAction_=function(a){a.stopPropagation();this.dispatchEvent(goog.ui.ColorPicker.EventType.CHANGE)};goog.ui.ColorPicker.prototype.createColorPalette_=function(a){a=new goog.ui.ColorPalette(a,null,this.getDomHelper());a.setSize(goog.ui.ColorPicker.DEFAULT_NUM_COLS);a.setSupportedState(goog.ui.Component.State.FOCUSED,this.focusable_);this.addChild(a);this.colorPalette_=a;this.isInDocument()&&this.colorPalette_.render(this.getElement())};
		goog.ui.ColorPicker.createSimpleColorGrid=function(a){a=new goog.ui.ColorPicker(a);a.setSize(7);a.setColors(goog.ui.ColorPicker.SIMPLE_GRID_COLORS);return a};goog.ui.ColorPicker.SIMPLE_GRID_COLORS="#ffffff #cccccc #c0c0c0 #999999 #666666 #333333 #000000 #ffcccc #ff6666 #ff0000 #cc0000 #990000 #660000 #330000 #ffcc99 #ff9966 #ff9900 #ff6600 #cc6600 #993300 #663300 #ffff99 #ffff66 #ffcc66 #ffcc33 #cc9933 #996633 #663333 #ffffcc #ffff33 #ffff00 #ffcc00 #999900 #666600 #333300 #99ff99 #66ff99 #33ff33 #33cc00 #009900 #006600 #003300 #99ffff #33ffff #66cccc #00cccc #339999 #336666 #003333 #ccffff #66ffff #33ccff #3366ff #3333ff #000099 #000066 #ccccff #9999ff #6666cc #6633ff #6600cc #333399 #330099 #ffccff #ff99ff #cc66cc #cc33cc #993399 #663366 #330033".split(" ");goog.events.FocusHandler=function(a){goog.events.EventTarget.call(this);this.element_=a;a=goog.userAgent.IE?"focusout":"blur";this.listenKeyIn_=goog.events.listen(this.element_,goog.userAgent.IE?"focusin":"focus",this,!goog.userAgent.IE);this.listenKeyOut_=goog.events.listen(this.element_,a,this,!goog.userAgent.IE)};goog.inherits(goog.events.FocusHandler,goog.events.EventTarget);goog.events.FocusHandler.EventType={FOCUSIN:"focusin",FOCUSOUT:"focusout"};
		goog.events.FocusHandler.prototype.handleEvent=function(a){var b=a.getBrowserEvent(),b=new goog.events.BrowserEvent(b);b.type="focusin"==a.type||"focus"==a.type?goog.events.FocusHandler.EventType.FOCUSIN:goog.events.FocusHandler.EventType.FOCUSOUT;this.dispatchEvent(b)};goog.events.FocusHandler.prototype.disposeInternal=function(){goog.events.FocusHandler.superClass_.disposeInternal.call(this);goog.events.unlistenByKey(this.listenKeyIn_);goog.events.unlistenByKey(this.listenKeyOut_);delete this.element_};goog.structs={};goog.structs.getCount=function(a){return a.getCount&&"function"==typeof a.getCount?a.getCount():goog.isArrayLike(a)||goog.isString(a)?a.length:goog.object.getCount(a)};goog.structs.getValues=function(a){if(a.getValues&&"function"==typeof a.getValues)return a.getValues();if(goog.isString(a))return a.split("");if(goog.isArrayLike(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}return goog.object.getValues(a)};
		goog.structs.getKeys=function(a){if(a.getKeys&&"function"==typeof a.getKeys)return a.getKeys();if(!a.getValues||"function"!=typeof a.getValues){if(goog.isArrayLike(a)||goog.isString(a)){var b=[];a=a.length;for(var c=0;c<a;c++)b.push(c);return b}return goog.object.getKeys(a)}};
		goog.structs.contains=function(a,b){return a.contains&&"function"==typeof a.contains?a.contains(b):a.containsValue&&"function"==typeof a.containsValue?a.containsValue(b):goog.isArrayLike(a)||goog.isString(a)?goog.array.contains(a,b):goog.object.containsValue(a,b)};goog.structs.isEmpty=function(a){return a.isEmpty&&"function"==typeof a.isEmpty?a.isEmpty():goog.isArrayLike(a)||goog.isString(a)?goog.array.isEmpty(a):goog.object.isEmpty(a)};
		goog.structs.clear=function(a){a.clear&&"function"==typeof a.clear?a.clear():goog.isArrayLike(a)?goog.array.clear(a):goog.object.clear(a)};goog.structs.forEach=function(a,b,c){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,c);else if(goog.isArrayLike(a)||goog.isString(a))goog.array.forEach(a,b,c);else for(var d=goog.structs.getKeys(a),e=goog.structs.getValues(a),f=e.length,g=0;g<f;g++)b.call(c,e[g],d&&d[g],a)};
		goog.structs.filter=function(a,b,c){if("function"==typeof a.filter)return a.filter(b,c);if(goog.isArrayLike(a)||goog.isString(a))return goog.array.filter(a,b,c);var d,e=goog.structs.getKeys(a),f=goog.structs.getValues(a),g=f.length;if(e){d={};for(var h=0;h<g;h++)b.call(c,f[h],e[h],a)&&(d[e[h]]=f[h])}else for(d=[],h=0;h<g;h++)b.call(c,f[h],void 0,a)&&d.push(f[h]);return d};
		goog.structs.map=function(a,b,c){if("function"==typeof a.map)return a.map(b,c);if(goog.isArrayLike(a)||goog.isString(a))return goog.array.map(a,b,c);var d,e=goog.structs.getKeys(a),f=goog.structs.getValues(a),g=f.length;if(e){d={};for(var h=0;h<g;h++)d[e[h]]=b.call(c,f[h],e[h],a)}else for(d=[],h=0;h<g;h++)d[h]=b.call(c,f[h],void 0,a);return d};
		goog.structs.some=function(a,b,c){if("function"==typeof a.some)return a.some(b,c);if(goog.isArrayLike(a)||goog.isString(a))return goog.array.some(a,b,c);for(var d=goog.structs.getKeys(a),e=goog.structs.getValues(a),f=e.length,g=0;g<f;g++)if(b.call(c,e[g],d&&d[g],a))return!0;return!1};
		goog.structs.every=function(a,b,c){if("function"==typeof a.every)return a.every(b,c);if(goog.isArrayLike(a)||goog.isString(a))return goog.array.every(a,b,c);for(var d=goog.structs.getKeys(a),e=goog.structs.getValues(a),f=e.length,g=0;g<f;g++)if(!b.call(c,e[g],d&&d[g],a))return!1;return!0};goog.structs.Collection=function(){};goog.structs.Map=function(a,b){this.map_={};this.keys_=[];this.version_=this.count_=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else a&&this.addAll(a)};goog.structs.Map.prototype.getCount=function(){return this.count_};goog.structs.Map.prototype.getValues=function(){this.cleanupKeysArray_();for(var a=[],b=0;b<this.keys_.length;b++)a.push(this.map_[this.keys_[b]]);return a};
		goog.structs.Map.prototype.getKeys=function(){this.cleanupKeysArray_();return this.keys_.concat()};goog.structs.Map.prototype.containsKey=function(a){return goog.structs.Map.hasKey_(this.map_,a)};goog.structs.Map.prototype.containsValue=function(a){for(var b=0;b<this.keys_.length;b++){var c=this.keys_[b];if(goog.structs.Map.hasKey_(this.map_,c)&&this.map_[c]==a)return!0}return!1};
		goog.structs.Map.prototype.equals=function(a,b){if(this===a)return!0;if(this.count_!=a.getCount())return!1;var c=b||goog.structs.Map.defaultEquals;this.cleanupKeysArray_();for(var d,e=0;d=this.keys_[e];e++)if(!c(this.get(d),a.get(d)))return!1;return!0};goog.structs.Map.defaultEquals=function(a,b){return a===b};goog.structs.Map.prototype.isEmpty=function(){return 0==this.count_};goog.structs.Map.prototype.clear=function(){this.map_={};this.version_=this.count_=this.keys_.length=0};
		goog.structs.Map.prototype.remove=function(a){return goog.structs.Map.hasKey_(this.map_,a)?(delete this.map_[a],this.count_--,this.version_++,this.keys_.length>2*this.count_&&this.cleanupKeysArray_(),!0):!1};
		goog.structs.Map.prototype.cleanupKeysArray_=function(){if(this.count_!=this.keys_.length){for(var a=0,b=0;a<this.keys_.length;){var c=this.keys_[a];goog.structs.Map.hasKey_(this.map_,c)&&(this.keys_[b++]=c);a++}this.keys_.length=b}if(this.count_!=this.keys_.length){for(var d={},b=a=0;a<this.keys_.length;)c=this.keys_[a],goog.structs.Map.hasKey_(d,c)||(this.keys_[b++]=c,d[c]=1),a++;this.keys_.length=b}};
		goog.structs.Map.prototype.get=function(a,b){return goog.structs.Map.hasKey_(this.map_,a)?this.map_[a]:b};goog.structs.Map.prototype.set=function(a,b){goog.structs.Map.hasKey_(this.map_,a)||(this.count_++,this.keys_.push(a),this.version_++);this.map_[a]=b};goog.structs.Map.prototype.addAll=function(a){var b;a instanceof goog.structs.Map?(b=a.getKeys(),a=a.getValues()):(b=goog.object.getKeys(a),a=goog.object.getValues(a));for(var c=0;c<b.length;c++)this.set(b[c],a[c])};
		goog.structs.Map.prototype.forEach=function(a,b){for(var c=this.getKeys(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};goog.structs.Map.prototype.clone=function(){return new goog.structs.Map(this)};goog.structs.Map.prototype.transpose=function(){for(var a=new goog.structs.Map,b=0;b<this.keys_.length;b++){var c=this.keys_[b];a.set(this.map_[c],c)}return a};
		goog.structs.Map.prototype.toObject=function(){this.cleanupKeysArray_();for(var a={},b=0;b<this.keys_.length;b++){var c=this.keys_[b];a[c]=this.map_[c]}return a};goog.structs.Map.prototype.getKeyIterator=function(){return this.__iterator__(!0)};goog.structs.Map.prototype.getValueIterator=function(){return this.__iterator__(!1)};
		goog.structs.Map.prototype.__iterator__=function(a){this.cleanupKeysArray_();var b=0,c=this.version_,d=this,e=new goog.iter.Iterator;e.next=function(){if(c!=d.version_)throw Error("The map has changed since the iterator was created");if(b>=d.keys_.length)throw goog.iter.StopIteration;var e=d.keys_[b++];return a?e:d.map_[e]};return e};goog.structs.Map.hasKey_=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)};goog.structs.Set=function(a){this.map_=new goog.structs.Map;a&&this.addAll(a)};goog.structs.Set.getKey_=function(a){var b=typeof a;return"object"==b&&a||"function"==b?"o"+goog.getUid(a):b.substr(0,1)+a};goog.structs.Set.prototype.getCount=function(){return this.map_.getCount()};goog.structs.Set.prototype.add=function(a){this.map_.set(goog.structs.Set.getKey_(a),a)};goog.structs.Set.prototype.addAll=function(a){a=goog.structs.getValues(a);for(var b=a.length,c=0;c<b;c++)this.add(a[c])};
		goog.structs.Set.prototype.removeAll=function(a){a=goog.structs.getValues(a);for(var b=a.length,c=0;c<b;c++)this.remove(a[c])};goog.structs.Set.prototype.remove=function(a){return this.map_.remove(goog.structs.Set.getKey_(a))};goog.structs.Set.prototype.clear=function(){this.map_.clear()};goog.structs.Set.prototype.isEmpty=function(){return this.map_.isEmpty()};goog.structs.Set.prototype.contains=function(a){return this.map_.containsKey(goog.structs.Set.getKey_(a))};
		goog.structs.Set.prototype.containsAll=function(a){return goog.structs.every(a,this.contains,this)};goog.structs.Set.prototype.intersection=function(a){var b=new goog.structs.Set;a=goog.structs.getValues(a);for(var c=0;c<a.length;c++){var d=a[c];this.contains(d)&&b.add(d)}return b};goog.structs.Set.prototype.difference=function(a){var b=this.clone();b.removeAll(a);return b};goog.structs.Set.prototype.getValues=function(){return this.map_.getValues()};goog.structs.Set.prototype.clone=function(){return new goog.structs.Set(this)};
		goog.structs.Set.prototype.equals=function(a){return this.getCount()==goog.structs.getCount(a)&&this.isSubsetOf(a)};goog.structs.Set.prototype.isSubsetOf=function(a){var b=goog.structs.getCount(a);if(this.getCount()>b)return!1;!(a instanceof goog.structs.Set)&&5<b&&(a=new goog.structs.Set(a));return goog.structs.every(this,function(b){return goog.structs.contains(a,b)})};goog.structs.Set.prototype.__iterator__=function(a){return this.map_.__iterator__(!1)};goog.debug.LOGGING_ENABLED=goog.DEBUG;goog.debug.FORCE_SLOPPY_STACKS=!1;goog.debug.catchErrors=function(a,b,c){c=c||goog.global;var d=c.onerror,e=!!b;goog.userAgent.WEBKIT&&!goog.userAgent.isVersionOrHigher("535.3")&&(e=!e);c.onerror=function(b,c,h,k,l){d&&d(b,c,h,k,l);a({message:b,fileName:c,line:h,col:k,error:l});return e}};
		goog.debug.expose=function(a,b){if("undefined"==typeof a)return"undefined";if(null==a)return"NULL";var c=[],d;for(d in a)if(b||!goog.isFunction(a[d])){var e=d+" = ";try{e+=a[d]}catch(f){e+="*** "+f+" ***"}c.push(e)}return c.join("\n")};
		goog.debug.deepExpose=function(a,b){var c=[],d=function(a,f,g){var e=f+"  ";g=new goog.structs.Set(g);try{if(goog.isDef(a))if(goog.isNull(a))c.push("NULL");else if(goog.isString(a))c.push('"'+a.replace(/\n/g,"\n"+f)+'"');else if(goog.isFunction(a))c.push(String(a).replace(/\n/g,"\n"+f));else if(goog.isObject(a))if(g.contains(a))c.push("*** reference loop detected ***");else{g.add(a);c.push("{");for(var k in a)if(b||!goog.isFunction(a[k]))c.push("\n"),c.push(e),c.push(k+" = "),d(a[k],e,g);c.push("\n"+
		f+"}")}else c.push(a);else c.push("undefined")}catch(l){c.push("*** "+l+" ***")}};d(a,"",new goog.structs.Set);return c.join("")};goog.debug.exposeArray=function(a){for(var b=[],c=0;c<a.length;c++)goog.isArray(a[c])?b.push(goog.debug.exposeArray(a[c])):b.push(a[c]);return"[ "+b.join(", ")+" ]"};goog.debug.exposeException=function(a,b){var c=goog.debug.exposeExceptionAsHtml(a,b);return goog.html.SafeHtml.unwrap(c)};
		goog.debug.exposeExceptionAsHtml=function(a,b){try{var c=goog.debug.normalizeErrorObject(a),d=goog.debug.createViewSourceUrl_(c.fileName);return goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: "+c.message+"\nUrl: "),goog.html.SafeHtml.create("a",{href:d,target:"_new"},c.fileName),goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: "+c.lineNumber+"\n\nBrowser stack:\n"+c.stack+"-> [end]\n\nJS stack traversal:\n"+goog.debug.getStacktrace(b)+
		"-> "))}catch(e){return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. "+e)}};
		goog.debug.createViewSourceUrl_=function(a){goog.isDefAndNotNull(a)||(a="");if(!/^https?:\/\//i.test(a))return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));a=goog.html.SafeUrl.sanitize(a);return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"),"view-source:"+goog.html.SafeUrl.unwrap(a))};
		goog.debug.normalizeErrorObject=function(a){var b=goog.getObjectByName("window.location.href");if(goog.isString(a))return{message:a,name:"Unknown error",lineNumber:"Not available",fileName:b,stack:"Not available"};var c,d,e=!1;try{c=a.lineNumber||a.line||"Not available"}catch(f){c="Not available",e=!0}try{d=a.fileName||a.filename||a.sourceURL||goog.global.$googDebugFname||b}catch(f){d="Not available",e=!0}return!e&&a.lineNumber&&a.fileName&&a.stack&&a.message&&a.name?a:{message:a.message||"Not available",
		name:a.name||"UnknownError",lineNumber:c,fileName:d,stack:a.stack||"Not available"}};goog.debug.enhanceError=function(a,b){var c;a instanceof Error?c=a:(c=Error(a),Error.captureStackTrace&&Error.captureStackTrace(c,goog.debug.enhanceError));c.stack||(c.stack=goog.debug.getStacktrace(goog.debug.enhanceError));if(b){for(var d=0;c["message"+d];)++d;c["message"+d]=String(b)}return c};
		goog.debug.getStacktraceSimple=function(a){if(!goog.debug.FORCE_SLOPPY_STACKS){var b=goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);if(b)return b}for(var b=[],c=arguments.callee.caller,d=0;c&&(!a||d<a);){b.push(goog.debug.getFunctionName(c));b.push("()\n");try{c=c.caller}catch(e){b.push("[exception trying to get caller]\n");break}d++;if(d>=goog.debug.MAX_STACK_DEPTH){b.push("[...long stack...]");break}}a&&d>=a?b.push("[...reached max depth limit...]"):b.push("[end]");return b.join("")};
		goog.debug.MAX_STACK_DEPTH=50;goog.debug.getNativeStackTrace_=function(a){var b=Error();if(Error.captureStackTrace)return Error.captureStackTrace(b,a),String(b.stack);try{throw b;}catch(c){b=c}return(a=b.stack)?String(a):null};goog.debug.getStacktrace=function(a){var b;goog.debug.FORCE_SLOPPY_STACKS||(b=goog.debug.getNativeStackTrace_(a||goog.debug.getStacktrace));b||(b=goog.debug.getStacktraceHelper_(a||arguments.callee.caller,[]));return b};
		goog.debug.getStacktraceHelper_=function(a,b){var c=[];if(goog.array.contains(b,a))c.push("[...circular reference...]");else if(a&&b.length<goog.debug.MAX_STACK_DEPTH){c.push(goog.debug.getFunctionName(a)+"(");for(var d=a.arguments,e=0;d&&e<d.length;e++){0<e&&c.push(", ");var f;f=d[e];switch(typeof f){case "object":f=f?"object":"null";break;case "string":break;case "number":f=String(f);break;case "boolean":f=f?"true":"false";break;case "function":f=(f=goog.debug.getFunctionName(f))?f:"[fn]";break;
		default:f=typeof f}40<f.length&&(f=f.substr(0,40)+"...");c.push(f)}b.push(a);c.push(")\n");try{c.push(goog.debug.getStacktraceHelper_(a.caller,b))}catch(g){c.push("[exception trying to get caller]\n")}}else a?c.push("[...long stack...]"):c.push("[end]");return c.join("")};goog.debug.setFunctionResolver=function(a){goog.debug.fnNameResolver_=a};
		goog.debug.getFunctionName=function(a){if(goog.debug.fnNameCache_[a])return goog.debug.fnNameCache_[a];if(goog.debug.fnNameResolver_){var b=goog.debug.fnNameResolver_(a);if(b)return goog.debug.fnNameCache_[a]=b}a=String(a);goog.debug.fnNameCache_[a]||(b=/function ([^\(]+)/.exec(a),goog.debug.fnNameCache_[a]=b?b[1]:"[Anonymous]");return goog.debug.fnNameCache_[a]};
		goog.debug.makeWhitespaceVisible=function(a){return a.replace(/ /g,"[_]").replace(/\f/g,"[f]").replace(/\n/g,"[n]\n").replace(/\r/g,"[r]").replace(/\t/g,"[t]")};goog.debug.runtimeType=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":typeof a};goog.debug.fnNameCache_={};goog.debug.LogRecord=function(a,b,c,d,e){this.reset(a,b,c,d,e)};goog.debug.LogRecord.prototype.sequenceNumber_=0;goog.debug.LogRecord.prototype.exception_=null;goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS=!0;goog.debug.LogRecord.nextSequenceNumber_=0;
		goog.debug.LogRecord.prototype.reset=function(a,b,c,d,e){goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS&&(this.sequenceNumber_="number"==typeof e?e:goog.debug.LogRecord.nextSequenceNumber_++);this.time_=d||goog.now();this.level_=a;this.msg_=b;this.loggerName_=c;delete this.exception_};goog.debug.LogRecord.prototype.getLoggerName=function(){return this.loggerName_};goog.debug.LogRecord.prototype.getException=function(){return this.exception_};
		goog.debug.LogRecord.prototype.setException=function(a){this.exception_=a};goog.debug.LogRecord.prototype.setLoggerName=function(a){this.loggerName_=a};goog.debug.LogRecord.prototype.getLevel=function(){return this.level_};goog.debug.LogRecord.prototype.setLevel=function(a){this.level_=a};goog.debug.LogRecord.prototype.getMessage=function(){return this.msg_};goog.debug.LogRecord.prototype.setMessage=function(a){this.msg_=a};goog.debug.LogRecord.prototype.getMillis=function(){return this.time_};
		goog.debug.LogRecord.prototype.setMillis=function(a){this.time_=a};goog.debug.LogRecord.prototype.getSequenceNumber=function(){return this.sequenceNumber_};goog.debug.LogBuffer=function(){goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(),"Cannot use goog.debug.LogBuffer without defining goog.debug.LogBuffer.CAPACITY.");this.clear()};goog.debug.LogBuffer.getInstance=function(){goog.debug.LogBuffer.instance_||(goog.debug.LogBuffer.instance_=new goog.debug.LogBuffer);return goog.debug.LogBuffer.instance_};goog.debug.LogBuffer.CAPACITY=0;
		goog.debug.LogBuffer.prototype.addRecord=function(a,b,c){var d=(this.curIndex_+1)%goog.debug.LogBuffer.CAPACITY;this.curIndex_=d;if(this.isFull_)return d=this.buffer_[d],d.reset(a,b,c),d;this.isFull_=d==goog.debug.LogBuffer.CAPACITY-1;return this.buffer_[d]=new goog.debug.LogRecord(a,b,c)};goog.debug.LogBuffer.isBufferingEnabled=function(){return 0<goog.debug.LogBuffer.CAPACITY};
		goog.debug.LogBuffer.prototype.clear=function(){this.buffer_=Array(goog.debug.LogBuffer.CAPACITY);this.curIndex_=-1;this.isFull_=!1};goog.debug.LogBuffer.prototype.forEachRecord=function(a){var b=this.buffer_;if(b[0]){var c=this.curIndex_,d=this.isFull_?c:-1;do d=(d+1)%goog.debug.LogBuffer.CAPACITY,a(b[d]);while(d!=c)}};goog.debug.Logger=function(a){this.name_=a;this.handlers_=this.children_=this.level_=this.parent_=null};goog.debug.Logger.ROOT_LOGGER_NAME="";goog.debug.Logger.ENABLE_HIERARCHY=!0;goog.debug.Logger.ENABLE_HIERARCHY||(goog.debug.Logger.rootHandlers_=[]);goog.debug.Logger.Level=function(a,b){this.name=a;this.value=b};goog.debug.Logger.Level.prototype.toString=function(){return this.name};goog.debug.Logger.Level.OFF=new goog.debug.Logger.Level("OFF",Infinity);
		goog.debug.Logger.Level.SHOUT=new goog.debug.Logger.Level("SHOUT",1200);goog.debug.Logger.Level.SEVERE=new goog.debug.Logger.Level("SEVERE",1E3);goog.debug.Logger.Level.WARNING=new goog.debug.Logger.Level("WARNING",900);goog.debug.Logger.Level.INFO=new goog.debug.Logger.Level("INFO",800);goog.debug.Logger.Level.CONFIG=new goog.debug.Logger.Level("CONFIG",700);goog.debug.Logger.Level.FINE=new goog.debug.Logger.Level("FINE",500);goog.debug.Logger.Level.FINER=new goog.debug.Logger.Level("FINER",400);
		goog.debug.Logger.Level.FINEST=new goog.debug.Logger.Level("FINEST",300);goog.debug.Logger.Level.ALL=new goog.debug.Logger.Level("ALL",0);goog.debug.Logger.Level.PREDEFINED_LEVELS=[goog.debug.Logger.Level.OFF,goog.debug.Logger.Level.SHOUT,goog.debug.Logger.Level.SEVERE,goog.debug.Logger.Level.WARNING,goog.debug.Logger.Level.INFO,goog.debug.Logger.Level.CONFIG,goog.debug.Logger.Level.FINE,goog.debug.Logger.Level.FINER,goog.debug.Logger.Level.FINEST,goog.debug.Logger.Level.ALL];
		goog.debug.Logger.Level.predefinedLevelsCache_=null;goog.debug.Logger.Level.createPredefinedLevelsCache_=function(){goog.debug.Logger.Level.predefinedLevelsCache_={};for(var a=0,b;b=goog.debug.Logger.Level.PREDEFINED_LEVELS[a];a++)goog.debug.Logger.Level.predefinedLevelsCache_[b.value]=b,goog.debug.Logger.Level.predefinedLevelsCache_[b.name]=b};
		goog.debug.Logger.Level.getPredefinedLevel=function(a){goog.debug.Logger.Level.predefinedLevelsCache_||goog.debug.Logger.Level.createPredefinedLevelsCache_();return goog.debug.Logger.Level.predefinedLevelsCache_[a]||null};
		goog.debug.Logger.Level.getPredefinedLevelByValue=function(a){goog.debug.Logger.Level.predefinedLevelsCache_||goog.debug.Logger.Level.createPredefinedLevelsCache_();if(a in goog.debug.Logger.Level.predefinedLevelsCache_)return goog.debug.Logger.Level.predefinedLevelsCache_[a];for(var b=0;b<goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++b){var c=goog.debug.Logger.Level.PREDEFINED_LEVELS[b];if(c.value<=a)return c}return null};goog.debug.Logger.getLogger=function(a){return goog.debug.LogManager.getLogger(a)};
		goog.debug.Logger.logToProfilers=function(a){goog.global.console&&(goog.global.console.timeStamp?goog.global.console.timeStamp(a):goog.global.console.markTimeline&&goog.global.console.markTimeline(a));goog.global.msWriteProfilerMark&&goog.global.msWriteProfilerMark(a)};goog.debug.Logger.prototype.getName=function(){return this.name_};
		goog.debug.Logger.prototype.addHandler=function(a){goog.debug.LOGGING_ENABLED&&(goog.debug.Logger.ENABLE_HIERARCHY?(this.handlers_||(this.handlers_=[]),this.handlers_.push(a)):(goog.asserts.assert(!this.name_,"Cannot call addHandler on a non-root logger when goog.debug.Logger.ENABLE_HIERARCHY is false."),goog.debug.Logger.rootHandlers_.push(a)))};
		goog.debug.Logger.prototype.removeHandler=function(a){if(goog.debug.LOGGING_ENABLED){var b=goog.debug.Logger.ENABLE_HIERARCHY?this.handlers_:goog.debug.Logger.rootHandlers_;return!!b&&goog.array.remove(b,a)}return!1};goog.debug.Logger.prototype.getParent=function(){return this.parent_};goog.debug.Logger.prototype.getChildren=function(){this.children_||(this.children_={});return this.children_};
		goog.debug.Logger.prototype.setLevel=function(a){goog.debug.LOGGING_ENABLED&&(goog.debug.Logger.ENABLE_HIERARCHY?this.level_=a:(goog.asserts.assert(!this.name_,"Cannot call setLevel() on a non-root logger when goog.debug.Logger.ENABLE_HIERARCHY is false."),goog.debug.Logger.rootLevel_=a))};goog.debug.Logger.prototype.getLevel=function(){return goog.debug.LOGGING_ENABLED?this.level_:goog.debug.Logger.Level.OFF};
		goog.debug.Logger.prototype.getEffectiveLevel=function(){if(!goog.debug.LOGGING_ENABLED)return goog.debug.Logger.Level.OFF;if(!goog.debug.Logger.ENABLE_HIERARCHY)return goog.debug.Logger.rootLevel_;if(this.level_)return this.level_;if(this.parent_)return this.parent_.getEffectiveLevel();goog.asserts.fail("Root logger has no level set.");return null};goog.debug.Logger.prototype.isLoggable=function(a){return goog.debug.LOGGING_ENABLED&&a.value>=this.getEffectiveLevel().value};
		goog.debug.Logger.prototype.log=function(a,b,c){goog.debug.LOGGING_ENABLED&&this.isLoggable(a)&&(goog.isFunction(b)&&(b=b()),this.doLogRecord_(this.getLogRecord(a,b,c)))};goog.debug.Logger.prototype.getLogRecord=function(a,b,c){a=goog.debug.LogBuffer.isBufferingEnabled()?goog.debug.LogBuffer.getInstance().addRecord(a,b,this.name_):new goog.debug.LogRecord(a,String(b),this.name_);c&&a.setException(c);return a};
		goog.debug.Logger.prototype.shout=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.SHOUT,a,b)};goog.debug.Logger.prototype.severe=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.SEVERE,a,b)};goog.debug.Logger.prototype.warning=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.WARNING,a,b)};goog.debug.Logger.prototype.info=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.INFO,a,b)};
		goog.debug.Logger.prototype.config=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.CONFIG,a,b)};goog.debug.Logger.prototype.fine=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.FINE,a,b)};goog.debug.Logger.prototype.finer=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.FINER,a,b)};goog.debug.Logger.prototype.finest=function(a,b){goog.debug.LOGGING_ENABLED&&this.log(goog.debug.Logger.Level.FINEST,a,b)};
		goog.debug.Logger.prototype.logRecord=function(a){goog.debug.LOGGING_ENABLED&&this.isLoggable(a.getLevel())&&this.doLogRecord_(a)};goog.debug.Logger.prototype.doLogRecord_=function(a){goog.debug.Logger.logToProfilers("log:"+a.getMessage());if(goog.debug.Logger.ENABLE_HIERARCHY)for(var b=this;b;)b.callPublish_(a),b=b.getParent();else for(var b=0,c;c=goog.debug.Logger.rootHandlers_[b++];)c(a)};goog.debug.Logger.prototype.callPublish_=function(a){if(this.handlers_)for(var b=0,c;c=this.handlers_[b];b++)c(a)};
		goog.debug.Logger.prototype.setParent_=function(a){this.parent_=a};goog.debug.Logger.prototype.addChild_=function(a,b){this.getChildren()[a]=b};goog.debug.LogManager={};goog.debug.LogManager.loggers_={};goog.debug.LogManager.rootLogger_=null;
		goog.debug.LogManager.initialize=function(){goog.debug.LogManager.rootLogger_||(goog.debug.LogManager.rootLogger_=new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME),goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME]=goog.debug.LogManager.rootLogger_,goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG))};goog.debug.LogManager.getLoggers=function(){return goog.debug.LogManager.loggers_};
		goog.debug.LogManager.getRoot=function(){goog.debug.LogManager.initialize();return goog.debug.LogManager.rootLogger_};goog.debug.LogManager.getLogger=function(a){goog.debug.LogManager.initialize();return goog.debug.LogManager.loggers_[a]||goog.debug.LogManager.createLogger_(a)};goog.debug.LogManager.createFunctionForCatchErrors=function(a){return function(b){(a||goog.debug.LogManager.getRoot()).severe("Error: "+b.message+" ("+b.fileName+" @ Line: "+b.line+")")}};
		goog.debug.LogManager.createLogger_=function(a){var b=new goog.debug.Logger(a);if(goog.debug.Logger.ENABLE_HIERARCHY){var c=a.lastIndexOf("."),d=a.substr(0,c),c=a.substr(c+1),d=goog.debug.LogManager.getLogger(d);d.addChild_(c,b);b.setParent_(d)}return goog.debug.LogManager.loggers_[a]=b};goog.log={};goog.log.ENABLED=goog.debug.LOGGING_ENABLED;goog.log.ROOT_LOGGER_NAME=goog.debug.Logger.ROOT_LOGGER_NAME;goog.log.Logger=goog.debug.Logger;goog.log.Level=goog.debug.Logger.Level;goog.log.LogRecord=goog.debug.LogRecord;goog.log.getLogger=function(a,b){if(goog.log.ENABLED){var c=goog.debug.LogManager.getLogger(a);b&&c&&c.setLevel(b);return c}return null};goog.log.addHandler=function(a,b){goog.log.ENABLED&&a&&a.addHandler(b)};
		goog.log.removeHandler=function(a,b){return goog.log.ENABLED&&a?a.removeHandler(b):!1};goog.log.log=function(a,b,c,d){goog.log.ENABLED&&a&&a.log(b,c,d)};goog.log.error=function(a,b,c){goog.log.ENABLED&&a&&a.severe(b,c)};goog.log.warning=function(a,b,c){goog.log.ENABLED&&a&&a.warning(b,c)};goog.log.info=function(a,b,c){goog.log.ENABLED&&a&&a.info(b,c)};goog.log.fine=function(a,b,c){goog.log.ENABLED&&a&&a.fine(b,c)};goog.Thenable=function(){};goog.Thenable.prototype.then=function(a,b,c){};goog.Thenable.IMPLEMENTED_BY_PROP="$goog_Thenable";goog.Thenable.addImplementation=function(a){a.prototype.then=a.prototype.then;COMPILED?a.prototype[goog.Thenable.IMPLEMENTED_BY_PROP]=!0:a.prototype.$goog_Thenable=!0};goog.Thenable.isImplementedBy=function(a){if(!a)return!1;try{return COMPILED?!!a[goog.Thenable.IMPLEMENTED_BY_PROP]:!!a.$goog_Thenable}catch(b){return!1}};goog.async={};goog.async.FreeList=function(a,b,c){this.limit_=c;this.create_=a;this.reset_=b;this.occupants_=0;this.head_=null};goog.async.FreeList.prototype.get=function(){var a;0<this.occupants_?(this.occupants_--,a=this.head_,this.head_=a.next,a.next=null):a=this.create_();return a};goog.async.FreeList.prototype.put=function(a){this.reset_(a);this.occupants_<this.limit_&&(this.occupants_++,a.next=this.head_,this.head_=a)};goog.async.FreeList.prototype.occupants=function(){return this.occupants_};goog.async.WorkQueue=function(){this.workTail_=this.workHead_=null};goog.async.WorkQueue.DEFAULT_MAX_UNUSED=100;goog.async.WorkQueue.freelist_=new goog.async.FreeList(function(){return new goog.async.WorkItem},function(a){a.reset()},goog.async.WorkQueue.DEFAULT_MAX_UNUSED);goog.async.WorkQueue.prototype.add=function(a,b){var c=this.getUnusedItem_();c.set(a,b);this.workTail_?this.workTail_.next=c:(goog.asserts.assert(!this.workHead_),this.workHead_=c);this.workTail_=c};
		goog.async.WorkQueue.prototype.remove=function(){var a=null;this.workHead_&&(a=this.workHead_,this.workHead_=this.workHead_.next,this.workHead_||(this.workTail_=null),a.next=null);return a};goog.async.WorkQueue.prototype.returnUnused=function(a){goog.async.WorkQueue.freelist_.put(a)};goog.async.WorkQueue.prototype.getUnusedItem_=function(){return goog.async.WorkQueue.freelist_.get()};goog.async.WorkItem=function(){this.next=this.scope=this.fn=null};
		goog.async.WorkItem.prototype.set=function(a,b){this.fn=a;this.scope=b;this.next=null};goog.async.WorkItem.prototype.reset=function(){this.next=this.scope=this.fn=null};goog.async.throwException=function(a){goog.global.setTimeout(function(){throw a;},0)};goog.async.nextTick=function(a,b,c){var d=a;b&&(d=goog.bind(a,b));d=goog.async.nextTick.wrapCallback_(d);goog.isFunction(goog.global.setImmediate)&&(c||goog.async.nextTick.useSetImmediate_())?goog.global.setImmediate(d):(goog.async.nextTick.setImmediate_||(goog.async.nextTick.setImmediate_=goog.async.nextTick.getSetImmediateEmulator_()),goog.async.nextTick.setImmediate_(d))};
		goog.async.nextTick.useSetImmediate_=function(){return goog.global.Window&&goog.global.Window.prototype&&!goog.labs.userAgent.browser.isEdge()&&goog.global.Window.prototype.setImmediate==goog.global.setImmediate?!1:!0};
		goog.async.nextTick.getSetImmediateEmulator_=function(){var a=goog.global.MessageChannel;"undefined"===typeof a&&"undefined"!==typeof window&&window.postMessage&&window.addEventListener&&!goog.labs.userAgent.engine.isPresto()&&(a=function(){var a=document.createElement("IFRAME");a.style.display="none";a.src="";document.documentElement.appendChild(a);var b=a.contentWindow,a=b.document;a.open();a.write("");a.close();var c="callImmediate"+Math.random(),d="file:"==b.location.protocol?"*":b.location.protocol+
		"//"+b.location.host,a=goog.bind(function(a){if(("*"==d||a.origin==d)&&a.data==c)this.port1.onmessage()},this);b.addEventListener("message",a,!1);this.port1={};this.port2={postMessage:function(){b.postMessage(c,d)}}});if("undefined"!==typeof a&&!goog.labs.userAgent.browser.isIE()){var b=new a,c={},d=c;b.port1.onmessage=function(){if(goog.isDef(c.next)){c=c.next;var a=c.cb;c.cb=null;a()}};return function(a){d.next={cb:a};d=d.next;b.port2.postMessage(0)}}return"undefined"!==typeof document&&"onreadystatechange"in
		document.createElement("SCRIPT")?function(a){var b=document.createElement("SCRIPT");b.onreadystatechange=function(){b.onreadystatechange=null;b.parentNode.removeChild(b);b=null;a();a=null};document.documentElement.appendChild(b)}:function(a){goog.global.setTimeout(a,0)}};goog.async.nextTick.wrapCallback_=goog.functions.identity;goog.debug.entryPointRegistry.register(function(a){goog.async.nextTick.wrapCallback_=a});goog.async.run=function(a,b){goog.async.run.schedule_||goog.async.run.initializeRunner_();goog.async.run.workQueueScheduled_||(goog.async.run.schedule_(),goog.async.run.workQueueScheduled_=!0);goog.async.run.workQueue_.add(a,b)};goog.async.run.initializeRunner_=function(){var a=goog.global.Promise;if(-1!=String(a).indexOf("[native code]")){var b=a.resolve(void 0);goog.async.run.schedule_=function(){b.then(goog.async.run.processWorkQueue)}}else goog.async.run.schedule_=function(){goog.async.nextTick(goog.async.run.processWorkQueue)}};
		goog.async.run.forceNextTick=function(a){goog.async.run.schedule_=function(){goog.async.nextTick(goog.async.run.processWorkQueue);a&&a(goog.async.run.processWorkQueue)}};goog.async.run.workQueueScheduled_=!1;goog.async.run.workQueue_=new goog.async.WorkQueue;goog.DEBUG&&(goog.async.run.resetQueue=function(){goog.async.run.workQueueScheduled_=!1;goog.async.run.workQueue_=new goog.async.WorkQueue});
		goog.async.run.processWorkQueue=function(){for(var a;a=goog.async.run.workQueue_.remove();){try{a.fn.call(a.scope)}catch(b){goog.async.throwException(b)}goog.async.run.workQueue_.returnUnused(a)}goog.async.run.workQueueScheduled_=!1};goog.promise={};goog.promise.Resolver=function(){};goog.Promise=function(a,b){this.state_=goog.Promise.State_.PENDING;this.result_=void 0;this.callbackEntriesTail_=this.callbackEntries_=this.parent_=null;this.executing_=!1;0<goog.Promise.UNHANDLED_REJECTION_DELAY?this.unhandledRejectionId_=0:0==goog.Promise.UNHANDLED_REJECTION_DELAY&&(this.hadUnhandledRejection_=!1);goog.Promise.LONG_STACK_TRACES&&(this.stack_=[],this.addStackTrace_(Error("created")),this.currentStep_=0);if(a!=goog.nullFunction)try{var c=this;a.call(b,function(a){c.resolve_(goog.Promise.State_.FULFILLED,
		a)},function(a){if(goog.DEBUG&&!(a instanceof goog.Promise.CancellationError))try{if(a instanceof Error)throw a;throw Error("Promise rejected.");}catch(e){}c.resolve_(goog.Promise.State_.REJECTED,a)})}catch(d){this.resolve_(goog.Promise.State_.REJECTED,d)}};goog.Promise.LONG_STACK_TRACES=!1;goog.Promise.UNHANDLED_REJECTION_DELAY=0;goog.Promise.State_={PENDING:0,BLOCKED:1,FULFILLED:2,REJECTED:3};
		goog.Promise.CallbackEntry_=function(){this.next=this.context=this.onRejected=this.onFulfilled=this.child=null;this.always=!1};goog.Promise.CallbackEntry_.prototype.reset=function(){this.context=this.onRejected=this.onFulfilled=this.child=null;this.always=!1};goog.Promise.DEFAULT_MAX_UNUSED=100;goog.Promise.freelist_=new goog.async.FreeList(function(){return new goog.Promise.CallbackEntry_},function(a){a.reset()},goog.Promise.DEFAULT_MAX_UNUSED);
		goog.Promise.getCallbackEntry_=function(a,b,c){var d=goog.Promise.freelist_.get();d.onFulfilled=a;d.onRejected=b;d.context=c;return d};goog.Promise.returnEntry_=function(a){goog.Promise.freelist_.put(a)};goog.Promise.resolve=function(a){if(a instanceof goog.Promise)return a;var b=new goog.Promise(goog.nullFunction);b.resolve_(goog.Promise.State_.FULFILLED,a);return b};goog.Promise.reject=function(a){return new goog.Promise(function(b,c){c(a)})};
		goog.Promise.resolveThen_=function(a,b,c){goog.Promise.maybeThen_(a,b,c,null)||goog.async.run(goog.partial(b,a))};goog.Promise.race=function(a){return new goog.Promise(function(b,c){a.length||b(void 0);for(var d=0,e;d<a.length;d++)e=a[d],goog.Promise.resolveThen_(e,b,c)})};
		goog.Promise.all=function(a){return new goog.Promise(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c){d--;e[a]=c;0==d&&b(e)},g=function(a){c(a)},h=0,k;h<a.length;h++)k=a[h],goog.Promise.resolveThen_(k,goog.partial(f,h),g);else b(e)})};
		goog.Promise.allSettled=function(a){return new goog.Promise(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a,c,f){d--;e[a]=c?{fulfilled:!0,value:f}:{fulfilled:!1,reason:f};0==d&&b(e)},g=0,h;g<a.length;g++)h=a[g],goog.Promise.resolveThen_(h,goog.partial(f,g,!0),goog.partial(f,g,!1));else b(e)})};
		goog.Promise.firstFulfilled=function(a){return new goog.Promise(function(b,c){var d=a.length,e=[];if(d)for(var f=function(a){b(a)},g=function(a,b){d--;e[a]=b;0==d&&c(e)},h=0,k;h<a.length;h++)k=a[h],goog.Promise.resolveThen_(k,f,goog.partial(g,h));else b(void 0)})};goog.Promise.withResolver=function(){var a,b,c=new goog.Promise(function(c,e){a=c;b=e});return new goog.Promise.Resolver_(c,a,b)};
		goog.Promise.prototype.then=function(a,b,c){null!=a&&goog.asserts.assertFunction(a,"opt_onFulfilled should be a function.");null!=b&&goog.asserts.assertFunction(b,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");goog.Promise.LONG_STACK_TRACES&&this.addStackTrace_(Error("then"));return this.addChildPromise_(goog.isFunction(a)?a:null,goog.isFunction(b)?b:null,c)};goog.Thenable.addImplementation(goog.Promise);
		goog.Promise.prototype.thenVoid=function(a,b,c){null!=a&&goog.asserts.assertFunction(a,"opt_onFulfilled should be a function.");null!=b&&goog.asserts.assertFunction(b,"opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");goog.Promise.LONG_STACK_TRACES&&this.addStackTrace_(Error("then"));this.addCallbackEntry_(goog.Promise.getCallbackEntry_(a||goog.nullFunction,b||null,c))};
		goog.Promise.prototype.thenAlways=function(a,b){goog.Promise.LONG_STACK_TRACES&&this.addStackTrace_(Error("thenAlways"));var c=goog.Promise.getCallbackEntry_(a,a,b);c.always=!0;this.addCallbackEntry_(c);return this};goog.Promise.prototype.thenCatch=function(a,b){goog.Promise.LONG_STACK_TRACES&&this.addStackTrace_(Error("thenCatch"));return this.addChildPromise_(null,a,b)};
		goog.Promise.prototype.cancel=function(a){this.state_==goog.Promise.State_.PENDING&&goog.async.run(function(){var b=new goog.Promise.CancellationError(a);this.cancelInternal_(b)},this)};goog.Promise.prototype.cancelInternal_=function(a){this.state_==goog.Promise.State_.PENDING&&(this.parent_?(this.parent_.cancelChild_(this,a),this.parent_=null):this.resolve_(goog.Promise.State_.REJECTED,a))};
		goog.Promise.prototype.cancelChild_=function(a,b){if(this.callbackEntries_){for(var c=0,d=null,e=null,f=this.callbackEntries_;f&&(f.always||(c++,f.child==a&&(d=f),!(d&&1<c)));f=f.next)d||(e=f);d&&(this.state_==goog.Promise.State_.PENDING&&1==c?this.cancelInternal_(b):(e?this.removeEntryAfter_(e):this.popEntry_(),this.executeCallback_(d,goog.Promise.State_.REJECTED,b)))}};
		goog.Promise.prototype.addCallbackEntry_=function(a){this.hasEntry_()||this.state_!=goog.Promise.State_.FULFILLED&&this.state_!=goog.Promise.State_.REJECTED||this.scheduleCallbacks_();this.queueEntry_(a)};
		goog.Promise.prototype.addChildPromise_=function(a,b,c){var d=goog.Promise.getCallbackEntry_(null,null,null);d.child=new goog.Promise(function(e,f){d.onFulfilled=a?function(b){try{var d=a.call(c,b);e(d)}catch(k){f(k)}}:e;d.onRejected=b?function(a){try{var d=b.call(c,a);!goog.isDef(d)&&a instanceof goog.Promise.CancellationError?f(a):e(d)}catch(k){f(k)}}:f});d.child.parent_=this;this.addCallbackEntry_(d);return d.child};
		goog.Promise.prototype.unblockAndFulfill_=function(a){goog.asserts.assert(this.state_==goog.Promise.State_.BLOCKED);this.state_=goog.Promise.State_.PENDING;this.resolve_(goog.Promise.State_.FULFILLED,a)};goog.Promise.prototype.unblockAndReject_=function(a){goog.asserts.assert(this.state_==goog.Promise.State_.BLOCKED);this.state_=goog.Promise.State_.PENDING;this.resolve_(goog.Promise.State_.REJECTED,a)};
		goog.Promise.prototype.resolve_=function(a,b){this.state_==goog.Promise.State_.PENDING&&(this===b&&(a=goog.Promise.State_.REJECTED,b=new TypeError("Promise cannot resolve to itself")),this.state_=goog.Promise.State_.BLOCKED,goog.Promise.maybeThen_(b,this.unblockAndFulfill_,this.unblockAndReject_,this)||(this.result_=b,this.state_=a,this.parent_=null,this.scheduleCallbacks_(),a!=goog.Promise.State_.REJECTED||b instanceof goog.Promise.CancellationError||goog.Promise.addUnhandledRejection_(this,b)))};
		goog.Promise.maybeThen_=function(a,b,c,d){if(a instanceof goog.Promise)return a.thenVoid(b,c,d),!0;if(goog.Thenable.isImplementedBy(a))return a.then(b,c,d),!0;if(goog.isObject(a))try{var e=a.then;if(goog.isFunction(e))return goog.Promise.tryThen_(a,e,b,c,d),!0}catch(f){return c.call(d,f),!0}return!1};goog.Promise.tryThen_=function(a,b,c,d,e){var f=!1,g=function(a){f||(f=!0,c.call(e,a))},h=function(a){f||(f=!0,d.call(e,a))};try{b.call(a,g,h)}catch(k){h(k)}};
		goog.Promise.prototype.scheduleCallbacks_=function(){this.executing_||(this.executing_=!0,goog.async.run(this.executeCallbacks_,this))};goog.Promise.prototype.hasEntry_=function(){return!!this.callbackEntries_};goog.Promise.prototype.queueEntry_=function(a){goog.asserts.assert(null!=a.onFulfilled);this.callbackEntriesTail_?this.callbackEntriesTail_.next=a:this.callbackEntries_=a;this.callbackEntriesTail_=a};
		goog.Promise.prototype.popEntry_=function(){var a=null;this.callbackEntries_&&(a=this.callbackEntries_,this.callbackEntries_=a.next,a.next=null);this.callbackEntries_||(this.callbackEntriesTail_=null);null!=a&&goog.asserts.assert(null!=a.onFulfilled);return a};goog.Promise.prototype.removeEntryAfter_=function(a){goog.asserts.assert(this.callbackEntries_);goog.asserts.assert(null!=a);a.next==this.callbackEntriesTail_&&(this.callbackEntriesTail_=a);a.next=a.next.next};
		goog.Promise.prototype.executeCallbacks_=function(){for(var a;a=this.popEntry_();)goog.Promise.LONG_STACK_TRACES&&this.currentStep_++,this.executeCallback_(a,this.state_,this.result_);this.executing_=!1};
		goog.Promise.prototype.executeCallback_=function(a,b,c){b==goog.Promise.State_.REJECTED&&a.onRejected&&!a.always&&this.removeUnhandledRejection_();if(a.child)a.child.parent_=null,goog.Promise.invokeCallback_(a,b,c);else try{a.always?a.onFulfilled.call(a.context):goog.Promise.invokeCallback_(a,b,c)}catch(d){goog.Promise.handleRejection_.call(null,d)}goog.Promise.returnEntry_(a)};
		goog.Promise.invokeCallback_=function(a,b,c){b==goog.Promise.State_.FULFILLED?a.onFulfilled.call(a.context,c):a.onRejected&&a.onRejected.call(a.context,c)};goog.Promise.prototype.addStackTrace_=function(a){if(goog.Promise.LONG_STACK_TRACES&&goog.isString(a.stack)){var b=a.stack.split("\n",4)[3];a=a.message;a+=Array(11-a.length).join(" ");this.stack_.push(a+b)}};
		goog.Promise.prototype.appendLongStack_=function(a){if(goog.Promise.LONG_STACK_TRACES&&a&&goog.isString(a.stack)&&this.stack_.length){for(var b=["Promise trace:"],c=this;c;c=c.parent_){for(var d=this.currentStep_;0<=d;d--)b.push(c.stack_[d]);b.push("Value: ["+(c.state_==goog.Promise.State_.REJECTED?"REJECTED":"FULFILLED")+"] <"+String(c.result_)+">")}a.stack+="\n\n"+b.join("\n")}};
		goog.Promise.prototype.removeUnhandledRejection_=function(){if(0<goog.Promise.UNHANDLED_REJECTION_DELAY)for(var a=this;a&&a.unhandledRejectionId_;a=a.parent_)goog.global.clearTimeout(a.unhandledRejectionId_),a.unhandledRejectionId_=0;else if(0==goog.Promise.UNHANDLED_REJECTION_DELAY)for(a=this;a&&a.hadUnhandledRejection_;a=a.parent_)a.hadUnhandledRejection_=!1};
		goog.Promise.addUnhandledRejection_=function(a,b){0<goog.Promise.UNHANDLED_REJECTION_DELAY?a.unhandledRejectionId_=goog.global.setTimeout(function(){a.appendLongStack_(b);goog.Promise.handleRejection_.call(null,b)},goog.Promise.UNHANDLED_REJECTION_DELAY):0==goog.Promise.UNHANDLED_REJECTION_DELAY&&(a.hadUnhandledRejection_=!0,goog.async.run(function(){a.hadUnhandledRejection_&&(a.appendLongStack_(b),goog.Promise.handleRejection_.call(null,b))}))};goog.Promise.handleRejection_=goog.async.throwException;
		goog.Promise.setUnhandledRejectionHandler=function(a){goog.Promise.handleRejection_=a};goog.Promise.CancellationError=function(a){goog.debug.Error.call(this,a)};goog.inherits(goog.Promise.CancellationError,goog.debug.Error);goog.Promise.CancellationError.prototype.name="cancel";goog.Promise.Resolver_=function(a,b,c){this.promise=a;this.resolve=b;this.reject=c};goog.Timer=function(a,b){goog.events.EventTarget.call(this);this.interval_=a||1;this.timerObject_=b||goog.Timer.defaultTimerObject;this.boundTick_=goog.bind(this.tick_,this);this.last_=goog.now()};goog.inherits(goog.Timer,goog.events.EventTarget);goog.Timer.MAX_TIMEOUT_=2147483647;goog.Timer.INVALID_TIMEOUT_ID_=-1;goog.Timer.prototype.enabled=!1;goog.Timer.defaultTimerObject=goog.global;goog.Timer.intervalScale=.8;goog.Timer.prototype.timer_=null;goog.Timer.prototype.getInterval=function(){return this.interval_};
		goog.Timer.prototype.setInterval=function(a){this.interval_=a;this.timer_&&this.enabled?(this.stop(),this.start()):this.timer_&&this.stop()};
		goog.Timer.prototype.tick_=function(){if(this.enabled){var a=goog.now()-this.last_;0<a&&a<this.interval_*goog.Timer.intervalScale?this.timer_=this.timerObject_.setTimeout(this.boundTick_,this.interval_-a):(this.timer_&&(this.timerObject_.clearTimeout(this.timer_),this.timer_=null),this.dispatchTick(),this.enabled&&(this.timer_=this.timerObject_.setTimeout(this.boundTick_,this.interval_),this.last_=goog.now()))}};goog.Timer.prototype.dispatchTick=function(){this.dispatchEvent(goog.Timer.TICK)};
		goog.Timer.prototype.start=function(){this.enabled=!0;this.timer_||(this.timer_=this.timerObject_.setTimeout(this.boundTick_,this.interval_),this.last_=goog.now())};goog.Timer.prototype.stop=function(){this.enabled=!1;this.timer_&&(this.timerObject_.clearTimeout(this.timer_),this.timer_=null)};goog.Timer.prototype.disposeInternal=function(){goog.Timer.superClass_.disposeInternal.call(this);this.stop();delete this.timerObject_};goog.Timer.TICK="tick";
		goog.Timer.callOnce=function(a,b,c){if(goog.isFunction(a))c&&(a=goog.bind(a,c));else if(a&&"function"==typeof a.handleEvent)a=goog.bind(a.handleEvent,a);else throw Error("Invalid listener argument");return Number(b)>goog.Timer.MAX_TIMEOUT_?goog.Timer.INVALID_TIMEOUT_ID_:goog.Timer.defaultTimerObject.setTimeout(a,b||0)};goog.Timer.clear=function(a){goog.Timer.defaultTimerObject.clearTimeout(a)};
		goog.Timer.promise=function(a,b){var c=null;return(new goog.Promise(function(d,e){c=goog.Timer.callOnce(function(){d(b)},a);c==goog.Timer.INVALID_TIMEOUT_ID_&&e(Error("Failed to schedule timer."))})).thenCatch(function(a){goog.Timer.clear(c);throw a;})};goog.string.StringBuffer=function(a,b){null!=a&&this.append.apply(this,arguments)};goog.string.StringBuffer.prototype.buffer_="";goog.string.StringBuffer.prototype.set=function(a){this.buffer_=""+a};goog.string.StringBuffer.prototype.append=function(a,b,c){this.buffer_+=String(a);if(null!=b)for(var d=1;d<arguments.length;d++)this.buffer_+=arguments[d];return this};goog.string.StringBuffer.prototype.clear=function(){this.buffer_=""};goog.string.StringBuffer.prototype.getLength=function(){return this.buffer_.length};
		goog.string.StringBuffer.prototype.toString=function(){return this.buffer_};goog.ui.tree={};goog.ui.tree.BaseNode=function(a,b,c){goog.ui.Component.call(this,c);this.config_=b||goog.ui.tree.BaseNode.defaultConfig;this.html_=goog.html.SafeHtml.htmlEscapePreservingNewlines(a);this.expanded_=this.selected_=!1;this.toolTip_=null;this.afterLabelHtml_=goog.html.SafeHtml.EMPTY;this.isUserCollapsible_=!0;this.depth_=-1};goog.inherits(goog.ui.tree.BaseNode,goog.ui.Component);
		goog.ui.tree.BaseNode.EventType={BEFORE_EXPAND:"beforeexpand",EXPAND:"expand",BEFORE_COLLAPSE:"beforecollapse",COLLAPSE:"collapse"};goog.ui.tree.BaseNode.allNodes={};goog.ui.tree.BaseNode.prototype.disposeInternal=function(){goog.ui.tree.BaseNode.superClass_.disposeInternal.call(this);this.tree&&(this.tree.removeNode(this),this.tree=null);this.setElementInternal(null)};
		goog.ui.tree.BaseNode.prototype.initAccessibility=function(){var a=this.getElement();if(a){var b=this.getLabelElement();b&&!b.id&&(b.id=this.getId()+".label");goog.a11y.aria.setRole(a,"treeitem");goog.a11y.aria.setState(a,"selected",!1);goog.a11y.aria.setState(a,"expanded",!1);goog.a11y.aria.setState(a,"level",this.getDepth());b&&goog.a11y.aria.setState(a,"labelledby",b.id);(a=this.getIconElement())&&goog.a11y.aria.setRole(a,"presentation");(a=this.getExpandIconElement())&&goog.a11y.aria.setRole(a,
		"presentation");if(a=this.getChildrenElement())if(goog.a11y.aria.setRole(a,"group"),a.hasChildNodes())for(a=this.getChildCount(),b=1;b<=a;b++){var c=this.getChildAt(b-1).getElement();goog.asserts.assert(c,"The child element cannot be null");goog.a11y.aria.setState(c,"setsize",a);goog.a11y.aria.setState(c,"posinset",b)}}};goog.ui.tree.BaseNode.prototype.createDom=function(){var a=this.getDomHelper().safeHtmlToNode(this.toSafeHtml());this.setElementInternal(a)};
		goog.ui.tree.BaseNode.prototype.enterDocument=function(){goog.ui.tree.BaseNode.superClass_.enterDocument.call(this);goog.ui.tree.BaseNode.allNodes[this.getId()]=this;this.initAccessibility()};goog.ui.tree.BaseNode.prototype.exitDocument=function(){goog.ui.tree.BaseNode.superClass_.exitDocument.call(this);delete goog.ui.tree.BaseNode.allNodes[this.getId()]};
		goog.ui.tree.BaseNode.prototype.addChildAt=function(a,b,c){goog.asserts.assert(!a.getParent());goog.asserts.assertInstanceof(a,goog.ui.tree.BaseNode);c=this.getChildAt(b-1);var d=this.getChildAt(b);goog.ui.tree.BaseNode.superClass_.addChildAt.call(this,a,b);a.previousSibling_=c;a.nextSibling_=d;c?c.nextSibling_=a:this.firstChild_=a;d?d.previousSibling_=a:this.lastChild_=a;(b=this.getTree())&&a.setTreeInternal(b);a.setDepth_(this.getDepth()+1);if(this.getElement()&&(this.updateExpandIcon(),this.getExpanded())){b=
		this.getChildrenElement();a.getElement()||a.createDom();var e=a.getElement(),f=d&&d.getElement();b.insertBefore(e,f);this.isInDocument()&&a.enterDocument();d||(c?c.updateExpandIcon():(goog.style.setElementShown(b,!0),this.setExpanded(this.getExpanded())))}};goog.ui.tree.BaseNode.prototype.add=function(a,b){goog.asserts.assert(!b||b.getParent()==this,"Can only add nodes before siblings");a.getParent()&&a.getParent().removeChild(a);this.addChildAt(a,b?this.indexOfChild(b):this.getChildCount());return a};
		goog.ui.tree.BaseNode.prototype.removeChild=function(a,b){var c=this.getTree(),d=c?c.getSelectedItem():null;if(d==a||a.contains(d))c.hasFocus()?(this.select(),goog.Timer.callOnce(this.onTimeoutSelect_,10,this)):this.select();goog.ui.tree.BaseNode.superClass_.removeChild.call(this,a);this.lastChild_==a&&(this.lastChild_=a.previousSibling_);this.firstChild_==a&&(this.firstChild_=a.nextSibling_);a.previousSibling_&&(a.previousSibling_.nextSibling_=a.nextSibling_);a.nextSibling_&&(a.nextSibling_.previousSibling_=
		a.previousSibling_);d=a.isLastSibling();a.tree=null;a.depth_=-1;if(c&&(c.removeNode(a),this.isInDocument())){c=this.getChildrenElement();if(a.isInDocument()){var e=a.getElement();c.removeChild(e);a.exitDocument()}d&&(d=this.getLastChild())&&d.updateExpandIcon();this.hasChildren()||(c.style.display="none",this.updateExpandIcon(),this.updateIcon_())}return a};goog.ui.tree.BaseNode.prototype.remove=goog.ui.tree.BaseNode.prototype.removeChild;goog.ui.tree.BaseNode.prototype.onTimeoutSelect_=function(){this.select()};
		goog.ui.tree.BaseNode.prototype.getTree=goog.abstractMethod;goog.ui.tree.BaseNode.prototype.getDepth=function(){var a=this.depth_;0>a&&(a=this.computeDepth_(),this.setDepth_(a));return a};goog.ui.tree.BaseNode.prototype.computeDepth_=function(){var a=this.getParent();return a?a.getDepth()+1:0};
		goog.ui.tree.BaseNode.prototype.setDepth_=function(a){if(a!=this.depth_){this.depth_=a;var b=this.getRowElement();if(b){var c=this.getPixelIndent_()+"px";this.isRightToLeft()?b.style.paddingRight=c:b.style.paddingLeft=c}this.forEachChild(function(b){b.setDepth_(a+1)})}};goog.ui.tree.BaseNode.prototype.contains=function(a){for(;a;){if(a==this)return!0;a=a.getParent()}return!1};goog.ui.tree.BaseNode.EMPTY_CHILDREN_=[];
		goog.ui.tree.BaseNode.prototype.getChildren=function(){var a=[];this.forEachChild(function(b){a.push(b)});return a};goog.ui.tree.BaseNode.prototype.getFirstChild=function(){return this.getChildAt(0)};goog.ui.tree.BaseNode.prototype.getLastChild=function(){return this.getChildAt(this.getChildCount()-1)};goog.ui.tree.BaseNode.prototype.getPreviousSibling=function(){return this.previousSibling_};goog.ui.tree.BaseNode.prototype.getNextSibling=function(){return this.nextSibling_};
		goog.ui.tree.BaseNode.prototype.isLastSibling=function(){return!this.nextSibling_};goog.ui.tree.BaseNode.prototype.isSelected=function(){return this.selected_};goog.ui.tree.BaseNode.prototype.select=function(){var a=this.getTree();a&&a.setSelectedItem(this)};goog.ui.tree.BaseNode.prototype.deselect=goog.nullFunction;
		goog.ui.tree.BaseNode.prototype.setSelectedInternal=function(a){if(this.selected_!=a){this.selected_=a;this.updateRow();var b=this.getElement();b&&(goog.a11y.aria.setState(b,"selected",a),a&&(a=this.getTree().getElement(),goog.asserts.assert(a,"The DOM element for the tree cannot be null"),goog.a11y.aria.setState(a,"activedescendant",this.getId())))}};goog.ui.tree.BaseNode.prototype.getExpanded=function(){return this.expanded_};
		goog.ui.tree.BaseNode.prototype.setExpandedInternal=function(a){this.expanded_=a};
		goog.ui.tree.BaseNode.prototype.setExpanded=function(a){var b=a!=this.expanded_;if(!b||this.dispatchEvent(a?goog.ui.tree.BaseNode.EventType.BEFORE_EXPAND:goog.ui.tree.BaseNode.EventType.BEFORE_COLLAPSE)){var c;this.expanded_=a;c=this.getTree();var d=this.getElement();if(this.hasChildren()){if(!a&&c&&this.contains(c.getSelectedItem())&&this.select(),d){if(c=this.getChildrenElement())if(goog.style.setElementShown(c,a),a&&this.isInDocument()&&!c.hasChildNodes()){var e=[];this.forEachChild(function(a){e.push(a.toSafeHtml())});
		goog.dom.safe.setInnerHtml(c,goog.html.SafeHtml.concat(e));this.forEachChild(function(a){a.enterDocument()})}this.updateExpandIcon()}}else(c=this.getChildrenElement())&&goog.style.setElementShown(c,!1);d&&(this.updateIcon_(),goog.a11y.aria.setState(d,"expanded",a));b&&this.dispatchEvent(a?goog.ui.tree.BaseNode.EventType.EXPAND:goog.ui.tree.BaseNode.EventType.COLLAPSE)}};goog.ui.tree.BaseNode.prototype.toggle=function(){this.setExpanded(!this.getExpanded())};
		goog.ui.tree.BaseNode.prototype.expand=function(){this.setExpanded(!0)};goog.ui.tree.BaseNode.prototype.collapse=function(){this.setExpanded(!1)};goog.ui.tree.BaseNode.prototype.collapseChildren=function(){this.forEachChild(function(a){a.collapseAll()})};goog.ui.tree.BaseNode.prototype.collapseAll=function(){this.collapseChildren();this.collapse()};goog.ui.tree.BaseNode.prototype.expandChildren=function(){this.forEachChild(function(a){a.expandAll()})};
		goog.ui.tree.BaseNode.prototype.expandAll=function(){this.expandChildren();this.expand()};goog.ui.tree.BaseNode.prototype.reveal=function(){var a=this.getParent();a&&(a.setExpanded(!0),a.reveal())};goog.ui.tree.BaseNode.prototype.setIsUserCollapsible=function(a){(this.isUserCollapsible_=a)||this.expand();this.getElement()&&this.updateExpandIcon()};goog.ui.tree.BaseNode.prototype.isUserCollapsible=function(){return this.isUserCollapsible_};
		goog.ui.tree.BaseNode.prototype.toSafeHtml=function(){var a=this.getTree(),b=!a.getShowLines()||a==this.getParent()&&!a.getShowRootLines()?this.config_.cssChildrenNoLines:this.config_.cssChildren,a=this.getExpanded()&&this.hasChildren(),b={"class":b,style:this.getLineStyle()},c=[];a&&this.forEachChild(function(a){c.push(a.toSafeHtml())});a=goog.html.SafeHtml.create("div",b,c);return goog.html.SafeHtml.create("div",{"class":this.config_.cssItem,id:this.getId()},[this.getRowSafeHtml(),a])};
		goog.ui.tree.BaseNode.prototype.getPixelIndent_=function(){return Math.max(0,(this.getDepth()-1)*this.config_.indentWidth)};goog.ui.tree.BaseNode.prototype.getRowSafeHtml=function(){var a={};a["padding-"+(this.isRightToLeft()?"right":"left")]=this.getPixelIndent_()+"px";var a={"class":this.getRowClassName(),style:a},b=[this.getExpandIconSafeHtml(),this.getIconSafeHtml(),this.getLabelSafeHtml()];return goog.html.SafeHtml.create("div",a,b)};
		goog.ui.tree.BaseNode.prototype.getRowClassName=function(){var a;a=this.isSelected()?" "+this.config_.cssSelectedRow:"";return this.config_.cssTreeRow+a};goog.ui.tree.BaseNode.prototype.getLabelSafeHtml=function(){var a=goog.html.SafeHtml.create("span",{"class":this.config_.cssItemLabel,title:this.getToolTip()||null},this.getSafeHtml());return goog.html.SafeHtml.concat(a,goog.html.SafeHtml.create("span",{},this.getAfterLabelSafeHtml()))};goog.ui.tree.BaseNode.prototype.getAfterLabelHtml=function(){return goog.html.SafeHtml.unwrap(this.getAfterLabelSafeHtml())};
		goog.ui.tree.BaseNode.prototype.getAfterLabelSafeHtml=function(){return this.afterLabelHtml_};goog.ui.tree.BaseNode.prototype.setAfterLabelSafeHtml=function(a){this.afterLabelHtml_=a;var b=this.getAfterLabelElement();b&&goog.dom.safe.setInnerHtml(b,a)};goog.ui.tree.BaseNode.prototype.getIconSafeHtml=function(){return goog.html.SafeHtml.create("span",{style:{display:"inline-block"},"class":this.getCalculatedIconClass()})};goog.ui.tree.BaseNode.prototype.getCalculatedIconClass=goog.abstractMethod;
		goog.ui.tree.BaseNode.prototype.getExpandIconSafeHtml=function(){return goog.html.SafeHtml.create("span",{type:"expand",style:{display:"inline-block"},"class":this.getExpandIconClass()})};
		goog.ui.tree.BaseNode.prototype.getExpandIconClass=function(){var a=this.getTree(),b=!a.getShowLines()||a==this.getParent()&&!a.getShowRootLines(),c=this.config_,d=new goog.string.StringBuffer;d.append(c.cssTreeIcon," ",c.cssExpandTreeIcon," ");if(this.hasChildren()){var e=0;a.getShowExpandIcons()&&this.isUserCollapsible_&&(e=this.getExpanded()?2:1);b||(e=this.isLastSibling()?e+4:e+8);switch(e){case 1:d.append(c.cssExpandTreeIconPlus);break;case 2:d.append(c.cssExpandTreeIconMinus);break;case 4:d.append(c.cssExpandTreeIconL);
		break;case 5:d.append(c.cssExpandTreeIconLPlus);break;case 6:d.append(c.cssExpandTreeIconLMinus);break;case 8:d.append(c.cssExpandTreeIconT);break;case 9:d.append(c.cssExpandTreeIconTPlus);break;case 10:d.append(c.cssExpandTreeIconTMinus);break;default:d.append(c.cssExpandTreeIconBlank)}}else b?d.append(c.cssExpandTreeIconBlank):this.isLastSibling()?d.append(c.cssExpandTreeIconL):d.append(c.cssExpandTreeIconT);return d.toString()};
		goog.ui.tree.BaseNode.prototype.getLineStyle=function(){var a=this.getExpanded()&&this.hasChildren();return goog.html.SafeStyle.create({"background-position":this.getBackgroundPosition(),display:a?null:"none"})};goog.ui.tree.BaseNode.prototype.getBackgroundPosition=function(){return(this.isLastSibling()?"-100":(this.getDepth()-1)*this.config_.indentWidth)+"px 0"};
		goog.ui.tree.BaseNode.prototype.getElement=function(){var a=goog.ui.tree.BaseNode.superClass_.getElement.call(this);a||(a=this.getDomHelper().getElement(this.getId()),this.setElementInternal(a));return a};goog.ui.tree.BaseNode.prototype.getRowElement=function(){var a=this.getElement();return a?a.firstChild:null};goog.ui.tree.BaseNode.prototype.getExpandIconElement=function(){var a=this.getRowElement();return a?a.firstChild:null};
		goog.ui.tree.BaseNode.prototype.getIconElement=function(){var a=this.getRowElement();return a?a.childNodes[1]:null};goog.ui.tree.BaseNode.prototype.getLabelElement=function(){var a=this.getRowElement();return a&&a.lastChild?a.lastChild.previousSibling:null};goog.ui.tree.BaseNode.prototype.getAfterLabelElement=function(){var a=this.getRowElement();return a?a.lastChild:null};goog.ui.tree.BaseNode.prototype.getChildrenElement=function(){var a=this.getElement();return a?a.lastChild:null};
		goog.ui.tree.BaseNode.prototype.setIconClass=function(a){this.iconClass_=a;this.isInDocument()&&this.updateIcon_()};goog.ui.tree.BaseNode.prototype.getIconClass=function(){return this.iconClass_};goog.ui.tree.BaseNode.prototype.setExpandedIconClass=function(a){this.expandedIconClass_=a;this.isInDocument()&&this.updateIcon_()};goog.ui.tree.BaseNode.prototype.getExpandedIconClass=function(){return this.expandedIconClass_};goog.ui.tree.BaseNode.prototype.setText=function(a){this.setSafeHtml(goog.html.SafeHtml.htmlEscape(a))};
		goog.ui.tree.BaseNode.prototype.getText=function(){return goog.string.unescapeEntities(goog.html.SafeHtml.unwrap(this.html_))};goog.ui.tree.BaseNode.prototype.setSafeHtml=function(a){this.html_=a;var b=this.getLabelElement();b&&goog.dom.safe.setInnerHtml(b,a);(a=this.getTree())&&a.setNode(this)};goog.ui.tree.BaseNode.prototype.getHtml=function(){return goog.html.SafeHtml.unwrap(this.getSafeHtml())};goog.ui.tree.BaseNode.prototype.getSafeHtml=function(){return this.html_};
		goog.ui.tree.BaseNode.prototype.setToolTip=function(a){this.toolTip_=a;var b=this.getLabelElement();b&&(b.title=a)};goog.ui.tree.BaseNode.prototype.getToolTip=function(){return this.toolTip_};goog.ui.tree.BaseNode.prototype.updateRow=function(){var a=this.getRowElement();a&&(a.className=this.getRowClassName())};
		goog.ui.tree.BaseNode.prototype.updateExpandIcon=function(){var a=this.getExpandIconElement();a&&(a.className=this.getExpandIconClass());if(a=this.getChildrenElement())a.style.backgroundPosition=this.getBackgroundPosition()};goog.ui.tree.BaseNode.prototype.updateIcon_=function(){this.getIconElement().className=this.getCalculatedIconClass()};
		goog.ui.tree.BaseNode.prototype.onMouseDown=function(a){"expand"==a.target.getAttribute("type")&&this.hasChildren()?this.isUserCollapsible_&&this.toggle():(this.select(),this.updateRow())};goog.ui.tree.BaseNode.prototype.onClick_=goog.events.Event.preventDefault;goog.ui.tree.BaseNode.prototype.onDoubleClick_=function(a){"expand"==a.target.getAttribute("type")&&this.hasChildren()||this.isUserCollapsible_&&this.toggle()};
		goog.ui.tree.BaseNode.prototype.onKeyDown=function(a){var b=!0;switch(a.keyCode){case goog.events.KeyCodes.RIGHT:if(a.altKey)break;this.hasChildren()&&(this.getExpanded()?this.getFirstChild().select():this.setExpanded(!0));break;case goog.events.KeyCodes.LEFT:if(a.altKey)break;if(this.hasChildren()&&this.getExpanded()&&this.isUserCollapsible_)this.setExpanded(!1);else{var c=this.getParent(),d=this.getTree();c&&(d.getShowRootNode()||c!=d)&&c.select()}break;case goog.events.KeyCodes.DOWN:(c=this.getNextShownNode())&&
		c.select();break;case goog.events.KeyCodes.UP:(c=this.getPreviousShownNode())&&c.select();break;default:b=!1}b&&(a.preventDefault(),(d=this.getTree())&&d.clearTypeAhead());return b};goog.ui.tree.BaseNode.prototype.getLastShownDescendant=function(){return this.getExpanded()&&this.hasChildren()?this.getLastChild().getLastShownDescendant():this};
		goog.ui.tree.BaseNode.prototype.getNextShownNode=function(){if(this.hasChildren()&&this.getExpanded())return this.getFirstChild();for(var a=this,b;a!=this.getTree();){b=a.getNextSibling();if(null!=b)return b;a=a.getParent()}return null};goog.ui.tree.BaseNode.prototype.getPreviousShownNode=function(){var a=this.getPreviousSibling();if(null!=a)return a.getLastShownDescendant();var a=this.getParent(),b=this.getTree();return!b.getShowRootNode()&&a==b||this==b?null:a};
		goog.ui.tree.BaseNode.prototype.getClientData=goog.ui.tree.BaseNode.prototype.getModel;goog.ui.tree.BaseNode.prototype.setClientData=goog.ui.tree.BaseNode.prototype.setModel;goog.ui.tree.BaseNode.prototype.getConfig=function(){return this.config_};goog.ui.tree.BaseNode.prototype.setTreeInternal=function(a){this.tree!=a&&(this.tree=a,a.setNode(this),this.forEachChild(function(b){b.setTreeInternal(a)}))};
		goog.ui.tree.BaseNode.defaultConfig={indentWidth:19,cssRoot:"goog-tree-root goog-tree-item",cssHideRoot:"goog-tree-hide-root",cssItem:"goog-tree-item",cssChildren:"goog-tree-children",cssChildrenNoLines:"goog-tree-children-nolines",cssTreeRow:"goog-tree-row",cssItemLabel:"goog-tree-item-label",cssTreeIcon:"goog-tree-icon",cssExpandTreeIcon:"goog-tree-expand-icon",cssExpandTreeIconPlus:"goog-tree-expand-icon-plus",cssExpandTreeIconMinus:"goog-tree-expand-icon-minus",cssExpandTreeIconTPlus:"goog-tree-expand-icon-tplus",
		cssExpandTreeIconTMinus:"goog-tree-expand-icon-tminus",cssExpandTreeIconLPlus:"goog-tree-expand-icon-lplus",cssExpandTreeIconLMinus:"goog-tree-expand-icon-lminus",cssExpandTreeIconT:"goog-tree-expand-icon-t",cssExpandTreeIconL:"goog-tree-expand-icon-l",cssExpandTreeIconBlank:"goog-tree-expand-icon-blank",cssExpandedFolderIcon:"goog-tree-expanded-folder-icon",cssCollapsedFolderIcon:"goog-tree-collapsed-folder-icon",cssFileIcon:"goog-tree-file-icon",cssExpandedRootIcon:"goog-tree-expanded-folder-icon",
		cssCollapsedRootIcon:"goog-tree-collapsed-folder-icon",cssSelectedRow:"selected"};goog.ui.tree.TreeNode=function(a,b,c){goog.ui.tree.BaseNode.call(this,a,b,c)};goog.inherits(goog.ui.tree.TreeNode,goog.ui.tree.BaseNode);goog.ui.tree.TreeNode.prototype.getTree=function(){if(this.tree)return this.tree;var a=this.getParent();return a&&(a=a.getTree())?(this.setTreeInternal(a),a):null};
		goog.ui.tree.TreeNode.prototype.getCalculatedIconClass=function(){var a=this.getExpanded(),b=this.getExpandedIconClass();if(a&&b)return b;b=this.getIconClass();if(!a&&b)return b;b=this.getConfig();if(this.hasChildren()){if(a&&b.cssExpandedFolderIcon)return b.cssTreeIcon+" "+b.cssExpandedFolderIcon;if(!a&&b.cssCollapsedFolderIcon)return b.cssTreeIcon+" "+b.cssCollapsedFolderIcon}else if(b.cssFileIcon)return b.cssTreeIcon+" "+b.cssFileIcon;return""};goog.structs.Trie=function(a){this.value_=void 0;this.childNodes_={};a&&this.setAll(a)};goog.structs.Trie.prototype.set=function(a,b){this.setOrAdd_(a,b,!1)};goog.structs.Trie.prototype.add=function(a,b){this.setOrAdd_(a,b,!0)};
		goog.structs.Trie.prototype.setOrAdd_=function(a,b,c){for(var d=this,e=0;e<a.length;e++){var f=a.charAt(e);d.childNodes_[f]||(d.childNodes_[f]=new goog.structs.Trie);d=d.childNodes_[f]}if(c&&void 0!==d.value_)throw Error('The collection already contains the key "'+a+'"');d.value_=b};goog.structs.Trie.prototype.setAll=function(a){var b=goog.structs.getKeys(a);a=goog.structs.getValues(a);for(var c=0;c<b.length;c++)this.set(b[c],a[c])};
		goog.structs.Trie.prototype.getChildNode_=function(a){for(var b=this,c=0;c<a.length;c++){var d=a.charAt(c),b=b.childNodes_[d];if(!b)return}return b};goog.structs.Trie.prototype.get=function(a){return(a=this.getChildNode_(a))?a.value_:void 0};goog.structs.Trie.prototype.getKeyAndPrefixes=function(a,b){var c=this,d={},e=b||0;void 0!==c.value_&&(d[e]=c.value_);for(;e<a.length;e++){var f=a.charAt(e);if(!(f in c.childNodes_))break;c=c.childNodes_[f];void 0!==c.value_&&(d[e]=c.value_)}return d};
		goog.structs.Trie.prototype.getValues=function(){var a=[];this.getValuesInternal_(a);return a};goog.structs.Trie.prototype.getValuesInternal_=function(a){void 0!==this.value_&&a.push(this.value_);for(var b in this.childNodes_)this.childNodes_[b].getValuesInternal_(a)};goog.structs.Trie.prototype.getKeys=function(a){var b=[];if(a){for(var c=this,d=0;d<a.length;d++){var e=a.charAt(d);if(!c.childNodes_[e])return[];c=c.childNodes_[e]}c.getKeysInternal_(a,b)}else this.getKeysInternal_("",b);return b};
		goog.structs.Trie.prototype.getKeysInternal_=function(a,b){void 0!==this.value_&&b.push(a);for(var c in this.childNodes_)this.childNodes_[c].getKeysInternal_(a+c,b)};goog.structs.Trie.prototype.containsKey=function(a){return void 0!==this.get(a)};goog.structs.Trie.prototype.containsPrefix=function(a){return 0==a.length?!this.isEmpty():!!this.getChildNode_(a)};
		goog.structs.Trie.prototype.containsValue=function(a){if(this.value_===a)return!0;for(var b in this.childNodes_)if(this.childNodes_[b].containsValue(a))return!0;return!1};goog.structs.Trie.prototype.clear=function(){this.childNodes_={};this.value_=void 0};
		goog.structs.Trie.prototype.remove=function(a){for(var b=this,c=[],d=0;d<a.length;d++){var e=a.charAt(d);if(!b.childNodes_[e])throw Error('The collection does not have the key "'+a+'"');c.push([b,e]);b=b.childNodes_[e]}a=b.value_;for(delete b.value_;0<c.length;)if(e=c.pop(),b=e[0],e=e[1],b.childNodes_[e].isEmpty())delete b.childNodes_[e];else break;return a};goog.structs.Trie.prototype.clone=function(){return new goog.structs.Trie(this)};goog.structs.Trie.prototype.getCount=function(){return goog.structs.getCount(this.getValues())};
		goog.structs.Trie.prototype.isEmpty=function(){return void 0===this.value_&&goog.object.isEmpty(this.childNodes_)};goog.ui.tree.TypeAhead=function(){this.nodeMap_=new goog.structs.Trie;this.buffer_="";this.matchingNodes_=this.matchingLabels_=null;this.matchingNodeIndex_=this.matchingLabelIndex_=0};goog.ui.tree.TypeAhead.Offset={DOWN:1,UP:-1};
		goog.ui.tree.TypeAhead.prototype.handleNavigation=function(a){var b=!1;switch(a.keyCode){case goog.events.KeyCodes.DOWN:case goog.events.KeyCodes.UP:a.ctrlKey&&(this.jumpTo_(a.keyCode==goog.events.KeyCodes.DOWN?goog.ui.tree.TypeAhead.Offset.DOWN:goog.ui.tree.TypeAhead.Offset.UP),b=!0);break;case goog.events.KeyCodes.BACKSPACE:a=this.buffer_.length-1;b=!0;0<a?(this.buffer_=this.buffer_.substring(0,a),this.jumpToLabel_(this.buffer_)):0==a?this.buffer_="":b=!1;break;case goog.events.KeyCodes.ESC:this.buffer_=
		"",b=!0}return b};goog.ui.tree.TypeAhead.prototype.handleTypeAheadChar=function(a){var b=!1;a.ctrlKey||a.altKey||(a=String.fromCharCode(a.charCode||a.keyCode).toLowerCase(),goog.string.isUnicodeChar(a)&&(" "!=a||this.buffer_)&&(this.buffer_+=a,b=this.jumpToLabel_(this.buffer_)));return b};
		goog.ui.tree.TypeAhead.prototype.setNodeInMap=function(a){var b=a.getText();if(b&&!goog.string.isEmptyOrWhitespace(goog.string.makeSafe(b))){var b=b.toLowerCase(),c=this.nodeMap_.get(b);c?c.push(a):this.nodeMap_.set(b,[a])}};
		goog.ui.tree.TypeAhead.prototype.removeNodeFromMap=function(a){var b=a.getText();if(b&&!goog.string.isEmptyOrWhitespace(goog.string.makeSafe(b))){var b=b.toLowerCase(),c=this.nodeMap_.get(b);if(c){for(var d=a.getChildCount(),e=0;e<d;e++)this.removeNodeFromMap(a.getChildAt(e));goog.array.remove(c,a);c.length||this.nodeMap_.remove(b)}}};
		goog.ui.tree.TypeAhead.prototype.jumpToLabel_=function(a){var b=!1;(a=this.nodeMap_.getKeys(a))&&a.length&&(this.matchingLabelIndex_=this.matchingNodeIndex_=0,b=this.nodeMap_.get(a[0]),b=this.selectMatchingNode_(b))&&(this.matchingLabels_=a);return b};
		goog.ui.tree.TypeAhead.prototype.jumpTo_=function(a){var b=!1,c=this.matchingLabels_;if(c){var b=null,d=!1;if(this.matchingNodes_){var e=this.matchingNodeIndex_+a;0<=e&&e<this.matchingNodes_.length?(this.matchingNodeIndex_=e,b=this.matchingNodes_):d=!0}b||(e=this.matchingLabelIndex_+a,0<=e&&e<c.length&&(this.matchingLabelIndex_=e),c.length>this.matchingLabelIndex_&&(b=this.nodeMap_.get(c[this.matchingLabelIndex_])),b&&b.length&&d&&(this.matchingNodeIndex_=a==goog.ui.tree.TypeAhead.Offset.UP?b.length-
		1:0));if(b=this.selectMatchingNode_(b))this.matchingLabels_=c}return b};goog.ui.tree.TypeAhead.prototype.selectMatchingNode_=function(a){var b;a&&(this.matchingNodeIndex_<a.length&&(b=a[this.matchingNodeIndex_],this.matchingNodes_=a),b&&(b.reveal(),b.select()));return!!b};goog.ui.tree.TypeAhead.prototype.clear=function(){this.buffer_=""};goog.ui.tree.TreeControl=function(a,b,c){goog.ui.tree.BaseNode.call(this,a,b,c);this.setExpandedInternal(!0);this.setSelectedInternal(!0);this.selectedItem_=this;this.typeAhead_=new goog.ui.tree.TypeAhead;this.focusHandler_=this.keyHandler_=null;this.logger_=goog.log.getLogger("this");this.focused_=!1;this.focusedNode_=null;this.showRootLines_=this.showRootNode_=this.showExpandIcons_=this.showLines_=!0;if(goog.userAgent.IE)try{document.execCommand("BackgroundImageCache",!1,!0)}catch(d){goog.log.warning(this.logger_,
		"Failed to enable background image cache")}};goog.inherits(goog.ui.tree.TreeControl,goog.ui.tree.BaseNode);goog.ui.tree.TreeControl.prototype.getTree=function(){return this};goog.ui.tree.TreeControl.prototype.getDepth=function(){return 0};goog.ui.tree.TreeControl.prototype.reveal=function(){};goog.ui.tree.TreeControl.prototype.handleFocus_=function(a){this.focused_=!0;goog.dom.classlist.add(goog.asserts.assert(this.getElement()),"focused");this.selectedItem_&&this.selectedItem_.select()};
		goog.ui.tree.TreeControl.prototype.handleBlur_=function(a){this.focused_=!1;goog.dom.classlist.remove(goog.asserts.assert(this.getElement()),"focused")};goog.ui.tree.TreeControl.prototype.hasFocus=function(){return this.focused_};goog.ui.tree.TreeControl.prototype.getExpanded=function(){return!this.showRootNode_||goog.ui.tree.TreeControl.superClass_.getExpanded.call(this)};
		goog.ui.tree.TreeControl.prototype.setExpanded=function(a){this.showRootNode_?goog.ui.tree.TreeControl.superClass_.setExpanded.call(this,a):this.setExpandedInternal(a)};goog.ui.tree.TreeControl.prototype.getExpandIconSafeHtml=function(){return goog.html.SafeHtml.EMPTY};goog.ui.tree.TreeControl.prototype.getIconElement=function(){var a=this.getRowElement();return a?a.firstChild:null};goog.ui.tree.TreeControl.prototype.getExpandIconElement=function(){return null};
		goog.ui.tree.TreeControl.prototype.updateExpandIcon=function(){};goog.ui.tree.TreeControl.prototype.getRowClassName=function(){return goog.ui.tree.TreeControl.superClass_.getRowClassName.call(this)+(this.showRootNode_?"":" "+this.getConfig().cssHideRoot)};
		goog.ui.tree.TreeControl.prototype.getCalculatedIconClass=function(){var a=this.getExpanded(),b=this.getExpandedIconClass();if(a&&b)return b;b=this.getIconClass();if(!a&&b)return b;b=this.getConfig();return a&&b.cssExpandedRootIcon?b.cssTreeIcon+" "+b.cssExpandedRootIcon:!a&&b.cssCollapsedRootIcon?b.cssTreeIcon+" "+b.cssCollapsedRootIcon:""};
		goog.ui.tree.TreeControl.prototype.setSelectedItem=function(a){if(this.selectedItem_!=a){var b=!1;this.selectedItem_&&(b=this.selectedItem_==this.focusedNode_,this.selectedItem_.setSelectedInternal(!1));if(this.selectedItem_=a)a.setSelectedInternal(!0),b&&a.select();this.dispatchEvent(goog.events.EventType.CHANGE)}};goog.ui.tree.TreeControl.prototype.getSelectedItem=function(){return this.selectedItem_};
		goog.ui.tree.TreeControl.prototype.setShowLines=function(a){this.showLines_!=a&&(this.showLines_=a,this.isInDocument()&&this.updateLinesAndExpandIcons_())};goog.ui.tree.TreeControl.prototype.getShowLines=function(){return this.showLines_};
		goog.ui.tree.TreeControl.prototype.updateLinesAndExpandIcons_=function(){function a(e){var f=e.getChildrenElement();if(f){var g=!c||b==e.getParent()&&!d?e.getConfig().cssChildrenNoLines:e.getConfig().cssChildren;f.className=g;if(f=e.getExpandIconElement())f.className=e.getExpandIconClass()}e.forEachChild(a)}var b=this,c=b.getShowLines(),d=b.getShowRootLines();a(this)};
		goog.ui.tree.TreeControl.prototype.setShowRootLines=function(a){this.showRootLines_!=a&&(this.showRootLines_=a,this.isInDocument()&&this.updateLinesAndExpandIcons_())};goog.ui.tree.TreeControl.prototype.getShowRootLines=function(){return this.showRootLines_};goog.ui.tree.TreeControl.prototype.setShowExpandIcons=function(a){this.showExpandIcons_!=a&&(this.showExpandIcons_=a,this.isInDocument()&&this.updateLinesAndExpandIcons_())};goog.ui.tree.TreeControl.prototype.getShowExpandIcons=function(){return this.showExpandIcons_};
		goog.ui.tree.TreeControl.prototype.setShowRootNode=function(a){if(this.showRootNode_!=a){this.showRootNode_=a;if(this.isInDocument()){var b=this.getRowElement();b&&(b.className=this.getRowClassName())}!a&&this.getSelectedItem()==this&&this.getFirstChild()&&this.setSelectedItem(this.getFirstChild())}};goog.ui.tree.TreeControl.prototype.getShowRootNode=function(){return this.showRootNode_};
		goog.ui.tree.TreeControl.prototype.initAccessibility=function(){goog.ui.tree.TreeControl.superClass_.initAccessibility.call(this);var a=this.getElement();goog.asserts.assert(a,"The DOM element for the tree cannot be null.");goog.a11y.aria.setRole(a,"tree");goog.a11y.aria.setState(a,"labelledby",this.getLabelElement().id)};
		goog.ui.tree.TreeControl.prototype.enterDocument=function(){goog.ui.tree.TreeControl.superClass_.enterDocument.call(this);var a=this.getElement();a.className=this.getConfig().cssRoot;a.setAttribute("hideFocus","true");this.attachEvents_();this.initAccessibility()};goog.ui.tree.TreeControl.prototype.exitDocument=function(){goog.ui.tree.TreeControl.superClass_.exitDocument.call(this);this.detachEvents_()};
		goog.ui.tree.TreeControl.prototype.attachEvents_=function(){var a=this.getElement();a.tabIndex=0;var b=this.keyHandler_=new goog.events.KeyHandler(a),c=this.focusHandler_=new goog.events.FocusHandler(a);this.getHandler().listen(c,goog.events.FocusHandler.EventType.FOCUSOUT,this.handleBlur_).listen(c,goog.events.FocusHandler.EventType.FOCUSIN,this.handleFocus_).listen(b,goog.events.KeyHandler.EventType.KEY,this.handleKeyEvent).listen(a,goog.events.EventType.MOUSEDOWN,this.handleMouseEvent_).listen(a,
		goog.events.EventType.CLICK,this.handleMouseEvent_).listen(a,goog.events.EventType.DBLCLICK,this.handleMouseEvent_)};goog.ui.tree.TreeControl.prototype.detachEvents_=function(){this.keyHandler_.dispose();this.keyHandler_=null;this.focusHandler_.dispose();this.focusHandler_=null};
		goog.ui.tree.TreeControl.prototype.handleMouseEvent_=function(a){goog.log.fine(this.logger_,"Received event "+a.type);var b=this.getNodeFromEvent_(a);if(b)switch(a.type){case goog.events.EventType.MOUSEDOWN:b.onMouseDown(a);break;case goog.events.EventType.CLICK:b.onClick_(a);break;case goog.events.EventType.DBLCLICK:b.onDoubleClick_(a)}};
		goog.ui.tree.TreeControl.prototype.handleKeyEvent=function(a){var b;(b=this.typeAhead_.handleNavigation(a)||this.selectedItem_&&this.selectedItem_.onKeyDown(a)||this.typeAhead_.handleTypeAheadChar(a))&&a.preventDefault();return b};goog.ui.tree.TreeControl.prototype.getNodeFromEvent_=function(a){for(var b=a.target;null!=b;){if(a=goog.ui.tree.BaseNode.allNodes[b.id])return a;if(b==this.getElement())break;b=b.parentNode}return null};
		goog.ui.tree.TreeControl.prototype.createNode=function(a){return new goog.ui.tree.TreeNode(a||goog.html.SafeHtml.EMPTY,this.getConfig(),this.getDomHelper())};goog.ui.tree.TreeControl.prototype.setNode=function(a){this.typeAhead_.setNodeInMap(a)};goog.ui.tree.TreeControl.prototype.removeNode=function(a){this.typeAhead_.removeNodeFromMap(a)};goog.ui.tree.TreeControl.prototype.clearTypeAhead=function(){this.typeAhead_.clear()};goog.ui.tree.TreeControl.defaultConfig=goog.ui.tree.BaseNode.defaultConfig;
		// Copyright 2013 Google Inc.  Apache License 2.0
		var Blockly={Blocks:{}};Blockly.Blocks.ONE_BASED_INDEXING=!0;/*

		 Visual Blocks Editor

		 Copyright 2016 Massachusetts Institute of Technology
		 All rights reserved.

		 Licensed under the Apache License, Version 2.0 (the "License");
		 you may not use this file except in compliance with the License.
		 You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

		 Unless required by applicable law or agreed to in writing, software
		 distributed under the License is distributed on an "AS IS" BASIS,
		 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 See the License for the specific language governing permissions and
		 limitations under the License.
		*/
		Blockly.Colours={motion:{primary:"#4C97FF",secondary:"#4280D7",tertiary:"#3373CC"},looks:{primary:"#9966FF",secondary:"#855CD6",tertiary:"#774DCB"},sounds:{primary:"#CF63CF",secondary:"#C94FC9",tertiary:"#BD42BD"},control:{primary:"#FFAB19",secondary:"#EC9C13",tertiary:"#CF8B17"},event:{primary:"#FFBF00",secondary:"#E6AC00",tertiary:"#CC9900"},sensing:{primary:"#5CB1D6",secondary:"#47A8D1",tertiary:"#2E8EB8"},pen:{primary:"#0fBD8C",secondary:"#0DA57A",tertiary:"#0B8E69"},operators:{primary:"#59C059",
		secondary:"#46B946",tertiary:"#389438"},data:{primary:"#FF8C1A",secondary:"#FF8000",tertiary:"#DB6E00"},more:{primary:"#FF6680",secondary:"#FF4D6A",tertiary:"#FF3355"},text:"#575E75",workspace:"#F5F8FF",toolboxHover:"#4C97FF",toolboxSelected:"#e9eef2",toolboxText:"#575E75",toolbox:"#FFFFFF",flyout:"#DDDDDD",scrollbar:"#CCCCCC",scrollbarHover:"#BBBBBB",textField:"#FFFFFF",insertionMarker:"#949494",insertionMarkerOpacity:.6,dragShadowOpacity:.3,stackGlow:"#FFF200",stackGlowOpacity:1,replacementGlow:"#FFFFFF",
		replacementGlowOpacity:1,colourPickerStroke:"#FFFFFF",fieldShadow:"rgba(0,0,0,0.1)",dropDownShadow:"rgba(0, 0, 0, .3)",numPadBackground:"#547AB2",numPadBorder:"#435F91",numPadActiveBackground:"#435F91",numPadText:"#FFFFFF",valueReportBackground:"#FFFFFF",valueReportBorder:"#AAAAAA"};
		// Copyright 2016 Google Inc.  Apache License 2.0
		Blockly.Touch={};Blockly.Touch.touchIdentifier_=null;Blockly.Touch.onTouchUpWrapper_=null;Blockly.Touch.TOUCH_MAP={};goog.events.BrowserFeature.TOUCH_ENABLED&&(Blockly.Touch.TOUCH_MAP={mousedown:["touchstart"],mousemove:["touchmove"],mouseup:["touchend","touchcancel"]});Blockly.longPid_=0;Blockly.longStart_=function(a,b){Blockly.longStop_();Blockly.longPid_=setTimeout(function(){a.button=2;b.onMouseDown_(a)},Blockly.LONGPRESS)};
		Blockly.longStop_=function(){Blockly.longPid_&&(clearTimeout(Blockly.longPid_),Blockly.longPid_=0)};
		Blockly.onMouseUp_=function(){var a=Blockly.getMainWorkspace();a.dragMode_!=Blockly.DRAG_NONE&&(Blockly.Touch.clearTouchIdentifier(),Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN),a.dragMode_=Blockly.DRAG_NONE,Blockly.Touch.onTouchUpWrapper_&&(Blockly.unbindEvent_(Blockly.Touch.onTouchUpWrapper_),Blockly.Touch.onTouchUpWrapper_=null),Blockly.onMouseMoveWrapper_&&(Blockly.unbindEvent_(Blockly.onMouseMoveWrapper_),Blockly.onMouseMoveWrapper_=null))};
		Blockly.onMouseMove_=function(a){var b=Blockly.getMainWorkspace();if(b.dragMode_!=Blockly.DRAG_NONE){var c=a.clientX-b.startDragMouseX,d=a.clientY-b.startDragMouseY;b.scroll(b.startScrollX+c,b.startScrollY+d);Math.sqrt(c*c+d*d)>Blockly.DRAG_RADIUS&&(Blockly.longStop_(),b.dragMode_=Blockly.DRAG_FREE);a.stopPropagation();a.preventDefault()}};Blockly.Touch.clearTouchIdentifier=function(){Blockly.Touch.touchIdentifier_=null};
		Blockly.Touch.shouldHandleEvent=function(a){return!Blockly.Touch.isMouseOrTouchEvent(a)||Blockly.Touch.checkTouchIdentifier(a)};
		Blockly.Touch.checkTouchIdentifier=function(a){var b=a.changedTouches&&a.changedTouches[0]&&void 0!=a.changedTouches[0].identifier&&null!=a.changedTouches[0].identifier?a.changedTouches[0].identifier:"mouse";return void 0!=Blockly.Touch.touchIdentifier_&&null!=Blockly.Touch.touchIdentifier_?Blockly.Touch.touchIdentifier_==b:"mousedown"==a.type||"touchstart"==a.type?(Blockly.Touch.touchIdentifier_=b,!0):!1};
		Blockly.Touch.setClientFromTouch=function(a){if(goog.string.startsWith(a.type,"touch")){var b=a.changedTouches[0];a.clientX=b.clientX;a.clientY=b.clientY}};Blockly.Touch.isMouseOrTouchEvent=function(a){return goog.string.startsWith(a.type,"touch")||goog.string.startsWith(a.type,"mouse")};
		Blockly.Touch.splitEventByTouches=function(a){var b=[];if(a.changedTouches)for(var c=0;c<a.changedTouches.length;c++)b[c]={type:a.type,changedTouches:[a.changedTouches[c]],target:a.target,stopPropagation:function(){a.stopPropagation()},preventDefault:function(){a.preventDefault()}};else b.push(a);return b};
		// Copyright 2012 Google Inc.  Apache License 2.0
		Blockly.Workspace=function(a){this.id=Blockly.genUid();Blockly.Workspace.WorkspaceDB_[this.id]=this;this.options=a||{};this.RTL=!!this.options.RTL;this.horizontalLayout=!!this.options.horizontalLayout;this.toolboxPosition=this.options.toolboxPosition;this.topBlocks_=[];this.listeners_=[];this.tapListeners_=[];this.undoStack_=[];this.redoStack_=[];this.blockDB_=Object.create(null);this.variableList=[]};Blockly.Workspace.prototype.rendered=!1;Blockly.Workspace.prototype.MAX_UNDO=1024;
		Blockly.Workspace.prototype.dispose=function(){this.listeners_.length=0;this.clear();delete Blockly.Workspace.WorkspaceDB_[this.id]};Blockly.Workspace.SCAN_ANGLE=3;Blockly.Workspace.prototype.addTopBlock=function(a){this.topBlocks_.push(a);if(this.isFlyout){a=Blockly.Variables.allUsedVariables(a);for(var b=0;b<a.length;b++)-1==this.variableList.indexOf(a[b])&&this.variableList.push(a[b])}};
		Blockly.Workspace.prototype.removeTopBlock=function(a){for(var b=!1,c,d=0;c=this.topBlocks_[d];d++)if(c==a){this.topBlocks_.splice(d,1);b=!0;break}if(!b)throw"Block not present in workspace's list of top-most blocks.";};
		Blockly.Workspace.prototype.getTopBlocks=function(a){var b=[].concat(this.topBlocks_);if(a&&1<b.length){var c=Math.sin(goog.math.toRadians(Blockly.Workspace.SCAN_ANGLE));this.RTL&&(c*=-1);b.sort(function(a,b){var d=a.getRelativeToSurfaceXY(),e=b.getRelativeToSurfaceXY();return d.y+c*d.x-(e.y+c*e.x)})}return b};Blockly.Workspace.prototype.getAllBlocks=function(){for(var a=this.getTopBlocks(!1),b=0;b<a.length;b++)a.push.apply(a,a[b].getChildren());return a};
		Blockly.Workspace.prototype.clear=function(){var a=Blockly.Events.getGroup();for(a||Blockly.Events.setGroup(!0);this.topBlocks_.length;)this.topBlocks_[0].dispose();a||Blockly.Events.setGroup(!1);this.variableList.length=0;Blockly.DropDownDiv&&Blockly.DropDownDiv.hideWithoutAnimation();Blockly.WidgetDiv&&Blockly.WidgetDiv.hide(!0)};
		Blockly.Workspace.prototype.updateVariableList=function(a){if(!this.isFlyout){a&&(this.variableList.length=0);a=Blockly.Variables.allUsedVariables(this);for(var b=0;b<a.length;b++)this.createVariable(a[b])}};
		Blockly.Workspace.prototype.renameVariable=function(a,b){var c=this.variableIndexOf(a),d=this.variableIndexOf(b);if(-1!=d&&this.variableList[d]!=b)var e=this.variableList[d];Blockly.Events.setGroup(!0);for(var f=this.getAllBlocks(),g=0;g<f.length;g++)f[g].renameVar(a,b),e&&f[g].renameVar(e,b);Blockly.Events.setGroup(!1);c==d||-1!=c&&-1==d?this.variableList[c]=b:-1!=c&&-1!=d?(this.variableList.splice(c,1),this.variableList[d]=b):(this.variableList.push(b),console.log("Tried to rename an non-existent variable."))};
		Blockly.Workspace.prototype.createVariable=function(a){-1==this.variableIndexOf(a)&&this.variableList.push(a)};Blockly.Workspace.prototype.getVariableUses=function(a){for(var b=[],c=this.getAllBlocks(),d=0;d<c.length;d++){var e=c[d].getVars();if(e)for(var f=0;f<e.length;f++){var g=e[f];g&&Blockly.Names.equals(g,a)&&b.push(c[d])}}return b};
		Blockly.Workspace.prototype.deleteVariable=function(a){var b=this.variableIndexOf(a);if(-1!=b){var c=this.getVariableUses(a);if(1<c.length){for(var d=0,e;e=c[d];d++)if("procedures_defnoreturn"==e.type||"procedures_defreturn"==e.type){b=e.getFieldValue("NAME");window.alert(Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE.replace("%1",a).replace("%2",b));return}if(!window.confirm(Blockly.Msg.DELETE_VARIABLE_CONFIRMATION.replace("%1",c.length).replace("%2",a)))return}Blockly.Events.setGroup(!0);for(d=0;d<
		c.length;d++)c[d].dispose(!0,!1);Blockly.Events.setGroup(!1);this.variableList.splice(b,1)}};Blockly.Workspace.prototype.variableIndexOf=function(a){for(var b=0,c;c=this.variableList[b];b++)if(Blockly.Names.equals(c,a))return b;return-1};Blockly.Workspace.prototype.getWidth=function(){return 0};Blockly.Workspace.prototype.newBlock=function(a,b){return new Blockly.Block(this,a,b)};
		Blockly.Workspace.prototype.undo=function(a){var b=a?this.redoStack_:this.undoStack_,c=a?this.undoStack_:this.redoStack_,d=b.pop();if(d){for(var e=[d];b.length&&d.group&&d.group==b[b.length-1].group;)e.push(b.pop());for(b=0;d=e[b];b++)c.push(d);e=Blockly.Events.filter(e,a);Blockly.Events.recordUndo=!1;for(b=0;d=e[b];b++)d.run(a);Blockly.Events.recordUndo=!0}};Blockly.Workspace.prototype.clearUndo=function(){this.undoStack_.length=0;this.redoStack_.length=0;Blockly.Events.clearPendingUndo()};
		Blockly.Workspace.prototype.addChangeListener=function(a){this.listeners_.push(a);return a};Blockly.Workspace.prototype.removeChangeListener=function(a){a=this.listeners_.indexOf(a);-1!=a&&this.listeners_.splice(a,1)};Blockly.Workspace.prototype.fireChangeListener=function(a){a.recordUndo&&(this.undoStack_.push(a),this.redoStack_.length=0,this.undoStack_.length>this.MAX_UNDO&&this.undoStack_.unshift());for(var b=this.listeners_.slice(),c=0,d;d=b[c];c++)d(a)};
		Blockly.Workspace.prototype.getBlockById=function(a){var b=this.blockDB_[a];!b&&this.getFlyout()&&this.getFlyout().getWorkspace()&&(b=this.getFlyout().getWorkspace().blockDB_[a]);return b||null};Blockly.Workspace.WorkspaceDB_=Object.create(null);Blockly.Workspace.getById=function(a){return Blockly.Workspace.WorkspaceDB_[a]||null};Blockly.Workspace.prototype.clear=Blockly.Workspace.prototype.clear;Blockly.Workspace.prototype.clearUndo=Blockly.Workspace.prototype.clearUndo;
		Blockly.Workspace.prototype.addChangeListener=Blockly.Workspace.prototype.addChangeListener;Blockly.Workspace.prototype.removeChangeListener=Blockly.Workspace.prototype.removeChangeListener;Blockly.Bubble=function(a,b,c,d,e,f){this.workspace_=a;this.content_=b;this.shape_=c;c=Blockly.Bubble.ARROW_ANGLE;this.workspace_.RTL&&(c=-c);this.arrow_radians_=goog.math.toRadians(c);a.getBubbleCanvas().appendChild(this.createDom_(b,!(!e||!f)));this.setAnchorLocation(d);e&&f||(b=this.content_.getBBox(),e=b.width+2*Blockly.Bubble.BORDER_WIDTH,f=b.height+2*Blockly.Bubble.BORDER_WIDTH);this.setBubbleSize(e,f);this.positionBubble_();this.renderArrow_();this.rendered_=!0;a.options.readOnly||(Blockly.bindEvent_(this.bubbleBack_,
		"mousedown",this,this.bubbleMouseDown_),this.resizeGroup_&&Blockly.bindEvent_(this.resizeGroup_,"mousedown",this,this.resizeMouseDown_))};Blockly.Bubble.BORDER_WIDTH=6;Blockly.Bubble.ARROW_THICKNESS=10;Blockly.Bubble.ARROW_ANGLE=20;Blockly.Bubble.ARROW_BEND=4;Blockly.Bubble.ANCHOR_RADIUS=8;Blockly.Bubble.onMouseUpWrapper_=null;Blockly.Bubble.onMouseMoveWrapper_=null;Blockly.Bubble.prototype.resizeCallback_=null;
		Blockly.Bubble.unbindDragEvents_=function(){Blockly.Bubble.onMouseUpWrapper_&&(Blockly.unbindEvent_(Blockly.Bubble.onMouseUpWrapper_),Blockly.Bubble.onMouseUpWrapper_=null);Blockly.Bubble.onMouseMoveWrapper_&&(Blockly.unbindEvent_(Blockly.Bubble.onMouseMoveWrapper_),Blockly.Bubble.onMouseMoveWrapper_=null)};Blockly.Bubble.bubbleMouseUp_=function(){Blockly.Touch.clearTouchIdentifier();Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN);Blockly.Bubble.unbindDragEvents_()};
		Blockly.Bubble.prototype.rendered_=!1;Blockly.Bubble.prototype.anchorXY_=null;Blockly.Bubble.prototype.relativeLeft_=0;Blockly.Bubble.prototype.relativeTop_=0;Blockly.Bubble.prototype.width_=0;Blockly.Bubble.prototype.height_=0;Blockly.Bubble.prototype.autoLayout_=!0;
		Blockly.Bubble.prototype.createDom_=function(a,b){this.bubbleGroup_=Blockly.createSvgElement("g",{},null);var c={filter:"url(#"+this.workspace_.options.embossFilterId+")"};-1!=goog.userAgent.getUserAgentString().indexOf("JavaFX")&&(c={});c=Blockly.createSvgElement("g",c,this.bubbleGroup_);this.bubbleArrow_=Blockly.createSvgElement("path",{},c);this.bubbleBack_=Blockly.createSvgElement("rect",{"class":"blocklyDraggable",x:0,y:0,rx:Blockly.Bubble.BORDER_WIDTH,ry:Blockly.Bubble.BORDER_WIDTH},c);b?(this.resizeGroup_=
		Blockly.createSvgElement("g",{"class":this.workspace_.RTL?"blocklyResizeSW":"blocklyResizeSE"},this.bubbleGroup_),c=2*Blockly.Bubble.BORDER_WIDTH,Blockly.createSvgElement("polygon",{points:"0,x x,x x,0".replace(/x/g,c.toString())},this.resizeGroup_),Blockly.createSvgElement("line",{"class":"blocklyResizeLine",x1:c/3,y1:c-1,x2:c-1,y2:c/3},this.resizeGroup_),Blockly.createSvgElement("line",{"class":"blocklyResizeLine",x1:2*c/3,y1:c-1,x2:c-1,y2:2*c/3},this.resizeGroup_)):this.resizeGroup_=null;this.bubbleGroup_.appendChild(a);
		return this.bubbleGroup_};
		Blockly.Bubble.prototype.bubbleMouseDown_=function(a){this.promote_();Blockly.Bubble.unbindDragEvents_();Blockly.isRightButton(a)?a.stopPropagation():Blockly.isTargetInput_(a)||(Blockly.Css.setCursor(Blockly.Css.Cursor.CLOSED),this.workspace_.startDrag(a,new goog.math.Coordinate(this.workspace_.RTL?-this.relativeLeft_:this.relativeLeft_,this.relativeTop_)),Blockly.Bubble.onMouseUpWrapper_=Blockly.bindEvent_(document,"mouseup",this,Blockly.Bubble.bubbleMouseUp_),Blockly.Bubble.onMouseMoveWrapper_=Blockly.bindEvent_(document,
		"mousemove",this,this.bubbleMouseMove_),Blockly.hideChaff(),a.stopPropagation())};Blockly.Bubble.prototype.bubbleMouseMove_=function(a){this.autoLayout_=!1;a=this.workspace_.moveDrag(a);this.relativeLeft_=this.workspace_.RTL?-a.x:a.x;this.relativeTop_=a.y;this.positionBubble_();this.renderArrow_()};
		Blockly.Bubble.prototype.resizeMouseDown_=function(a){this.promote_();Blockly.Bubble.unbindDragEvents_();Blockly.isRightButton(a)||(Blockly.Css.setCursor(Blockly.Css.Cursor.CLOSED),this.workspace_.startDrag(a,new goog.math.Coordinate(this.workspace_.RTL?-this.width_:this.width_,this.height_)),Blockly.Bubble.onMouseUpWrapper_=Blockly.bindEvent_(document,"mouseup",this,Blockly.Bubble.bubbleMouseUp_),Blockly.Bubble.onMouseMoveWrapper_=Blockly.bindEvent_(document,"mousemove",this,this.resizeMouseMove_),
		Blockly.hideChaff());a.stopPropagation()};Blockly.Bubble.prototype.resizeMouseMove_=function(a){this.autoLayout_=!1;a=this.workspace_.moveDrag(a);this.setBubbleSize(this.workspace_.RTL?-a.x:a.x,a.y);this.workspace_.RTL&&this.positionBubble_()};Blockly.Bubble.prototype.registerResizeEvent=function(a){this.resizeCallback_=a};Blockly.Bubble.prototype.promote_=function(){this.bubbleGroup_.parentNode.appendChild(this.bubbleGroup_)};
		Blockly.Bubble.prototype.setAnchorLocation=function(a){this.anchorXY_=a;this.rendered_&&this.positionBubble_()};
		Blockly.Bubble.prototype.layoutBubble_=function(){var a=-this.width_/4,b=-this.height_-Blockly.BlockSvg.MIN_BLOCK_Y,c=this.workspace_.getMetrics();c.viewWidth/=this.workspace_.scale;c.viewLeft/=this.workspace_.scale;var d=this.anchorXY_.x;this.workspace_.RTL?d-c.viewLeft-a-this.width_<Blockly.Scrollbar.scrollbarThickness?a=d-c.viewLeft-this.width_-Blockly.Scrollbar.scrollbarThickness:d-c.viewLeft-a>c.viewWidth&&(a=d-c.viewLeft-c.viewWidth):d+a<c.viewLeft?a=c.viewLeft-d:c.viewLeft+c.viewWidth<d+a+
		this.width_+Blockly.BlockSvg.SEP_SPACE_X+Blockly.Scrollbar.scrollbarThickness&&(a=c.viewLeft+c.viewWidth-d-this.width_-Blockly.Scrollbar.scrollbarThickness);this.anchorXY_.y+b<c.viewTop&&(b=this.shape_.getBBox().height);this.relativeLeft_=a;this.relativeTop_=b};
		Blockly.Bubble.prototype.positionBubble_=function(){var a=this.anchorXY_.x,a=this.workspace_.RTL?a-(this.relativeLeft_+this.width_):a+this.relativeLeft_;this.bubbleGroup_.setAttribute("transform","translate("+a+","+(this.relativeTop_+this.anchorXY_.y)+")")};Blockly.Bubble.prototype.getBubbleSize=function(){return{width:this.width_,height:this.height_}};
		Blockly.Bubble.prototype.setBubbleSize=function(a,b){var c=2*Blockly.Bubble.BORDER_WIDTH;a=Math.max(a,c+45);b=Math.max(b,c+20);this.width_=a;this.height_=b;this.bubbleBack_.setAttribute("width",a);this.bubbleBack_.setAttribute("height",b);this.resizeGroup_&&(this.workspace_.RTL?this.resizeGroup_.setAttribute("transform","translate("+2*Blockly.Bubble.BORDER_WIDTH+","+(b-c)+") scale(-1 1)"):this.resizeGroup_.setAttribute("transform","translate("+(a-c)+","+(b-c)+")"));this.rendered_&&(this.autoLayout_&&
		this.layoutBubble_(),this.positionBubble_(),this.renderArrow_());this.resizeCallback_&&this.resizeCallback_()};
		Blockly.Bubble.prototype.renderArrow_=function(){var a=[],b=this.width_/2,c=this.height_/2,d=-this.relativeLeft_,e=-this.relativeTop_;if(b==d&&c==e)a.push("M "+b+","+c);else{e-=c;d-=b;this.workspace_.RTL&&(d*=-1);var f=Math.sqrt(e*e+d*d),g=Math.acos(d/f);0>e&&(g=2*Math.PI-g);var h=g+Math.PI/2;h>2*Math.PI&&(h-=2*Math.PI);var k=Math.sin(h),l=Math.cos(h),m=this.getBubbleSize(),h=(m.width+m.height)/Blockly.Bubble.ARROW_THICKNESS,h=Math.min(h,m.width,m.height)/2,m=1-Blockly.Bubble.ANCHOR_RADIUS/f,d=b+
		m*d,e=c+m*e,m=b+h*l,n=c+h*k,b=b-h*l,c=c-h*k,k=g+this.arrow_radians_;k>2*Math.PI&&(k-=2*Math.PI);g=Math.sin(k)*f/Blockly.Bubble.ARROW_BEND;f=Math.cos(k)*f/Blockly.Bubble.ARROW_BEND;a.push("M"+m+","+n);a.push("C"+(m+f)+","+(n+g)+" "+d+","+e+" "+d+","+e);a.push("C"+d+","+e+" "+(b+f)+","+(c+g)+" "+b+","+c)}a.push("z");this.bubbleArrow_.setAttribute("d",a.join(" "))};Blockly.Bubble.prototype.setColour=function(a){this.bubbleBack_.setAttribute("fill",a);this.bubbleArrow_.setAttribute("fill",a)};
		Blockly.Bubble.prototype.dispose=function(){Blockly.Bubble.unbindDragEvents_();goog.dom.removeNode(this.bubbleGroup_);this.shape_=this.content_=this.workspace_=this.resizeGroup_=this.bubbleBack_=this.bubbleArrow_=this.bubbleGroup_=null};Blockly.Icon=function(a){this.block_=a};Blockly.Icon.prototype.collapseHidden=!0;Blockly.Icon.prototype.SIZE=17;Blockly.Icon.prototype.bubble_=null;Blockly.Icon.prototype.iconXY_=null;
		Blockly.Icon.prototype.createIcon=function(){this.iconGroup_||(this.iconGroup_=Blockly.createSvgElement("g",{"class":"blocklyIconGroup"},null),this.block_.isInFlyout&&Blockly.addClass_(this.iconGroup_,"blocklyIconGroupReadonly"),this.drawIcon_(this.iconGroup_),this.block_.getSvgRoot().appendChild(this.iconGroup_),Blockly.bindEvent_(this.iconGroup_,"mouseup",this,this.iconClick_),this.updateEditable())};
		Blockly.Icon.prototype.dispose=function(){goog.dom.removeNode(this.iconGroup_);this.iconGroup_=null;this.setVisible(!1);this.block_=null};Blockly.Icon.prototype.updateEditable=function(){};Blockly.Icon.prototype.isVisible=function(){return!!this.bubble_};Blockly.Icon.prototype.iconClick_=function(a){this.block_.workspace.isDragging()||this.block_.isInFlyout||Blockly.isRightButton(a)||this.setVisible(!this.isVisible())};Blockly.Icon.prototype.updateColour=function(){this.isVisible()&&this.bubble_.setColour(this.block_.getColour())};
		Blockly.Icon.prototype.renderIcon=function(a){if(this.collapseHidden&&this.block_.isCollapsed())return this.iconGroup_.setAttribute("display","none"),a;this.iconGroup_.setAttribute("display","block");var b=this.SIZE;this.block_.RTL&&(a-=b);this.iconGroup_.setAttribute("transform","translate("+a+",5)");this.computeIconLocation();return a=this.block_.RTL?a-Blockly.BlockSvg.SEP_SPACE_X:a+(b+Blockly.BlockSvg.SEP_SPACE_X)};
		Blockly.Icon.prototype.setIconLocation=function(a){this.iconXY_=a;this.isVisible()&&this.bubble_.setAnchorLocation(a)};Blockly.Icon.prototype.computeIconLocation=function(){var a=this.block_.getRelativeToSurfaceXY(),b=Blockly.getRelativeXY_(this.iconGroup_),a=new goog.math.Coordinate(a.x+b.x+this.SIZE/2,a.y+b.y+this.SIZE/2);goog.math.Coordinate.equals(this.getIconLocation(),a)||this.setIconLocation(a)};Blockly.Icon.prototype.getIconLocation=function(){return this.iconXY_};
		// Copyright 2011 Google Inc.  Apache License 2.0
		Blockly.Comment=function(a){Blockly.Comment.superClass_.constructor.call(this,a);this.createIcon()};goog.inherits(Blockly.Comment,Blockly.Icon);Blockly.Comment.prototype.text_="";Blockly.Comment.prototype.width_=160;Blockly.Comment.prototype.height_=80;
		Blockly.Comment.prototype.drawIcon_=function(a){Blockly.createSvgElement("circle",{"class":"blocklyIconShape",r:"8",cx:"8",cy:"8"},a);Blockly.createSvgElement("path",{"class":"blocklyIconSymbol",d:"m6.8,10h2c0.003,-0.617 0.271,-0.962 0.633,-1.266 2.875,-2.405 0.607,-5.534 -3.765,-3.874v1.7c3.12,-1.657 3.698,0.118 2.336,1.25 -1.201,0.998 -1.201,1.528 -1.204,2.19z"},a);Blockly.createSvgElement("rect",{"class":"blocklyIconSymbol",x:"6.8",y:"10.78",height:"2",width:"2"},a)};
		Blockly.Comment.prototype.createEditor_=function(){this.foreignObject_=Blockly.createSvgElement("foreignObject",{x:Blockly.Bubble.BORDER_WIDTH,y:Blockly.Bubble.BORDER_WIDTH},null);var a=document.createElementNS(Blockly.HTML_NS,"body");a.setAttribute("xmlns",Blockly.HTML_NS);a.className="blocklyMinimalBody";var b=document.createElementNS(Blockly.HTML_NS,"textarea");b.className="blocklyCommentTextarea";b.setAttribute("dir",this.block_.RTL?"RTL":"LTR");a.appendChild(b);this.textarea_=b;this.foreignObject_.appendChild(a);
		Blockly.bindEvent_(b,"mouseup",this,this.textareaFocus_);Blockly.bindEvent_(b,"wheel",this,function(a){a.stopPropagation()});Blockly.bindEvent_(b,"change",this,function(){this.text_!=b.value&&(Blockly.Events.fire(new Blockly.Events.Change(this.block_,"comment",null,this.text_,b.value)),this.text_=b.value)});setTimeout(function(){b.focus()},0);return this.foreignObject_};Blockly.Comment.prototype.updateEditable=function(){this.isVisible()&&(this.setVisible(!1),this.setVisible(!0));Blockly.Icon.prototype.updateEditable.call(this)};
		Blockly.Comment.prototype.resizeBubble_=function(){if(this.isVisible()){var a=this.bubble_.getBubbleSize(),b=2*Blockly.Bubble.BORDER_WIDTH;this.foreignObject_.setAttribute("width",a.width-b);this.foreignObject_.setAttribute("height",a.height-b);this.textarea_.style.width=a.width-b-4+"px";this.textarea_.style.height=a.height-b-4+"px"}};
		Blockly.Comment.prototype.setVisible=function(a){if(a!=this.isVisible())if(Blockly.Events.fire(new Blockly.Events.Ui(this.block_,"commentOpen",!a,a)),!this.block_.isEditable()&&!this.textarea_||goog.userAgent.IE)Blockly.Warning.prototype.setVisible.call(this,a);else{var b=this.getText(),c=this.getBubbleSize();a?(this.bubble_=new Blockly.Bubble(this.block_.workspace,this.createEditor_(),this.block_.svgPath_,this.iconXY_,this.width_,this.height_),this.bubble_.registerResizeEvent(this.resizeBubble_.bind(this)),
		this.updateColour()):(this.bubble_.dispose(),this.foreignObject_=this.textarea_=this.bubble_=null);this.setText(b);this.setBubbleSize(c.width,c.height)}};Blockly.Comment.prototype.textareaFocus_=function(){this.bubble_.promote_();this.textarea_.focus()};Blockly.Comment.prototype.getBubbleSize=function(){return this.isVisible()?this.bubble_.getBubbleSize():{width:this.width_,height:this.height_}};
		Blockly.Comment.prototype.setBubbleSize=function(a,b){this.textarea_?this.bubble_.setBubbleSize(a,b):(this.width_=a,this.height_=b)};Blockly.Comment.prototype.getText=function(){return this.textarea_?this.textarea_.value:this.text_};Blockly.Comment.prototype.setText=function(a){this.text_!=a&&(Blockly.Events.fire(new Blockly.Events.Change(this.block_,"comment",null,this.text_,a)),this.text_=a);this.textarea_&&(this.textarea_.value=a)};
		Blockly.Comment.prototype.dispose=function(){Blockly.Events.isEnabled()&&this.setText("");this.block_.comment=null;Blockly.Icon.prototype.dispose.call(this)};Blockly.Connection=function(a,b){this.sourceBlock_=a;this.type=b;a.workspace.connectionDBList&&(this.db_=a.workspace.connectionDBList[b],this.dbOpposite_=a.workspace.connectionDBList[Blockly.OPPOSITE_TYPE[b]],this.hidden_=!this.db_)};Blockly.Connection.CAN_CONNECT=0;Blockly.Connection.REASON_SELF_CONNECTION=1;Blockly.Connection.REASON_WRONG_TYPE=2;Blockly.Connection.REASON_TARGET_NULL=3;Blockly.Connection.REASON_CHECKS_FAILED=4;Blockly.Connection.REASON_DIFFERENT_WORKSPACES=5;
		Blockly.Connection.REASON_SHADOW_PARENT=6;Blockly.Connection.prototype.targetConnection=null;Blockly.Connection.prototype.check_=null;Blockly.Connection.prototype.shadowDom_=null;Blockly.Connection.prototype.x_=0;Blockly.Connection.prototype.y_=0;Blockly.Connection.prototype.inDB_=!1;Blockly.Connection.prototype.db_=null;Blockly.Connection.prototype.dbOpposite_=null;Blockly.Connection.prototype.hidden_=null;
		Blockly.Connection.prototype.connect_=function(a){var b=this,c=b.getSourceBlock(),d=a.getSourceBlock(),e=!1;b==c.getFirstStatementConnection()&&(e=!0);if(a.isConnected()){if(e)var f=a.targetConnection;a.disconnect()}if(b.isConnected()){var g=b.targetBlock(),h=b.getShadowDom();b.setShadowDom(null);if(g.isShadow())h=Blockly.Xml.blockToDom(g),g.dispose(),g=null;else if(b.type==Blockly.NEXT_STATEMENT){if(!g.previousConnection)throw"Orphan block does not have a previous connection.";for(var k=d;k.nextConnection;){var l=
		k.getNextBlock();if(l&&!l.isShadow())k=l;else{g.previousConnection.checkType_(k.nextConnection)&&(k.nextConnection.connect(g.previousConnection),g=null);break}}}if(g&&(b.disconnect(),Blockly.Events.recordUndo)){var m=Blockly.Events.getGroup();setTimeout(function(){g.workspace&&!g.getParent()&&(Blockly.Events.setGroup(m),g.outputConnection?g.outputConnection.bumpAwayFrom_(b):g.previousConnection&&g.previousConnection.bumpAwayFrom_(b),Blockly.Events.setGroup(!1))},Blockly.BUMP_DELAY)}b.setShadowDom(h)}e&&
		f&&f.connect(c.previousConnection);var n;Blockly.Events.isEnabled()&&(n=new Blockly.Events.Move(d));Blockly.Connection.connectReciprocally_(b,a);d.setParent(c);n&&(n.recordNew(),Blockly.Events.fire(n))};
		Blockly.Connection.prototype.dispose=function(){if(this.isConnected())throw"Disconnect connection before disposing of it.";this.inDB_&&this.db_.removeConnection_(this);Blockly.highlightedConnection_==this&&(Blockly.highlightedConnection_=null);Blockly.localConnection_==this&&(Blockly.localConnection_=null);this.dbOpposite_=this.db_=null};Blockly.Connection.prototype.isConnectedToNonInsertionMarker=function(){return this.targetConnection&&!this.targetBlock().isInsertionMarker()};
		Blockly.Connection.prototype.getSourceBlock=function(){return this.sourceBlock_};Blockly.Connection.prototype.isSuperior=function(){return this.type==Blockly.INPUT_VALUE||this.type==Blockly.NEXT_STATEMENT};Blockly.Connection.prototype.isConnected=function(){return!!this.targetConnection};
		Blockly.Connection.prototype.canConnectWithReason_=function(a){if(!a)return Blockly.Connection.REASON_TARGET_NULL;if(this.isSuperior())var b=this.sourceBlock_,c=a.getSourceBlock();else c=this.sourceBlock_,b=a.getSourceBlock();return b&&b==c?Blockly.Connection.REASON_SELF_CONNECTION:a.type!=Blockly.OPPOSITE_TYPE[this.type]?Blockly.Connection.REASON_WRONG_TYPE:b&&c&&b.workspace!==c.workspace?Blockly.Connection.REASON_DIFFERENT_WORKSPACES:this.checkType_(a)?b.isShadow()&&!c.isShadow()?Blockly.Connection.REASON_SHADOW_PARENT:
		Blockly.Connection.CAN_CONNECT:Blockly.Connection.REASON_CHECKS_FAILED};
		Blockly.Connection.prototype.checkConnection_=function(a){switch(this.canConnectWithReason_(a)){case Blockly.Connection.CAN_CONNECT:break;case Blockly.Connection.REASON_SELF_CONNECTION:throw"Attempted to connect a block to itself.";case Blockly.Connection.REASON_DIFFERENT_WORKSPACES:throw"Blocks not on same workspace.";case Blockly.Connection.REASON_WRONG_TYPE:throw"Attempt to connect incompatible types.";case Blockly.Connection.REASON_TARGET_NULL:throw"Target connection is null.";case Blockly.Connection.REASON_CHECKS_FAILED:throw"Connection checks failed.";
		case Blockly.Connection.REASON_SHADOW_PARENT:throw"Connecting non-shadow to shadow block.";default:throw"Unknown connection failure: this should never happen!";}};
		Blockly.Connection.prototype.isConnectionAllowed=function(a){if(a.sourceBlock_.isInsertionMarker()||this.canConnectWithReason_(a)!=Blockly.Connection.CAN_CONNECT)return!1;var b=this.sourceBlock_.getFirstStatementConnection();switch(a.type){case Blockly.PREVIOUS_STATEMENT:if(!b||this!=b){if(this.targetConnection)return!1;if(a.targetConnection)return a.targetConnection==Blockly.insertionMarkerConnection_?!0:!1}if(b)if(this==b){if(this.targetConnection)return!1}else if(this==this.sourceBlock_.nextConnection&&
		a.isConnectedToNonInsertionMarker())return!1;break;case Blockly.OUTPUT_VALUE:return!1;case Blockly.INPUT_VALUE:if(a.targetConnection&&!a.targetBlock().isMovable()&&!a.targetBlock().isShadow())return!1;break;case Blockly.NEXT_STATEMENT:if(b&&this==this.sourceBlock_.previousConnection&&a.isConnectedToNonInsertionMarker()&&!b.targetConnection||a.isConnectedToNonInsertionMarker()&&!this.sourceBlock_.nextConnection&&!a.targetBlock().isShadow()&&a.targetBlock().nextConnection)return!1;break;default:throw"Unknown connection type in isConnectionAllowed";
		}return-1!=Blockly.draggingConnections_.indexOf(a)?!1:!0};Blockly.Connection.prototype.connect=function(a){this.targetConnection!=a&&(this.checkConnection_(a),this.isSuperior()?this.connect_(a):a.connect_(this))};Blockly.Connection.connectReciprocally_=function(a,b){goog.asserts.assert(a&&b,"Cannot connect null connections.");a.targetConnection=b;b.targetConnection=a};
		Blockly.Connection.singleConnection_=function(a,b){for(var c=!1,d=0;d<a.inputList.length;d++){var e=a.inputList[d].connection;if(e&&e.type==Blockly.INPUT_VALUE&&b.outputConnection.checkType_(e)){if(c)return null;c=e}}return c};
		Blockly.Connection.prototype.disconnect=function(){var a=this.targetConnection;goog.asserts.assert(a,"Source connection not connected.");goog.asserts.assert(a.targetConnection==this,"Target connection not connected to source connection.");var b,c;this.isSuperior()?(b=this.sourceBlock_,c=a.getSourceBlock(),a=this):(b=a.getSourceBlock(),c=this.sourceBlock_);this.disconnectInternal_(b,c);a.respawnShadow_()};
		Blockly.Connection.prototype.disconnectInternal_=function(a,b){var c;Blockly.Events.isEnabled()&&(c=new Blockly.Events.Move(b));this.targetConnection=this.targetConnection.targetConnection=null;b.setParent(null);c&&(c.recordNew(),Blockly.Events.fire(c))};
		Blockly.Connection.prototype.respawnShadow_=function(){var a=this.getSourceBlock(),b=this.getShadowDom();if(a.workspace&&b&&Blockly.Events.recordUndo)if(a=Blockly.Xml.domToBlock(b,a.workspace),a.outputConnection)this.connect(a.outputConnection);else if(a.previousConnection)this.connect(a.previousConnection);else throw"Child block does not have output or previous statement.";};Blockly.Connection.prototype.targetBlock=function(){return this.isConnected()?this.targetConnection.getSourceBlock():null};
		Blockly.Connection.prototype.checkType_=function(a){if(!this.check_||!a.check_)return!0;for(var b=0;b<this.check_.length;b++)if(-1!=a.check_.indexOf(this.check_[b]))return!0;return!1};Blockly.Connection.prototype.setCheck=function(a){a?(goog.isArray(a)||(a=[a]),this.check_=a,this.isConnected()&&!this.checkType_(this.targetConnection)&&((this.isSuperior()?this.targetBlock():this.sourceBlock_).unplug(),this.sourceBlock_.bumpNeighbours_())):this.check_=null;return this};
		Blockly.Connection.prototype.getOutputShape=function(){return this.check_?-1!==this.check_.indexOf("Boolean")?Blockly.OUTPUT_SHAPE_HEXAGONAL:-1!==this.check_.indexOf("Number")?Blockly.OUTPUT_SHAPE_ROUND:-1!==this.check_.indexOf("String")?Blockly.OUTPUT_SHAPE_SQUARE:Blockly.OUTPUT_SHAPE_ROUND:Blockly.OUTPUT_SHAPE_ROUND};Blockly.Connection.prototype.setShadowDom=function(a){this.shadowDom_=a};Blockly.Connection.prototype.getShadowDom=function(){return this.shadowDom_};Blockly.Field=function(a,b){this.size_=new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH,Blockly.BlockSvg.FIELD_HEIGHT);this.setValue(a);this.setValidator(b);this.maxDisplayLength=Blockly.BlockSvg.MAX_DISPLAY_LENGTH};Blockly.Field.cacheWidths_=null;Blockly.Field.cacheReference_=0;Blockly.Field.prototype.name=void 0;Blockly.Field.prototype.text_="";Blockly.Field.prototype.sourceBlock_=null;Blockly.Field.prototype.visible_=!0;Blockly.Field.prototype.argType_=null;Blockly.Field.prototype.validator_=null;
		Blockly.Field.NBSP="\u00a0";Blockly.Field.prototype.EDITABLE=!0;Blockly.Field.prototype.setSourceBlock=function(a){goog.asserts.assert(!this.sourceBlock_,"Field already bound to a block.");this.sourceBlock_=a};
		Blockly.Field.prototype.init=function(){if(!this.fieldGroup_){this.fieldGroup_=Blockly.createSvgElement("g",{},null);this.visible_||(this.fieldGroup_.style.display="none");null!==this.getArgTypes()&&(this.sourceBlock_.isShadow()?this.sourceBlock_.svgGroup_.setAttribute("data-argument-type",this.getArgTypes()):this.fieldGroup_.setAttribute("data-argument-type",this.getArgTypes()));var a=this.getSize();this.textElement_=Blockly.createSvgElement("text",{"class":"blocklyText",x:this.sourceBlock_.RTL?
		-a.width/2:a.width/2,y:a.height/2+Blockly.BlockSvg.FIELD_TOP_PADDING,"dominant-baseline":"middle","text-anchor":"middle"},this.fieldGroup_);this.updateEditable();this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);this.mouseUpWrapper_=Blockly.bindEvent_(this.getClickTarget_(),"mouseup",this,this.onMouseUp_);this.updateTextNode_()}};
		Blockly.Field.prototype.dispose=function(){this.mouseUpWrapper_&&(Blockly.unbindEvent_(this.mouseUpWrapper_),this.mouseUpWrapper_=null);this.sourceBlock_=null;goog.dom.removeNode(this.fieldGroup_);this.validator_=this.textElement_=this.fieldGroup_=null};
		Blockly.Field.prototype.updateEditable=function(){var a=this.fieldGroup_;this.EDITABLE&&a&&(this.sourceBlock_.isEditable()?(Blockly.addClass_(a,"blocklyEditableText"),Blockly.removeClass_(a,"blocklyNonEditableText"),this.getClickTarget_().style.cursor=this.CURSOR):(Blockly.addClass_(a,"blocklyNonEditableText"),Blockly.removeClass_(a,"blocklyEditableText"),this.getClickTarget_().style.cursor=""))};Blockly.Field.prototype.isVisible=function(){return this.visible_};
		Blockly.Field.prototype.setVisible=function(a){if(this.visible_!=a){this.visible_=a;var b=this.getSvgRoot();b&&(b.style.display=a?"block":"none",this.render_())}};Blockly.Field.prototype.addArgType=function(a){null==this.argType_&&(this.argType_=[]);this.argType_.push(a)};Blockly.Field.prototype.getArgTypes=function(){return null===this.argType_||0===this.argType_.length?null:this.argType_.join(" ")};Blockly.Field.prototype.setValidator=function(a){this.validator_=a};
		Blockly.Field.prototype.getValidator=function(){return this.validator_};Blockly.Field.prototype.classValidator=function(a){return a};Blockly.Field.prototype.callValidator=function(a){var b=this.classValidator(a);if(null===b)return null;void 0!==b&&(a=b);if(b=this.getValidator()){b=b.call(this,a);if(null===b)return null;void 0!==b&&(a=b)}return a};Blockly.Field.prototype.getSvgRoot=function(){return this.fieldGroup_};
		Blockly.Field.prototype.render_=function(){if(this.visible_&&this.textElement_){var a=this.textElement_.textContent+"\n"+this.textElement_.className.baseVal;if(Blockly.Field.cacheWidths_&&Blockly.Field.cacheWidths_[a])var b=Blockly.Field.cacheWidths_[a];else{try{b=this.textElement_.getComputedTextLength()}catch(d){b=8*this.textElement_.textContent.length}Blockly.Field.cacheWidths_&&(Blockly.Field.cacheWidths_[a]=b)}this.EDITABLE&&(b+=Blockly.BlockSvg.EDITABLE_FIELD_PADDING);var c=0;this.positionArrow&&
		(c=this.positionArrow(b),b+=c);this.box_&&(b+=2*Blockly.BlockSvg.BOX_FIELD_PADDING);a=(b-c)/2;this.sourceBlock_.RTL&&(a+=c);this.sourceBlock_.isShadow()&&!this.positionArrow&&(c=Blockly.BlockSvg.FIELD_WIDTH/2,a=this.sourceBlock_.RTL?Math.min(b-c,a):Math.max(c,a));this.textElement_.setAttribute("x",a)}else b=0;this.size_.width=b;this.box_&&(this.box_.setAttribute("width",this.size_.width),this.box_.setAttribute("height",this.size_.height))};
		Blockly.Field.startCache=function(){Blockly.Field.cacheReference_++;Blockly.Field.cacheWidths_||(Blockly.Field.cacheWidths_={})};Blockly.Field.stopCache=function(){Blockly.Field.cacheReference_--;Blockly.Field.cacheReference_||(Blockly.Field.cacheWidths_=null)};Blockly.Field.prototype.getSize=function(){this.size_.width||this.render_();return this.size_};
		Blockly.Field.prototype.getScaledBBox_=function(){var a=this.getSize();return new goog.math.Size(a.width*this.sourceBlock_.workspace.scale,a.height*this.sourceBlock_.workspace.scale)};Blockly.Field.prototype.getText=function(){return this.text_};Blockly.Field.prototype.setText=function(a){null!==a&&(a=String(a),a!==this.text_&&(this.text_=a,this.updateTextNode_(),this.sourceBlock_&&this.sourceBlock_.rendered&&(this.sourceBlock_.render(),this.sourceBlock_.bumpNeighbours_())))};
		Blockly.Field.prototype.updateTextNode_=function(){if(this.textElement_){var a=this.text_;a.length>this.maxDisplayLength?(a=a.substring(0,this.maxDisplayLength-2)+"\u2026",this.textElement_.setAttribute("class","blocklyText blocklyTextTruncated")):this.textElement_.setAttribute("class","blocklyText");goog.dom.removeChildren(this.textElement_);a=a.replace(/\s/g,Blockly.Field.NBSP);this.sourceBlock_.RTL&&a&&(a+="\u200f");a||(a=Blockly.Field.NBSP);a=document.createTextNode(a);this.textElement_.appendChild(a);
		this.size_.width=0}};Blockly.Field.prototype.getValue=function(){return this.getText()};Blockly.Field.prototype.setValue=function(a){if(null!==a){var b=this.getValue();b!=a&&(this.sourceBlock_&&Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,b,a)),this.setText(a))}};
		Blockly.Field.prototype.onMouseUp_=function(a){if(!goog.userAgent.IPHONE&&!goog.userAgent.IPAD||goog.userAgent.isVersionOrHigher("537.51.2")||0===a.layerX||0===a.layerY)Blockly.isRightButton(a)||this.sourceBlock_.workspace.isDragging()||this.sourceBlock_.isEditable()&&this.showEditor_()};Blockly.Field.prototype.setTooltip=function(){};
		Blockly.Field.prototype.getClickTarget_=function(){for(var a=0,b=0,c;c=this.sourceBlock_.inputList[b];b++)a+=c.fieldRow.length;return 1>=a?this.sourceBlock_.getSvgRoot():this.getSvgRoot()};Blockly.Field.prototype.getAbsoluteXY_=function(){return goog.style.getPageOffset(this.getClickTarget_())};Blockly.Tooltip={};Blockly.Tooltip.visible=!1;Blockly.Tooltip.LIMIT=50;Blockly.Tooltip.mouseOutPid_=0;Blockly.Tooltip.showPid_=0;Blockly.Tooltip.lastX_=0;Blockly.Tooltip.lastY_=0;Blockly.Tooltip.element_=null;Blockly.Tooltip.poisonedElement_=null;Blockly.Tooltip.OFFSET_X=0;Blockly.Tooltip.OFFSET_Y=10;Blockly.Tooltip.RADIUS_OK=10;Blockly.Tooltip.HOVER_MS=750;Blockly.Tooltip.MARGINS=5;Blockly.Tooltip.DIV=null;
		Blockly.Tooltip.createDom=function(){Blockly.Tooltip.DIV||(Blockly.Tooltip.DIV=goog.dom.createDom("DIV","blocklyTooltipDiv"),document.body.appendChild(Blockly.Tooltip.DIV))};Blockly.Tooltip.bindMouseEvents=function(a){Blockly.bindEvent_(a,"mouseover",null,Blockly.Tooltip.onMouseOver_);Blockly.bindEvent_(a,"mouseout",null,Blockly.Tooltip.onMouseOut_);a.addEventListener("mousemove",Blockly.Tooltip.onMouseMove_,!1)};
		Blockly.Tooltip.onMouseOver_=function(a){for(a=a.target;!goog.isString(a.tooltip)&&!goog.isFunction(a.tooltip);)a=a.tooltip;Blockly.Tooltip.element_!=a&&(Blockly.Tooltip.hide(),Blockly.Tooltip.poisonedElement_=null,Blockly.Tooltip.element_=a);clearTimeout(Blockly.Tooltip.mouseOutPid_)};Blockly.Tooltip.onMouseOut_=function(){Blockly.Tooltip.mouseOutPid_=setTimeout(function(){Blockly.Tooltip.element_=null;Blockly.Tooltip.poisonedElement_=null;Blockly.Tooltip.hide()},1);clearTimeout(Blockly.Tooltip.showPid_)};
		Blockly.Tooltip.onMouseMove_=function(a){if(Blockly.Tooltip.element_&&Blockly.Tooltip.element_.tooltip&&Blockly.dragMode_==Blockly.DRAG_NONE&&!Blockly.WidgetDiv.isVisible())if(Blockly.Tooltip.visible){var b=Blockly.Tooltip.lastX_-a.pageX;a=Blockly.Tooltip.lastY_-a.pageY;Math.sqrt(b*b+a*a)>Blockly.Tooltip.RADIUS_OK&&Blockly.Tooltip.hide()}else Blockly.Tooltip.poisonedElement_!=Blockly.Tooltip.element_&&(clearTimeout(Blockly.Tooltip.showPid_),Blockly.Tooltip.lastX_=a.pageX,Blockly.Tooltip.lastY_=a.pageY,
		Blockly.Tooltip.showPid_=setTimeout(Blockly.Tooltip.show_,Blockly.Tooltip.HOVER_MS))};Blockly.Tooltip.hide=function(){Blockly.Tooltip.visible&&(Blockly.Tooltip.visible=!1,Blockly.Tooltip.DIV&&(Blockly.Tooltip.DIV.style.display="none"));clearTimeout(Blockly.Tooltip.showPid_)};
		Blockly.Tooltip.show_=function(){Blockly.Tooltip.poisonedElement_=Blockly.Tooltip.element_;if(Blockly.Tooltip.DIV){goog.dom.removeChildren(Blockly.Tooltip.DIV);for(var a=Blockly.Tooltip.element_.tooltip;goog.isFunction(a);)a=a();for(var a=Blockly.utils.wrap(a,Blockly.Tooltip.LIMIT),a=a.split("\n"),b=0;b<a.length;b++){var c=document.createElement("div");c.appendChild(document.createTextNode(a[b]));Blockly.Tooltip.DIV.appendChild(c)}a=Blockly.Tooltip.element_.RTL;b=goog.dom.getViewportSize();Blockly.Tooltip.DIV.style.direction=
		a?"rtl":"ltr";Blockly.Tooltip.DIV.style.display="block";Blockly.Tooltip.visible=!0;var c=Blockly.Tooltip.lastX_,c=a?c-(Blockly.Tooltip.OFFSET_X+Blockly.Tooltip.DIV.offsetWidth):c+Blockly.Tooltip.OFFSET_X,d=Blockly.Tooltip.lastY_+Blockly.Tooltip.OFFSET_Y;d+Blockly.Tooltip.DIV.offsetHeight>b.height+window.scrollY&&(d-=Blockly.Tooltip.DIV.offsetHeight+2*Blockly.Tooltip.OFFSET_Y);a?c=Math.max(Blockly.Tooltip.MARGINS-window.scrollX,c):c+Blockly.Tooltip.DIV.offsetWidth>b.width+window.scrollX-2*Blockly.Tooltip.MARGINS&&
		(c=b.width-Blockly.Tooltip.DIV.offsetWidth-2*Blockly.Tooltip.MARGINS);Blockly.Tooltip.DIV.style.top=d+"px";Blockly.Tooltip.DIV.style.left=c+"px"}};Blockly.FieldLabel=function(a,b){this.size_=new goog.math.Size(0,0);this.class_=b;this.setValue(a)};goog.inherits(Blockly.FieldLabel,Blockly.Field);Blockly.FieldLabel.prototype.EDITABLE=!1;
		Blockly.FieldLabel.prototype.init=function(){this.textElement_||(this.textElement_=Blockly.createSvgElement("text",{"class":"blocklyText",y:Blockly.BlockSvg.FIELD_TOP_PADDING,"text-anchor":"middle","dominant-baseline":"middle"},null),this.class_&&Blockly.addClass_(this.textElement_,this.class_),this.visible_||(this.textElement_.style.display="none"),this.sourceBlock_.getSvgRoot().appendChild(this.textElement_),this.textElement_.tooltip=this.sourceBlock_,Blockly.Tooltip.bindMouseEvents(this.textElement_),
		this.updateTextNode_())};Blockly.FieldLabel.prototype.dispose=function(){goog.dom.removeNode(this.textElement_);this.textElement_=null};Blockly.FieldLabel.prototype.getSvgRoot=function(){return this.textElement_};Blockly.FieldLabel.prototype.setTooltip=function(a){this.textElement_.tooltip=a};Blockly.Input=function(a,b,c,d){this.type=a;this.name=b;this.sourceBlock_=c;this.connection=d;this.fieldRow=[]};Blockly.Input.prototype.align=Blockly.ALIGN_LEFT;Blockly.Input.prototype.visible_=!0;
		Blockly.Input.prototype.appendField=function(a,b){if(!a&&!b)return this;goog.isString(a)&&(a=new Blockly.FieldLabel(a));a.setSourceBlock(this.sourceBlock_);this.sourceBlock_.rendered&&a.init();a.name=b;a.prefixField&&this.appendField(a.prefixField);this.fieldRow.push(a);a.suffixField&&this.appendField(a.suffixField);this.sourceBlock_.rendered&&(this.sourceBlock_.render(),this.sourceBlock_.bumpNeighbours_());return this};
		Blockly.Input.prototype.removeField=function(a){for(var b=0,c;c=this.fieldRow[b];b++)if(c.name===a){c.dispose();this.fieldRow.splice(b,1);this.sourceBlock_.rendered&&(this.sourceBlock_.render(),this.sourceBlock_.bumpNeighbours_());return}goog.asserts.fail('Field "%s" not found.',a)};Blockly.Input.prototype.isVisible=function(){return this.visible_};
		Blockly.Input.prototype.setVisible=function(a){var b=[];if(this.visible_==a)return b;for(var c=(this.visible_=a)?"block":"none",d=0,e;e=this.fieldRow[d];d++)e.setVisible(a);this.connection&&(a?b=this.connection.unhideAll():this.connection.hideAll(),d=this.connection.targetBlock())&&(d.getSvgRoot().style.display=c,a||(d.rendered=!1));return b};Blockly.Input.prototype.setCheck=function(a){if(!this.connection)throw"This input does not have a connection.";this.connection.setCheck(a);return this};
		Blockly.Input.prototype.setAlign=function(a){this.align=a;this.sourceBlock_.rendered&&this.sourceBlock_.render();return this};Blockly.Input.prototype.init=function(){if(this.sourceBlock_.workspace.rendered)for(var a=0;a<this.fieldRow.length;a++)this.fieldRow[a].init(this.sourceBlock_)};Blockly.Input.prototype.dispose=function(){for(var a=0,b;b=this.fieldRow[a];a++)b.dispose();this.connection&&this.connection.dispose();this.sourceBlock_=null};Blockly.ConnectionDB=function(){};Blockly.ConnectionDB.prototype=[];Blockly.ConnectionDB.constructor=Blockly.ConnectionDB;Blockly.ConnectionDB.prototype.addConnection=function(a){if(a.inDB_)throw"Connection already in database.";if(!a.getSourceBlock().isInFlyout){var b=this.findPositionForConnection_(a);this.splice(b,0,a);a.inDB_=!0}};
		Blockly.ConnectionDB.prototype.findConnection=function(a){if(!this.length)return-1;var b=this.findPositionForConnection_(a);if(b>=this.length)return-1;for(var c=a.y_,d=b;0<=d&&this[d].y_==c;){if(this[d]==a)return d;d--}for(;b<this.length&&this[b].y_==c;){if(this[b]==a)return b;b++}return-1};
		Blockly.ConnectionDB.prototype.findPositionForConnection_=function(a){if(!this.length)return 0;for(var b=0,c=this.length;b<c;){var d=Math.floor((b+c)/2);if(this[d].y_<a.y_)b=d+1;else if(this[d].y_>a.y_)c=d;else{b=d;break}}return b};Blockly.ConnectionDB.prototype.removeConnection_=function(a){if(!a.inDB_)throw"Connection not in database.";var b=this.findConnection(a);if(-1==b)throw"Unable to find connection in connectionDB.";a.inDB_=!1;this.splice(b,1)};
		Blockly.ConnectionDB.prototype.getNeighbours=function(a,b){function c(a){var c=e-d[a].x_,g=f-d[a].y_;Math.sqrt(c*c+g*g)<=b&&l.push(d[a]);return g<b}for(var d=this,e=a.x_,f=a.y_,g=0,h=d.length-2,k=h;g<k;)d[k].y_<f?g=k:h=k,k=Math.floor((g+h)/2);var l=[],h=g=k;if(d.length){for(;0<=g&&c(g);)g--;do h++;while(h<d.length&&c(h))}return l};Blockly.ConnectionDB.prototype.isInYRange_=function(a,b,c){return Math.abs(this[a].y_-b)<=c};
		Blockly.ConnectionDB.prototype.searchForClosest=function(a,b,c){if(!this.length)return{connection:null,radius:b};var d=a.y_,e=a.x_;a.x_=e+c.x;a.y_=d+c.y;var f=this.findPositionForConnection_(a);c=null;for(var g=b,h,k=f-1;0<=k&&this.isInYRange_(k,a.y_,b);)h=this[k],a.isConnectionAllowed(h,g)&&(c=h,g=h.distanceFrom(a)),k--;for(;f<this.length&&this.isInYRange_(f,a.y_,b);)h=this[f],a.isConnectionAllowed(h,g)&&(c=h,g=h.distanceFrom(a)),f++;a.x_=e;a.y_=d;return{connection:c,radius:g}};
		Blockly.ConnectionDB.init=function(a){var b=[];b[Blockly.INPUT_VALUE]=new Blockly.ConnectionDB;b[Blockly.OUTPUT_VALUE]=new Blockly.ConnectionDB;b[Blockly.NEXT_STATEMENT]=new Blockly.ConnectionDB;b[Blockly.PREVIOUS_STATEMENT]=new Blockly.ConnectionDB;a.connectionDBList=b};Blockly.constants={};Blockly.DRAG_RADIUS=3;Blockly.SNAP_RADIUS=48;Blockly.CONNECTING_SNAP_RADIUS=96;Blockly.CURRENT_CONNECTION_PREFERENCE=20;Blockly.BUMP_DELAY=0;Blockly.COLLAPSE_CHARS=30;Blockly.LONGPRESS=750;Blockly.SOUND_LIMIT=100;Blockly.HSV_SATURATION=.45;Blockly.HSV_VALUE=.65;Blockly.SPRITE={width:96,height:124,url:"sprites.png"};Blockly.SVG_NS="http://www.w3.org/2000/svg";Blockly.HTML_NS="http://www.w3.org/1999/xhtml";Blockly.INPUT_VALUE=1;Blockly.OUTPUT_VALUE=2;Blockly.NEXT_STATEMENT=3;
		Blockly.PREVIOUS_STATEMENT=4;Blockly.DUMMY_INPUT=5;Blockly.ALIGN_LEFT=-1;Blockly.ALIGN_CENTRE=0;Blockly.ALIGN_RIGHT=1;Blockly.DRAG_NONE=0;Blockly.DRAG_STICKY=1;Blockly.DRAG_BEGIN=1;Blockly.DRAG_FREE=2;Blockly.OPPOSITE_TYPE=[];Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE]=Blockly.OUTPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE]=Blockly.INPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT]=Blockly.PREVIOUS_STATEMENT;Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT]=Blockly.NEXT_STATEMENT;
		Blockly.TOOLBOX_AT_TOP=0;Blockly.TOOLBOX_AT_BOTTOM=1;Blockly.TOOLBOX_AT_LEFT=2;Blockly.TOOLBOX_AT_RIGHT=3;Blockly.OUTPUT_SHAPE_HEXAGONAL=1;Blockly.OUTPUT_SHAPE_ROUND=2;Blockly.OUTPUT_SHAPE_SQUARE=3;Blockly.STACK_GLOW_RADIUS=1.3;Blockly.REPLACEMENT_GLOW_RADIUS=2;Blockly.Categories={motion:"motion",looks:"looks",sound:"sounds",pen:"pen",data:"data",event:"events",control:"control",sensing:"sensing",operators:"operators",more:"more"};Blockly.DropDownDiv=function(){};Blockly.DropDownDiv.DIV_=null;Blockly.DropDownDiv.boundsElement_=null;Blockly.DropDownDiv.owner_=null;Blockly.DropDownDiv.ARROW_SIZE=16;Blockly.DropDownDiv.BORDER_SIZE=1;Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING=12;Blockly.DropDownDiv.PADDING_Y=20;Blockly.DropDownDiv.ANIMATION_TIME=.25;Blockly.DropDownDiv.animateOutTimer_=null;Blockly.DropDownDiv.onHide_=0;
		Blockly.DropDownDiv.createDom=function(){Blockly.DropDownDiv.DIV_||(Blockly.DropDownDiv.DIV_=goog.dom.createDom("div","blocklyDropDownDiv"),document.body.appendChild(Blockly.DropDownDiv.DIV_),Blockly.DropDownDiv.content_=goog.dom.createDom("div","blocklyDropDownContent"),Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_),Blockly.DropDownDiv.arrow_=goog.dom.createDom("div","blocklyDropDownArrow"),Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_),Blockly.DropDownDiv.DIV_.style.transition=
		"transform "+Blockly.DropDownDiv.ANIMATION_TIME+"s, opacity "+Blockly.DropDownDiv.ANIMATION_TIME+"s")};Blockly.DropDownDiv.setBoundsElement=function(a){Blockly.DropDownDiv.boundsElement_=a};Blockly.DropDownDiv.getContentDiv=function(){return Blockly.DropDownDiv.content_};Blockly.DropDownDiv.clearContent=function(){Blockly.DropDownDiv.content_.innerHTML=""};Blockly.DropDownDiv.setColour=function(a,b){Blockly.DropDownDiv.DIV_.style.backgroundColor=a;Blockly.DropDownDiv.DIV_.style.borderColor=b};
		Blockly.DropDownDiv.setCategory=function(a){Blockly.DropDownDiv.DIV_.setAttribute("data-category",a)};Blockly.DropDownDiv.showPositionedByBlock=function(a,b,c,d){var e=b.workspace.scale,f=b.width;a=b.height;f*=e;a*=e;e=goog.style.getPageOffset(b.getSvgRoot());f=e.x+f/2;a=e.y+a;e=e.y;d&&(e+=d);Blockly.DropDownDiv.setBoundsElement(b.workspace.getParentSvg().parentNode);return Blockly.DropDownDiv.show(this,f,a,f,e,c)};
		Blockly.DropDownDiv.show=function(a,b,c,d,e,f){Blockly.DropDownDiv.owner_=a;Blockly.DropDownDiv.onHide_=f;a=Blockly.DropDownDiv.DIV_;b=Blockly.DropDownDiv.getPositionMetrics(b,c,d,e);Blockly.DropDownDiv.arrow_.style.transform="translate("+b.arrowX+"px,"+b.arrowY+"px) rotate(45deg)";Blockly.DropDownDiv.arrow_.setAttribute("class",b.arrowAtTop?"blocklyDropDownArrow arrowTop":"blocklyDropDownArrow arrowBottom");a.style.left=b.initialX+"px";a.style.top=b.initialY+"px";a.style.display="block";a.style.opacity=
		1;a.style.transform="translate("+(b.finalX-b.initialX)+"px,"+(b.finalY-b.initialY)+"px)";return b.arrowAtTop};
		Blockly.DropDownDiv.getPositionMetrics=function(a,b,c,d){var e=Blockly.DropDownDiv.DIV_,f=goog.style.getPageOffset(Blockly.DropDownDiv.boundsElement_),g=goog.style.getSize(Blockly.DropDownDiv.boundsElement_),e=goog.style.getSize(e),h;b+e.height>f.y+g.height?d-e.height<f.y?(c=b+Blockly.DropDownDiv.PADDING_Y,h=!1):(a=c,c=d-e.height-Blockly.DropDownDiv.PADDING_Y,h=!0):(c=b+Blockly.DropDownDiv.PADDING_Y,h=!1);var k=a-Blockly.DropDownDiv.ARROW_SIZE/2,k=Math.max(f.x,Math.min(k,f.x+g.width));a=Math.max(f.x,
		Math.min(a-e.width/2,f.x+g.width-e.width));k=Math.max(Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING,Math.min(k-a,e.width-Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING-Blockly.DropDownDiv.ARROW_SIZE));f=h?e.height-Blockly.DropDownDiv.BORDER_SIZE:0;f-=Blockly.DropDownDiv.ARROW_SIZE/2+Blockly.DropDownDiv.BORDER_SIZE;return{initialX:a,initialY:h?d-e.height:b,finalX:a,finalY:c,arrowX:k,arrowY:f,arrowAtTop:!h}};Blockly.DropDownDiv.isVisible=function(){return!!Blockly.DropDownDiv.owner_};
		Blockly.DropDownDiv.hideIfOwner=function(a){return Blockly.DropDownDiv.owner_===a?(Blockly.DropDownDiv.hide(),!0):!1};Blockly.DropDownDiv.hide=function(){var a=Blockly.DropDownDiv.DIV_;a.style.transform="translate(0px, 0px)";a.style.opacity=0;Blockly.DropDownDiv.animateOutTimer_=setTimeout(function(){Blockly.DropDownDiv.hideWithoutAnimation()},1E3*Blockly.DropDownDiv.ANIMATION_TIME);Blockly.DropDownDiv.onHide_&&(Blockly.DropDownDiv.onHide_(),Blockly.DropDownDiv.onHide_=null)};
		Blockly.DropDownDiv.hideWithoutAnimation=function(){if(Blockly.DropDownDiv.isVisible()){var a=Blockly.DropDownDiv.DIV_;Blockly.DropDownDiv.animateOutTimer_&&window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);a.style.transform="";a.style.top="";a.style.left="";a.style.display="none";Blockly.DropDownDiv.clearContent();Blockly.DropDownDiv.owner_=null;Blockly.DropDownDiv.onHide_&&(Blockly.DropDownDiv.onHide_(),Blockly.DropDownDiv.onHide_=null)}};Blockly.Events={};Blockly.Events.group_="";Blockly.Events.recordUndo=!0;Blockly.Events.disabled_=0;Blockly.Events.CREATE="create";Blockly.Events.DELETE="delete";Blockly.Events.CHANGE="change";Blockly.Events.MOVE="move";Blockly.Events.UI="ui";Blockly.Events.FIRE_QUEUE_=[];Blockly.Events.fire=function(a){Blockly.Events.isEnabled()&&(Blockly.Events.FIRE_QUEUE_.length||setTimeout(Blockly.Events.fireNow_,0),Blockly.Events.FIRE_QUEUE_.push(a))};
		Blockly.Events.fireNow_=function(){for(var a=Blockly.Events.filter(Blockly.Events.FIRE_QUEUE_,!0),b=Blockly.Events.FIRE_QUEUE_.length=0,c;c=a[b];b++){var d=Blockly.Workspace.getById(c.workspaceId);d&&d.fireChangeListener(c)}};
		Blockly.Events.filter=function(a,b){var c=goog.array.clone(a);b||c.reverse();for(var d=0,e;e=c[d];d++)for(var f=d+1,g;g=c[f];f++)e.type==g.type&&e.blockId==g.blockId&&e.workspaceId==g.workspaceId&&(e.type==Blockly.Events.MOVE?(e.newParentId=g.newParentId,e.newInputName=g.newInputName,e.newCoordinate=g.newCoordinate,c.splice(f,1),f--):e.type==Blockly.Events.CHANGE&&e.element==g.element&&e.name==g.name?(e.newValue=g.newValue,c.splice(f,1),f--):e.type!=Blockly.Events.UI||"click"!=g.element||"commentOpen"!=
		e.element&&"mutatorOpen"!=e.element&&"warningOpen"!=e.element||(e.newValue=g.newValue,c.splice(f,1),f--));for(d=c.length-1;0<=d;d--)c[d].isNull()&&c.splice(d,1);b||c.reverse();for(d=1;e=c[d];d++)e.type==Blockly.Events.CHANGE&&"mutation"==e.element&&c.unshift(c.splice(d,1)[0]);return c};Blockly.Events.clearPendingUndo=function(){for(var a=0,b;b=Blockly.Events.FIRE_QUEUE_[a];a++)b.recordUndo=!1};Blockly.Events.disable=function(){Blockly.Events.disabled_++};Blockly.Events.enable=function(){Blockly.Events.disabled_--};
		Blockly.Events.isEnabled=function(){return 0==Blockly.Events.disabled_};Blockly.Events.getGroup=function(){return Blockly.Events.group_};Blockly.Events.setGroup=function(a){Blockly.Events.group_="boolean"==typeof a?a?Blockly.genUid():"":a};Blockly.Events.getDescendantIds_=function(a){var b=[];a=a.getDescendants();for(var c=0,d;d=a[c];c++)b[c]=d.id;return b};
		Blockly.Events.fromJson=function(a,b){var c;switch(a.type){case Blockly.Events.CREATE:c=new Blockly.Events.Create(null);break;case Blockly.Events.DELETE:c=new Blockly.Events.Delete(null);break;case Blockly.Events.CHANGE:c=new Blockly.Events.Change(null);break;case Blockly.Events.MOVE:c=new Blockly.Events.Move(null);break;case Blockly.Events.UI:c=new Blockly.Events.Ui(null);break;default:throw"Unknown event type.";}c.fromJson(a);c.workspaceId=b.id;return c};
		Blockly.Events.Abstract=function(a){a&&(this.blockId=a.id,this.workspaceId=a.workspace.id);this.group=Blockly.Events.group_;this.recordUndo=Blockly.Events.recordUndo};Blockly.Events.Abstract.prototype.toJson=function(){var a={type:this.type};this.blockId&&(a.blockId=this.blockId);this.group&&(a.group=this.group);return a};Blockly.Events.Abstract.prototype.fromJson=function(a){this.blockId=a.blockId;this.group=a.group};Blockly.Events.Abstract.prototype.isNull=function(){return!1};
		Blockly.Events.Abstract.prototype.run=function(){};Blockly.Events.Create=function(a){a&&(Blockly.Events.Create.superClass_.constructor.call(this,a),this.xml=Blockly.Xml.blockToDomWithXY(a),this.ids=Blockly.Events.getDescendantIds_(a))};goog.inherits(Blockly.Events.Create,Blockly.Events.Abstract);Blockly.Events.Create.prototype.type=Blockly.Events.CREATE;
		Blockly.Events.Create.prototype.toJson=function(){var a=Blockly.Events.Create.superClass_.toJson.call(this);a.xml=Blockly.Xml.domToText(this.xml);a.ids=this.ids;return a};Blockly.Events.Create.prototype.fromJson=function(a){Blockly.Events.Create.superClass_.fromJson.call(this,a);this.xml=Blockly.Xml.textToDom("<xml>"+a.xml+"</xml>").firstChild;this.ids=a.ids};
		Blockly.Events.Create.prototype.run=function(a){var b=Blockly.Workspace.getById(this.workspaceId);if(a)a=goog.dom.createDom("xml"),a.appendChild(this.xml),Blockly.Xml.domToWorkspace(a,b);else{a=0;for(var c;c=this.ids[a];a++){var d=b.getBlockById(c);d?d.dispose(!1,!1):c==this.blockId&&console.warn("Can't uncreate non-existant block: "+c)}}};
		Blockly.Events.Delete=function(a){if(a){if(a.getParent())throw"Connected blocks cannot be deleted.";Blockly.Events.Delete.superClass_.constructor.call(this,a);this.oldXml=Blockly.Xml.blockToDomWithXY(a);this.ids=Blockly.Events.getDescendantIds_(a)}};goog.inherits(Blockly.Events.Delete,Blockly.Events.Abstract);Blockly.Events.Delete.prototype.type=Blockly.Events.DELETE;Blockly.Events.Delete.prototype.toJson=function(){var a=Blockly.Events.Delete.superClass_.toJson.call(this);a.ids=this.ids;return a};
		Blockly.Events.Delete.prototype.fromJson=function(a){Blockly.Events.Delete.superClass_.fromJson.call(this,a);this.ids=a.ids};Blockly.Events.Delete.prototype.run=function(a){var b=Blockly.Workspace.getById(this.workspaceId);if(a){a=0;for(var c;c=this.ids[a];a++){var d=b.getBlockById(c);d?d.dispose(!1,!1):c==this.blockId&&console.warn("Can't delete non-existant block: "+c)}}else a=goog.dom.createDom("xml"),a.appendChild(this.oldXml),Blockly.Xml.domToWorkspace(a,b)};
		Blockly.Events.Change=function(a,b,c,d,e){a&&(Blockly.Events.Change.superClass_.constructor.call(this,a),this.element=b,this.name=c,this.oldValue=d,this.newValue=e)};goog.inherits(Blockly.Events.Change,Blockly.Events.Abstract);Blockly.Events.Change.prototype.type=Blockly.Events.CHANGE;Blockly.Events.Change.prototype.toJson=function(){var a=Blockly.Events.Change.superClass_.toJson.call(this);a.element=this.element;this.name&&(a.name=this.name);a.newValue=this.newValue;return a};
		Blockly.Events.Change.prototype.fromJson=function(a){Blockly.Events.Change.superClass_.fromJson.call(this,a);this.element=a.element;this.name=a.name;this.newValue=a.newValue};Blockly.Events.Change.prototype.isNull=function(){return this.oldValue==this.newValue};
		Blockly.Events.Change.prototype.run=function(a){var b=Blockly.Workspace.getById(this.workspaceId).getBlockById(this.blockId);if(b)switch(b.mutator&&b.mutator.setVisible(!1),a=a?this.newValue:this.oldValue,this.element){case "field":(b=b.getField(this.name))?(b.callValidator(a),b.setValue(a)):console.warn("Can't set non-existant field: "+this.name);break;case "comment":b.setCommentText(a||null);break;case "collapsed":b.setCollapsed(a);break;case "disabled":b.setDisabled(a);break;case "inline":b.setInputsInline(a);
		break;case "mutation":var c="";b.mutationToDom&&(c=(c=b.mutationToDom())&&Blockly.Xml.domToText(c));if(b.domToMutation){a=a||"<mutation></mutation>";var d=Blockly.Xml.textToDom("<xml>"+a+"</xml>");b.domToMutation(d.firstChild)}Blockly.Events.fire(new Blockly.Events.Change(b,"mutation",null,c,a));break;default:console.warn("Unknown change type: "+this.element)}else console.warn("Can't change non-existant block: "+this.blockId)};
		Blockly.Events.Move=function(a){a&&(Blockly.Events.Move.superClass_.constructor.call(this,a),a=this.currentLocation_(),this.oldParentId=a.parentId,this.oldInputName=a.inputName,this.oldCoordinate=a.coordinate)};goog.inherits(Blockly.Events.Move,Blockly.Events.Abstract);Blockly.Events.Move.prototype.type=Blockly.Events.MOVE;
		Blockly.Events.Move.prototype.toJson=function(){var a=Blockly.Events.Move.superClass_.toJson.call(this);this.newParentId&&(a.newParentId=this.newParentId);this.newInputName&&(a.newInputName=this.newInputName);this.newCoordinate&&(a.newCoordinate=Math.round(this.newCoordinate.x)+","+Math.round(this.newCoordinate.y));return a};
		Blockly.Events.Move.prototype.fromJson=function(a){Blockly.Events.Move.superClass_.fromJson.call(this,a);this.newParentId=a.newParentId;this.newInputName=a.newInputName;a.newCoordinate&&(a=a.newCoordinate.split(","),this.newCoordinate=new goog.math.Coordinate(parseFloat(a[0]),parseFloat(a[1])))};Blockly.Events.Move.prototype.recordNew=function(){var a=this.currentLocation_();this.newParentId=a.parentId;this.newInputName=a.inputName;this.newCoordinate=a.coordinate};
		Blockly.Events.Move.prototype.currentLocation_=function(){var a=Blockly.Workspace.getById(this.workspaceId).getBlockById(this.blockId),b={},c=a.getParent();if(c){if(b.parentId=c.id,a=c.getInputWithBlock(a))b.inputName=a.name}else b.coordinate=a.getRelativeToSurfaceXY();return b};Blockly.Events.Move.prototype.isNull=function(){return this.oldParentId==this.newParentId&&this.oldInputName==this.newInputName&&goog.math.Coordinate.equals(this.oldCoordinate,this.newCoordinate)};
		Blockly.Events.Move.prototype.run=function(a){var b=Blockly.Workspace.getById(this.workspaceId),c=b.getBlockById(this.blockId);if(c){var d=a?this.newParentId:this.oldParentId,e=a?this.newInputName:this.oldInputName;a=a?this.newCoordinate:this.oldCoordinate;var f=null;if(d&&(f=b.getBlockById(d),!f)){console.warn("Can't connect to non-existant block: "+d);return}c.getParent()&&c.unplug();if(a)e=c.getRelativeToSurfaceXY(),c.moveBy(a.x-e.x,a.y-e.y);else{var c=c.outputConnection||c.previousConnection,
		g;if(e){if(b=f.getInput(e))g=b.connection}else c.type==Blockly.PREVIOUS_STATEMENT&&(g=f.nextConnection);g?c.connect(g):console.warn("Can't connect to non-existant input: "+e)}}else console.warn("Can't move non-existant block: "+this.blockId)};Blockly.Events.Ui=function(a,b,c,d){Blockly.Events.Ui.superClass_.constructor.call(this,a);this.element=b;this.oldValue=c;this.newValue=d;this.recordUndo=!1};goog.inherits(Blockly.Events.Ui,Blockly.Events.Abstract);Blockly.Events.Ui.prototype.type=Blockly.Events.UI;
		Blockly.Events.Ui.prototype.toJson=function(){var a=Blockly.Events.Ui.superClass_.toJson.call(this);a.element=this.element;void 0!==this.newValue&&(a.newValue=this.newValue);return a};Blockly.Events.Ui.prototype.fromJson=function(a){Blockly.Events.Ui.superClass_.fromJson.call(this,a);this.element=a.element;this.newValue=a.newValue};
		Blockly.Events.disableOrphans=function(a){if(a.type==Blockly.Events.MOVE||a.type==Blockly.Events.CREATE){Blockly.Events.disable();if(a=Blockly.Workspace.getById(a.workspaceId).getBlockById(a.blockId))if(a.getParent()&&!a.getParent().disabled){a=a.getDescendants();for(var b=0,c;c=a[b];b++)c.setDisabled(!1)}else if((a.outputConnection||a.previousConnection)&&Blockly.dragMode_==Blockly.DRAG_NONE){do a.setDisabled(!0),a=a.getNextBlock();while(a)}Blockly.Events.enable()}};Blockly.Options=function(a){var b=!!a.readOnly;if(b)var c=null,d=!1,e=!1,f=!1,g=!1,h=!1,k=!1;else a.toolbox||(c=(new DOMParser).parseFromString(Blockly.Blocks.defaultToolbox,"text/xml"),a.toolbox=c.children[0]),c=Blockly.Options.parseToolboxTree(a.toolbox),d=!(!c||!c.getElementsByTagName("category").length),e=a.trashcan,void 0===e&&(e=d),f=a.collapse,void 0===f&&(f=d),g=a.comments,void 0===g&&(g=d),h=a.disable,void 0===h&&(h=d),k=a.sounds,void 0===k&&(k=!0);var l=!!a.rtl,m=a.horizontalLayout;void 0===
		m&&(m=!1);var n=a.toolboxPosition,n="end"===n?!1:!0,n=m?n?Blockly.TOOLBOX_AT_TOP:Blockly.TOOLBOX_AT_BOTTOM:n==l?Blockly.TOOLBOX_AT_RIGHT:Blockly.TOOLBOX_AT_LEFT,p=a.scrollbars;void 0===p&&(p=d);var q=a.css;void 0===q&&(q=!0);var r="https://blockly-demo.appspot.com/static/media/";a.media?r=a.media:a.path&&(r=a.path+"media/");var v=!!a.realtime,w=v?a.realtimeOptions:void 0,t=a.colours;if(t)for(var u in t)t.hasOwnProperty(u)&&Blockly.Colours.hasOwnProperty(u)&&(Blockly.Colours[u]=t[u]);this.RTL=l;this.collapse=
		f;this.comments=g;this.disable=h;this.readOnly=b;this.pathToMedia=r;this.hasCategories=d;this.hasScrollbars=p;this.hasTrashcan=e;this.hasSounds=k;this.hasCss=q;this.horizontalLayout=m;this.languageTree=c;this.gridOptions=Blockly.Options.parseGridOptions_(a);this.zoomOptions=Blockly.Options.parseZoomOptions_(a);this.enableRealtime=v;this.realtimeOptions=w;this.toolboxPosition=n};Blockly.Options.prototype.parentWorkspace=null;Blockly.Options.prototype.setMetrics=null;
		Blockly.Options.prototype.getMetrics=null;Blockly.Options.parseZoomOptions_=function(a){a=a.zoom||{};var b={};b.controls=void 0===a.controls?!1:!!a.controls;b.wheel=void 0===a.wheel?!1:!!a.wheel;b.startScale=void 0===a.startScale?1:parseFloat(a.startScale);b.maxScale=void 0===a.maxScale?3:parseFloat(a.maxScale);b.minScale=void 0===a.minScale?.3:parseFloat(a.minScale);b.scaleSpeed=void 0===a.scaleSpeed?1.2:parseFloat(a.scaleSpeed);return b};
		Blockly.Options.parseGridOptions_=function(a){a=a.grid||{};var b={};b.spacing=parseFloat(a.spacing)||0;b.colour=a.colour||"#888";b.length=parseFloat(a.length)||1;b.snap=0<b.spacing&&!!a.snap;return b};Blockly.Options.parseToolboxTree=function(a){a?("string"!=typeof a&&("undefined"==typeof XSLTProcessor&&a.outerHTML?a=a.outerHTML:a instanceof Element||(a=null)),"string"==typeof a&&(a=Blockly.Xml.textToDom(a))):a=null;return a};Blockly.ScrollbarPair=function(a){this.workspace_=a;this.hScroll=new Blockly.Scrollbar(a,!0,!0);this.vScroll=new Blockly.Scrollbar(a,!1,!0);this.corner_=Blockly.createSvgElement("rect",{height:Blockly.Scrollbar.scrollbarThickness,width:Blockly.Scrollbar.scrollbarThickness,"class":"blocklyScrollbarBackground"},null);Blockly.Scrollbar.insertAfter_(this.corner_,a.getBubbleCanvas())};Blockly.ScrollbarPair.prototype.oldHostMetrics_=null;
		Blockly.ScrollbarPair.prototype.dispose=function(){goog.dom.removeNode(this.corner_);this.oldHostMetrics_=this.workspace_=this.corner_=null;this.hScroll.dispose();this.hScroll=null;this.vScroll.dispose();this.vScroll=null};
		Blockly.ScrollbarPair.prototype.resize=function(){var a=this.workspace_.getMetrics();if(a){var b=!1,c=!1;this.oldHostMetrics_&&this.oldHostMetrics_.viewWidth==a.viewWidth&&this.oldHostMetrics_.viewHeight==a.viewHeight&&this.oldHostMetrics_.absoluteTop==a.absoluteTop&&this.oldHostMetrics_.absoluteLeft==a.absoluteLeft?(this.oldHostMetrics_&&this.oldHostMetrics_.contentWidth==a.contentWidth&&this.oldHostMetrics_.viewLeft==a.viewLeft&&this.oldHostMetrics_.contentLeft==a.contentLeft||(b=!0),this.oldHostMetrics_&&
		this.oldHostMetrics_.contentHeight==a.contentHeight&&this.oldHostMetrics_.viewTop==a.viewTop&&this.oldHostMetrics_.contentTop==a.contentTop||(c=!0)):c=b=!0;b&&this.hScroll.resize(a);c&&this.vScroll.resize(a);this.oldHostMetrics_&&this.oldHostMetrics_.viewWidth==a.viewWidth&&this.oldHostMetrics_.absoluteLeft==a.absoluteLeft||this.corner_.setAttribute("x",this.vScroll.position_.x);this.oldHostMetrics_&&this.oldHostMetrics_.viewHeight==a.viewHeight&&this.oldHostMetrics_.absoluteTop==a.absoluteTop||this.corner_.setAttribute("y",
		this.hScroll.position_.y);this.oldHostMetrics_=a}};Blockly.ScrollbarPair.prototype.set=function(a,b){var c={},d=a*this.hScroll.ratio_,e=b*this.vScroll.ratio_,f=this.vScroll.scrollViewSize_;c.x=this.getRatio_(d,this.hScroll.scrollViewSize_);c.y=this.getRatio_(e,f);this.workspace_.setMetrics(c);this.hScroll.setHandlePosition(d);this.vScroll.setHandlePosition(e)};Blockly.ScrollbarPair.prototype.getRatio_=function(a,b){var c=a/b;return isNaN(c)?0:c};
		Blockly.Scrollbar=function(a,b,c){this.workspace_=a;this.pair_=c||!1;this.horizontal_=b;this.oldHostMetrics_=null;this.createDom_();this.position_=new goog.math.Coordinate(0,0);b?(this.svgBackground_.setAttribute("height",Blockly.Scrollbar.scrollbarThickness),this.svgHandle_.setAttribute("height",Blockly.Scrollbar.scrollbarThickness-5),this.svgHandle_.setAttribute("y",2.5),this.lengthAttribute_="width",this.positionAttribute_="x"):(this.svgBackground_.setAttribute("width",Blockly.Scrollbar.scrollbarThickness),
		this.svgHandle_.setAttribute("width",Blockly.Scrollbar.scrollbarThickness-5),this.svgHandle_.setAttribute("x",2.5),this.lengthAttribute_="height",this.positionAttribute_="y");this.onMouseDownBarWrapper_=Blockly.bindEvent_(this.svgBackground_,"mousedown",this,this.onMouseDownBar_);this.onMouseDownHandleWrapper_=Blockly.bindEvent_(this.svgHandle_,"mousedown",this,this.onMouseDownHandle_)};Blockly.Scrollbar.prototype.scrollViewSize_=0;Blockly.Scrollbar.prototype.handleLength_=0;
		Blockly.Scrollbar.prototype.handlePosition_=0;Blockly.Scrollbar.prototype.isVisible_=!0;Blockly.Scrollbar.scrollbarThickness=11;goog.events.BrowserFeature.TOUCH_ENABLED&&(Blockly.Scrollbar.scrollbarThickness=25);
		Blockly.Scrollbar.metricsAreEquivalent_=function(a,b){return a&&b&&a.viewWidth==b.viewWidth&&a.viewHeight==b.viewHeight&&a.viewLeft==b.viewLeft&&a.viewTop==b.viewTop&&a.absoluteTop==b.absoluteTop&&a.absoluteLeft==b.absoluteLeft&&a.contentWidth==b.contentWidth&&a.contentHeight==b.contentHeight&&a.contentLeft==b.contentLeft&&a.contentTop==b.contentTop?!0:!1};
		Blockly.Scrollbar.prototype.dispose=function(){this.cleanUp_();Blockly.unbindEvent_(this.onMouseDownBarWrapper_);this.onMouseDownBarWrapper_=null;Blockly.unbindEvent_(this.onMouseDownHandleWrapper_);this.onMouseDownHandleWrapper_=null;goog.dom.removeNode(this.svgGroup_);this.workspace_=this.svgHandle_=this.svgBackground_=this.svgGroup_=null};Blockly.Scrollbar.prototype.setHandleLength_=function(a){this.handleLength_=a;this.svgHandle_.setAttribute(this.lengthAttribute_,this.handleLength_)};
		Blockly.Scrollbar.prototype.setHandlePosition=function(a){this.handlePosition_=a;this.svgHandle_.setAttribute(this.positionAttribute_,this.handlePosition_)};Blockly.Scrollbar.prototype.setScrollViewSize_=function(a){this.scrollViewSize_=a;this.svgBackground_.setAttribute(this.lengthAttribute_,this.scrollViewSize_)};Blockly.Scrollbar.prototype.setPosition=function(a,b){this.position_.x=a;this.position_.y=b;this.svgGroup_.setAttribute("transform","translate("+this.position_.x+","+this.position_.y+")")};
		Blockly.Scrollbar.prototype.resize=function(a){if(!a&&(a=this.workspace_.getMetrics(),!a))return;Blockly.Scrollbar.metricsAreEquivalent_(a,this.oldHostMetrics_)||(this.oldHostMetrics_=a,this.horizontal_?this.resizeHorizontal_(a):this.resizeVertical_(a),this.onScroll_())};Blockly.Scrollbar.prototype.resizeHorizontal_=function(a){this.resizeViewHorizontal(a)};
		Blockly.Scrollbar.prototype.resizeViewHorizontal=function(a){var b=a.viewWidth-1;this.pair_&&(b-=Blockly.Scrollbar.scrollbarThickness);this.setScrollViewSize_(Math.max(0,b));b=a.absoluteLeft+.5;this.pair_&&this.workspace_.RTL&&(b+=Blockly.Scrollbar.scrollbarThickness);this.setPosition(b,a.absoluteTop+a.viewHeight-Blockly.Scrollbar.scrollbarThickness-.5);this.resizeContentHorizontal(a)};
		Blockly.Scrollbar.prototype.resizeContentHorizontal=function(a){this.pair_||this.setVisible(this.scrollViewSize_<a.contentWidth);this.ratio_=this.scrollViewSize_/a.contentWidth;if(-Infinity==this.ratio_||Infinity==this.ratio_||isNaN(this.ratio_))this.ratio_=0;this.setHandleLength_(Math.max(0,a.viewWidth*this.ratio_));this.setHandlePosition(this.constrainHandle_((a.viewLeft-a.contentLeft)*this.ratio_))};Blockly.Scrollbar.prototype.resizeVertical_=function(a){this.resizeViewVertical(a)};
		Blockly.Scrollbar.prototype.resizeViewVertical=function(a){var b=a.viewHeight-1;this.pair_&&(b-=Blockly.Scrollbar.scrollbarThickness);this.setScrollViewSize_(Math.max(0,b));b=a.absoluteLeft+.5;this.workspace_.RTL||(b+=a.viewWidth-Blockly.Scrollbar.scrollbarThickness-1);this.setPosition(b,a.absoluteTop+.5);this.resizeContentVertical(a)};
		Blockly.Scrollbar.prototype.resizeContentVertical=function(a){this.pair_||this.setVisible(this.scrollViewSize_<a.contentHeight);this.ratio_=this.scrollViewSize_/a.contentHeight;if(-Infinity==this.ratio_||Infinity==this.ratio_||isNaN(this.ratio_))this.ratio_=0;this.setHandleLength_(Math.max(0,a.viewHeight*this.ratio_));this.setHandlePosition(this.constrainHandle_((a.viewTop-a.contentTop)*this.ratio_))};
		Blockly.Scrollbar.prototype.createDom_=function(){this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyScrollbar"+(this.horizontal_?"Horizontal":"Vertical")},null);this.svgBackground_=Blockly.createSvgElement("rect",{"class":"blocklyScrollbarBackground"},this.svgGroup_);var a=Math.floor((Blockly.Scrollbar.scrollbarThickness-5)/2);this.svgHandle_=Blockly.createSvgElement("rect",{"class":"blocklyScrollbarHandle",rx:a,ry:a},this.svgGroup_);Blockly.Scrollbar.insertAfter_(this.svgGroup_,this.workspace_.getBubbleCanvas())};
		Blockly.Scrollbar.prototype.isVisible=function(){return this.isVisible_};Blockly.Scrollbar.prototype.setVisible=function(a){if(a!=this.isVisible()){if(this.pair_)throw"Unable to toggle visibility of paired scrollbars.";(this.isVisible_=a)?this.svgGroup_.setAttribute("display","block"):(this.workspace_.setMetrics({x:0,y:0}),this.svgGroup_.setAttribute("display","none"))}};
		Blockly.Scrollbar.prototype.onMouseDownBar_=function(a){Blockly.Touch.clearTouchIdentifier();this.cleanUp_();if(Blockly.isRightButton(a))a.stopPropagation();else{var b=Blockly.mouseToSvg(a,this.workspace_.getParentSvg(),this.workspace_.getInverseScreenCTM()),b=this.horizontal_?b.x:b.y,c=Blockly.getSvgXY_(this.svgHandle_,this.workspace_),c=this.horizontal_?c.x:c.y,d=this.handlePosition_,e=.95*this.handleLength_;b<=c?d-=e:b>=c+this.handleLength_&&(d+=e);Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();
		this.setHandlePosition(this.constrainHandle_(d));this.onScroll_();a.stopPropagation();a.preventDefault()}};
		Blockly.Scrollbar.prototype.onMouseDownHandle_=function(a){this.cleanUp_();Blockly.isRightButton(a)?a.stopPropagation():(this.startDragHandle=this.handlePosition_,this.startDragMouse=this.horizontal_?a.clientX:a.clientY,Blockly.Scrollbar.onMouseUpWrapper_=Blockly.bindEvent_(document,"mouseup",this,this.onMouseUpHandle_),Blockly.Scrollbar.onMouseMoveWrapper_=Blockly.bindEvent_(document,"mousemove",this,this.onMouseMoveHandle_),Blockly.WidgetDiv.hide(!0),Blockly.DropDownDiv.hideWithoutAnimation(),a.stopPropagation(),
		a.preventDefault())};Blockly.Scrollbar.prototype.onMouseMoveHandle_=function(a){this.setHandlePosition(this.constrainHandle_(this.startDragHandle+((this.horizontal_?a.clientX:a.clientY)-this.startDragMouse)));this.onScroll_()};Blockly.Scrollbar.prototype.onMouseUpHandle_=function(){Blockly.Touch.clearTouchIdentifier();this.cleanUp_()};
		Blockly.Scrollbar.prototype.cleanUp_=function(){Blockly.hideChaff(!0);Blockly.Scrollbar.onMouseUpWrapper_&&(Blockly.unbindEvent_(Blockly.Scrollbar.onMouseUpWrapper_),Blockly.Scrollbar.onMouseUpWrapper_=null);Blockly.Scrollbar.onMouseMoveWrapper_&&(Blockly.unbindEvent_(Blockly.Scrollbar.onMouseMoveWrapper_),Blockly.Scrollbar.onMouseMoveWrapper_=null)};
		Blockly.Scrollbar.prototype.constrainHandle_=function(a){return a=0>=a||isNaN(a)||this.scrollViewSize_<this.handleLength_?0:Math.min(a,this.scrollViewSize_-this.handleLength_)};Blockly.Scrollbar.prototype.onScroll_=function(){var a=this.handlePosition_/this.scrollViewSize_;isNaN(a)&&(a=0);var b={};this.horizontal_?b.x=a:b.y=a;this.workspace_.setMetrics(b)};Blockly.Scrollbar.prototype.set=function(a){this.setHandlePosition(this.constrainHandle_(a*this.ratio_));this.onScroll_()};
		Blockly.Scrollbar.insertAfter_=function(a,b){var c=b.nextSibling,d=b.parentNode;if(!d)throw"Reference node has no parent.";c?d.insertBefore(a,c):d.appendChild(a)};Blockly.Trashcan=function(a){this.workspace_=a};Blockly.Trashcan.prototype.WIDTH_=47;Blockly.Trashcan.prototype.BODY_HEIGHT_=44;Blockly.Trashcan.prototype.LID_HEIGHT_=16;Blockly.Trashcan.prototype.MARGIN_BOTTOM_=20;Blockly.Trashcan.prototype.MARGIN_SIDE_=20;Blockly.Trashcan.prototype.MARGIN_HOTSPOT_=10;Blockly.Trashcan.prototype.SPRITE_LEFT_=0;Blockly.Trashcan.prototype.SPRITE_TOP_=32;Blockly.Trashcan.prototype.isOpen=!1;Blockly.Trashcan.prototype.svgGroup_=null;
		Blockly.Trashcan.prototype.svgLid_=null;Blockly.Trashcan.prototype.lidTask_=0;Blockly.Trashcan.prototype.lidOpen_=0;Blockly.Trashcan.prototype.left_=0;Blockly.Trashcan.prototype.top_=0;
		Blockly.Trashcan.prototype.createDom=function(){this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyTrash"},null);var a=String(Math.random()).substring(2),b=Blockly.createSvgElement("clipPath",{id:"blocklyTrashBodyClipPath"+a},this.svgGroup_);Blockly.createSvgElement("rect",{width:this.WIDTH_,height:this.BODY_HEIGHT_,y:this.LID_HEIGHT_},b);Blockly.createSvgElement("image",{width:Blockly.SPRITE.width,x:-this.SPRITE_LEFT_,height:Blockly.SPRITE.height,y:-this.SPRITE_TOP_,"clip-path":"url(#blocklyTrashBodyClipPath"+
		a+")"},this.svgGroup_).setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",this.workspace_.options.pathToMedia+Blockly.SPRITE.url);b=Blockly.createSvgElement("clipPath",{id:"blocklyTrashLidClipPath"+a},this.svgGroup_);Blockly.createSvgElement("rect",{width:this.WIDTH_,height:this.LID_HEIGHT_},b);this.svgLid_=Blockly.createSvgElement("image",{width:Blockly.SPRITE.width,x:-this.SPRITE_LEFT_,height:Blockly.SPRITE.height,y:-this.SPRITE_TOP_,"clip-path":"url(#blocklyTrashLidClipPath"+a+")"},this.svgGroup_);
		this.svgLid_.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",this.workspace_.options.pathToMedia+Blockly.SPRITE.url);Blockly.bindEvent_(this.svgGroup_,"mouseup",this,this.click);this.animateLid_();return this.svgGroup_};Blockly.Trashcan.prototype.init=function(a){this.bottom_=this.MARGIN_BOTTOM_+a;this.setOpen_(!1);return this.bottom_+this.BODY_HEIGHT_+this.LID_HEIGHT_};
		Blockly.Trashcan.prototype.dispose=function(){this.svgGroup_&&(goog.dom.removeNode(this.svgGroup_),this.svgGroup_=null);this.workspace_=this.svgLid_=null;clearTimeout(this.lidTask_)};
		Blockly.Trashcan.prototype.position=function(){var a=this.workspace_.getMetrics();a&&(this.workspace_.RTL?(this.left_=this.MARGIN_SIDE_+Blockly.Scrollbar.scrollbarThickness,a.toolboxPosition==Blockly.TOOLBOX_AT_LEFT&&(this.left_+=a.flyoutWidth,this.workspace_.toolbox_&&(this.left_+=a.absoluteLeft))):(this.left_=a.viewWidth+a.absoluteLeft-this.WIDTH_-this.MARGIN_SIDE_-Blockly.Scrollbar.scrollbarThickness,a.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT&&(this.left_-=a.flyoutWidth)),this.top_=a.viewHeight+
		a.absoluteTop-(this.BODY_HEIGHT_+this.LID_HEIGHT_)-this.bottom_,a.toolboxPosition==Blockly.TOOLBOX_AT_BOTTOM&&(this.top_-=a.flyoutHeight),this.svgGroup_.setAttribute("transform","translate("+this.left_+","+this.top_+")"))};
		Blockly.Trashcan.prototype.getClientRect=function(){if(!this.svgGroup_)return null;var a=this.svgGroup_.getBoundingClientRect();return new goog.math.Rect(a.left+this.SPRITE_LEFT_-this.MARGIN_HOTSPOT_,a.top+this.SPRITE_TOP_-this.MARGIN_HOTSPOT_,this.WIDTH_+2*this.MARGIN_HOTSPOT_,this.LID_HEIGHT_+this.BODY_HEIGHT_+2*this.MARGIN_HOTSPOT_)};Blockly.Trashcan.prototype.setOpen_=function(a){this.isOpen!=a&&(clearTimeout(this.lidTask_),this.isOpen=a,this.animateLid_())};
		Blockly.Trashcan.prototype.animateLid_=function(){this.lidOpen_+=this.isOpen?.2:-.2;this.lidOpen_=goog.math.clamp(this.lidOpen_,0,1);var a=45*this.lidOpen_;this.svgLid_.setAttribute("transform","rotate("+(this.workspace_.RTL?-a:a)+","+(this.workspace_.RTL?4:this.WIDTH_-4)+","+(this.LID_HEIGHT_-2)+")");a=goog.math.lerp(.4,.8,this.lidOpen_);this.svgGroup_.style.opacity=a;0<this.lidOpen_&&1>this.lidOpen_&&(this.lidTask_=setTimeout(this.animateLid_.bind(this),20))};Blockly.Trashcan.prototype.close=function(){this.setOpen_(!1)};
		Blockly.Trashcan.prototype.click=function(){var a=this.workspace_.startScrollX-this.workspace_.scrollX,b=this.workspace_.startScrollY-this.workspace_.scrollY;Math.sqrt(a*a+b*b)>Blockly.DRAG_RADIUS||console.log("TODO: Inspect trash.")};Blockly.Xml={};Blockly.Xml.workspaceToDom=function(a){var b=goog.dom.createDom("xml");a=a.getTopBlocks(!0);for(var c=0,d;d=a[c];c++)b.appendChild(Blockly.Xml.blockToDomWithXY(d));return b};Blockly.Xml.blockToDomWithXY=function(a){var b;a.workspace.RTL&&(b=a.workspace.getWidth());var c=Blockly.Xml.blockToDom(a),d=a.getRelativeToSurfaceXY();c.setAttribute("x",Math.round(a.workspace.RTL?b-d.x:d.x));c.setAttribute("y",Math.round(d.y));return c};
		Blockly.Xml.blockToDom=function(a){var b=goog.dom.createDom(a.isShadow()?"shadow":"block");b.setAttribute("type",a.type);b.setAttribute("id",a.id);if(a.mutationToDom){var c=a.mutationToDom();c&&(c.hasChildNodes()||c.hasAttributes())&&b.appendChild(c)}for(var c=0,d;d=a.inputList[c];c++)for(var e=0,f;f=d.fieldRow[e];e++)if(f.name&&f.EDITABLE){var g=goog.dom.createDom("field",null,f.getValue());g.setAttribute("name",f.name);b.appendChild(g)}if(c=a.getCommentText())c=goog.dom.createDom("comment",null,
		c),"object"==typeof a.comment&&(c.setAttribute("pinned",a.comment.isVisible()),d=a.comment.getBubbleSize(),c.setAttribute("h",d.height),c.setAttribute("w",d.width)),b.appendChild(c);a.data&&(c=goog.dom.createDom("data",null,a.data),b.appendChild(c));for(c=0;d=a.inputList[c];c++){var h;f=!0;d.type!=Blockly.DUMMY_INPUT&&(g=d.connection.targetBlock(),d.type==Blockly.INPUT_VALUE?h=goog.dom.createDom("value"):d.type==Blockly.NEXT_STATEMENT&&(h=goog.dom.createDom("statement")),e=d.connection.getShadowDom(),
		!e||g&&g.isShadow()||h.appendChild(Blockly.Xml.cloneShadow_(e)),g&&(h.appendChild(Blockly.Xml.blockToDom(g)),f=!1),h.setAttribute("name",d.name),f||b.appendChild(h))}a.inputsInlineDefault!=a.inputsInline&&b.setAttribute("inline",a.inputsInline);a.isCollapsed()&&b.setAttribute("collapsed",!0);a.disabled&&b.setAttribute("disabled",!0);a.isDeletable()||a.isShadow()||b.setAttribute("deletable",!1);a.isMovable()||a.isShadow()||b.setAttribute("movable",!1);a.isEditable()||b.setAttribute("editable",!1);
		if(c=a.getNextBlock())h=goog.dom.createDom("next",null,Blockly.Xml.blockToDom(c)),b.appendChild(h);e=a.nextConnection&&a.nextConnection.getShadowDom();!e||c&&c.isShadow()||h.appendChild(Blockly.Xml.cloneShadow_(e));return b};
		Blockly.Xml.cloneShadow_=function(a){for(var b=a=a.cloneNode(!0),c;b;)if(b.firstChild)b=b.firstChild;else{for(;b&&!b.nextSibling;)c=b,b=b.parentNode,3==c.nodeType&&""==c.data.trim()&&b.firstChild!=c&&goog.dom.removeNode(c);b&&(c=b,b=b.nextSibling,3==c.nodeType&&""==c.data.trim()&&goog.dom.removeNode(c))}return a};Blockly.Xml.domToText=function(a){return(new XMLSerializer).serializeToString(a)};
		Blockly.Xml.domToPrettyText=function(a){a=Blockly.Xml.domToText(a).split("<");for(var b="",c=1;c<a.length;c++){var d=a[c];"/"==d[0]&&(b=b.substring(2));a[c]=b+"<"+d;"/"!=d[0]&&"/>"!=d.slice(-2)&&(b+="  ")}a=a.join("\n");a=a.replace(/(<(\w+)\b[^>]*>[^\n]*)\n *<\/\2>/g,"$1</$2>");return a.replace(/^\n/,"")};
		Blockly.Xml.textToDom=function(a){(a=(new DOMParser).parseFromString(a,"text/xml"))&&a.firstChild&&"xml"==a.firstChild.nodeName.toLowerCase()&&a.firstChild===a.lastChild||goog.asserts.fail("Blockly.Xml.textToDom did not obtain a valid XML tree.");return a.firstChild};
		Blockly.Xml.domToWorkspace=function(a,b){if(a instanceof Blockly.Workspace){var c=a;a=b;b=c;console.warn("Deprecated call to Blockly.Xml.domToWorkspace, swap the arguments.")}var d;b.RTL&&(d=b.getWidth());Blockly.Field.startCache();var c=a.childNodes.length,e=Blockly.Events.getGroup();e||Blockly.Events.setGroup(!0);b.setResizesEnabled&&b.setResizesEnabled(!1);for(var f=0;f<c;f++){var g=a.childNodes[f],h=g.nodeName.toLowerCase();if("block"==h||"shadow"==h&&!Blockly.Events.recordUndo){var h=Blockly.Xml.domToBlock(g,
		b),k=parseInt(g.getAttribute("x"),10),g=parseInt(g.getAttribute("y"),10);isNaN(k)||isNaN(g)||h.moveBy(b.RTL?d-k:k,g)}else"shadow"==h&&goog.asserts.fail("Shadow block cannot be a top-level block.")}e||Blockly.Events.setGroup(!1);Blockly.Field.stopCache();b.updateVariableList(!1);b.setResizesEnabled&&b.setResizesEnabled(!0)};
		Blockly.Xml.domToBlock=function(a,b){if(a instanceof Blockly.Workspace){var c=a;a=b;b=c;console.warn("Deprecated call to Blockly.Xml.domToBlock, swap the arguments.")}Blockly.Events.disable();try{var d=Blockly.Xml.domToBlockHeadless_(a,b);if(b.rendered){d.setConnectionsHidden(!0);for(var e=d.getDescendants(),f=e.length-1;0<=f;f--)e[f].initSvg();for(f=e.length-1;0<=f;f--)e[f].render(!1);b.isFlyout||setTimeout(function(){d.workspace&&d.setConnectionsHidden(!1)},1);d.updateDisabled();b.resizeContents()}}finally{Blockly.Events.enable()}Blockly.Events.isEnabled()&&
		Blockly.Events.fire(new Blockly.Events.Create(d));return d};
		Blockly.Xml.domToBlockHeadless_=function(a,b){var c=null,d=a.getAttribute("type");goog.asserts.assert(d,"Block type unspecified: %s",a.outerHTML);for(var e=a.getAttribute("id"),c=b.newBlock(d,e),f=null,e=0,g;g=a.childNodes[e];e++)if(3!=g.nodeType){for(var h=f=null,k=0,l;l=g.childNodes[k];k++)1==l.nodeType&&("block"==l.nodeName.toLowerCase()?f=l:"shadow"==l.nodeName.toLowerCase()&&(h=l));!f&&h&&(f=h);k=g.getAttribute("name");switch(g.nodeName.toLowerCase()){case "mutation":c.domToMutation&&(c.domToMutation(g),
		c.initSvg&&c.initSvg());break;case "comment":c.setCommentText(g.textContent);var m=g.getAttribute("pinned");m&&!c.isInFlyout&&setTimeout(function(){c.comment&&c.comment.setVisible&&c.comment.setVisible("true"==m)},1);f=parseInt(g.getAttribute("w"),10);g=parseInt(g.getAttribute("h"),10);!isNaN(f)&&!isNaN(g)&&c.comment&&c.comment.setVisible&&c.comment.setBubbleSize(f,g);break;case "data":c.data=g.textContent;break;case "title":case "field":f=c.getField(k);if(!f){console.warn("Ignoring non-existent field "+
		k+" in block "+d);break}f.setValue(g.textContent);break;case "value":case "statement":g=c.getInput(k);if(!g){console.warn("Ignoring non-existent input "+k+" in block "+d);break}h&&g.connection.setShadowDom(h);f&&(f=Blockly.Xml.domToBlockHeadless_(f,b),f.outputConnection?g.connection.connect(f.outputConnection):f.previousConnection?g.connection.connect(f.previousConnection):goog.asserts.fail("Child block does not have output or previous statement."));break;case "next":h&&c.nextConnection&&c.nextConnection.setShadowDom(h);
		f&&(goog.asserts.assert(c.nextConnection,"Next statement does not exist."),goog.asserts.assert(!c.nextConnection.isConnected(),"Next statement is already connected."),f=Blockly.Xml.domToBlockHeadless_(f,b),goog.asserts.assert(f.previousConnection,"Next block does not have previous statement."),c.nextConnection.connect(f.previousConnection));break;default:console.warn("Ignoring unknown tag: "+g.nodeName)}}(e=a.getAttribute("inline"))&&c.setInputsInline("true"==e);(e=a.getAttribute("disabled"))&&c.setDisabled("true"==
		e);(e=a.getAttribute("deletable"))&&c.setDeletable("true"==e);(e=a.getAttribute("movable"))&&c.setMovable("true"==e);(e=a.getAttribute("editable"))&&c.setEditable("true"==e);(e=a.getAttribute("collapsed"))&&c.setCollapsed("true"==e);if("shadow"==a.nodeName.toLowerCase()){d=c.getChildren();for(e=0;g=d[e];e++)goog.asserts.assert(g.isShadow(),"Shadow block not allowed non-shadow child.");c.setShadow(!0)}return c};
		Blockly.Xml.deleteNext=function(a){for(var b=0,c;c=a.childNodes[b];b++)if("next"==c.nodeName.toLowerCase()){a.removeChild(c);break}};goog.global.Blockly||(goog.global.Blockly={});goog.global.Blockly.Xml||(goog.global.Blockly.Xml={});goog.global.Blockly.Xml.domToText=Blockly.Xml.domToText;goog.global.Blockly.Xml.domToWorkspace=Blockly.Xml.domToWorkspace;goog.global.Blockly.Xml.textToDom=Blockly.Xml.textToDom;goog.global.Blockly.Xml.workspaceToDom=Blockly.Xml.workspaceToDom;
		// Copyright 2015 Google Inc.  Apache License 2.0
		Blockly.ZoomControls=function(a){this.workspace_=a};Blockly.ZoomControls.prototype.WIDTH_=32;Blockly.ZoomControls.prototype.HEIGHT_=110;Blockly.ZoomControls.prototype.MARGIN_BOTTOM_=20;Blockly.ZoomControls.prototype.MARGIN_SIDE_=20;Blockly.ZoomControls.prototype.svgGroup_=null;Blockly.ZoomControls.prototype.left_=0;Blockly.ZoomControls.prototype.top_=0;
		Blockly.ZoomControls.prototype.createDom=function(){var a=this.workspace_;this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyZoom"},null);var b=String(Math.random()).substring(2),c=Blockly.createSvgElement("clipPath",{id:"blocklyZoomoutClipPath"+b},this.svgGroup_);Blockly.createSvgElement("rect",{width:32,height:32,y:77},c);var d=Blockly.createSvgElement("image",{width:Blockly.SPRITE.width,height:Blockly.SPRITE.height,x:-64,y:-15,"clip-path":"url(#blocklyZoomoutClipPath"+b+")"},this.svgGroup_);
		d.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",a.options.pathToMedia+Blockly.SPRITE.url);c=Blockly.createSvgElement("clipPath",{id:"blocklyZoominClipPath"+b},this.svgGroup_);Blockly.createSvgElement("rect",{width:32,height:32,y:43},c);var e=Blockly.createSvgElement("image",{width:Blockly.SPRITE.width,height:Blockly.SPRITE.height,x:-32,y:-49,"clip-path":"url(#blocklyZoominClipPath"+b+")"},this.svgGroup_);e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",a.options.pathToMedia+
		Blockly.SPRITE.url);c=Blockly.createSvgElement("clipPath",{id:"blocklyZoomresetClipPath"+b},this.svgGroup_);Blockly.createSvgElement("rect",{width:32,height:32},c);b=Blockly.createSvgElement("image",{width:Blockly.SPRITE.width,height:Blockly.SPRITE.height,y:-92,"clip-path":"url(#blocklyZoomresetClipPath"+b+")"},this.svgGroup_);b.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",a.options.pathToMedia+Blockly.SPRITE.url);Blockly.bindEvent_(b,"mousedown",null,function(b){a.setScale(a.options.zoomOptions.startScale);
		a.scrollCenter();Blockly.Touch.clearTouchIdentifier();b.stopPropagation();b.preventDefault()});Blockly.bindEvent_(e,"mousedown",null,function(b){a.zoomCenter(1);Blockly.Touch.clearTouchIdentifier();b.stopPropagation();b.preventDefault()});Blockly.bindEvent_(d,"mousedown",null,function(b){a.zoomCenter(-1);Blockly.Touch.clearTouchIdentifier();b.stopPropagation();b.preventDefault()});return this.svgGroup_};
		Blockly.ZoomControls.prototype.init=function(a){this.bottom_=this.MARGIN_BOTTOM_+a;return this.bottom_+this.HEIGHT_};Blockly.ZoomControls.prototype.dispose=function(){this.svgGroup_&&(goog.dom.removeNode(this.svgGroup_),this.svgGroup_=null);this.workspace_=null};
		Blockly.ZoomControls.prototype.position=function(){var a=this.workspace_.getMetrics();a&&(this.workspace_.RTL?(this.left_=this.MARGIN_SIDE_+Blockly.Scrollbar.scrollbarThickness,a.toolboxPosition==Blockly.TOOLBOX_AT_LEFT&&(this.left_+=a.flyoutWidth,this.workspace_.toolbox_&&(this.left_+=a.absoluteLeft))):(this.left_=a.viewWidth+a.absoluteLeft-this.WIDTH_-this.MARGIN_SIDE_-Blockly.Scrollbar.scrollbarThickness,a.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT&&(this.left_-=a.flyoutWidth)),this.top_=a.viewHeight+
		a.absoluteTop-this.HEIGHT_-this.bottom_,a.toolboxPosition==Blockly.TOOLBOX_AT_BOTTOM&&(this.top_-=a.flyoutHeight),this.svgGroup_.setAttribute("transform","translate("+this.left_+","+this.top_+")"))};
		// Copyright 2014 Google Inc.  Apache License 2.0
		Blockly.WorkspaceSvg=function(a,b){Blockly.WorkspaceSvg.superClass_.constructor.call(this,a);this.getMetrics=a.getMetrics||Blockly.WorkspaceSvg.getTopLevelWorkspaceMetrics_;this.setMetrics=a.setMetrics||Blockly.WorkspaceSvg.setTopLevelWorkspaceMetrics_;Blockly.ConnectionDB.init(this);b&&(this.dragSurface=b);Blockly.ConnectionDB.init(this);this.SOUNDS_=Object.create(null)};goog.inherits(Blockly.WorkspaceSvg,Blockly.Workspace);Blockly.WorkspaceSvg.prototype.resizeHandlerWrapper_=null;
		Blockly.WorkspaceSvg.prototype.rendered=!0;Blockly.WorkspaceSvg.prototype.isFlyout=!1;Blockly.WorkspaceSvg.prototype.isMutator=!1;Blockly.WorkspaceSvg.prototype.dragMode_=Blockly.DRAG_NONE;Blockly.WorkspaceSvg.prototype.resizesEnabled_=!0;Blockly.WorkspaceSvg.prototype.scrollX=0;Blockly.WorkspaceSvg.prototype.scrollY=0;Blockly.WorkspaceSvg.prototype.startScrollX=0;Blockly.WorkspaceSvg.prototype.startScrollY=0;Blockly.WorkspaceSvg.prototype.dragDeltaXY_=null;Blockly.WorkspaceSvg.prototype.scale=1;
		Blockly.WorkspaceSvg.prototype.trashcan=null;Blockly.WorkspaceSvg.prototype.scrollbar=null;Blockly.WorkspaceSvg.prototype.dragSurface=null;Blockly.WorkspaceSvg.prototype.inverseScreenCTM_=null;Blockly.WorkspaceSvg.prototype.getInverseScreenCTM=function(){return this.inverseScreenCTM_};Blockly.WorkspaceSvg.prototype.updateInverseScreenCTM=function(){this.inverseScreenCTM_=this.getParentSvg().getScreenCTM().inverse()};
		Blockly.WorkspaceSvg.prototype.setResizeHandlerWrapper=function(a){this.resizeHandlerWrapper_=a};Blockly.WorkspaceSvg.prototype.lastRecordedPageScroll_=null;Blockly.WorkspaceSvg.prototype.inverseScreenCTM_=null;Blockly.WorkspaceSvg.prototype.getInverseScreenCTM=function(){return this.inverseScreenCTM_};Blockly.WorkspaceSvg.prototype.updateInverseScreenCTM=function(){this.inverseScreenCTM_=this.getParentSvg().getScreenCTM().inverse()};
		Blockly.WorkspaceSvg.prototype.setResizeHandlerWrapper=function(a){this.resizeHandlerWrapper_=a};
		Blockly.WorkspaceSvg.prototype.createDom=function(a){this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyWorkspace"},null);a&&(this.svgBackground_=Blockly.createSvgElement("rect",{height:"100%",width:"100%","class":a},this.svgGroup_),"blocklyMainBackground"==a&&(this.svgBackground_.style.fill="url(#"+this.options.gridPattern.id+")"));this.svgBlockCanvas_=Blockly.createSvgElement("g",{"class":"blocklyBlockCanvas"},this.svgGroup_,this);this.svgBubbleCanvas_=Blockly.createSvgElement("g",{"class":"blocklyBubbleCanvas"},
		this.svgGroup_,this);a=Blockly.Scrollbar.scrollbarThickness;this.options.hasTrashcan&&(a=this.addTrashcan_(a));this.options.zoomOptions&&this.options.zoomOptions.controls&&(a=this.addZoomControls_(a));if(!this.isFlyout){Blockly.bindEvent_(this.svgGroup_,"mousedown",this,this.onMouseDown_);var b=this;Blockly.bindEvent_(this.svgGroup_,"touchstart",null,function(a){Blockly.longStart_(a,b)});this.options.zoomOptions&&this.options.zoomOptions.wheel&&Blockly.bindEvent_(this.svgGroup_,"wheel",this,this.onMouseWheel_)}this.options.hasCategories?
		this.toolbox_=new Blockly.Toolbox(this):this.options.languageTree&&this.addFlyout_();this.updateGridPattern_();this.updateStackGlowScale_();this.recordDeleteAreas();return this.svgGroup_};
		Blockly.WorkspaceSvg.prototype.dispose=function(){this.rendered=!1;Blockly.WorkspaceSvg.superClass_.dispose.call(this);this.svgGroup_&&(goog.dom.removeNode(this.svgGroup_),this.svgGroup_=null);this.svgBubbleCanvas_=this.svgBlockCanvas_=null;this.toolbox_&&(this.toolbox_.dispose(),this.toolbox_=null);this.flyout_&&(this.flyout_.dispose(),this.flyout_=null);this.trashcan&&(this.trashcan.dispose(),this.trashcan=null);this.scrollbar&&(this.scrollbar.dispose(),this.scrollbar=null);this.zoomControls_&&
		(this.zoomControls_.dispose(),this.zoomControls_=null);this.options.parentWorkspace||goog.dom.removeNode(this.getParentSvg().parentNode);this.resizeHandlerWrapper_&&(Blockly.unbindEvent_(this.resizeHandlerWrapper_),this.resizeHandlerWrapper_=null)};Blockly.WorkspaceSvg.prototype.newBlock=function(a,b){return new Blockly.BlockSvg(this,a,b)};
		Blockly.WorkspaceSvg.prototype.addTrashcan_=function(a){this.trashcan=new Blockly.Trashcan(this);var b=this.trashcan.createDom();this.svgGroup_.insertBefore(b,this.svgBlockCanvas_);return this.trashcan.init(a)};Blockly.WorkspaceSvg.prototype.addZoomControls_=function(a){this.zoomControls_=new Blockly.ZoomControls(this);var b=this.zoomControls_.createDom();this.svgGroup_.appendChild(b);return this.zoomControls_.init(a)};
		Blockly.WorkspaceSvg.prototype.addFlyout_=function(){var a={disabledPatternId:this.options.disabledPatternId,parentWorkspace:this,RTL:this.RTL,horizontalLayout:this.horizontalLayout,toolboxPosition:this.options.toolboxPosition};this.flyout_=this.horizontalLayout?new Blockly.HorizontalFlyout(a):new Blockly.VerticalFlyout(a);this.flyout_.autoClose=!1;a=this.flyout_.createDom();this.svgGroup_.insertBefore(a,this.svgBlockCanvas_)};
		Blockly.WorkspaceSvg.prototype.updateScreenCalculations_=function(){this.updateInverseScreenCTM();this.recordDeleteAreas()};Blockly.WorkspaceSvg.prototype.resizeContents=function(){this.resizesEnabled_&&(this.scrollbar&&this.scrollbar.resize(),this.updateInverseScreenCTM())};
		Blockly.WorkspaceSvg.prototype.resize=function(){this.toolbox_&&this.toolbox_.position();this.flyout_&&this.flyout_.position();this.trashcan&&this.trashcan.position();this.zoomControls_&&this.zoomControls_.position();this.scrollbar&&this.scrollbar.resize();this.updateScreenCalculations_()};Blockly.WorkspaceSvg.prototype.updateScreenCalculationsIfScrolled=function(){var a=goog.dom.getDocumentScroll();goog.math.Coordinate.equals(this.lastRecordedPageScroll_,a)||(this.lastRecordedPageScroll_=a,this.updateScreenCalculations_())};
		Blockly.WorkspaceSvg.prototype.getCanvas=function(){return this.svgBlockCanvas_};Blockly.WorkspaceSvg.prototype.getBubbleCanvas=function(){return this.svgBubbleCanvas_};Blockly.WorkspaceSvg.prototype.getParentSvg=function(){if(this.cachedParentSvg_)return this.cachedParentSvg_;for(var a=this.svgGroup_;a;){if("svg"==a.tagName)return this.cachedParentSvg_=a;a=a.parentNode}return null};
		Blockly.WorkspaceSvg.prototype.getFlyout=function(){return this.flyout_?this.flyout_:this.toolbox_&&this.toolbox_.flyout_?this.toolbox_.flyout_:null};Blockly.WorkspaceSvg.prototype.translate=function(a,b){var c="translate("+a+","+b+") scale("+this.scale+")";this.svgBlockCanvas_.setAttribute("transform",c);this.svgBubbleCanvas_.setAttribute("transform",c);this.dragSurface&&this.dragSurface.translateAndScaleGroup(a,b,this.scale)};
		Blockly.WorkspaceSvg.prototype.getWidth=function(){var a=this.getMetrics();return a?a.viewWidth/this.scale:0};Blockly.WorkspaceSvg.prototype.setVisible=function(a){this.getParentSvg().style.display=a?"block":"none";this.toolbox_&&(this.toolbox_.HtmlDiv.style.display=a?"block":"none");a?(this.render(),this.toolbox_&&this.toolbox_.position()):(Blockly.hideChaff(!0),Blockly.DropDownDiv.hideWithoutAnimation())};
		Blockly.WorkspaceSvg.prototype.render=function(){for(var a=this.getAllBlocks(),b=a.length-1;0<=b;b--)a[b].render(!1)};Blockly.WorkspaceSvg.prototype.traceOn=function(a){this.traceOn_=a;this.traceWrapper_&&(Blockly.unbindEvent_(this.traceWrapper_),this.traceWrapper_=null);a&&(this.traceWrapper_=Blockly.bindEvent_(this.svgBlockCanvas_,"blocklySelectChange",this,function(){this.traceOn_=!1}))};
		Blockly.WorkspaceSvg.prototype.highlightBlock=function(a){this.traceOn_&&Blockly.dragMode_!=Blockly.DRAG_NONE&&this.traceOn(!1);if(this.traceOn_){var b=null;if(a&&(b=this.getBlockById(a),!b))return;this.traceOn(!1);b?b.select():Blockly.selected&&Blockly.selected.unselect();var c=this;setTimeout(function(){c.traceOn(!0)},1)}};Blockly.WorkspaceSvg.prototype.glowBlock=function(a,b){var c=null;if(a&&(c=this.getBlockById(a),!c))throw"Tried to glow block that does not exist.";c.setGlowBlock(b)};
		Blockly.WorkspaceSvg.prototype.glowStack=function(a,b){var c=null;if(a&&(c=this.getBlockById(a),!c))throw"Tried to glow stack on block that does not exist.";c.setGlowStack(b)};
		Blockly.WorkspaceSvg.prototype.reportValue=function(a,b){var c=this.getBlockById(a);if(!c)throw"Tried to report value on block that does not exist.";Blockly.DropDownDiv.hideWithoutAnimation();Blockly.DropDownDiv.clearContent();var d=Blockly.DropDownDiv.getContentDiv(),e=goog.dom.createElement("div");e.setAttribute("class","valueReportBox");e.innerHTML=Blockly.encodeEntities(b);d.appendChild(e);Blockly.DropDownDiv.setColour(Blockly.Colours.valueReportBackground,Blockly.Colours.valueReportBorder);Blockly.DropDownDiv.showPositionedByBlock(this,
		c)};
		Blockly.WorkspaceSvg.prototype.paste=function(a){if(this.rendered){Blockly.terminateDrag_();Blockly.Events.disable();try{var b=Blockly.Xml.domToBlock(a,this),c=parseInt(a.getAttribute("x"),10),d=parseInt(a.getAttribute("y"),10);if(!isNaN(c)&&!isNaN(d)){this.RTL&&(c=-c);do{a=!1;for(var e=this.getAllBlocks(),f=0,g;g=e[f];f++){var h=g.getRelativeToSurfaceXY();if(1>=Math.abs(c-h.x)&&1>=Math.abs(d-h.y)){a=!0;break}}if(!a)for(var k=b.getConnections_(!1),f=0,l;l=k[f];f++)if(l.closest(Blockly.SNAP_RADIUS,new goog.math.Coordinate(c,
		d)).connection){a=!0;break}a&&(c=this.RTL?c-Blockly.SNAP_RADIUS:c+Blockly.SNAP_RADIUS,d+=2*Blockly.SNAP_RADIUS)}while(a);b.moveBy(c,d)}}finally{Blockly.Events.enable()}Blockly.Events.isEnabled()&&!b.isShadow()&&Blockly.Events.fire(new Blockly.Events.Create(b));b.select()}};Blockly.WorkspaceSvg.prototype.createVariable=function(a){Blockly.WorkspaceSvg.superClass_.createVariable.call(this,a);this.toolbox_&&this.toolbox_.flyout_&&!Blockly.Flyout.startFlyout_&&this.toolbox_.refreshSelection()};
		Blockly.WorkspaceSvg.prototype.recordDeleteAreas=function(){this.deleteAreaTrash_=this.trashcan?this.trashcan.getClientRect():null;this.deleteAreaToolbox_=this.flyout_?this.flyout_.getClientRect():this.toolbox_?this.toolbox_.getClientRect():null};
		Blockly.WorkspaceSvg.prototype.isDeleteArea=function(a){a=new goog.math.Coordinate(a.clientX,a.clientY);if(this.deleteAreaTrash_){if(this.deleteAreaTrash_.contains(a))return this.trashcan.setOpen_(!0),Blockly.Css.setCursor(Blockly.Css.Cursor.DELETE),!0;this.trashcan.setOpen_(!1)}if(this.deleteAreaToolbox_&&this.deleteAreaToolbox_.contains(a))return Blockly.Css.setCursor(Blockly.Css.Cursor.DELETE),!0;Blockly.Css.setCursor(Blockly.Css.Cursor.CLOSED);return!1};
		Blockly.WorkspaceSvg.prototype.onMouseDown_=function(a){this.markFocused();Blockly.isTargetInput_(a)?Blockly.Touch.clearTouchIdentifier():(Blockly.terminateDrag_(),Blockly.hideChaff(),Blockly.DropDownDiv.hide(),a.target&&a.target.nodeName&&("svg"==a.target.nodeName.toLowerCase()||a.target==this.svgBackground_)&&Blockly.selected&&!this.options.readOnly&&Blockly.selected.unselect(),Blockly.isRightButton(a)?(this.showContextMenu_(a),Blockly.Touch.clearTouchIdentifier()):this.scrollbar&&(this.dragMode_=
		Blockly.DRAG_BEGIN,this.startDragMouseX=a.clientX,this.startDragMouseY=a.clientY,this.startDragMetrics=this.getMetrics(),this.startScrollX=this.scrollX,this.startScrollY=this.scrollY,"mouseup"in Blockly.Touch.TOUCH_MAP&&(Blockly.Touch.onTouchUpWrapper_=Blockly.Touch.onTouchUpWrapper_||[],Blockly.Touch.onTouchUpWrapper_=Blockly.Touch.onTouchUpWrapper_.concat(Blockly.bindEvent_(document,"mouseup",null,Blockly.onMouseUp_))),Blockly.onMouseMoveWrapper_=Blockly.onMouseMoveWrapper_||[],Blockly.onMouseMoveWrapper_=
		Blockly.onMouseMoveWrapper_.concat(Blockly.bindEvent_(document,"mousemove",null,Blockly.onMouseMove_))),a.stopPropagation(),a.preventDefault())};Blockly.WorkspaceSvg.prototype.startDrag=function(a,b){var c=Blockly.mouseToSvg(a,this.getParentSvg(),this.getInverseScreenCTM());c.x/=this.scale;c.y/=this.scale;this.dragDeltaXY_=goog.math.Coordinate.difference(b,c)};
		Blockly.WorkspaceSvg.prototype.moveDrag=function(a){a=Blockly.mouseToSvg(a,this.getParentSvg(),this.getInverseScreenCTM());a.x/=this.scale;a.y/=this.scale;return goog.math.Coordinate.sum(this.dragDeltaXY_,a)};Blockly.WorkspaceSvg.prototype.isDragging=function(){return Blockly.dragMode_==Blockly.DRAG_FREE||Blockly.Flyout.startFlyout_&&Blockly.Flyout.startFlyout_.dragMode_==Blockly.DRAG_FREE||this.dragMode_==Blockly.DRAG_FREE};
		Blockly.WorkspaceSvg.prototype.onMouseWheel_=function(a){if(a.ctrlKey){Blockly.terminateDrag_();var b=0<a.deltaY?-1:1,c=Blockly.mouseToSvg(a,this.getParentSvg(),this.getInverseScreenCTM());this.zoom(c.x,c.y,b)}else Blockly.WidgetDiv.hide(!0),Blockly.DropDownDiv.hideWithoutAnimation(),b=this.scrollX-a.deltaX,c=this.scrollY-a.deltaY,this.startDragMetrics=this.getMetrics(),this.scroll(b,c);a.preventDefault()};
		Blockly.WorkspaceSvg.prototype.getBlocksBoundingBox=function(){var a=this.getTopBlocks(!1);if(!a.length)return{x:0,y:0,width:0,height:0};for(var b=a[0].getBoundingRectangle(),c=1;c<a.length;c++){var d=a[c].getBoundingRectangle();d.topLeft.x<b.topLeft.x&&(b.topLeft.x=d.topLeft.x);d.bottomRight.x>b.bottomRight.x&&(b.bottomRight.x=d.bottomRight.x);d.topLeft.y<b.topLeft.y&&(b.topLeft.y=d.topLeft.y);d.bottomRight.y>b.bottomRight.y&&(b.bottomRight.y=d.bottomRight.y)}return{x:b.topLeft.x,y:b.topLeft.y,width:b.bottomRight.x-
		b.topLeft.x,height:b.bottomRight.y-b.topLeft.y}};Blockly.WorkspaceSvg.prototype.cleanUp=function(){Blockly.Events.setGroup(!0);for(var a=this.getTopBlocks(!0),b=0,c=0,d;d=a[c];c++){var e=d.getRelativeToSurfaceXY();d.moveBy(-e.x,b-e.y);d.snapToGrid();b=d.getRelativeToSurfaceXY().y+d.getHeightWidth().height+Blockly.BlockSvg.MIN_BLOCK_Y}Blockly.Events.setGroup(!1);this.resizeContents()};
		Blockly.WorkspaceSvg.prototype.showContextMenu_=function(a){function b(a){if(a.isDeletable())n=n.concat(a.getDescendants());else{a=a.getChildren();for(var c=0;c<a.length;c++)b(a[c])}}function c(){Blockly.Events.setGroup(f);var a=n.shift();a&&(a.workspace?(a.dispose(!1,!0),setTimeout(c,10)):c());Blockly.Events.setGroup(!1)}if(!this.options.readOnly&&!this.isFlyout){var d=[],e=this.getTopBlocks(!0),f=Blockly.genUid(),g={};g.text=Blockly.Msg.UNDO;g.enabled=0<this.undoStack_.length;g.callback=this.undo.bind(this,
		!1);d.push(g);g={};g.text=Blockly.Msg.REDO;g.enabled=0<this.redoStack_.length;g.callback=this.undo.bind(this,!0);d.push(g);this.scrollbar&&(g={},g.text=Blockly.Msg.CLEAN_UP,g.enabled=1<e.length,g.callback=this.cleanUp.bind(this),d.push(g));if(this.options.collapse){for(var h=g=!1,k=0;k<e.length;k++)for(var l=e[k];l;)l.isCollapsed()?g=!0:h=!0,l=l.getNextBlock();var m=function(a){for(var b=0,c=0;c<e.length;c++)for(var d=e[c];d;)setTimeout(d.setCollapsed.bind(d,a),b),d=d.getNextBlock(),b+=10},h={enabled:h};
		h.text=Blockly.Msg.COLLAPSE_ALL;h.callback=function(){m(!0)};d.push(h);g={enabled:g};g.text=Blockly.Msg.EXPAND_ALL;g.callback=function(){m(!1)};d.push(g)}for(var n=[],k=0;k<e.length;k++)b(e[k]);for(var p=0,k=0;k<n.length;k++)n[k].isShadow()||p++;g={text:1==p?Blockly.Msg.DELETE_BLOCK:Blockly.Msg.DELETE_X_BLOCKS.replace("%1",String(p)),enabled:0<p,callback:function(){(2>p||window.confirm(Blockly.Msg.DELETE_ALL_BLOCKS.replace("%1",String(p))))&&c()}};d.push(g);Blockly.ContextMenu.show(a,d,this.RTL)}};
		Blockly.WorkspaceSvg.prototype.loadAudio_=function(a,b){if(a.length){try{var c=new window.Audio}catch(h){return}for(var d,e=0;e<a.length;e++){var f=a[e],g=f.match(/\.(\w+)$/);if(g&&c.canPlayType("audio/"+g[1])){d=new window.Audio(f);break}}d&&d.play&&(this.SOUNDS_[b]=d)}};Blockly.WorkspaceSvg.prototype.preloadAudio_=function(){for(var a in this.SOUNDS_){var b=this.SOUNDS_[a];b.volume=.01;b.play();b.pause();if(goog.userAgent.IPAD||goog.userAgent.IPHONE)break}};
		Blockly.WorkspaceSvg.prototype.playAudio=function(a,b){var c=new Blockly.Events.Ui(null,"sound",null,a);c.workspaceId=this.id;Blockly.Events.fire(c);if(c=this.SOUNDS_[a]){var d=new Date;d-this.lastSound_<Blockly.SOUND_LIMIT||(this.lastSound_=d,c=goog.userAgent.DOCUMENT_MODE&&9===goog.userAgent.DOCUMENT_MODE||goog.userAgent.IPAD||goog.userAgent.ANDROID?c:c.cloneNode(),c.volume=void 0===b?1:b,c.play())}else this.options.parentWorkspace&&this.options.parentWorkspace.playAudio(a,b)};
		Blockly.WorkspaceSvg.prototype.updateToolbox=function(a){if(a=Blockly.Options.parseToolboxTree(a)){if(!this.options.languageTree)throw"Existing toolbox is null.  Can't create new toolbox.";if(a.getElementsByTagName("category").length){if(!this.toolbox_)throw"Existing toolbox has no categories.  Can't change mode.";this.options.languageTree=a;this.toolbox_.populate_(a);this.toolbox_.addColour_()}else{if(!this.flyout_)throw"Existing toolbox has categories.  Can't change mode.";this.options.languageTree=
		a;this.flyout_.show(a.childNodes)}}else if(this.options.languageTree)throw"Can't nullify an existing toolbox.";};Blockly.WorkspaceSvg.prototype.markFocused=function(){this.options.parentWorkspace?this.options.parentWorkspace.markFocused():Blockly.mainWorkspace=this};
		Blockly.WorkspaceSvg.prototype.zoom=function(a,b,c){var d=this.options.zoomOptions.scaleSpeed,e=this.getMetrics(),f=this.getParentSvg().createSVGPoint();f.x=a;f.y=b;f=f.matrixTransform(this.getCanvas().getCTM().inverse());a=f.x;b=f.y;f=this.getCanvas();d=1==c?d:1/d;c=this.scale*d;c>this.options.zoomOptions.maxScale?d=this.options.zoomOptions.maxScale/this.scale:c<this.options.zoomOptions.minScale&&(d=this.options.zoomOptions.minScale/this.scale);this.scale!=c&&(this.scrollbar&&(a=f.getCTM().translate(a*
		(1-d),b*(1-d)).scale(d),this.scrollX=a.e-e.absoluteLeft,this.scrollY=a.f-e.absoluteTop),this.setScale(c),Blockly.WidgetDiv.hide(!0),Blockly.DropDownDiv.hideWithoutAnimation())};Blockly.WorkspaceSvg.prototype.zoomCenter=function(a){var b=this.getMetrics();this.zoom(b.viewWidth/2,b.viewHeight/2,a)};
		Blockly.WorkspaceSvg.prototype.zoomToFit=function(){var a=this.getMetrics(),b=this.getBlocksBoundingBox(),c=b.width,b=b.height;if(c){var d=a.viewWidth,e=a.viewHeight;this.flyout_&&(d-=this.flyout_.width_);this.scrollbar||(c+=a.contentLeft,b+=a.contentTop);this.setScale(Math.min(d/c,e/b));this.scrollCenter()}};
		Blockly.WorkspaceSvg.prototype.scrollCenter=function(){if(this.scrollbar){Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();Blockly.hideChaff(!1);var a=this.getMetrics(),b=(a.contentWidth-a.viewWidth)/2;this.flyout_&&(b-=this.flyout_.width_/2);this.scrollbar.set(b,(a.contentHeight-a.viewHeight)/2)}};
		Blockly.WorkspaceSvg.prototype.setScale=function(a){this.options.zoomOptions.maxScale&&a>this.options.zoomOptions.maxScale?a=this.options.zoomOptions.maxScale:this.options.zoomOptions.minScale&&a<this.options.zoomOptions.minScale&&(a=this.options.zoomOptions.minScale);this.scale=a;this.updateStackGlowScale_();this.updateGridPattern_();Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();this.scrollbar?this.scrollbar.resize():this.translate(this.scrollX,this.scrollY);Blockly.hideChaff(!1);
		this.flyout_&&this.flyout_.reflow()};Blockly.WorkspaceSvg.prototype.scroll=function(a,b){var c=this.startDragMetrics;a=Math.min(a,-c.contentLeft);b=Math.min(b,-c.contentTop);a=Math.max(a,c.viewWidth-c.contentLeft-c.contentWidth);b=Math.max(b,c.viewHeight-c.contentTop-c.contentHeight);Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();this.scrollbar.set(-a-c.contentLeft,-b-c.contentTop)};
		Blockly.WorkspaceSvg.prototype.updateGridPattern_=function(){if(this.options.gridPattern){var a=this.options.gridOptions.spacing*this.scale||100;this.options.gridPattern.setAttribute("width",a);this.options.gridPattern.setAttribute("height",a);var a=Math.floor(this.options.gridOptions.spacing/2)+.5,b=a-this.options.gridOptions.length/2,c=a+this.options.gridOptions.length/2,d=this.options.gridPattern.firstChild,e=d&&d.nextSibling,a=a*this.scale,b=b*this.scale,c=c*this.scale;d&&(d.setAttribute("stroke-width",
		this.scale),d.setAttribute("x1",b),d.setAttribute("y1",a),d.setAttribute("x2",c),d.setAttribute("y2",a));e&&(e.setAttribute("stroke-width",this.scale),e.setAttribute("x1",a),e.setAttribute("y1",b),e.setAttribute("x2",a),e.setAttribute("y2",c))}};Blockly.WorkspaceSvg.prototype.updateStackGlowScale_=function(){this.options.stackGlowBlur&&this.options.stackGlowBlur.setAttribute("stdDeviation",Blockly.STACK_GLOW_RADIUS/this.scale)};
		Blockly.WorkspaceSvg.getTopLevelWorkspaceMetrics_=function(){var a=Blockly.svgSize(this.getParentSvg());if(this.toolbox_)if(this.toolboxPosition==Blockly.TOOLBOX_AT_TOP||this.toolboxPosition==Blockly.TOOLBOX_AT_BOTTOM)a.height-=this.toolbox_.getHeight();else if(this.toolboxPosition==Blockly.TOOLBOX_AT_LEFT||this.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT)a.width-=this.toolbox_.getWidth();var b=Blockly.Flyout.prototype.CORNER_RADIUS-1,c=a.width-b,d=a.height-b,e=this.getBlocksBoundingBox(),f=e.width*
		this.scale,g=e.height*this.scale,h=e.x*this.scale,k=e.y*this.scale;this.scrollbar?(b=Math.min(h-c/2,h+f-c),c=Math.max(h+f+c/2,h+c),f=Math.min(k-d/2,k+g-d),d=Math.max(k+g+d/2,k+d)):(b=e.x,c=b+e.width,f=e.y,d=f+e.height);e=0;this.toolbox_&&this.toolboxPosition==Blockly.TOOLBOX_AT_LEFT&&(e=this.toolbox_.getWidth());g=0;this.toolbox_&&this.toolboxPosition==Blockly.TOOLBOX_AT_TOP&&(g=this.toolbox_.getHeight());return{viewHeight:a.height,viewWidth:a.width,contentHeight:d-f,contentWidth:c-b,viewTop:-this.scrollY,
		viewLeft:-this.scrollX,contentTop:f,contentLeft:b,absoluteTop:g,absoluteLeft:e,toolboxWidth:this.toolbox_?this.toolbox_.getWidth():0,toolboxHeight:this.toolbox_?this.toolbox_.getHeight():0,flyoutWidth:this.flyout_?this.flyout_.getWidth():0,flyoutHeight:this.flyout_?this.flyout_.getHeight():0,toolboxPosition:this.toolboxPosition}};
		Blockly.WorkspaceSvg.setTopLevelWorkspaceMetrics_=function(a){if(!this.scrollbar)throw"Attempt to set top level workspace scroll without scrollbars.";var b=this.getMetrics();goog.isNumber(a.x)&&(this.scrollX=-b.contentWidth*a.x-b.contentLeft);goog.isNumber(a.y)&&(this.scrollY=-b.contentHeight*a.y-b.contentTop);a=this.scrollX+b.absoluteLeft;b=this.scrollY+b.absoluteTop;this.translate(a,b);this.options.gridPattern&&(this.options.gridPattern.setAttribute("x",a),this.options.gridPattern.setAttribute("y",
		b),goog.userAgent.IE&&this.updateGridPattern_())};Blockly.WorkspaceSvg.prototype.setResizesEnabled=function(a){var b=!this.resizesEnabled_&&a;this.resizesEnabled_=a;b&&this.resizeContents()};Blockly.WorkspaceSvg.prototype.clear=function(){this.setResizesEnabled(!1);Blockly.WorkspaceSvg.superClass_.clear.call(this);this.setResizesEnabled(!0)};Blockly.WorkspaceSvg.prototype.setVisible=Blockly.WorkspaceSvg.prototype.setVisible;Blockly.Mutator=function(a){Blockly.Mutator.superClass_.constructor.call(this,null);this.quarkNames_=a};goog.inherits(Blockly.Mutator,Blockly.Icon);Blockly.Mutator.prototype.workspaceWidth_=0;Blockly.Mutator.prototype.workspaceHeight_=0;
		Blockly.Mutator.prototype.drawIcon_=function(a){Blockly.createSvgElement("rect",{"class":"blocklyIconShape",rx:"4",ry:"4",height:"16",width:"16"},a);Blockly.createSvgElement("path",{"class":"blocklyIconSymbol",d:"m4.203,7.296 0,1.368 -0.92,0.677 -0.11,0.41 0.9,1.559 0.41,0.11 1.043,-0.457 1.187,0.683 0.127,1.134 0.3,0.3 1.8,0 0.3,-0.299 0.127,-1.138 1.185,-0.682 1.046,0.458 0.409,-0.11 0.9,-1.559 -0.11,-0.41 -0.92,-0.677 0,-1.366 0.92,-0.677 0.11,-0.41 -0.9,-1.559 -0.409,-0.109 -1.046,0.458 -1.185,-0.682 -0.127,-1.138 -0.3,-0.299 -1.8,0 -0.3,0.3 -0.126,1.135 -1.187,0.682 -1.043,-0.457 -0.41,0.11 -0.899,1.559 0.108,0.409z"},a);
		Blockly.createSvgElement("circle",{"class":"blocklyIconShape",r:"2.7",cx:"8",cy:"8"},a)};Blockly.Mutator.prototype.iconClick_=function(a){this.block_.isEditable()&&Blockly.Icon.prototype.iconClick_.call(this,a)};
		Blockly.Mutator.prototype.createEditor_=function(){this.svgDialog_=Blockly.createSvgElement("svg",{x:Blockly.Bubble.BORDER_WIDTH,y:Blockly.Bubble.BORDER_WIDTH},null);if(this.quarkNames_.length)for(var a=goog.dom.createDom("xml"),b=0,c;c=this.quarkNames_[b];b++)a.appendChild(goog.dom.createDom("block",{type:c}));else a=null;a={languageTree:a,parentWorkspace:this.block_.workspace,pathToMedia:this.block_.workspace.options.pathToMedia,RTL:this.block_.RTL,toolboxPosition:this.block_.RTL?Blockly.TOOLBOX_AT_RIGHT:
		Blockly.TOOLBOX_AT_LEFT,horizontalLayout:!1,getMetrics:this.getFlyoutMetrics_.bind(this),setMetrics:null};this.workspace_=new Blockly.WorkspaceSvg(a,this.block_.workspace.dragSurface);this.workspace_.isMutator=!0;this.svgDialog_.appendChild(this.workspace_.createDom("blocklyMutatorBackground"));return this.svgDialog_};
		Blockly.Mutator.prototype.updateEditable=function(){this.block_.isInFlyout||(this.block_.isEditable()?this.iconGroup_&&Blockly.removeClass_(this.iconGroup_,"blocklyIconGroupReadonly"):(this.setVisible(!1),this.iconGroup_&&Blockly.addClass_(this.iconGroup_,"blocklyIconGroupReadonly")));Blockly.Icon.prototype.updateEditable.call(this)};
		Blockly.Mutator.prototype.resizeBubble_=function(){var a=2*Blockly.Bubble.BORDER_WIDTH,b=this.workspace_.getCanvas().getBBox(),c;c=this.block_.RTL?-b.x:b.width+b.x;b=b.height+3*a;if(this.workspace_.flyout_)var d=this.workspace_.flyout_.getMetrics_(),b=Math.max(b,d.contentHeight+20);c+=3*a;if(Math.abs(this.workspaceWidth_-c)>a||Math.abs(this.workspaceHeight_-b)>a)this.workspaceWidth_=c,this.workspaceHeight_=b,this.bubble_.setBubbleSize(c+a,b+a),this.svgDialog_.setAttribute("width",this.workspaceWidth_),
		this.svgDialog_.setAttribute("height",this.workspaceHeight_);this.block_.RTL&&(a="translate("+this.workspaceWidth_+",0)",this.workspace_.getCanvas().setAttribute("transform",a));this.workspace_.resize()};
		Blockly.Mutator.prototype.setVisible=function(a){if(a!=this.isVisible())if(Blockly.Events.fire(new Blockly.Events.Ui(this.block_,"mutatorOpen",!a,a)),a){this.bubble_=new Blockly.Bubble(this.block_.workspace,this.createEditor_(),this.block_.svgPath_,this.iconXY_,null,null);if(a=this.workspace_.options.languageTree)this.workspace_.flyout_.init(this.workspace_),this.workspace_.flyout_.show(a.childNodes);this.rootBlock_=this.block_.decompose(this.workspace_);a=this.rootBlock_.getDescendants();for(var b=
		0,c;c=a[b];b++)c.render();this.rootBlock_.setMovable(!1);this.rootBlock_.setDeletable(!1);this.workspace_.flyout_?(a=2*this.workspace_.flyout_.CORNER_RADIUS,b=this.workspace_.flyout_.width_+a):b=a=16;this.block_.RTL&&(b=-b);this.rootBlock_.moveBy(b,a);if(this.block_.saveConnections){var d=this;this.block_.saveConnections(this.rootBlock_);this.sourceListener_=function(){d.block_.saveConnections(d.rootBlock_)};this.block_.workspace.addChangeListener(this.sourceListener_)}this.resizeBubble_();this.workspace_.addChangeListener(this.workspaceChanged_.bind(this));
		this.updateColour()}else this.svgDialog_=null,this.workspace_.dispose(),this.rootBlock_=this.workspace_=null,this.bubble_.dispose(),this.bubble_=null,this.workspaceHeight_=this.workspaceWidth_=0,this.sourceListener_&&(this.block_.workspace.removeChangeListener(this.sourceListener_),this.sourceListener_=null)};
		Blockly.Mutator.prototype.workspaceChanged_=function(){if(Blockly.dragMode_==Blockly.DRAG_NONE)for(var a=this.workspace_.getTopBlocks(!1),b=0,c;c=a[b];b++){var d=c.getRelativeToSurfaceXY(),e=c.getHeightWidth();20>d.y+e.height&&c.moveBy(0,20-e.height-d.y)}if(this.rootBlock_.workspace==this.workspace_){Blockly.Events.setGroup(!0);c=this.block_;a=(a=c.mutationToDom())&&Blockly.Xml.domToText(a);b=c.rendered;c.rendered=!1;c.compose(this.rootBlock_);c.rendered=b;c.initSvg();b=(b=c.mutationToDom())&&Blockly.Xml.domToText(b);
		if(a!=b){Blockly.Events.fire(new Blockly.Events.Change(c,"mutation",null,a,b));var f=Blockly.Events.getGroup();setTimeout(function(){Blockly.Events.setGroup(f);c.bumpNeighbours_();Blockly.Events.setGroup(!1)},Blockly.BUMP_DELAY)}c.rendered&&c.render();this.resizeBubble_();Blockly.Events.setGroup(!1)}};Blockly.Mutator.prototype.getFlyoutMetrics_=function(){return{viewHeight:this.workspaceHeight_,viewWidth:this.workspaceWidth_,absoluteTop:0,absoluteLeft:0}};
		Blockly.Mutator.prototype.dispose=function(){this.block_.mutator=null;Blockly.Icon.prototype.dispose.call(this)};Blockly.Mutator.reconnect=function(a,b,c){if(!a||!a.getSourceBlock().workspace)return!1;c=b.getInput(c).connection;var d=a.targetBlock();return d&&d!=b||c.targetConnection==a?!1:(c.isConnected()&&c.disconnect(),c.connect(a),!0)};goog.global.Blockly||(goog.global.Blockly={});goog.global.Blockly.Mutator||(goog.global.Blockly.Mutator={});goog.global.Blockly.Mutator.reconnect=Blockly.Mutator.reconnect;Blockly.Warning=function(a){Blockly.Warning.superClass_.constructor.call(this,a);this.createIcon();this.text_={}};goog.inherits(Blockly.Warning,Blockly.Icon);Blockly.Warning.prototype.collapseHidden=!1;
		Blockly.Warning.prototype.drawIcon_=function(a){Blockly.createSvgElement("path",{"class":"blocklyIconShape",d:"M2,15Q-1,15 0.5,12L6.5,1.7Q8,-1 9.5,1.7L15.5,12Q17,15 14,15z"},a);Blockly.createSvgElement("path",{"class":"blocklyIconSymbol",d:"m7,4.8v3.16l0.27,2.27h1.46l0.27,-2.27v-3.16z"},a);Blockly.createSvgElement("rect",{"class":"blocklyIconSymbol",x:"7",y:"11",height:"2",width:"2"},a)};
		Blockly.Warning.textToDom_=function(a){var b=Blockly.createSvgElement("text",{"class":"blocklyText blocklyBubbleText",y:Blockly.Bubble.BORDER_WIDTH},null);a=a.split("\n");for(var c=0;c<a.length;c++){var d=Blockly.createSvgElement("tspan",{dy:"1em",x:Blockly.Bubble.BORDER_WIDTH},b),e=document.createTextNode(a[c]);d.appendChild(e)}return b};
		Blockly.Warning.prototype.setVisible=function(a){if(a!=this.isVisible())if(Blockly.Events.fire(new Blockly.Events.Ui(this.block_,"warningOpen",!a,a)),a){a=Blockly.Warning.textToDom_(this.getText());this.bubble_=new Blockly.Bubble(this.block_.workspace,a,this.block_.svgPath_,this.iconXY_,null,null);if(this.block_.RTL)for(var b=a.getBBox().width,c=0,d;d=a.childNodes[c];c++)d.setAttribute("text-anchor","end"),d.setAttribute("x",b+Blockly.Bubble.BORDER_WIDTH);this.updateColour();a=this.bubble_.getBubbleSize();
		this.bubble_.setBubbleSize(a.width,a.height)}else this.bubble_.dispose(),this.body_=this.bubble_=null};Blockly.Warning.prototype.bodyFocus_=function(){this.bubble_.promote_()};Blockly.Warning.prototype.setText=function(a,b){this.text_[b]!=a&&(a?this.text_[b]=a:delete this.text_[b],this.isVisible()&&(this.setVisible(!1),this.setVisible(!0)))};Blockly.Warning.prototype.getText=function(){var a=[],b;for(b in this.text_)a.push(this.text_[b]);return a.join("\n")};
		Blockly.Warning.prototype.dispose=function(){this.block_.warning=null;Blockly.Icon.prototype.dispose.call(this)};Blockly.Block=function(a,b,c){var d=a&&a.getFlyout&&a.getFlyout()?a.getFlyout().getWorkspace():null;this.id=!c||a.getBlockById(c)||d&&d.getBlockById(c)?Blockly.genUid():c;a.blockDB_[this.id]=this;this.previousConnection=this.nextConnection=this.outputConnection=null;this.inputList=[];this.inputsInline=!0;this.disabled=!1;this.tooltip="";this.contextMenu=!0;this.parentBlock_=null;this.childBlocks_=[];this.editable_=this.movable_=this.deletable_=!0;this.checkboxInFlyout_=this.collapsed_=this.isShadow_=
		!1;this.category_=this.outputShape_=this.comment=null;this.xy_=new goog.math.Coordinate(0,0);this.workspace=a;this.isInFlyout=a.isFlyout;this.isInMutator=a.isMutator;this.RTL=a.RTL;this.isInsertionMarker_=!1;b&&(this.type=b,c=Blockly.Blocks[b],goog.asserts.assertObject(c,'Error: "%s" is an unknown language block.',b),goog.mixin(this,c));a.addTopBlock(this);goog.isFunction(this.init)&&this.init();this.inputsInlineDefault=this.inputsInline;Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Create(this));
		goog.isFunction(this.onchange)&&(this.onchangeWrapper_=this.onchange.bind(this),this.workspace.addChangeListener(this.onchangeWrapper_))};Blockly.Block.prototype.data=null;Blockly.Block.prototype.colour_="#FF0000";Blockly.Block.prototype.colourSecondary_="#FF0000";Blockly.Block.prototype.colourTertiary_="#FF0000";
		Blockly.Block.prototype.dispose=function(a){if(this.workspace){this.onchangeWrapper_&&this.workspace.removeChangeListener(this.onchangeWrapper_);this.unplug(a);Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Delete(this));Blockly.Events.disable();try{this.workspace&&(this.workspace.removeTopBlock(this),delete this.workspace.blockDB_[this.id],this.workspace=null);Blockly.selected==this&&(Blockly.selected=null);for(var b=this.childBlocks_.length-1;0<=b;b--)this.childBlocks_[b].dispose(!1);
		for(var b=0,c;c=this.inputList[b];b++)c.dispose();this.inputList.length=0;for(var d=this.getConnections_(!0),b=0;b<d.length;b++){var e=d[b];e.isConnected()&&e.disconnect();d[b].dispose()}}finally{Blockly.Events.enable()}}};
		Blockly.Block.prototype.unplug=function(a){if(this.outputConnection)this.outputConnection.isConnected()&&this.outputConnection.disconnect();else if(this.previousConnection){var b=null;this.previousConnection.isConnected()&&(b=this.previousConnection.targetConnection,this.previousConnection.disconnect());var c=this.getNextBlock();a&&c&&(a=this.nextConnection.targetConnection,a.disconnect(),b&&b.checkType_(a)&&b.connect(a))}};
		Blockly.Block.prototype.getConnections_=function(){var a=[];this.outputConnection&&a.push(this.outputConnection);this.previousConnection&&a.push(this.previousConnection);this.nextConnection&&a.push(this.nextConnection);for(var b=0,c;c=this.inputList[b];b++)c.connection&&a.push(c.connection);return a};Blockly.Block.prototype.lastConnectionInStack=function(){for(var a=this.nextConnection;a;){var b=a.targetBlock();if(!b)return a;a=b.nextConnection}return null};
		Blockly.Block.prototype.bumpNeighbours_=function(){if(this.workspace&&Blockly.dragMode_==Blockly.DRAG_NONE){var a=this.getRootBlock();if(!a.isInFlyout)for(var b=this.getConnections_(!1),c=0,d;d=b[c];c++){d.isConnected()&&d.isSuperior()&&d.targetBlock().bumpNeighbours_();for(var e=d.neighbours_(Blockly.SNAP_RADIUS),f=0,g;g=e[f];f++)d.isConnected()&&g.isConnected()||g.getSourceBlock().getRootBlock()!=a&&(d.isSuperior()?g.bumpAwayFrom_(d):d.bumpAwayFrom_(g))}}};Blockly.Block.prototype.getParent=function(){return this.parentBlock_};
		Blockly.Block.prototype.getInputWithBlock=function(a){for(var b=0,c;c=this.inputList[b];b++)if(c.connection&&c.connection.targetBlock()==a)return c;return null};Blockly.Block.prototype.getInputWithConnection=function(a){for(var b=0,c;c=this.inputList[b];b++)if(c.connection==a)return c;return null};Blockly.Block.prototype.getSurroundParent=function(){var a=this;do{var b=a,a=a.getParent();if(!a)return null}while(a.getNextBlock()==b);return a};
		Blockly.Block.prototype.getNextBlock=function(){return this.nextConnection&&this.nextConnection.targetBlock()};Blockly.Block.prototype.getFirstStatementConnection=function(){for(var a=0,b;b=this.inputList[a];a++)if(b.connection&&b.connection.type==Blockly.NEXT_STATEMENT)return b.connection;return null};Blockly.Block.prototype.getRootBlock=function(){var a,b=this;do a=b,b=a.parentBlock_;while(b);return a};Blockly.Block.prototype.getChildren=function(){return this.childBlocks_};
		Blockly.Block.prototype.setParent=function(a){if(a!=this.parentBlock_){if(this.parentBlock_){for(var b=this.parentBlock_.childBlocks_,c,d=0;c=b[d];d++)if(c==this){b.splice(d,1);break}if(this.previousConnection&&this.previousConnection.isConnected())throw"Still connected to previous block.";if(this.outputConnection&&this.outputConnection.isConnected())throw"Still connected to parent block.";this.parentBlock_=null}else this.workspace.removeTopBlock(this);(this.parentBlock_=a)?a.childBlocks_.push(this):
		this.workspace.addTopBlock(this)}};Blockly.Block.prototype.getDescendants=function(a){for(var b=[this],c,d=0;c=this.childBlocks_[d];d++)a&&c.isShadow_||b.push.apply(b,c.getDescendants(a));return b};Blockly.Block.prototype.isDeletable=function(){return this.deletable_&&!this.isShadow_&&!(this.workspace&&this.workspace.options.readOnly)};Blockly.Block.prototype.setDeletable=function(a){this.deletable_=a};
		Blockly.Block.prototype.isMovable=function(){return this.movable_&&!this.isShadow_&&!(this.workspace&&this.workspace.options.readOnly)};Blockly.Block.prototype.setMovable=function(a){this.movable_=a};Blockly.Block.prototype.isShadow=function(){return this.isShadow_};Blockly.Block.prototype.setShadow=function(a){this.isShadow_=a};Blockly.Block.prototype.isInsertionMarker=function(){return this.isInsertionMarker_};
		Blockly.Block.prototype.setInsertionMarker=function(a){this.isInsertionMarker_!=a&&(this.isInsertionMarker_=a)&&(this.setColour(Blockly.Colours.insertionMarker),this.setOpacity(Blockly.Colours.insertionMarkerOpacity),this.svgGroup_.classList.add("blocklyInsertionMarker"))};Blockly.Block.prototype.isEditable=function(){return this.editable_&&!(this.workspace&&this.workspace.options.readOnly)};
		Blockly.Block.prototype.setEditable=function(a){this.editable_=a;a=0;for(var b;b=this.inputList[a];a++)for(var c=0,d;d=b.fieldRow[c];c++)d.updateEditable()};
		Blockly.Block.prototype.setConnectionsHidden=function(a){if(!a&&this.isCollapsed()){if(this.outputConnection&&this.outputConnection.setHidden(a),this.previousConnection&&this.previousConnection.setHidden(a),this.nextConnection){this.nextConnection.setHidden(a);var b=this.nextConnection.targetBlock();b&&b.setConnectionsHidden(a)}}else for(var c=this.getConnections_(!0),d=0;b=c[d];d++)b.setHidden(a),b.isSuperior()&&(b=b.targetBlock())&&b.setConnectionsHidden(a)};
		Blockly.Block.prototype.getMatchingConnection=function(a,b){var c=this.getConnections_(!0),d=a.getConnections_(!0);if(c.length!=d.length)throw"Connection lists did not match in length.";for(var e=0;e<d.length;e++)if(d[e]==b)return c[e];return null};Blockly.Block.prototype.setHelpUrl=function(a){this.helpUrl=a};Blockly.Block.prototype.setTooltip=function(a){this.tooltip=a};Blockly.Block.prototype.getColour=function(){return this.colour_};Blockly.Block.prototype.getColourSecondary=function(){return this.colourSecondary_};
		Blockly.Block.prototype.getColourTertiary=function(){return this.colourTertiary_};Blockly.Block.prototype.makeColour_=function(a){var b=parseFloat(a);if(isNaN(b)){if(goog.isString(a)&&a.match(/^#[0-9a-fA-F]{6}$/))return a;throw"Invalid colour: "+a;}return Blockly.hueToRgb(b)};
		Blockly.Block.prototype.setColour=function(a,b,c){this.colour_=this.makeColour_(a);this.colourSecondary_=void 0!==b?this.makeColour_(b):goog.color.darken(goog.color.hexToRgb(this.colour_),.1);this.colourTertiary_=void 0!==c?this.makeColour_(c):goog.color.darken(goog.color.hexToRgb(this.colour_),.2);this.rendered&&this.updateColour()};Blockly.Block.prototype.getField=function(a){for(var b=0,c;c=this.inputList[b];b++)for(var d=0,e;e=c.fieldRow[d];d++)if(e.name===a)return e;return null};
		Blockly.Block.prototype.getVars=function(){for(var a=[],b=0,c;c=this.inputList[b];b++)for(var d=0,e;e=c.fieldRow[d];d++)e instanceof Blockly.FieldVariable&&a.push(e.getValue());return a};Blockly.Block.prototype.renameVar=function(a,b){for(var c=0,d;d=this.inputList[c];c++)for(var e=0,f;f=d.fieldRow[e];e++)f instanceof Blockly.FieldVariable&&Blockly.Names.equals(a,f.getValue())&&f.setValue(b)};Blockly.Block.prototype.getFieldValue=function(a){return(a=this.getField(a))?a.getValue():null};
		Blockly.Block.prototype.setFieldValue=function(a,b){var c=this.getField(b);goog.asserts.assertObject(c,'Field "%s" not found.',b);c.setValue(a)};
		Blockly.Block.prototype.setPreviousStatement=function(a,b){a?(void 0===b&&(b=null),this.previousConnection||(goog.asserts.assert(!this.outputConnection,"Remove output connection prior to adding previous connection."),this.previousConnection=this.makeConnection_(Blockly.PREVIOUS_STATEMENT)),this.previousConnection.setCheck(b)):this.previousConnection&&(goog.asserts.assert(!this.previousConnection.isConnected(),"Must disconnect previous statement before removing connection."),this.previousConnection.dispose(),
		this.previousConnection=null)};Blockly.Block.prototype.setNextStatement=function(a,b){a?(void 0===b&&(b=null),this.nextConnection||(this.nextConnection=this.makeConnection_(Blockly.NEXT_STATEMENT)),this.nextConnection.setCheck(b)):this.nextConnection&&(goog.asserts.assert(!this.nextConnection.isConnected(),"Must disconnect next statement before removing connection."),this.nextConnection.dispose(),this.nextConnection=null)};
		Blockly.Block.prototype.setOutput=function(a,b){a?(void 0===b&&(b=null),this.outputConnection||(goog.asserts.assert(!this.previousConnection,"Remove previous connection prior to adding output connection."),this.outputConnection=this.makeConnection_(Blockly.OUTPUT_VALUE)),this.outputConnection.setCheck(b)):this.outputConnection&&(goog.asserts.assert(!this.outputConnection.isConnected(),"Must disconnect output value before removing connection."),this.outputConnection.dispose(),this.outputConnection=
		null)};Blockly.Block.prototype.setInputsInline=function(a){this.inputsInline!=a&&(Blockly.Events.fire(new Blockly.Events.Change(this,"inline",null,this.inputsInline,a)),this.inputsInline=a)};
		Blockly.Block.prototype.getInputsInline=function(){if(void 0!=this.inputsInline)return this.inputsInline;for(var a=1;a<this.inputList.length;a++)if(this.inputList[a-1].type==Blockly.DUMMY_INPUT&&this.inputList[a].type==Blockly.DUMMY_INPUT)return!1;for(a=1;a<this.inputList.length;a++)if(this.inputList[a-1].type==Blockly.INPUT_VALUE&&this.inputList[a].type==Blockly.DUMMY_INPUT)return!0;return!1};
		Blockly.Block.prototype.setDisabled=function(a){this.disabled!=a&&(Blockly.Events.fire(new Blockly.Events.Change(this,"disabled",null,this.disabled,a)),this.disabled=a)};Blockly.Block.prototype.getInheritedDisabled=function(){for(var a=this;;){a=a.getSurroundParent();if(!a)return!1;if(a.disabled)return!0}};Blockly.Block.prototype.isCollapsed=function(){return this.collapsed_};
		Blockly.Block.prototype.setCollapsed=function(a){this.collapsed_!=a&&(Blockly.Events.fire(new Blockly.Events.Change(this,"collapsed",null,this.collapsed_,a)),this.collapsed_=a)};
		Blockly.Block.prototype.toString=function(a,b){var c=[],d=b||"?";if(this.collapsed_)c.push(this.getInput("_TEMP_COLLAPSED_INPUT").fieldRow[0].text_);else for(var e=0,f;f=this.inputList[e];e++){for(var g=0,h;h=f.fieldRow[g];g++)c.push(h.getText());f.connection&&((f=f.connection.targetBlock())?c.push(f.toString(void 0,b)):c.push(d))}c=goog.string.trim(c.join(" "))||"???";a&&(c=goog.string.truncate(c,a));return c};
		Blockly.Block.prototype.appendValueInput=function(a){return this.appendInput_(Blockly.INPUT_VALUE,a)};Blockly.Block.prototype.appendStatementInput=function(a){return this.appendInput_(Blockly.NEXT_STATEMENT,a)};Blockly.Block.prototype.appendDummyInput=function(a){return this.appendInput_(Blockly.DUMMY_INPUT,a||"")};
		Blockly.Block.prototype.jsonInit=function(a){goog.asserts.assert(void 0==a.output||void 0==a.previousStatement,"Must not have both an output and a previousStatement.");void 0!==a.colour&&this.setColour(a.colour,a.colourSecondary,a.colourTertiary);for(var b=0;void 0!==a["message"+b];)this.interpolate_(a["message"+b],a["args"+b]||[],a["lastDummyAlign"+b]),b++;void 0!==a.inputsInline&&this.setInputsInline(a.inputsInline);void 0!==a.output&&this.setOutput(!0,a.output);void 0!==a.previousStatement&&this.setPreviousStatement(!0,
		a.previousStatement);void 0!==a.nextStatement&&this.setNextStatement(!0,a.nextStatement);void 0!==a.tooltip&&this.setTooltip(a.tooltip);void 0!==a.helpUrl&&this.setHelpUrl(a.helpUrl);void 0!==a.outputShape&&this.setOutputShape(a.outputShape);void 0!==a.checkboxInFlyout&&this.setCheckboxInFlyout(a.checkboxInFlyout);void 0!==a.category&&this.setCategory(a.category)};
		Blockly.Block.prototype.interpolate_=function(a,b,c){var d=Blockly.utils.tokenizeInterpolation(a),e=[],f=0;a=[];for(var g=0;g<d.length;g++){var h=d[g];"number"==typeof h?(goog.asserts.assert(0<h&&h<=b.length,'Message index "%s" out of range.',h),goog.asserts.assert(!e[h],'Message index "%s" duplicated.',h),e[h]=!0,f++,a.push(b[h-1])):(h=h.trim())&&a.push(h)}goog.asserts.assert(f==b.length,"Message does not reference all %s arg(s).",b.length);!a.length||"string"!=typeof a[a.length-1]&&0!=a[a.length-
		1].type.indexOf("field_")||(g={type:"input_dummy"},c&&(g.align=c),a.push(g));c={LEFT:Blockly.ALIGN_LEFT,RIGHT:Blockly.ALIGN_RIGHT,CENTRE:Blockly.ALIGN_CENTRE};b=[];for(g=0;g<a.length;g++)if(e=a[g],"string"==typeof e)b.push([e,void 0]);else{d=f=null;do if(h=!1,"string"==typeof e)f=new Blockly.FieldLabel(e);else switch(e.type){case "input_value":d=this.appendValueInput(e.name);break;case "input_statement":d=this.appendStatementInput(e.name);break;case "input_dummy":d=this.appendDummyInput(e.name);break;
		case "field_label":f=new Blockly.FieldLabel(e.text,e["class"]);break;case "field_input":f=new Blockly.FieldTextInput(e.text);"boolean"==typeof e.spellcheck&&f.setSpellcheck(e.spellcheck);break;case "field_textdropdown":f=new Blockly.FieldTextDropdown(e.text,e.options);"boolean"==typeof e.spellcheck&&f.setSpellcheck(e.spellcheck);break;case "field_numberdropdown":f=new Blockly.FieldNumberDropdown(e.value,e.options,e.min,e.max,e.precision);break;case "field_angle":f=new Blockly.FieldAngle(e.angle);
		break;case "field_checkbox":f=new Blockly.FieldCheckbox(e.checked?"TRUE":"FALSE");break;case "field_colour":f=new Blockly.FieldColour(e.colour);break;case "field_variable":f=new Blockly.FieldVariable(e.variable);break;case "field_dropdown":f=new Blockly.FieldDropdown(e.options);break;case "field_iconmenu":f=new Blockly.FieldIconMenu(e.options);break;case "field_image":f=new Blockly.FieldImage(e.src,e.width,e.height,e.alt,e.flip_rtl);break;case "field_number":f=new Blockly.FieldNumber(e.value,e.min,
		e.max,e.precision);break;case "field_date":if(Blockly.FieldDate){f=new Blockly.FieldDate(e.date);break}default:e.alt&&(e=e.alt,h=!0)}while(h);if(f)b.push([f,e.name]);else if(d){e.check&&d.setCheck(e.check);e.align&&d.setAlign(c[e.align]);for(e=0;e<b.length;e++)d.appendField(b[e][0],b[e][1]);b.length=0}}};
		Blockly.Block.prototype.appendInput_=function(a,b){var c=null;if(a==Blockly.INPUT_VALUE||a==Blockly.NEXT_STATEMENT)c=this.makeConnection_(a);c=new Blockly.Input(a,b,this,c);this.inputList.push(c);return c};
		Blockly.Block.prototype.moveInputBefore=function(a,b){if(a!=b){for(var c=-1,d=b?-1:this.inputList.length,e=0,f;f=this.inputList[e];e++)if(f.name==a){if(c=e,-1!=d)break}else if(b&&f.name==b&&(d=e,-1!=c))break;goog.asserts.assert(-1!=c,'Named input "%s" not found.',a);goog.asserts.assert(-1!=d,'Reference input "%s" not found.',b);this.moveNumberedInputBefore(c,d)}};
		Blockly.Block.prototype.moveNumberedInputBefore=function(a,b){goog.asserts.assert(a!=b,"Can't move input to itself.");goog.asserts.assert(a<this.inputList.length,"Input index "+a+" out of bounds.");goog.asserts.assert(b<=this.inputList.length,"Reference input "+b+" out of bounds.");var c=this.inputList[a];this.inputList.splice(a,1);a<b&&b--;this.inputList.splice(b,0,c)};
		Blockly.Block.prototype.removeInput=function(a,b){for(var c=0,d;d=this.inputList[c];c++)if(d.name==a){if(d.connection&&d.connection.isConnected()){d.connection.setShadowDom(null);var e=d.connection.targetBlock();e.isShadow()?e.dispose():e.unplug()}d.dispose();this.inputList.splice(c,1);return}b||goog.asserts.fail('Input "%s" not found.',a)};Blockly.Block.prototype.getInput=function(a){for(var b=0,c;c=this.inputList[b];b++)if(c.name==a)return c;return null};
		Blockly.Block.prototype.getInputTargetBlock=function(a){return(a=this.getInput(a))&&a.connection&&a.connection.targetBlock()};Blockly.Block.prototype.getCommentText=function(){return this.comment||""};Blockly.Block.prototype.setCommentText=function(a){this.comment!=a&&(Blockly.Events.fire(new Blockly.Events.Change(this,"comment",null,this.comment,a||"")),this.comment=a)};Blockly.Block.prototype.setOutputShape=function(a){this.outputShape_=a};Blockly.Block.prototype.getOutputShape=function(){return this.outputShape_};
		Blockly.Block.prototype.setCategory=function(a){this.category_=a};Blockly.Block.prototype.getCategory=function(){return this.category_};Blockly.Block.prototype.setCheckboxInFlyout=function(a){this.checkboxInFlyout_=a};Blockly.Block.prototype.hasCheckboxInFlyout=function(){return this.checkboxInFlyout_};Blockly.Block.prototype.setWarningText=function(){};Blockly.Block.prototype.setMutator=function(){};Blockly.Block.prototype.getRelativeToSurfaceXY=function(){return this.xy_};
		Blockly.Block.prototype.moveBy=function(a,b){goog.asserts.assert(!this.parentBlock_,"Block has parent.");var c=new Blockly.Events.Move(this);this.xy_.translate(a,b);c.recordNew();Blockly.Events.fire(c)};Blockly.Block.prototype.makeConnection_=function(a){return new Blockly.Connection(this,a)};Blockly.ContextMenu={};Blockly.ContextMenu.currentBlock=null;
		Blockly.ContextMenu.show=function(a,b,c){Blockly.WidgetDiv.show(Blockly.ContextMenu,c,null);if(b.length){var d=new goog.ui.Menu;d.setRightToLeft(c);for(var e=0,f;f=b[e];e++){var g=new goog.ui.MenuItem(f.text);g.setRightToLeft(c);d.addChild(g,!0);g.setEnabled(f.enabled);f.enabled&&goog.events.listen(g,goog.ui.Component.EventType.ACTION,f.callback)}goog.events.listen(d,goog.ui.Component.EventType.ACTION,Blockly.ContextMenu.hide);b=goog.dom.getViewportSize();e=goog.style.getViewportPageOffset(document);
		d.render(Blockly.WidgetDiv.DIV);var h=d.getElement();Blockly.addClass_(h,"blocklyContextMenu");Blockly.bindEvent_(h,"contextmenu",null,Blockly.noEvent);f=goog.style.getSize(h);var g=a.clientX+e.x,k=a.clientY+e.y;a.clientY+f.height>=b.height&&(k-=f.height);c?f.width>=a.clientX&&(g+=f.width):a.clientX+f.width>=b.width&&(g-=f.width);Blockly.WidgetDiv.position(g,k,b,e,c);d.setAllowAutoFocus(!0);setTimeout(function(){h.focus()},1);Blockly.ContextMenu.currentBlock=null}else Blockly.ContextMenu.hide()};
		Blockly.ContextMenu.hide=function(){Blockly.WidgetDiv.hideIfOwner(Blockly.ContextMenu);Blockly.ContextMenu.currentBlock=null};
		Blockly.ContextMenu.callbackFactory=function(a,b){return function(){Blockly.Events.disable();try{var c=Blockly.Xml.domToBlock(b,a.workspace),d=a.getRelativeToSurfaceXY();d.x=a.RTL?d.x-Blockly.SNAP_RADIUS:d.x+Blockly.SNAP_RADIUS;d.y+=2*Blockly.SNAP_RADIUS;c.moveBy(d.x,d.y)}finally{Blockly.Events.enable()}Blockly.Events.isEnabled()&&!c.isShadow()&&Blockly.Events.fire(new Blockly.Events.Create(c));c.select()}};Blockly.RenderedConnection=function(a,b){Blockly.RenderedConnection.superClass_.constructor.call(this,a,b);this.offsetInBlock_=new goog.math.Coordinate(0,0)};goog.inherits(Blockly.RenderedConnection,Blockly.Connection);Blockly.RenderedConnection.prototype.distanceFrom=function(a){var b=this.x_-a.x_;a=this.y_-a.y_;return Math.sqrt(b*b+a*a)};
		Blockly.RenderedConnection.prototype.bumpAwayFrom_=function(a){if(Blockly.dragMode_==Blockly.DRAG_NONE){var b=this.sourceBlock_.getRootBlock();if(!b.isInFlyout){var c=!1;if(!b.isMovable()){b=a.getSourceBlock().getRootBlock();if(!b.isMovable())return;a=this;c=!0}var d=Blockly.selected==b;d||b.addSelect();var e=a.x_+Blockly.SNAP_RADIUS-this.x_;a=a.y_+Blockly.SNAP_RADIUS-this.y_;c&&(a=-a);b.RTL&&(e=-e);b.moveBy(e,a);d||b.removeSelect()}}};
		Blockly.RenderedConnection.prototype.moveTo=function(a,b){this.inDB_&&this.db_.removeConnection_(this);this.x_=a;this.y_=b;this.hidden_||this.db_.addConnection(this)};Blockly.RenderedConnection.prototype.moveBy=function(a,b){this.moveTo(this.x_+a,this.y_+b)};Blockly.RenderedConnection.prototype.moveToOffset=function(a){this.moveTo(a.x+this.offsetInBlock_.x,a.y+this.offsetInBlock_.y)};
		Blockly.RenderedConnection.prototype.setOffsetInBlock=function(a,b){this.offsetInBlock_.x=a;this.offsetInBlock_.y=b};Blockly.RenderedConnection.prototype.tighten_=function(){var a=this.targetConnection.x_-this.x_,b=this.targetConnection.y_-this.y_;if(0!=a||0!=b){var c=this.targetBlock(),d=c.getSvgRoot();if(!d)throw"block is not rendered.";d=Blockly.getRelativeXY_(d);c.getSvgRoot().setAttribute("transform","translate("+(d.x-a)+","+(d.y-b)+")");c.moveConnections_(-a,-b)}};
		Blockly.RenderedConnection.prototype.closest=function(a,b){return this.dbOpposite_.searchForClosest(this,a,b)};Blockly.RenderedConnection.prototype.highlight=function(){var a;a="m -20,0 h 5 "+Blockly.BlockSvg.NOTCH_PATH_LEFT+" h 5";var b=this.sourceBlock_.getRelativeToSurfaceXY();Blockly.Connection.highlightedPath_=Blockly.createSvgElement("path",{"class":"blocklyHighlightedConnectionPath",d:a,transform:"translate("+(this.x_-b.x)+","+(this.y_-b.y)+")"+(this.sourceBlock_.RTL?" scale(-1 1)":"")},this.sourceBlock_.getSvgRoot())};
		Blockly.RenderedConnection.prototype.unhideAll=function(){this.setHidden(!1);var a=[];if(this.type!=Blockly.INPUT_VALUE&&this.type!=Blockly.NEXT_STATEMENT)return a;var b=this.targetBlock();if(b){var c;b.isCollapsed()?(c=[],b.outputConnection&&c.push(b.outputConnection),b.nextConnection&&c.push(b.nextConnection),b.previousConnection&&c.push(b.previousConnection)):c=b.getConnections_(!0);for(var d=0;d<c.length;d++)a.push.apply(a,c[d].unhideAll());a.length||(a[0]=b)}return a};
		Blockly.RenderedConnection.prototype.unhighlight=function(){goog.dom.removeNode(Blockly.Connection.highlightedPath_);delete Blockly.Connection.highlightedPath_};Blockly.RenderedConnection.prototype.setHidden=function(a){(this.hidden_=a)&&this.inDB_?this.db_.removeConnection_(this):a||this.inDB_||this.db_.addConnection(this)};
		Blockly.RenderedConnection.prototype.hideAll=function(){this.setHidden(!0);if(this.targetConnection)for(var a=this.targetBlock().getDescendants(),b=0;b<a.length;b++){for(var c=a[b],d=c.getConnections_(!0),e=0;e<d.length;e++)d[e].setHidden(!0);c=c.getIcons();for(e=0;e<c.length;e++)c[e].setVisible(!1)}};Blockly.RenderedConnection.prototype.isConnectionAllowed=function(a,b){return this.distanceFrom(a)>b?!1:Blockly.RenderedConnection.superClass_.isConnectionAllowed.call(this,a)};
		Blockly.RenderedConnection.prototype.disconnectInternal_=function(a,b){Blockly.RenderedConnection.superClass_.disconnectInternal_.call(this,a,b);a.rendered&&a.render();b.rendered&&(b.updateDisabled(),b.render())};
		Blockly.RenderedConnection.prototype.respawnShadow_=function(){var a=this.getSourceBlock(),b=this.getShadowDom();if(a.workspace&&b&&Blockly.Events.recordUndo){Blockly.RenderedConnection.superClass_.respawnShadow_.call(this);b=this.targetBlock();if(!b)throw"Couldn't respawn the shadow block that should exist here.";b.initSvg();b.render(!1);a.rendered&&a.render()}};Blockly.RenderedConnection.prototype.neighbours_=function(a){return this.dbOpposite_.getNeighbours(this,a)};
		Blockly.RenderedConnection.prototype.connect_=function(a){Blockly.RenderedConnection.superClass_.connect_.call(this,a);var b=this.getSourceBlock();a=a.getSourceBlock();b.rendered&&b.updateDisabled();a.rendered&&a.updateDisabled();b.rendered&&a.rendered&&(this.type==Blockly.NEXT_STATEMENT||this.type==Blockly.PREVIOUS_STATEMENT?a.render():b.render())};Blockly.BlockSvg=function(a,b,c){this.svgGroup_=Blockly.createSvgElement("g",{},null);this.svgPath_=Blockly.createSvgElement("path",{"class":"blocklyPath blocklyBlockBackground"},this.svgGroup_);this.svgPath_.tooltip=this;this.rendered=!1;this.inputShapes_={};Blockly.Tooltip.bindMouseEvents(this.svgPath_);Blockly.BlockSvg.superClass_.constructor.call(this,a,b,c)};goog.inherits(Blockly.BlockSvg,Blockly.Block);Blockly.BlockSvg.prototype.height=0;Blockly.BlockSvg.prototype.width=0;
		Blockly.BlockSvg.prototype.insertionMarkerMinWidth_=0;Blockly.BlockSvg.prototype.opacity_=1;Blockly.BlockSvg.prototype.dragStartXY_=null;Blockly.BlockSvg.prototype.isGlowingBlock_=!1;Blockly.BlockSvg.prototype.isGlowingStack_=!1;Blockly.BlockSvg.INLINE=-1;
		Blockly.BlockSvg.prototype.initSvg=function(){goog.asserts.assert(this.workspace.rendered,"Workspace is headless.");if(!this.isInsertionMarker()){for(var a=0,b;b=this.inputList[a];a++)b.init(),b.type===Blockly.INPUT_VALUE&&this.initInputShape(b);b=this.getIcons();for(a=0;a<b.length;a++)b[a].createIcon()}this.updateColour();this.updateMovable();if(!this.workspace.options.readOnly&&!this.eventsInit_){Blockly.bindEvent_(this.getSvgRoot(),"mousedown",this,this.onMouseDown_);var c=this;Blockly.bindEvent_(this.getSvgRoot(),
		"touchstart",null,function(a){Blockly.longStart_(a,c)})}this.eventsInit_=!0;this.getSvgRoot().parentNode||this.workspace.getCanvas().appendChild(this.getSvgRoot())};Blockly.BlockSvg.prototype.initInputShape=function(a){this.inputShapes_[a.name]||a.connection.getShadowDom()||(this.inputShapes_[a.name]=Blockly.createSvgElement("path",{"class":"blocklyPath",style:"visibility: hidden"},this.svgGroup_))};
		Blockly.BlockSvg.prototype.select=function(){if(this.isShadow()&&this.getParent())this.getParent().select();else if(Blockly.selected!=this){var a=null;if(Blockly.selected){a=Blockly.selected.id;Blockly.Events.disable();try{Blockly.selected.unselect()}finally{Blockly.Events.enable()}}a=new Blockly.Events.Ui(null,"selected",a,this.id);a.workspaceId=this.workspace.id;Blockly.Events.fire(a);Blockly.selected=this;this.addSelect()}};
		Blockly.BlockSvg.prototype.unselect=function(){if(Blockly.selected==this){var a=new Blockly.Events.Ui(null,"selected",this.id,null);a.workspaceId=this.workspace.id;Blockly.Events.fire(a);Blockly.selected=null;this.removeSelect()}};Blockly.BlockSvg.prototype.setGlowBlock=function(a){this.isGlowingBlock_=a;this.updateColour()};
		Blockly.BlockSvg.prototype.setGlowStack=function(a){this.isGlowingStack_=a;a=this.getSvgRoot();this.isGlowingStack_&&!a.hasAttribute("filter")?a.setAttribute("filter","url(#blocklyStackGlowFilter)"):!this.isGlowingStack_&&a.hasAttribute("filter")&&a.removeAttribute("filter")};Blockly.BlockSvg.prototype.mutator=null;Blockly.BlockSvg.prototype.comment=null;Blockly.BlockSvg.prototype.warning=null;
		Blockly.BlockSvg.prototype.getIcons=function(){var a=[];this.mutator&&a.push(this.mutator);this.comment&&a.push(this.comment);this.warning&&a.push(this.warning);return a};Blockly.BlockSvg.onMouseUpWrapper_=null;Blockly.BlockSvg.onMouseMoveWrapper_=null;
		Blockly.BlockSvg.terminateDrag=function(){Blockly.BlockSvg.onMouseUpWrapper_&&(Blockly.unbindEvent_(Blockly.BlockSvg.onMouseUpWrapper_),Blockly.BlockSvg.onMouseUpWrapper_=null);Blockly.BlockSvg.onMouseMoveWrapper_&&(Blockly.unbindEvent_(Blockly.BlockSvg.onMouseMoveWrapper_),Blockly.BlockSvg.onMouseMoveWrapper_=null);var a=Blockly.selected;if(Blockly.dragMode_==Blockly.DRAG_FREE&&a){Blockly.replacementMarker_?Blockly.BlockSvg.removeReplacementMarker():Blockly.insertionMarker_&&(Blockly.Events.disable(),
		Blockly.insertionMarkerConnection_&&Blockly.BlockSvg.disconnectInsertionMarker(),Blockly.insertionMarker_.dispose(),Blockly.insertionMarker_=null,Blockly.Events.enable());var b=a.getRelativeToSurfaceXY(),b=goog.math.Coordinate.difference(b,a.dragStartXY_),c=new Blockly.Events.Move(a);c.oldCoordinate=a.dragStartXY_;c.recordNew();Blockly.Events.fire(c);a.moveConnections_(b.x,b.y);delete a.draggedBubbles_;a.setDragging_(!1);a.moveOffDragSurface_();a.render();a.workspace.setResizesEnabled(!0);var d=Blockly.Events.getGroup();
		setTimeout(function(){Blockly.Events.setGroup(d);a.snapToGrid();Blockly.Events.setGroup(!1)},Blockly.BUMP_DELAY/2);setTimeout(function(){Blockly.Events.setGroup(d);a.bumpNeighbours_();Blockly.Events.setGroup(!1)},Blockly.BUMP_DELAY)}Blockly.dragMode_=Blockly.DRAG_NONE;Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN)};
		Blockly.BlockSvg.prototype.setParent=function(a){if(a!=this.parentBlock_){var b=this.getSvgRoot();if(this.parentBlock_&&b){var c=this.getRelativeToSurfaceXY();Blockly.selected!=this&&(this.workspace.getCanvas().appendChild(b),this.translate(c.x,c.y))}Blockly.Field.startCache();Blockly.BlockSvg.superClass_.setParent.call(this,a);Blockly.Field.stopCache();a&&(c=this.getRelativeToSurfaceXY(),a.getSvgRoot().appendChild(b),b=this.getRelativeToSurfaceXY(),this.moveConnections_(b.x-c.x,b.y-c.y),this.isShadow()&&
		this.setColour(this.getColour(),this.getColourSecondary(),a.getColourTertiary()))}};
		Blockly.BlockSvg.prototype.getRelativeToSurfaceXY=function(){var a=0,b=0,c=this.workspace.dragSurface?this.workspace.dragSurface.getGroup():null,d=this.getSvgRoot();if(d){do{var e=Blockly.getRelativeXY_(d),a=a+e.x,b=b+e.y;this.workspace.dragSurface&&this.workspace.dragSurface.getCurrentBlock()==d&&(e=this.workspace.dragSurface.getSurfaceTranslation(),a+=e.x,b+=e.y);d=d.parentNode}while(d&&d!=this.workspace.getCanvas()&&d!=c)}return new goog.math.Coordinate(a,b)};
		Blockly.BlockSvg.prototype.moveBy=function(a,b){goog.asserts.assert(!this.parentBlock_,"Block has parent.");var c=Blockly.Events.isEnabled();if(c)var d=new Blockly.Events.Move(this);var e=this.getRelativeToSurfaceXY();this.translate(e.x+a,e.y+b);this.moveConnections_(a,b);c&&(d.recordNew(),Blockly.Events.fire(d));this.workspace.resizeContents()};
		Blockly.BlockSvg.prototype.translate=function(a,b,c){c?this.getSvgRoot().setAttribute("style","transform: translate3d("+a+"px,"+b+"px, 0px)"):this.getSvgRoot().setAttribute("transform","translate("+a+","+b+")")};
		Blockly.BlockSvg.prototype.snapToGrid=function(){if(this.workspace&&Blockly.dragMode_==Blockly.DRAG_NONE&&!this.getParent()&&!this.isInFlyout&&this.workspace.options.gridOptions&&this.workspace.options.gridOptions.snap){var a=this.workspace.options.gridOptions.spacing,b=a/2,c=this.getRelativeToSurfaceXY(),d=Math.round((c.x-b)/a)*a+b-c.x,a=Math.round((c.y-b)/a)*a+b-c.y,d=Math.round(d),a=Math.round(a);0==d&&0==a||this.moveBy(d,a)}};
		Blockly.BlockSvg.prototype.getBoundingRectangle=function(){var a=this.getRelativeToSurfaceXY(this),b=this.getHeightWidth(),c;this.RTL?(c=new goog.math.Coordinate(a.x-b.width,a.y),a=new goog.math.Coordinate(a.x,a.y+b.height)):(c=new goog.math.Coordinate(a.x,a.y),a=new goog.math.Coordinate(a.x+b.width,a.y+b.height));return{topLeft:c,bottomRight:a}};Blockly.BlockSvg.prototype.setOpacity=function(a){this.opacity_=a;this.rendered&&this.updateColour()};Blockly.BlockSvg.prototype.getOpacity=function(){return this.opacity_};
		Blockly.BlockSvg.prototype.setCollapsed=function(a){if(this.collapsed_!=a){for(var b=[],c=0,d;d=this.inputList[c];c++)b.push.apply(b,d.setVisible(!a));if(a){d=this.getIcons();for(c=0;c<d.length;c++)d[c].setVisible(!1);c=this.toString(Blockly.COLLAPSE_CHARS);this.appendDummyInput("_TEMP_COLLAPSED_INPUT").appendField(c).init()}else this.removeInput("_TEMP_COLLAPSED_INPUT"),this.setWarningText(null);Blockly.BlockSvg.superClass_.setCollapsed.call(this,a);b.length||(b[0]=this);if(this.rendered)for(c=0;a=
		b[c];c++)a.render()}};Blockly.BlockSvg.prototype.tab=function(a,b){for(var c=[],d=0,e;e=this.inputList[d];d++){for(var f=0,g;g=e.fieldRow[f];f++)g instanceof Blockly.FieldTextInput&&c.push(g);e.connection&&(e=e.connection.targetBlock())&&c.push(e)}d=c.indexOf(a);-1==d&&(d=b?-1:c.length);(c=c[b?d+1:d-1])?c instanceof Blockly.Field?c.showEditor_():c.tab(null,b):(c=this.getParent())&&c.tab(this,b)};
		Blockly.BlockSvg.prototype.onMouseDown_=function(a){if(!this.workspace.options.readOnly)if(this.isInFlyout)"touchstart"==a.type&&Blockly.isRightButton(a)&&(Blockly.Flyout.blockRightClick_(a,this),a.stopPropagation(),a.preventDefault());else{this.isInMutator&&this.workspace.resize();this.workspace.updateScreenCalculationsIfScrolled();this.workspace.markFocused();Blockly.terminateDrag_();this.select();Blockly.hideChaff();Blockly.DropDownDiv.hideWithoutAnimation();if(Blockly.isRightButton(a))this.showContextMenu_(a),
		Blockly.Touch.clearTouchIdentifier();else if(this.isMovable()){Blockly.Events.getGroup()||Blockly.Events.setGroup(!0);this.dragStartXY_=this.getRelativeToSurfaceXY();this.workspace.startDrag(a,this.dragStartXY_);Blockly.dragMode_=Blockly.DRAG_STICKY;Blockly.BlockSvg.onMouseUpWrapper_=Blockly.bindEvent_(document,"mouseup",this,this.onMouseUp_);Blockly.BlockSvg.onMouseMoveWrapper_=Blockly.bindEvent_(document,"mousemove",this,this.onMouseMove_);this.draggedBubbles_=[];for(var b=this.getDescendants(),
		c=0,d;d=b[c];c++){d=d.getIcons();for(var e=0;e<d.length;e++){var f=d[e].getIconLocation();f.bubble=d[e];this.draggedBubbles_.push(f)}}}else return;a.stopPropagation();a.preventDefault()}};
		Blockly.BlockSvg.prototype.onMouseUp_=function(a){var b=Blockly.WidgetDiv.isVisible()||Blockly.DropDownDiv.isVisible();Blockly.Touch.clearTouchIdentifier();Blockly.dragMode_==Blockly.DRAG_FREE||b||(Blockly.Events.fire(new Blockly.Events.Ui(this,"click",void 0,void 0)),b=this.workspace.getBlockById(this.id).getRootBlock(),Blockly.Events.fire(new Blockly.Events.Ui(b,"stackclick",void 0,void 0)));Blockly.terminateDrag_();!this.getParent()&&Blockly.selected.isDeletable()&&this.workspace.isDeleteArea(a)?
		((a=this.workspace.trashcan)&&setTimeout(a.close.bind(a),100),Blockly.selected.dispose(!1,!0)):Blockly.selected&&Blockly.highlightedConnection_&&(this.positionNewBlock(Blockly.selected,Blockly.localConnection_,Blockly.highlightedConnection_),Blockly.localConnection_.connect(Blockly.highlightedConnection_),this.rendered&&(Blockly.localConnection_.isSuperior()?Blockly.highlightedConnection_:Blockly.localConnection_).getSourceBlock().connectionUiEffect(),this.workspace.trashcan&&this.workspace.trashcan.close());
		Blockly.highlightedConnection_&&(Blockly.highlightedConnection_=null);Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN);Blockly.WidgetDiv.isVisible()||Blockly.Events.setGroup(!1)};Blockly.BlockSvg.prototype.showHelp_=function(){var a=goog.isFunction(this.helpUrl)?this.helpUrl():this.helpUrl;a&&alert(a)};
		Blockly.BlockSvg.prototype.showContextMenu_=function(a){if(!this.workspace.options.readOnly&&this.contextMenu){var b=this,c=[];if(this.isDeletable()&&this.isMovable()&&!b.isInFlyout){c.push({text:Blockly.Msg.DUPLICATE_BLOCK,enabled:!0,callback:function(){Blockly.duplicate_(b)}});if(this.isEditable()&&this.workspace.options.comments){var d={enabled:!goog.userAgent.IE};this.comment?(d.text=Blockly.Msg.REMOVE_COMMENT,d.callback=function(){b.setCommentText(null)}):(d.text=Blockly.Msg.ADD_COMMENT,d.callback=
		function(){b.setCommentText("")});c.push(d)}var d=this.getDescendants(!0).length,e=this.getNextBlock();e&&(d-=e.getDescendants(!0).length);d={text:1==d?Blockly.Msg.DELETE_BLOCK:Blockly.Msg.DELETE_X_BLOCKS.replace("%1",String(d)),enabled:!0,callback:function(){Blockly.Events.setGroup(!0);b.dispose(!0,!0);Blockly.Events.setGroup(!1)}};c.push(d)}d={enabled:!(goog.isFunction(this.helpUrl)?!this.helpUrl():!this.helpUrl)};d.text=Blockly.Msg.HELP;d.callback=function(){b.showHelp_()};c.push(d);this.customContextMenu&&
		!b.isInFlyout&&this.customContextMenu(c);Blockly.ContextMenu.show(a,c,this.RTL);Blockly.ContextMenu.currentBlock=this}};Blockly.BlockSvg.prototype.moveConnections_=function(a,b){if(this.rendered){for(var c=this.getConnections_(!1),d=0;d<c.length;d++)c[d].moveBy(a,b);c=this.getIcons();for(d=0;d<c.length;d++)c[d].computeIconLocation();for(d=0;d<this.childBlocks_.length;d++)this.childBlocks_[d].moveConnections_(a,b)}};
		Blockly.BlockSvg.prototype.setDragging_=function(a){a?(this.addDragging(),Blockly.draggingConnections_=Blockly.draggingConnections_.concat(this.getConnections_(!0))):(this.removeDragging(),Blockly.draggingConnections_=[]);for(var b=0;b<this.childBlocks_.length;b++)this.childBlocks_[b].setDragging_(a)};Blockly.BlockSvg.prototype.moveToDragSurface_=function(){var a=this.getRelativeToSurfaceXY();this.clearTransformAttributes_();this.workspace.dragSurface.translateSurface(a.x,a.y);this.workspace.dragSurface.setBlocksAndShow(this.getSvgRoot())};
		Blockly.BlockSvg.prototype.moveOffDragSurface_=function(){var a=this.getRelativeToSurfaceXY();this.clearTransformAttributes_();this.translate(a.x,a.y,!1);this.workspace.dragSurface.clearAndHide(this.workspace.getCanvas())};Blockly.BlockSvg.prototype.clearTransformAttributes_=function(){this.getSvgRoot().hasAttribute("transform")&&this.getSvgRoot().removeAttribute("transform");this.getSvgRoot().hasAttribute("style")&&this.getSvgRoot().removeAttribute("style")};
		Blockly.BlockSvg.prototype.onMouseMove_=function(a){if("mousemove"==a.type&&1>=a.clientX&&0==a.clientY&&0==a.button)a.stopPropagation();else{var b=this.getRelativeToSurfaceXY(),c=this.workspace.moveDrag(a);Blockly.dragMode_==Blockly.DRAG_STICKY&&goog.math.Coordinate.distance(b,c)*this.workspace.scale>Blockly.DRAG_RADIUS&&(Blockly.Css.setCursor(Blockly.Css.Cursor.CLOSED),Blockly.dragMode_=Blockly.DRAG_FREE,Blockly.longStop_(),this.moveToDragSurface_(),this.workspace.setResizesEnabled(!1),Blockly.WidgetDiv.hide(!0),
		Blockly.DropDownDiv.hideWithoutAnimation(),this.parentBlock_&&this.unplug(),this.setDragging_(!0));Blockly.dragMode_==Blockly.DRAG_FREE&&this.handleDragFree_(b,c,a);a.stopPropagation();a.preventDefault()}};
		Blockly.BlockSvg.prototype.handleDragFree_=function(a,b,c){var d=goog.math.Coordinate.difference(a,this.dragStartXY_);this.workspace.dragSurface.translateSurface(b.x,b.y);for(var e=0;e<this.draggedBubbles_.length;e++)a=this.draggedBubbles_[e],a.bubble.setIconLocation(goog.math.Coordinate.sum(a,d));var f=this.getConnections_(!1);(a=this.lastConnectionInStack())&&a!=this.nextConnection&&f.push(a);var g=null,h=null,k=Blockly.SNAP_RADIUS;Blockly.localConnection_&&Blockly.highlightedConnection_&&(k=Blockly.CONNECTING_SNAP_RADIUS);
		for(e=0;e<f.length;e++){var l=f[e],m=l.closest(k,d);m.connection&&(g=m.connection,h=l,k=m.radius)}e=!0;h&&h.type==Blockly.OUTPUT_VALUE?e=!0:Blockly.localConnection_&&Blockly.highlightedConnection_&&(f=Blockly.localConnection_.x_+d.x-Blockly.highlightedConnection_.x_,d=Blockly.localConnection_.y_+d.y-Blockly.highlightedConnection_.y_,d=Math.sqrt(f*f+d*d),g&&k>d-Blockly.CURRENT_CONNECTION_PREFERENCE&&(e=!1));e&&this.updatePreviews(g,h,k,c,b.x-this.dragStartXY_.x,b.y-this.dragStartXY_.y,h==a)};
		Blockly.BlockSvg.prototype.updatePreviews=function(a,b,c,d,e,f,g){Blockly.Events.disable();Blockly.highlightedConnection_&&Blockly.highlightedConnection_!=a&&(Blockly.replacementMarker_?Blockly.BlockSvg.removeReplacementMarker():Blockly.insertionMarker_&&Blockly.insertionMarkerConnection_&&Blockly.BlockSvg.disconnectInsertionMarker(),Blockly.insertionMarker_&&(g&&Blockly.localConnection_.sourceBlock_==this||!g&&Blockly.localConnection_.sourceBlock_!=this)&&(Blockly.insertionMarker_.dispose(),Blockly.insertionMarker_=
		null),Blockly.highlightedConnection_=null,Blockly.localConnection_=null);a&&a!=Blockly.highlightedConnection_&&!a.sourceBlock_.isInsertionMarker()&&(Blockly.highlightedConnection_=a,Blockly.localConnection_=b,b.type==Blockly.OUTPUT_VALUE||b.type==Blockly.PREVIOUS_STATEMENT&&a.isConnected()&&!this.nextConnection?this.addReplacementMarker_(b,a):this.connectInsertionMarker_(b,a));Blockly.Events.enable();this.isDeletable()&&this.workspace.isDeleteArea(d)};
		Blockly.BlockSvg.prototype.addReplacementMarker_=function(a,b){b.targetBlock()?(Blockly.replacementMarker_=b.targetBlock(),Blockly.replacementMarker_.highlightForReplacement(!0)):a.type==Blockly.OUTPUT_VALUE&&(Blockly.replacementMarker_=b.sourceBlock_,Blockly.replacementMarker_.highlightShapeForInput(b,!0))};
		Blockly.BlockSvg.removeReplacementMarker=function(){Blockly.highlightedConnection_.type!=Blockly.INPUT_VALUE||Blockly.highlightedConnection_.isConnected()?Blockly.replacementMarker_.highlightForReplacement(!1):Blockly.replacementMarker_.highlightShapeForInput(Blockly.highlightedConnection_,!1);Blockly.replacementMarker_=null};
		Blockly.BlockSvg.prototype.connectInsertionMarker_=function(a,b){var c=Blockly.localConnection_.sourceBlock_;if(!Blockly.insertionMarker_){Blockly.insertionMarker_=this.workspace.newBlock(c.type);if(c.mutationToDom){var d=c.mutationToDom();Blockly.insertionMarker_.domToMutation(d)}Blockly.insertionMarker_.setInsertionMarker(!0,c.width);Blockly.insertionMarker_.initSvg()}c=Blockly.insertionMarker_;d=c.getMatchingConnection(a.sourceBlock_,a);d!=Blockly.insertionMarkerConnection_&&(c.rendered=!0,c.render(),
		c.getSvgRoot().setAttribute("visibility","visible"),this.positionNewBlock(c,d,b),d.type!=Blockly.PREVIOUS_STATEMENT||c.nextConnection||(Blockly.bumpedConnection_=b.targetConnection),d.connect(b),Blockly.insertionMarkerConnection_=d)};
		Blockly.BlockSvg.disconnectInsertionMarker=function(){if(Blockly.insertionMarkerConnection_!=Blockly.insertionMarker_.nextConnection||Blockly.insertionMarker_.previousConnection&&Blockly.insertionMarker_.previousConnection.targetConnection)if(Blockly.insertionMarkerConnection_.type==Blockly.NEXT_STATEMENT&&Blockly.insertionMarkerConnection_!=Blockly.insertionMarker_.nextConnection){var a=Blockly.insertionMarkerConnection_.targetConnection;a.sourceBlock_.unplug(!1);var b=Blockly.insertionMarker_.previousConnection?
		Blockly.insertionMarker_.previousConnection.targetConnection:null;Blockly.insertionMarker_.unplug(!0);b&&b.connect(a)}else Blockly.insertionMarker_.unplug(!0);else Blockly.insertionMarkerConnection_.targetBlock().unplug(!1);if(Blockly.insertionMarkerConnection_.targetConnection)throw"insertionMarkerConnection still connected at the end of disconnectInsertionMarker";Blockly.insertionMarkerConnection_=null;Blockly.insertionMarker_.getSvgRoot().setAttribute("visibility","hidden")};
		Blockly.BlockSvg.prototype.updateMovable=function(){this.isMovable()?Blockly.addClass_(this.svgGroup_,"blocklyDraggable"):Blockly.removeClass_(this.svgGroup_,"blocklyDraggable")};Blockly.BlockSvg.prototype.setMovable=function(a){Blockly.BlockSvg.superClass_.setMovable.call(this,a);this.updateMovable()};Blockly.BlockSvg.prototype.setEditable=function(a){Blockly.BlockSvg.superClass_.setEditable.call(this,a);a=this.getIcons();for(var b=0;b<a.length;b++)a[b].updateEditable()};
		Blockly.BlockSvg.prototype.setShadow=function(a){Blockly.BlockSvg.superClass_.setShadow.call(this,a);this.updateColour()};Blockly.BlockSvg.prototype.setInsertionMarker=function(a,b){Blockly.BlockSvg.superClass_.setInsertionMarker.call(this,a);this.insertionMarkerMinWidth_=b;this.updateColour()};Blockly.BlockSvg.prototype.getSvgRoot=function(){return this.svgGroup_};
		Blockly.BlockSvg.prototype.dispose=function(a,b){if(this.workspace){Blockly.Tooltip.hide();Blockly.Field.startCache();var c=this.workspace;Blockly.selected==this&&(this.unselect(),Blockly.terminateDrag_());Blockly.ContextMenu.currentBlock==this&&Blockly.ContextMenu.hide();b&&this.rendered&&(this.unplug(a),this.disposeUiEffect());this.rendered=!1;Blockly.Events.disable();try{for(var d=this.getIcons(),e=0;e<d.length;e++)d[e].dispose()}finally{Blockly.Events.enable()}Blockly.BlockSvg.superClass_.dispose.call(this,
		a);goog.dom.removeNode(this.svgGroup_);c.resizeContents();this.svgPath_=this.svgGroup_=null;Blockly.Field.stopCache()}};
		Blockly.BlockSvg.prototype.disposeUiEffect=function(){this.workspace.playAudio("delete");var a=Blockly.getSvgXY_(this.svgGroup_,this.workspace),b=this.svgGroup_.cloneNode(!0);b.translateX_=a.x;b.translateY_=a.y;b.setAttribute("transform","translate("+b.translateX_+","+b.translateY_+")");this.workspace.getParentSvg().appendChild(b);b.bBox_=b.getBBox();Blockly.BlockSvg.disposeUiStep_(b,this.RTL,new Date,this.workspace.scale)};Blockly.BlockSvg.prototype.connectionUiEffect=function(){this.workspace.playAudio("click")};
		Blockly.BlockSvg.disposeUiStep_=function(a,b,c,d){var e=(new Date-c)/150;1<e?goog.dom.removeNode(a):(a.setAttribute("transform","translate("+(a.translateX_+(b?-1:1)*a.bBox_.width*d/2*e)+","+(a.translateY_+a.bBox_.height*d*e)+") scale("+(1-e)*d+")"),setTimeout(function(){Blockly.BlockSvg.disposeUiStep_(a,b,c,d)},10))};Blockly.BlockSvg.prototype.updateDisabled=function(){};
		Blockly.BlockSvg.prototype.getCommentText=function(){return this.comment?this.comment.getText().replace(/\s+$/,"").replace(/ +\n/g,"\n"):""};Blockly.BlockSvg.prototype.setCommentText=function(a){var b=!1;goog.isString(a)?(this.comment||(this.comment=new Blockly.Comment(this),b=!0),this.comment.setText(a)):this.comment&&(this.comment.dispose(),b=!0);b&&this.rendered&&(this.render(),this.bumpNeighbours_())};
		Blockly.BlockSvg.prototype.setWarningText=function(a,b){this.setWarningText.pid_||(this.setWarningText.pid_=Object.create(null));var c=b||"";if(c)this.setWarningText.pid_[c]&&(clearTimeout(this.setWarningText.pid_[c]),delete this.setWarningText.pid_[c]);else for(var d in this.setWarningText.pid_)clearTimeout(this.setWarningText.pid_[d]),delete this.setWarningText.pid_[d];if(Blockly.dragMode_==Blockly.DRAG_FREE){var e=this;this.setWarningText.pid_[c]=setTimeout(function(){e.workspace&&(delete e.setWarningText.pid_[c],
		e.setWarningText(a,c))},100)}else{this.isInFlyout&&(a=null);d=!1;if(goog.isString(a))this.warning||(this.warning=new Blockly.Warning(this),d=!0),this.warning.setText(a,c);else if(this.warning&&!c)this.warning.dispose(),d=!0;else if(this.warning){d=this.warning.getText();this.warning.setText("",c);var f=this.warning.getText();f||this.warning.dispose();d=d==f}d&&this.rendered&&(this.render(),this.bumpNeighbours_())}};
		Blockly.BlockSvg.prototype.setMutator=function(a){this.mutator&&this.mutator!==a&&this.mutator.dispose();a&&(a.block_=this,this.mutator=a,a.createIcon())};Blockly.BlockSvg.prototype.addSelect=function(){Blockly.addClass_(this.svgGroup_,"blocklySelected");var a=this;do{var b=a.getSvgRoot();b.parentNode.appendChild(b);a=a.getParent()}while(a)};Blockly.BlockSvg.prototype.removeSelect=function(){Blockly.removeClass_(this.svgGroup_,"blocklySelected")};
		Blockly.BlockSvg.prototype.addDragging=function(){Blockly.addClass_(this.svgGroup_,"blocklyDragging")};Blockly.BlockSvg.prototype.removeDragging=function(){Blockly.removeClass_(this.svgGroup_,"blocklyDragging")};Blockly.BlockSvg.prototype.setColour=function(a,b,c){Blockly.BlockSvg.superClass_.setColour.call(this,a,b,c);this.rendered&&this.updateColour()};
		Blockly.BlockSvg.prototype.setPreviousStatement=function(a,b){Blockly.BlockSvg.superClass_.setPreviousStatement.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_())};Blockly.BlockSvg.prototype.setNextStatement=function(a,b){Blockly.BlockSvg.superClass_.setNextStatement.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_())};Blockly.BlockSvg.prototype.setOutput=function(a,b){Blockly.BlockSvg.superClass_.setOutput.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_())};
		Blockly.BlockSvg.prototype.setInputsInline=function(a){Blockly.BlockSvg.superClass_.setInputsInline.call(this,a);this.rendered&&(this.render(),this.bumpNeighbours_())};Blockly.BlockSvg.prototype.removeInput=function(a,b){Blockly.BlockSvg.superClass_.removeInput.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_())};Blockly.BlockSvg.prototype.moveNumberedInputBefore=function(a,b){Blockly.BlockSvg.superClass_.moveNumberedInputBefore.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_())};
		Blockly.BlockSvg.prototype.appendInput_=function(a,b){var c=Blockly.BlockSvg.superClass_.appendInput_.call(this,a,b);this.rendered&&(this.render(),this.bumpNeighbours_());return c};Blockly.BlockSvg.prototype.getConnections_=function(a){var b=[];if(a||this.rendered)if(this.outputConnection&&b.push(this.outputConnection),this.previousConnection&&b.push(this.previousConnection),this.nextConnection&&b.push(this.nextConnection),a||!this.collapsed_){a=0;for(var c;c=this.inputList[a];a++)c.connection&&b.push(c.connection)}return b};
		Blockly.BlockSvg.prototype.makeConnection_=function(a){return new Blockly.RenderedConnection(this,a)};Blockly.BlockSvg.render={};Blockly.BlockSvg.GRID_UNIT=4;Blockly.BlockSvg.SEP_SPACE_X=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.SEP_SPACE_Y=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_X=16*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_X_OUTPUT=12*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_X_SHADOW_OUTPUT=10*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_Y=12*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y=8*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.MIN_BLOCK_X_WITH_STATEMENT=40*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_Y_SINGLE_FIELD_OUTPUT=8*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER=10*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT=6*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.NOTCH_WIDTH=8*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.NOTCH_HEIGHT=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.CORNER_RADIUS=1*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.STATEMENT_INPUT_EDGE_WIDTH=4*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.START_HAT_HEIGHT=16;Blockly.BlockSvg.START_HAT_PATH="c 25,-22 71,-22 96,0";Blockly.BlockSvg.NOTCH_PATH_LEFT="c 2,0 3,1 4,2 l 4,4 c 1,1 2,2 4,2 h 12 c 2,0 3,-1 4,-2 l 4,-4 c 1,-1 2,-2 4,-2";Blockly.BlockSvg.NOTCH_PATH_RIGHT="c -2,0 -3,1 -4,2 l -4,4 c -1,1 -2,2 -4,2 h -12 c -2,0 -3,-1 -4,-2 l -4,-4 c -1,-1 -2,-2 -4,-2";
		Blockly.BlockSvg.NOTCH_START_PADDING=3*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.TOP_LEFT_CORNER_START="m 0,"+Blockly.BlockSvg.CORNER_RADIUS;Blockly.BlockSvg.TOP_LEFT_CORNER="A "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,1 "+Blockly.BlockSvg.CORNER_RADIUS+",0";Blockly.BlockSvg.TOP_RIGHT_CORNER="a "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,1 "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS;
		Blockly.BlockSvg.BOTTOM_RIGHT_CORNER=" a "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,1 -"+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS;Blockly.BlockSvg.BOTTOM_LEFT_CORNER="a "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,1 -"+Blockly.BlockSvg.CORNER_RADIUS+",-"+Blockly.BlockSvg.CORNER_RADIUS;
		Blockly.BlockSvg.INNER_TOP_LEFT_CORNER=" a "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,0 -"+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS;Blockly.BlockSvg.INNER_BOTTOM_LEFT_CORNER="a "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS+" 0 0,0 "+Blockly.BlockSvg.CORNER_RADIUS+","+Blockly.BlockSvg.CORNER_RADIUS;
		Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL="M "+4*Blockly.BlockSvg.GRID_UNIT+",0  h "+4*Blockly.BlockSvg.GRID_UNIT+" l "+4*Blockly.BlockSvg.GRID_UNIT+","+4*Blockly.BlockSvg.GRID_UNIT+" l "+-4*Blockly.BlockSvg.GRID_UNIT+","+4*Blockly.BlockSvg.GRID_UNIT+" h "+-4*Blockly.BlockSvg.GRID_UNIT+" l "+-4*Blockly.BlockSvg.GRID_UNIT+","+-4*Blockly.BlockSvg.GRID_UNIT+" l "+4*Blockly.BlockSvg.GRID_UNIT+","+-4*Blockly.BlockSvg.GRID_UNIT+" z";Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH=12*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.INPUT_SHAPE_SQUARE=Blockly.BlockSvg.TOP_LEFT_CORNER_START+Blockly.BlockSvg.TOP_LEFT_CORNER+" h "+(12*Blockly.BlockSvg.GRID_UNIT-2*Blockly.BlockSvg.CORNER_RADIUS)+Blockly.BlockSvg.TOP_RIGHT_CORNER+" v "+(8*Blockly.BlockSvg.GRID_UNIT-2*Blockly.BlockSvg.CORNER_RADIUS)+Blockly.BlockSvg.BOTTOM_RIGHT_CORNER+" h "+(-12*Blockly.BlockSvg.GRID_UNIT+2*Blockly.BlockSvg.CORNER_RADIUS)+Blockly.BlockSvg.BOTTOM_LEFT_CORNER+" z";Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH=10*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.INPUT_SHAPE_ROUND="M "+4*Blockly.BlockSvg.GRID_UNIT+",0 h "+4*Blockly.BlockSvg.GRID_UNIT+" a "+4*Blockly.BlockSvg.GRID_UNIT+" "+4*Blockly.BlockSvg.GRID_UNIT+" 0 0 1 0 "+8*Blockly.BlockSvg.GRID_UNIT+" h "+-4*Blockly.BlockSvg.GRID_UNIT+" a "+4*Blockly.BlockSvg.GRID_UNIT+" "+4*Blockly.BlockSvg.GRID_UNIT+" 0 0 1 0 -"+8*Blockly.BlockSvg.GRID_UNIT+" z";Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH=12*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.INPUT_SHAPE_HEIGHT=8*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.FIELD_HEIGHT=8*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.FIELD_WIDTH=6*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.EDITABLE_FIELD_PADDING=6;Blockly.BlockSvg.BOX_FIELD_PADDING=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.DROPDOWN_ARROW_PADDING=2*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.FIELD_WIDTH_MIN_EDIT=8*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.FIELD_WIDTH_MAX_EDIT=Infinity;Blockly.BlockSvg.FIELD_HEIGHT_MAX_EDIT=Blockly.BlockSvg.FIELD_HEIGHT;
		Blockly.BlockSvg.FIELD_TOP_PADDING=.5*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.NUMBER_FIELD_CORNER_RADIUS=4*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.TEXT_FIELD_CORNER_RADIUS=1*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.FIELD_DEFAULT_CORNER_RADIUS=4*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.MAX_DISPLAY_LENGTH=Infinity;Blockly.BlockSvg.NO_PREVIOUS_INPUT_X_MIN=12*Blockly.BlockSvg.GRID_UNIT;Blockly.BlockSvg.INLINE_PADDING_Y=1*Blockly.BlockSvg.GRID_UNIT;
		Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_INITIAL=12;Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_FINAL=12;Blockly.BlockSvg.FIELD_TEXTINPUT_EXPAND_PAST_TRUNCATION=!1;Blockly.BlockSvg.FIELD_TEXTINPUT_ANIMATE_POSITIONING=!1;
		Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING={1:{0:5*Blockly.BlockSvg.GRID_UNIT,1:2*Blockly.BlockSvg.GRID_UNIT,2:5*Blockly.BlockSvg.GRID_UNIT,3:5*Blockly.BlockSvg.GRID_UNIT},2:{0:3*Blockly.BlockSvg.GRID_UNIT,1:3*Blockly.BlockSvg.GRID_UNIT,2:1*Blockly.BlockSvg.GRID_UNIT,3:2*Blockly.BlockSvg.GRID_UNIT},3:{0:2*Blockly.BlockSvg.GRID_UNIT,1:2*Blockly.BlockSvg.GRID_UNIT,2:2*Blockly.BlockSvg.GRID_UNIT,3:2*Blockly.BlockSvg.GRID_UNIT}};
		Blockly.BlockSvg.prototype.updateColour=function(){var a=this.getColourTertiary();this.isShadow()&&this.parentBlock_&&(a=this.parentBlock_.getColourTertiary(),this.inputList[0]&&this.inputList[0].fieldRow[0]&&this.inputList[0].fieldRow[0]instanceof Blockly.FieldColour&&(a=Blockly.Colours.colourPickerStroke));this.svgPath_.setAttribute("stroke",a);a=this.isGlowingBlock_?this.getColourSecondary():this.getColour();this.svgPath_.setAttribute("fill",a);this.svgPath_.setAttribute("fill-opacity",this.getOpacity());
		for(var b in this.inputShapes_)this.inputShapes_[b].setAttribute("fill",this.getColourTertiary());b=this.getIcons();for(a=0;a<b.length;a++)b[a].updateColour();for(b=0;a=this.inputList[b];b++)for(var c=0,d;d=a.fieldRow[c];c++)d.setText(null)};Blockly.BlockSvg.prototype.highlightForReplacement=function(a){a?(this.svgPath_.setAttribute("filter","url(#blocklyReplacementGlowFilter)"),this.svgGroup_.classList.add("blocklyReplaceable")):(this.svgPath_.removeAttribute("filter"),this.svgGroup_.classList.remove("blocklyReplaceable"))};
		Blockly.BlockSvg.prototype.highlightShapeForInput=function(a,b){var c=this.getInputWithConnection(a);if(!c)throw"No input found for the connection";c=this.inputShapes_[c.name];b?(c.setAttribute("filter","url(#blocklyReplacementGlowFilter)"),c.classList.add("blocklyReplaceable")):(c.removeAttribute("filter"),c.classList.remove("blocklyReplaceable"))};
		Blockly.BlockSvg.prototype.getHeightWidth=function(){var a=this.height,b=this.width,c=this.getNextBlock();c&&(c=c.getHeightWidth(),a+=c.height,a-=Blockly.BlockSvg.NOTCH_HEIGHT,b=Math.max(b,c.width));return{height:a,width:b}};
		Blockly.BlockSvg.prototype.render=function(a){Blockly.Field.startCache();this.rendered=!0;var b=Blockly.BlockSvg.SEP_SPACE_X;this.RTL&&(b=-b);for(var c=this.getIcons(),d=0;d<c.length;d++)b=c[d].renderIcon(b);b+=this.RTL?Blockly.BlockSvg.SEP_SPACE_X:-Blockly.BlockSvg.SEP_SPACE_X;c=this.renderCompute_(b);this.renderDraw_(b,c);this.renderClassify_();!1!==a&&((a=this.getParent())?a.render(!0):Blockly.resizeSvgContents(this.workspace));Blockly.Field.stopCache()};
		Blockly.BlockSvg.prototype.renderFields_=function(a,b,c){this.RTL&&(b=-b);for(var d=0,e;e=a[d];d++){var f=e.getSvgRoot();if(f){var g=-e.getSize().height/2;this.RTL?(b-=e.renderSep+e.renderWidth,f.setAttribute("transform","translate("+b+","+(c+g)+")"),e.renderWidth&&(b-=Blockly.BlockSvg.SEP_SPACE_X)):(f.setAttribute("transform","translate("+(b+e.renderSep)+","+(c+g)+")"),e.renderWidth&&(b+=e.renderSep+e.renderWidth+Blockly.BlockSvg.SEP_SPACE_X));this.isInsertionMarker()&&f.setAttribute("display","none")}}return this.RTL?
		-b:b};
		Blockly.BlockSvg.prototype.renderCompute_=function(a){var b=this.inputList,c=[];c.rightEdge=0;for(var d=c.bottomEdge=0,e=!1,f=!1,g=!1,h=void 0,k,l=0,m;m=b[l];l++)if(m.isVisible()){var n;h&&h!=Blockly.NEXT_STATEMENT&&m.type!=Blockly.NEXT_STATEMENT?n=c[c.length-1]:(h=m.type,n=[],n.type=m.type!=Blockly.NEXT_STATEMENT?Blockly.BlockSvg.INLINE:m.type,n.height=0,n.paddingStart=Blockly.BlockSvg.SEP_SPACE_X,n.paddingEnd=Blockly.BlockSvg.SEP_SPACE_X,c.push(n));n.push(m);1===b.length&&this.isShadow()&&this.outputConnection?
		m.renderHeight=Blockly.BlockSvg.MIN_BLOCK_Y_SINGLE_FIELD_OUTPUT:m.renderHeight=this.outputConnection?Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER:n.type==Blockly.NEXT_STATEMENT?Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT:k&&k.type==Blockly.NEXT_STATEMENT?Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y:Blockly.BlockSvg.MIN_BLOCK_Y;if(m.type!=Blockly.INPUT_VALUE||m.connection&&m.connection.isConnected())m.renderWidth=0;else switch(m.connection.getOutputShape()){case Blockly.OUTPUT_SHAPE_SQUARE:m.renderWidth=Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH;
		break;case Blockly.OUTPUT_SHAPE_ROUND:m.renderWidth=Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH;break;case Blockly.OUTPUT_SHAPE_HEXAGONAL:m.renderWidth=Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH;break;default:m.renderWidth=0}n.statementNotchAtBottom=!0;m.connection&&m.connection.type===Blockly.NEXT_STATEMENT&&(k=m.connection.targetBlock())&&!k.lastConnectionInStack()&&(n.statementNotchAtBottom=!1);if(m.connection){k=m.connection.targetBlock();var p=0;k?(p=k.getHeightWidth(),k=p.height,p=p.width):k=
		Blockly.BlockSvg.INPUT_SHAPE_HEIGHT;m.connection.type===Blockly.INPUT_VALUE&&(k+=2*Blockly.BlockSvg.INLINE_PADDING_Y);m.connection.type===Blockly.NEXT_STATEMENT&&n.statementNotchAtBottom&&(k-=Blockly.BlockSvg.NOTCH_HEIGHT);m.renderHeight=Math.max(m.renderHeight,k);m.renderWidth=Math.max(m.renderWidth,p)}n.height=Math.max(n.height,m.renderHeight);m.fieldWidth=0;1==c.length&&(m.fieldWidth+=this.RTL?-a:a);k=!1;for(var p=0,q;q=m.fieldRow[p];p++){0!=p&&(m.fieldWidth+=Blockly.BlockSvg.SEP_SPACE_X);var r=
		q.getSize();q.renderWidth=r.width;q.renderSep=k&&q.EDITABLE?Blockly.BlockSvg.SEP_SPACE_X:0;m.fieldWidth+=q.renderWidth+q.renderSep;n.height=Math.max(n.height,r.height);k=q.EDITABLE}n.type!=Blockly.BlockSvg.INLINE&&(n.type==Blockly.NEXT_STATEMENT?(f=!0,d=Math.max(d,m.fieldWidth)):n.type==Blockly.INPUT_VALUE?e=!0:n.type==Blockly.DUMMY_INPUT&&(g=!0));k=n}this.computeOutputPadding_(c);c.statementEdge=Blockly.BlockSvg.STATEMENT_INPUT_EDGE_WIDTH+d;this.previousConnection||this.nextConnection?c.rightEdge=
		Math.max(c.rightEdge,Blockly.BlockSvg.MIN_BLOCK_X):this.outputConnection&&(this.isShadow()?c.rightEdge=Math.max(c.rightEdge,Blockly.BlockSvg.MIN_BLOCK_X_SHADOW_OUTPUT):c.rightEdge=Math.max(c.rightEdge,Blockly.BlockSvg.MIN_BLOCK_X_OUTPUT));f&&(c.rightEdge=Math.max(c.rightEdge,Blockly.BlockSvg.MIN_BLOCK_X_WITH_STATEMENT));for(l=0;l<c.length;l++)c.bottomEdge+=c[l].height;0<this.insertionMarkerMinWidth_&&(c.rightEdge=Math.max(c.rightEdge,this.insertionMarkerMinWidth_));c.hasValue=e;c.hasStatement=f;c.hasDummy=
		g;return c};
		Blockly.BlockSvg.prototype.computeOutputPadding_=function(a){if(this.getOutputShape()&&this.outputConnection&&!this.isShadow()&&!(1<a.length)){a=a[0];var b=this.getOutputShape();a.paddingStart=0;a.paddingEnd=0;var c=a[0],d;c.fieldRow[0]?d=0:(d=c.connection,d=d.targetConnection?d.targetConnection.getSourceBlock().getOutputShape():d.getOutputShape(),b==Blockly.OUTPUT_SHAPE_HEXAGONAL&&d!=Blockly.OUTPUT_SHAPE_HEXAGONAL&&(c=c.renderHeight-Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER,a.paddingStart+=c/2));a.paddingStart+=
		Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING[b][d];c=a[a.length-1];c.connection?(d=c.connection,d=d.targetConnection?d.targetConnection.getSourceBlock().getOutputShape():d.getOutputShape(),b==Blockly.OUTPUT_SHAPE_HEXAGONAL&&d!=Blockly.OUTPUT_SHAPE_HEXAGONAL&&(c=c.renderHeight-Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER,a.paddingEnd+=c/2)):d=0;a.paddingEnd+=Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING[b][d]}};
		Blockly.BlockSvg.prototype.renderDraw_=function(a,b){this.squareTopLeftCorner_=this.startHat_=!1;this.outputConnection||this.previousConnection||(this.startHat_=this.squareTopLeftCorner_=!0,b.rightEdge=Math.max(b.rightEdge,100));this.edgeShapeWidth_=0;this.edgeShape_=null;if(this.outputConnection){var c=this.getOutputShape();if(c===Blockly.OUTPUT_SHAPE_HEXAGONAL||c===Blockly.OUTPUT_SHAPE_ROUND)this.edgeShapeWidth_=b.bottomEdge/2,this.edgeShape_=c,this.squareTopLeftCorner_=!0}var c=this.getRelativeToSurfaceXY(),
		d=[];this.renderDrawTop_(d,c,b.rightEdge);var e=this.renderDrawRight_(d,c,b,a);this.renderDrawBottom_(d,c,e);this.renderDrawLeft_(d,c);c=d.join(" ");this.svgPath_.setAttribute("d",c);this.RTL&&this.svgPath_.setAttribute("transform","scale(-1 1)")};
		Blockly.BlockSvg.prototype.renderClassify_=function(){var a=[];if(this.outputConnection)this.isShadow_?a.push("argument"):a.push("reporter"),this.edgeShape_===Blockly.OUTPUT_SHAPE_HEXAGONAL?a.push("boolean"):this.edgeShape_===Blockly.OUTPUT_SHAPE_ROUND&&a.push("round");else{for(var b=this.inputList,c=0,d=0,e;e=b[d];d++)e.connection&&e.connection.type===Blockly.NEXT_STATEMENT&&c++;c&&(a.push("c-block"),a.push("c-"+c));this.startHat_?a.push("hat"):c||a.push("stack");this.nextConnection||a.push("end")}this.svgGroup_.setAttribute("data-shapes",
		a.join(" "));this.getCategory()&&this.svgGroup_.setAttribute("data-category",this.getCategory())};
		Blockly.BlockSvg.prototype.renderDrawTop_=function(a,b,c){this.squareTopLeftCorner_?(a.push("m 0,0"),this.startHat_&&a.push(Blockly.BlockSvg.START_HAT_PATH),this.edgeShapeWidth_&&a.push("m "+this.edgeShapeWidth_+",0")):(a.push(Blockly.BlockSvg.TOP_LEFT_CORNER_START),a.push(Blockly.BlockSvg.TOP_LEFT_CORNER));this.previousConnection&&(a.push("H",Blockly.BlockSvg.NOTCH_START_PADDING),a.push(Blockly.BlockSvg.NOTCH_PATH_LEFT),this.previousConnection.moveTo(b.x+(this.RTL?-Blockly.BlockSvg.NOTCH_WIDTH:Blockly.BlockSvg.NOTCH_WIDTH),
		b.y));this.width=c};
		Blockly.BlockSvg.prototype.renderDrawRight_=function(a,b,c,d){for(var e,f=0,g,h,k=0,l;l=c[k];k++){e=l.paddingStart;0==k&&(e+=this.RTL?-d:d);if(l.type==Blockly.BlockSvg.INLINE){for(var m=0,n;n=l[m];m++)if(g=f,g+=l.height/2,n.align!=Blockly.ALIGN_LEFT&&(h=c.rightEdge-n.fieldWidth-2*Blockly.BlockSvg.SEP_SPACE_X,n.align==Blockly.ALIGN_RIGHT?e+=h:n.align==Blockly.ALIGN_CENTRE&&(e+=h/2)),e=this.renderFields_(n.fieldRow,e,g),n.type==Blockly.INPUT_VALUE){0===k&&this.previousConnection&&(e=Math.max(e,Blockly.BlockSvg.NO_PREVIOUS_INPUT_X_MIN));
		g=this.RTL?b.x-e:b.x+e;var p=l.height/2;h=b.y+f+p;n.connection.moveTo(g,h);n.connection.isConnected()&&n.connection.tighten_();this.renderInputShape_(n,e,f+p);e+=n.renderWidth+Blockly.BlockSvg.SEP_SPACE_X}e-=Blockly.BlockSvg.SEP_SPACE_X;e+=l.paddingEnd;c.rightEdge=Math.max(e,c.rightEdge);e=Math.max(e,c.rightEdge);this.width=Math.max(this.width,e);this.edgeShape_?a.push("H",e-this.edgeShapeWidth_):(a.push("H",e-Blockly.BlockSvg.CORNER_RADIUS-this.edgeShapeWidth_),a.push(Blockly.BlockSvg.TOP_RIGHT_CORNER));
		this.edgeShape_||a.push("v",l.height-2*Blockly.BlockSvg.CORNER_RADIUS)}else l.type==Blockly.NEXT_STATEMENT&&(n=l[0],g=f,this.renderFields_(n.fieldRow,e,g),a.push(Blockly.BlockSvg.BOTTOM_RIGHT_CORNER),e=c.statementEdge+Blockly.BlockSvg.NOTCH_WIDTH,a.push("H",e+Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE+2*Blockly.BlockSvg.CORNER_RADIUS),a.push(Blockly.BlockSvg.NOTCH_PATH_RIGHT),a.push("h","-"+Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE),a.push(Blockly.BlockSvg.INNER_TOP_LEFT_CORNER),a.push("v",l.height-
		2*Blockly.BlockSvg.CORNER_RADIUS),a.push(Blockly.BlockSvg.INNER_BOTTOM_LEFT_CORNER),l.statementNotchAtBottom&&(a.push("h ",Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE),a.push(Blockly.BlockSvg.NOTCH_PATH_LEFT)),a.push("H",c.rightEdge-Blockly.BlockSvg.CORNER_RADIUS),g=b.x+(this.RTL?-e:e),h=b.y+f,n.connection.moveTo(g,h),n.connection.isConnected()&&(n.connection.tighten_(),this.width=Math.max(this.width,c.statementEdge+n.connection.targetBlock().getHeightWidth().width)),k==c.length-1||c[k+1].type==
		Blockly.NEXT_STATEMENT)&&(a.push(Blockly.BlockSvg.TOP_RIGHT_CORNER),a.push("v",Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y-2*Blockly.BlockSvg.CORNER_RADIUS),f+=Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y);f+=l.height}this.edgeShape_&&(this.edgeShape_===Blockly.OUTPUT_SHAPE_ROUND?a.push("a "+this.edgeShapeWidth_+" "+this.edgeShapeWidth_+" 0 0 1 0 "+2*this.edgeShapeWidth_):this.edgeShape_===Blockly.OUTPUT_SHAPE_HEXAGONAL&&a.push("l "+this.edgeShapeWidth_+" "+this.edgeShapeWidth_+" l "+-this.edgeShapeWidth_+" "+
		this.edgeShapeWidth_));c.length||(f=Blockly.BlockSvg.MIN_BLOCK_Y,a.push("V",f));return f};
		Blockly.BlockSvg.prototype.renderInputShape_=function(a,b,c){var d=this.inputShapes_[a.name];if(d){var e;if(a.connection.targetConnection)d.setAttribute("style","visibility: hidden");else{var f;switch(a.connection.getOutputShape()){case Blockly.OUTPUT_SHAPE_HEXAGONAL:a=Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL;e=Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH;f="boolean";break;case Blockly.OUTPUT_SHAPE_ROUND:a=Blockly.BlockSvg.INPUT_SHAPE_ROUND;e=Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH;f="round";break;
		default:a=Blockly.BlockSvg.INPUT_SHAPE_SQUARE,e=Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH,f="square"}b=this.RTL?-b-e:b;c-=Blockly.BlockSvg.INPUT_SHAPE_HEIGHT/2;d.setAttribute("d",a);d.setAttribute("transform","translate("+b+","+c+")");d.setAttribute("data-argument-type",f);d.setAttribute("style","visibility: visible")}}};
		Blockly.BlockSvg.prototype.renderDrawBottom_=function(a,b,c){this.height=c;this.edgeShape_||a.push(Blockly.BlockSvg.BOTTOM_RIGHT_CORNER);this.nextConnection&&(a.push("H",Blockly.BlockSvg.NOTCH_WIDTH+Blockly.BlockSvg.NOTCH_START_PADDING+Blockly.BlockSvg.CORNER_RADIUS," "),a.push(Blockly.BlockSvg.NOTCH_PATH_RIGHT),this.nextConnection.moveTo(this.RTL?b.x-Blockly.BlockSvg.NOTCH_WIDTH:b.x+Blockly.BlockSvg.NOTCH_WIDTH,b.y+c),this.nextConnection.isConnected()&&this.nextConnection.tighten_(),this.height+=
		Blockly.BlockSvg.NOTCH_HEIGHT);this.edgeShape_?a.push("H",this.edgeShapeWidth_):(a.push("H",Blockly.BlockSvg.CORNER_RADIUS),a.push(Blockly.BlockSvg.BOTTOM_LEFT_CORNER))};
		Blockly.BlockSvg.prototype.renderDrawLeft_=function(a,b){this.outputConnection&&this.outputConnection.moveTo(b.x,b.y+this.height/2);this.edgeShape_&&(this.edgeShape_===Blockly.OUTPUT_SHAPE_ROUND?a.push("a "+this.edgeShapeWidth_+" "+this.edgeShapeWidth_+" 0 0 1 0 -"+2*this.edgeShapeWidth_):this.edgeShape_===Blockly.OUTPUT_SHAPE_HEXAGONAL&&a.push("l "+-this.edgeShapeWidth_+" "+-this.edgeShapeWidth_+" l "+this.edgeShapeWidth_+" "+-this.edgeShapeWidth_));a.push("z")};
		Blockly.BlockSvg.prototype.positionNewBlock=function(a,b,c){b.type==Blockly.NEXT_STATEMENT&&a.moveBy(c.x_-b.x_,c.y_-b.y_)};Blockly.Msg={};goog.getMsgOrig=goog.getMsg;goog.getMsg=function(a,b){var c=goog.getMsg.blocklyMsgMap[a];c&&(a=Blockly.Msg[c]);return goog.getMsgOrig(a,b)};goog.getMsg.blocklyMsgMap={Today:"TODAY"};Blockly.utils={};Blockly.cache3dSupported_=null;Blockly.addClass_=function(a,b){var c=a.getAttribute("class")||"";-1==(" "+c+" ").indexOf(" "+b+" ")&&(c&&(c+=" "),a.setAttribute("class",c+b))};Blockly.removeClass_=function(a,b){var c=a.getAttribute("class");if(-1!=(" "+c+" ").indexOf(" "+b+" ")){for(var c=c.split(/\s+/),d=0;d<c.length;d++)c[d]&&c[d]!=b||(c.splice(d,1),d--);c.length?a.setAttribute("class",c.join(" ")):a.removeAttribute("class")}};
		Blockly.hasClass_=function(a,b){return-1!=(" "+a.getAttribute("class")+" ").indexOf(" "+b+" ")};
		Blockly.bindEvent_=function(a,b,c,d,e){var f=!1,g=function(a){var b=!e;a=Blockly.Touch.splitEventByTouches(a);for(var g=0,h;h=a[g];g++)if(!b||Blockly.Touch.shouldHandleEvent(h))Blockly.Touch.setClientFromTouch(h),c?d.call(c,h):d(h),f=!0};a.addEventListener(b,g,!1);var h=[[a,b,g]];if(b in Blockly.Touch.TOUCH_MAP)for(var k=function(a){g(a);f&&a.preventDefault()},l=0,m;m=Blockly.Touch.TOUCH_MAP[b][l];l++)a.addEventListener(m,k,!1),h.push([a,m,k]);return h};
		Blockly.unbindEvent_=function(a){for(;a.length;){var b=a.pop(),c=b[2];b[0].removeEventListener(b[1],c,!1)}return c};Blockly.noEvent=function(a){a.preventDefault();a.stopPropagation()};Blockly.isTargetInput_=function(a){return"textarea"==a.target.type||"text"==a.target.type||"number"==a.target.type||"email"==a.target.type||"password"==a.target.type||"search"==a.target.type||"tel"==a.target.type||"url"==a.target.type||a.target.isContentEditable};
		Blockly.getRelativeXY_=function(a){var b=new goog.math.Coordinate(0,0),c=a.getAttribute("x");c&&(b.x=parseInt(c,10));if(c=a.getAttribute("y"))b.y=parseInt(c,10);if(c=a.getAttribute("transform"))if(c=c.match(Blockly.getRelativeXY_.XY_REGEXP_))b.x+=parseFloat(c[1]),c[3]&&(b.y+=parseFloat(c[3]));(a=a.getAttribute("style"))&&-1<a.indexOf("translate3d")&&(a=a.match(Blockly.getRelativeXY_.XY_3D_REGEXP_))&&(b.x+=parseFloat(a[1]),a[3]&&(b.y+=parseFloat(a[3])));return b};
		Blockly.getRelativeXY_.XY_REGEXP_=/translate\(\s*([-+\d.e]+)([ ,]\s*([-+\d.e]+)\s*\))?/;Blockly.getRelativeXY_.XY_3D_REGEXP_=/transform:\s*translate3d\(\s*([-+\d.e]+)px([ ,]\s*([-+\d.e]+)\s*)px([ ,]\s*([-+\d.e]+)\s*)px\)?/;
		Blockly.getSvgXY_=function(a,b){var c=0,d=0,e=1;if(goog.dom.contains(b.getCanvas(),a)||goog.dom.contains(b.getBubbleCanvas(),a))e=b.scale;do{var f=Blockly.getRelativeXY_(a);if(a==b.getCanvas()||a==b.getBubbleCanvas())e=1;c+=f.x*e;d+=f.y*e;a=a.parentNode}while(a&&a!=b.getParentSvg());return new goog.math.Coordinate(c,d)};
		Blockly.is3dSupported=function(){if(null!==Blockly.cache3dSupported_)return Blockly.cache3dSupported_;if(!window.getComputedStyle)return!1;var a=document.createElement("p"),b,c={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};document.body.insertBefore(a,null);for(var d in c)void 0!==a.style[d]&&(a.style[d]="translate3d(1px,1px,1px)",b=window.getComputedStyle(a).getPropertyValue(c[d]));document.body.removeChild(a);
		Blockly.cache3dSupported_=void 0!==b&&0<b.length&&"none"!==b;return Blockly.cache3dSupported_};Blockly.createSvgElement=function(a,b,c){a=document.createElementNS(Blockly.SVG_NS,a);for(var d in b)a.setAttribute(d,b[d]);document.body.runtimeStyle&&(a.runtimeStyle=a.currentStyle=a.style);c&&c.appendChild(a);return a};Blockly.isRightButton=function(a){return a.ctrlKey&&goog.userAgent.MAC?!0:2==a.button};
		Blockly.mouseToSvg=function(a,b,c){var d=b.createSVGPoint();d.x=a.clientX;d.y=a.clientY;c||(c=b.getScreenCTM().inverse());return d.matrixTransform(c)};Blockly.shortestStringLength=function(a){if(!a.length)return 0;for(var b=a[0].length,c=1;c<a.length;c++)b=Math.min(b,a[c].length);return b};
		Blockly.commonWordPrefix=function(a,b){if(!a.length)return 0;if(1==a.length)return a[0].length;for(var c=0,d=b||Blockly.shortestStringLength(a),e=0;e<d;e++){for(var f=a[0][e],g=1;g<a.length;g++)if(f!=a[g][e])return c;" "==f&&(c=e+1)}for(g=1;g<a.length;g++)if((f=a[g][e])&&" "!=f)return c;return d};
		Blockly.commonWordSuffix=function(a,b){if(!a.length)return 0;if(1==a.length)return a[0].length;for(var c=0,d=b||Blockly.shortestStringLength(a),e=0;e<d;e++){for(var f=a[0].substr(-e-1,1),g=1;g<a.length;g++)if(f!=a[g].substr(-e-1,1))return c;" "==f&&(c=e+1)}for(g=1;g<a.length;g++)if((f=a[g].charAt(a[g].length-e-1))&&" "!=f)return c;return d};Blockly.isNumber=function(a){return!!a.match(/^\s*-?\d+(\.\d+)?\s*$/)};
		Blockly.utils.tokenizeInterpolation=function(a){var b=[];a=a.split("");a.push("");for(var c=0,d=[],e=null,f=0;f<a.length;f++){var g=a[f];0==c?"%"==g?c=1:d.push(g):1==c?"%"==g?(d.push(g),c=0):"0"<=g&&"9">=g?(c=2,e=g,(g=d.join(""))&&b.push(g),d.length=0):(d.push("%",g),c=0):2==c&&("0"<=g&&"9">=g?e+=g:(b.push(parseInt(e,10)),f--,c=0))}(g=d.join(""))&&b.push(g);return b};
		Blockly.genUid=function(){for(var a=Blockly.genUid.soup_.length,b=[],c=0;20>c;c++)b[c]=Blockly.genUid.soup_.charAt(Math.random()*a);return b.join("")};Blockly.genUid.soup_="!#%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";Blockly.utils.wrap=function(a,b){for(var c=a.split("\n"),d=0;d<c.length;d++)c[d]=Blockly.utils.wrap_line_(c[d],b);return c.join("\n")};
		Blockly.utils.wrap_line_=function(a,b){if(a.length<=b)return a;for(var c=a.trim().split(/\s+/),d=0;d<c.length;d++)c[d].length>b&&(b=c[d].length);var e,d=-Infinity,f,g=1;do{e=d;f=a;for(var h=[],k=c.length/g,l=1,d=0;d<c.length-1;d++)l<(d+1.5)/k?(l++,h[d]=!0):h[d]=!1;h=Blockly.utils.wrapMutate_(c,h,b);d=Blockly.utils.wrapScore_(c,h,b);a=Blockly.utils.wrapToText_(c,h);g++}while(d>e);return f};
		Blockly.utils.wrapScore_=function(a,b,c){for(var d=[0],e=[],f=0;f<a.length;f++)d[d.length-1]+=a[f].length,!0===b[f]?(d.push(0),e.push(a[f].charAt(a[f].length-1))):!1===b[f]&&d[d.length-1]++;a=Math.max.apply(Math,d);for(f=b=0;f<d.length;f++)b-=2*Math.pow(Math.abs(c-d[f]),1.5),b-=Math.pow(a-d[f],1.5),-1!=".?!".indexOf(e[f])?b+=c/3:-1!=",;)]}".indexOf(e[f])&&(b+=c/4);1<d.length&&d[d.length-1]<=d[d.length-2]&&(b+=.5);return b};
		Blockly.utils.wrapMutate_=function(a,b,c){for(var d=Blockly.utils.wrapScore_(a,b,c),e,f=0;f<b.length-1;f++)if(b[f]!=b[f+1]){var g=[].concat(b);g[f]=!g[f];g[f+1]=!g[f+1];var h=Blockly.utils.wrapScore_(a,g,c);h>d&&(d=h,e=g)}return e?Blockly.utils.wrapMutate_(a,e,c):b};Blockly.utils.wrapToText_=function(a,b){for(var c=[],d=0;d<a.length;d++)c.push(a[d]),void 0!==b[d]&&c.push(b[d]?"\n":" ");return c.join("")};
		Blockly.measureText=function(a,b,c,d){var e=document.createElement("canvas").getContext("2d");e.font=c+" "+a+" "+b;return e.measureText(d).width};Blockly.encodeEntities=function(a){return a.replace(/[\u00A0-\u9999<>\&]/gim,function(a){return"&#"+a.charCodeAt(0)+";"})};Blockly.FieldTextInput=function(a,b,c){Blockly.FieldTextInput.superClass_.constructor.call(this,a,b);this.setRestrictor(c);this.addArgType("text")};goog.inherits(Blockly.FieldTextInput,Blockly.Field);Blockly.FieldTextInput.ANIMATION_TIME=.25;Blockly.FieldTextInput.TEXT_MEASURE_PADDING_MAGIC=45;Blockly.FieldTextInput.prototype.CURSOR="text";Blockly.FieldTextInput.prototype.spellcheck_=!0;
		Blockly.FieldTextInput.prototype.init=function(){Blockly.FieldTextInput.superClass_.init.call(this);this.sourceBlock_.isShadow()||(this.box_=Blockly.createSvgElement("rect",{rx:Blockly.BlockSvg.CORNER_RADIUS,ry:Blockly.BlockSvg.CORNER_RADIUS,x:0,y:0,width:this.size_.width,height:this.size_.height,fill:Blockly.Colours.textField,stroke:this.sourceBlock_.getColourTertiary()}),this.fieldGroup_.insertBefore(this.box_,this.textElement_))};
		Blockly.FieldTextInput.prototype.dispose=function(){Blockly.WidgetDiv.hideIfOwner(this);Blockly.FieldTextInput.superClass_.dispose.call(this)};Blockly.FieldTextInput.prototype.setValue=function(a){if(null!==a){if(this.sourceBlock_){var b=this.callValidator(a);null!==b&&(a=b)}Blockly.Field.prototype.setValue.call(this,a)}};Blockly.FieldTextInput.prototype.setSpellcheck=function(a){this.spellcheck_=a};Blockly.FieldTextInput.prototype.setRestrictor=function(a){this.restrictor_=a};
		Blockly.FieldTextInput.prototype.showEditor_=function(a,b,c,d){this.workspace_=this.sourceBlock_.workspace;a=a||!1;var e=b||!1;Blockly.WidgetDiv.show(this,this.sourceBlock_.RTL,this.widgetDispose_(),this.widgetDisposeAnimationFinished_(),Blockly.FieldTextInput.ANIMATION_TIME);b=Blockly.WidgetDiv.DIV;b.className+=" fieldTextInput";var f=goog.dom.createDom("INPUT","blocklyHtmlInput");f.setAttribute("spellcheck",this.spellcheck_);e&&f.setAttribute("readonly","true");Blockly.FieldTextInput.htmlInput_=
		f;b.appendChild(f);c&&(this.sourceBlock_.RTL?f.style.paddingLeft=this.arrowSize_+Blockly.BlockSvg.DROPDOWN_ARROW_PADDING+"px":f.style.paddingRight=this.arrowSize_+Blockly.BlockSvg.DROPDOWN_ARROW_PADDING+"px",c=goog.dom.createDom("IMG","blocklyTextDropDownArrow"),c.setAttribute("src",Blockly.mainWorkspace.options.pathToMedia+"dropdown-arrow-dark.svg"),c.style.width=this.arrowSize_+"px",c.style.height=this.arrowSize_+"px",c.style.top=this.arrowY_+"px",c.style.cursor="pointer",this.sourceBlock_.RTL?
		c.style.left="11px":c.style.right="11px",d&&(f.dropDownArrowMouseWrapper_=Blockly.bindEvent_(c,"mousedown",this,d)),b.appendChild(c));f.value=f.defaultValue=this.text_;f.oldValue_=null;this.validate_();this.resizeEditor_();a||(f.focus(),f.select(),f.setSelectionRange(0,99999));f.onKeyDownWrapper_=Blockly.bindEvent_(f,"keydown",this,this.onHtmlInputKeyDown_);f.onKeyUpWrapper_=Blockly.bindEvent_(f,"keyup",this,this.onHtmlInputChange_);f.onKeyPressWrapper_=Blockly.bindEvent_(f,"keypress",this,this.onHtmlInputChange_);
		f.onInputWrapper_=Blockly.bindEvent_(f,"input",this,this.onHtmlInputChange_);f.onWorkspaceChangeWrapper_=this.resizeEditor_.bind(this);this.workspace_.addChangeListener(f.onWorkspaceChangeWrapper_);d="box-shadow "+Blockly.FieldTextInput.ANIMATION_TIME+"s";Blockly.BlockSvg.FIELD_TEXTINPUT_ANIMATE_POSITIONING&&(b.style.transition+=",padding "+Blockly.FieldTextInput.ANIMATION_TIME+"s,width "+Blockly.FieldTextInput.ANIMATION_TIME+"s,height "+Blockly.FieldTextInput.ANIMATION_TIME+"s,margin-left "+Blockly.FieldTextInput.ANIMATION_TIME+
		"s");b.style.transition=d;f.style.transition="font-size "+Blockly.FieldTextInput.ANIMATION_TIME+"s";f.style.fontSize=Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_FINAL+"pt";b.style.boxShadow="0px 0px 0px 4px "+Blockly.Colours.fieldShadow};
		Blockly.FieldTextInput.prototype.onHtmlInputKeyDown_=function(a){var b=Blockly.FieldTextInput.htmlInput_;13==a.keyCode?Blockly.WidgetDiv.hide():27==a.keyCode?(b.value=b.defaultValue,Blockly.WidgetDiv.hide()):9==a.keyCode&&(Blockly.WidgetDiv.hide(),this.sourceBlock_.tab(this,!a.shiftKey),a.preventDefault())};Blockly.FieldTextInput.GECKO_KEYCODE_WHITELIST=[97,99,118,120];
		Blockly.FieldTextInput.prototype.onHtmlInputChange_=function(a){if("keypress"===a.type&&this.restrictor_){var b,c=!1;if(goog.userAgent.GECKO)if(b=a.charCode,32>b||127==b)c=!0;else{if(a.metaKey||a.ctrlKey)c=-1<Blockly.FieldTextInput.GECKO_KEYCODE_WHITELIST.indexOf(b)}else b=a.keyCode;b=String.fromCharCode(b);if(!c&&!this.restrictor_.test(b)&&a.preventDefault){a.preventDefault();return}}a=Blockly.FieldTextInput.htmlInput_;c=a.value;c!==a.oldValue_?(a.oldValue_=c,this.setValue(c),this.validate_()):goog.userAgent.WEBKIT&&
		this.sourceBlock_.render();this.resizeEditor_()};Blockly.FieldTextInput.prototype.validate_=function(){var a=!0;goog.asserts.assertObject(Blockly.FieldTextInput.htmlInput_);var b=Blockly.FieldTextInput.htmlInput_;this.sourceBlock_&&(a=this.callValidator(b.value));null===a?Blockly.addClass_(b,"blocklyInvalidInput"):Blockly.removeClass_(b,"blocklyInvalidInput")};
		Blockly.FieldTextInput.prototype.resizeEditor_=function(){var a=this.sourceBlock_.workspace.scale,b=Blockly.WidgetDiv.DIV,c;Blockly.BlockSvg.FIELD_TEXTINPUT_EXPAND_PAST_TRUNCATION?(c=Blockly.measureText(Blockly.FieldTextInput.htmlInput_.style.fontSize,Blockly.FieldTextInput.htmlInput_.style.fontFamily,Blockly.FieldTextInput.htmlInput_.style.fontWeight,Blockly.FieldTextInput.htmlInput_.value),c+=Blockly.FieldTextInput.TEXT_MEASURE_PADDING_MAGIC,c*=a):c=this.sourceBlock_.getHeightWidth().width*a;c=
		Math.max(c,Blockly.BlockSvg.FIELD_WIDTH_MIN_EDIT*a);c=Math.min(c,Blockly.BlockSvg.FIELD_WIDTH_MAX_EDIT*a);b.style.width=c/a+1+"px";b.style.height=Blockly.BlockSvg.FIELD_HEIGHT+1+"px";b.style.transform="scale("+a+")";var d=this.sourceBlock_.getHeightWidth().width;b.style.marginLeft=-.5*(c-d*a)+"px";d=this.getBorderRadius()+.5;b.style.borderRadius=d+"px";Blockly.FieldTextInput.htmlInput_.style.borderRadius=d+"px";d=this.sourceBlock_.getColourTertiary();b.style.borderColor=d;d=this.getAbsoluteXY_();
		d.x-=a/2;d.y-=a/2;this.sourceBlock_.RTL&&(d.x+=c,d.x-=b.offsetWidth*a,d.x+=1*a);d.y+=1*a;goog.userAgent.GECKO&&Blockly.WidgetDiv.DIV.style.top&&(d.x+=2*a,d.y+=1*a);goog.userAgent.WEBKIT&&(d.y-=1*a);b.style.left=d.x+"px";b.style.top=d.y+"px"};Blockly.FieldTextInput.prototype.getBorderRadius=function(){return this.sourceBlock_.getOutputShape()==Blockly.OUTPUT_SHAPE_ROUND?Blockly.BlockSvg.NUMBER_FIELD_CORNER_RADIUS:Blockly.BlockSvg.TEXT_FIELD_CORNER_RADIUS};
		Blockly.FieldTextInput.prototype.widgetDispose_=function(){var a=this;return function(){var b=Blockly.WidgetDiv.DIV,c=Blockly.FieldTextInput.htmlInput_,d=c.value;if(a.sourceBlock_)if(d=a.callValidator(d),null===d)d=c.defaultValue;else if(a.onFinishEditing_)a.onFinishEditing_(d);a.setValue(d);a.sourceBlock_.rendered&&a.sourceBlock_.render();Blockly.unbindEvent_(c.onKeyDownWrapper_);Blockly.unbindEvent_(c.onKeyUpWrapper_);Blockly.unbindEvent_(c.onKeyPressWrapper_);Blockly.unbindEvent_(c.onInputWrapper_);
		c.dropDownArrowMouseWrapper_&&Blockly.unbindEvent_(c.dropDownArrowMouseWrapper_);a.workspace_.removeChangeListener(c.onWorkspaceChangeWrapper_);c.style.fontSize=Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_INITIAL+"pt";b.style.boxShadow="";a.sourceBlock_&&(c=a.sourceBlock_.getHeightWidth(),b.style.width=c.width+1+"px",b.style.height=c.height+1+"px");b.style.marginLeft=0}};
		Blockly.FieldTextInput.prototype.widgetDisposeAnimationFinished_=function(){return function(){var a=Blockly.WidgetDiv.DIV.style;a.width="auto";a.height="auto";a.fontSize="";Blockly.WidgetDiv.DIV.className="blocklyWidgetDiv";Blockly.WidgetDiv.DIV.removeAttribute("style");Blockly.FieldTextInput.htmlInput_.style.transition="";Blockly.FieldTextInput.htmlInput_=null}};
		Blockly.FieldTextInput.numberValidator=function(a){console.warn("Blockly.FieldTextInput.numberValidator is deprecated. Use Blockly.FieldNumber instead.");if(null===a)return null;a=String(a);a=a.replace(/O/ig,"0");a=a.replace(/,/g,"");a=parseFloat(a||0);return isNaN(a)?null:String(a)};Blockly.FieldTextInput.nonnegativeIntegerValidator=function(a){(a=Blockly.FieldTextInput.numberValidator(a))&&(a=String(Math.max(0,Math.floor(a))));return a};Blockly.FieldAngle=function(a,b){this.symbol_=Blockly.createSvgElement("tspan",{},null);this.symbol_.appendChild(document.createTextNode("\u00b0"));Blockly.FieldAngle.superClass_.constructor.call(this,a,b);this.addArgType("angle")};goog.inherits(Blockly.FieldAngle,Blockly.FieldTextInput);Blockly.FieldAngle.ROUND=15;Blockly.FieldAngle.HALF=50;Blockly.FieldAngle.CLOCKWISE=!0;Blockly.FieldAngle.OFFSET=90;Blockly.FieldAngle.WRAP=180;Blockly.FieldAngle.RADIUS=Blockly.FieldAngle.HALF-1;
		Blockly.FieldAngle.prototype.dispose_=function(){var a=this;return function(){Blockly.FieldAngle.superClass_.dispose_.call(a)();a.gauge_=null;a.clickWrapper_&&Blockly.unbindEvent_(a.clickWrapper_);a.moveWrapper1_&&Blockly.unbindEvent_(a.moveWrapper1_);a.moveWrapper2_&&Blockly.unbindEvent_(a.moveWrapper2_)}};
		Blockly.FieldAngle.prototype.showEditor_=function(){Blockly.FieldAngle.superClass_.showEditor_.call(this,goog.userAgent.MOBILE||goog.userAgent.ANDROID||goog.userAgent.IPAD);Blockly.DropDownDiv.hideWithoutAnimation();Blockly.DropDownDiv.clearContent();var a=Blockly.DropDownDiv.getContentDiv(),a=Blockly.createSvgElement("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:html":"http://www.w3.org/1999/xhtml","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1",height:2*Blockly.FieldAngle.HALF+"px",
		width:2*Blockly.FieldAngle.HALF+"px"},a),b=Blockly.createSvgElement("circle",{cx:Blockly.FieldAngle.HALF,cy:Blockly.FieldAngle.HALF,r:Blockly.FieldAngle.RADIUS,"class":"blocklyAngleCircle"},a);this.gauge_=Blockly.createSvgElement("path",{"class":"blocklyAngleGauge"},a);this.line_=Blockly.createSvgElement("line",{x1:Blockly.FieldAngle.HALF,y1:Blockly.FieldAngle.HALF,"class":"blocklyAngleLine"},a);for(var c=0;360>c;c+=15)Blockly.createSvgElement("line",{x1:Blockly.FieldAngle.HALF+Blockly.FieldAngle.RADIUS,
		y1:Blockly.FieldAngle.HALF,x2:Blockly.FieldAngle.HALF+Blockly.FieldAngle.RADIUS-(0==c%45?10:5),y2:Blockly.FieldAngle.HALF,"class":"blocklyAngleMarks",transform:"rotate("+c+","+Blockly.FieldAngle.HALF+","+Blockly.FieldAngle.HALF+")"},a);Blockly.DropDownDiv.setColour(this.sourceBlock_.parentBlock_.getColour(),this.sourceBlock_.getColourTertiary());Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());Blockly.DropDownDiv.showPositionedByBlock(this,this.sourceBlock_);this.clickWrapper_=
		Blockly.bindEvent_(a,"click",this,function(){Blockly.WidgetDiv.hide();Blockly.DropDownDiv.hide()});this.moveWrapper1_=Blockly.bindEvent_(b,"mousemove",this,this.onMouseMove);this.moveWrapper2_=Blockly.bindEvent_(this.gauge_,"mousemove",this,this.onMouseMove);this.updateGraph_()};
		Blockly.FieldAngle.prototype.onMouseMove=function(a){var b=this.gauge_.ownerSVGElement.getBoundingClientRect(),c=a.clientX-b.left-Blockly.FieldAngle.HALF;a=a.clientY-b.top-Blockly.FieldAngle.HALF;b=Math.atan(-a/c);isNaN(b)||(b=goog.math.toDegrees(b),0>c?b+=180:0<a&&(b+=360),b=Blockly.FieldAngle.CLOCKWISE?Blockly.FieldAngle.OFFSET+360-b:b-Blockly.FieldAngle.OFFSET,Blockly.FieldAngle.ROUND&&(b=Math.round(b/Blockly.FieldAngle.ROUND)*Blockly.FieldAngle.ROUND),b=this.callValidator(b),Blockly.FieldTextInput.htmlInput_.value=
		b,this.setValue(b),this.validate_(),this.resizeEditor_())};Blockly.FieldAngle.prototype.setText=function(a){Blockly.FieldAngle.superClass_.setText.call(this,a);this.textElement_&&(this.updateGraph_(),this.sourceBlock_.RTL?this.textElement_.insertBefore(this.symbol_,this.textElement_.firstChild):this.textElement_.appendChild(this.symbol_),this.size_.width=0)};
		Blockly.FieldAngle.prototype.updateGraph_=function(){if(this.gauge_){var a=Number(this.getText())+Blockly.FieldAngle.OFFSET,b=goog.math.toRadians(a),a=["M ",Blockly.FieldAngle.HALF,",",Blockly.FieldAngle.HALF],c=Blockly.FieldAngle.HALF,d=Blockly.FieldAngle.HALF;if(!isNaN(b)){var e=goog.math.toRadians(Blockly.FieldAngle.OFFSET),f=Math.cos(e)*Blockly.FieldAngle.RADIUS,g=Math.sin(e)*-Blockly.FieldAngle.RADIUS;Blockly.FieldAngle.CLOCKWISE&&(b=2*e-b);c+=Math.cos(b)*Blockly.FieldAngle.RADIUS;d-=Math.sin(b)*
		Blockly.FieldAngle.RADIUS;b=Math.abs(Math.floor((b-e)/Math.PI)%2);Blockly.FieldAngle.CLOCKWISE&&(b=1-b);a.push(" l ",f,",",g," A ",Blockly.FieldAngle.RADIUS,",",Blockly.FieldAngle.RADIUS," 0 ",b," ",Number(Blockly.FieldAngle.CLOCKWISE)," ",c,",",d," z")}this.gauge_.setAttribute("d",a.join(""));this.line_.setAttribute("x2",c);this.line_.setAttribute("y2",d)}};
		Blockly.FieldAngle.prototype.classValidator=function(a){if(null===a)return null;a=parseFloat(a||0);if(isNaN(a))return null;a%=360;0>a&&(a+=360);a>Blockly.FieldAngle.WRAP&&(a-=360);return String(a)};Blockly.FieldCheckbox=function(a,b){Blockly.FieldCheckbox.superClass_.constructor.call(this,"",b);this.setValue(a);this.addArgType("checkbox")};goog.inherits(Blockly.FieldCheckbox,Blockly.Field);Blockly.FieldCheckbox.CHECK_CHAR="\u2713";Blockly.FieldCheckbox.prototype.CURSOR="default";
		Blockly.FieldCheckbox.prototype.init=function(){if(!this.fieldGroup_){Blockly.FieldCheckbox.superClass_.init.call(this);this.checkElement_=Blockly.createSvgElement("text",{"class":"blocklyText blocklyCheckbox",x:-3,y:14},this.fieldGroup_);var a=document.createTextNode(Blockly.FieldCheckbox.CHECK_CHAR);this.checkElement_.appendChild(a);this.checkElement_.style.display=this.state_?"block":"none"}};Blockly.FieldCheckbox.prototype.getValue=function(){return String(this.state_).toUpperCase()};
		Blockly.FieldCheckbox.prototype.setValue=function(a){a="TRUE"==a;this.state_!==a&&(this.sourceBlock_&&Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,this.state_,a)),this.state_=a,this.checkElement_&&(this.checkElement_.style.display=a?"block":"none"))};Blockly.FieldCheckbox.prototype.showEditor_=function(){var a=!this.state_;this.sourceBlock_&&(a=this.callValidator(a));null!==a&&this.setValue(String(a).toUpperCase())};Blockly.FieldColour=function(a,b){Blockly.FieldColour.superClass_.constructor.call(this,a,b);this.addArgType("colour")};goog.inherits(Blockly.FieldColour,Blockly.Field);Blockly.FieldColour.prototype.colours_=null;Blockly.FieldColour.prototype.columns_=0;Blockly.FieldColour.prototype.init=function(a){Blockly.FieldColour.superClass_.init.call(this,a);this.setValue(this.getValue())};Blockly.FieldColour.prototype.CURSOR="default";
		Blockly.FieldColour.prototype.dispose=function(){Blockly.WidgetDiv.hideIfOwner(this);Blockly.FieldColour.superClass_.dispose.call(this)};Blockly.FieldColour.prototype.getValue=function(){return this.colour_};
		Blockly.FieldColour.prototype.setValue=function(a){this.sourceBlock_&&Blockly.Events.isEnabled()&&this.colour_!=a&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,this.colour_,a));this.colour_=a;this.sourceBlock_&&this.sourceBlock_.setColour(a,this.sourceBlock_.getColourSecondary(),this.sourceBlock_.getColourTertiary())};Blockly.FieldColour.prototype.getText=function(){var a=this.colour_,b=a.match(/^#(.)\1(.)\2(.)\3$/);b&&(a="#"+b[1]+b[2]+b[3]);return a};
		Blockly.FieldColour.prototype.getSize=function(){return new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH,Blockly.BlockSvg.FIELD_HEIGHT)};Blockly.FieldColour.COLOURS=goog.ui.ColorPicker.SIMPLE_GRID_COLORS;Blockly.FieldColour.COLUMNS=7;Blockly.FieldColour.prototype.setColours=function(a){this.colours_=a;return this};Blockly.FieldColour.prototype.setColumns=function(a){this.columns_=a;return this};
		Blockly.FieldColour.prototype.showEditor_=function(){Blockly.WidgetDiv.show(this,this.sourceBlock_.RTL,Blockly.FieldColour.widgetDispose_);var a=new goog.ui.ColorPicker;a.setSize(this.columns_||Blockly.FieldColour.COLUMNS);a.setColors(this.colours_||Blockly.FieldColour.COLOURS);var b=goog.dom.getViewportSize(),c=goog.style.getViewportPageOffset(document),d=this.getAbsoluteXY_(),e=this.getScaledBBox_();a.render(Blockly.WidgetDiv.DIV);a.setSelectedColor(this.getValue());var f=goog.style.getSize(a.getElement());
		d.y=d.y+f.height+e.height>=b.height+c.y?d.y-(f.height-1):d.y+(e.height-1);this.sourceBlock_.RTL?(d.x+=e.width,d.x-=f.width,d.x<c.x&&(d.x=c.x)):d.x>b.width+c.x-f.width&&(d.x=b.width+c.x-f.width);Blockly.WidgetDiv.position(d.x,d.y,b,c,this.sourceBlock_.RTL);var g=this;Blockly.FieldColour.changeEventKey_=goog.events.listen(a,goog.ui.ColorPicker.EventType.CHANGE,function(a){a=a.target.getSelectedColor()||"#000000";Blockly.WidgetDiv.hide();g.sourceBlock_&&(a=g.callValidator(a));null!==a&&g.setValue(a)})};
		Blockly.FieldColour.widgetDispose_=function(){Blockly.FieldColour.changeEventKey_&&goog.events.unlistenByKey(Blockly.FieldColour.changeEventKey_)};Blockly.FieldDropdown=function(a,b){this.menuGenerator_=a;this.trimOptions_();var c=this.getOptions_()[0];Blockly.FieldDropdown.superClass_.constructor.call(this,c[1],b);this.addArgType("dropdown")};goog.inherits(Blockly.FieldDropdown,Blockly.Field);Blockly.FieldDropdown.CHECKMARK_OVERHANG=25;Blockly.FieldDropdown.prototype.CURSOR="default";Blockly.FieldDropdown.prototype.selectedItem=null;
		Blockly.FieldDropdown.prototype.init=function(){if(!this.fieldGroup_){this.arrowSize_=12;this.arrowX_=0;this.arrowY_=11;this.arrow_=Blockly.createSvgElement("image",{height:this.arrowSize_+"px",width:this.arrowSize_+"px"});this.arrow_.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",Blockly.mainWorkspace.options.pathToMedia+"dropdown-arrow.svg");Blockly.FieldDropdown.superClass_.init.call(this);this.sourceBlock_.isShadow()||(this.box_=Blockly.createSvgElement("rect",{rx:Blockly.BlockSvg.CORNER_RADIUS,
		ry:Blockly.BlockSvg.CORNER_RADIUS,x:0,y:0,width:this.size_.width,height:this.size_.height,stroke:this.sourceBlock_.getColourTertiary(),fill:this.sourceBlock_.getColour(),"class":"blocklyBlockBackground","fill-opacity":1},null),this.fieldGroup_.insertBefore(this.box_,this.textElement_));var a=this.text_;this.text_=null;this.setText(a)}};
		Blockly.FieldDropdown.prototype.showEditor_=function(){this.dropDownOpen_=!0;Blockly.DropDownDiv.hideWithoutAnimation();Blockly.DropDownDiv.clearContent();var a=Blockly.DropDownDiv.getContentDiv(),b=this,c=new goog.ui.Menu;c.setRightToLeft(this.sourceBlock_.RTL);for(var d=this.getOptions_(),e=0;e<d.length;e++){var f=d[e][1],g=new goog.ui.MenuItem(d[e][0]);g.setRightToLeft(this.sourceBlock_.RTL);g.setValue(f);g.setCheckable(!0);c.addChild(g,!0);f=f==this.value_;g.setChecked(f);f&&(this.selectedItem=
		g)}goog.events.listen(c,goog.ui.Component.EventType.ACTION,function(a){if(a=a.target)a=a.getValue(),b.sourceBlock_&&(a=b.callValidator(a)),null!==a&&b.setValue(a);Blockly.DropDownDiv.hide()});c.getHandler().listen(c.getElement(),goog.events.EventType.TOUCHSTART,function(a){this.getOwnerControl(a.target).handleMouseDown(a)});c.getHandler().listen(c.getElement(),goog.events.EventType.TOUCHEND,function(a){this.getOwnerControl(a.target).performActionInternal(a)});c.render(a);a=c.getElement();Blockly.addClass_(a,
		"blocklyDropdownMenu");goog.style.getSize(a).height=a.scrollHeight;d=this.sourceBlock_.isShadow()?this.sourceBlock_.parentBlock_.getColour():this.sourceBlock_.getColour();Blockly.DropDownDiv.setColour(d,this.sourceBlock_.getColourTertiary());d=this.sourceBlock_.isShadow()?this.sourceBlock_.parentBlock_.getCategory():this.sourceBlock_.getCategory();Blockly.DropDownDiv.setCategory(d);e=this.sourceBlock_.workspace.scale;g=this.size_.width;d=this.size_.height;g*=e;d*=e;e=goog.style.getPageOffset(this.fieldGroup_);
		g=e.x+g/2;d=e.y+d;e=e.y;Blockly.DropDownDiv.setBoundsElement(this.sourceBlock_.workspace.getParentSvg().parentNode);Blockly.DropDownDiv.show(this,g,d,g,e,this.onHide.bind(this));c.setAllowAutoFocus(!0);a.focus();this.disableColourChange_||(this.sourceBlock_.isShadow()?(this.savedPrimary_=this.sourceBlock_.getColour(),this.sourceBlock_.setColour(this.sourceBlock_.getColourTertiary(),this.sourceBlock_.getColourSecondary(),this.sourceBlock_.getColourTertiary())):this.box_&&this.box_.setAttribute("fill",
		this.sourceBlock_.getColourTertiary()))};Blockly.FieldDropdown.prototype.onHide=function(){this.dropDownOpen_=!1;this.disableColourChange_||(this.sourceBlock_.isShadow()?this.sourceBlock_.setColour(this.savedPrimary_,this.sourceBlock_.getColourSecondary(),this.sourceBlock_.getColourTertiary()):this.box_&&this.box_.setAttribute("fill",this.sourceBlock_.getColour()))};
		Blockly.FieldDropdown.prototype.trimOptions_=function(){this.suffixField=this.prefixField=null;var a=this.menuGenerator_;if(goog.isArray(a)&&!(2>a.length)){var b=a.map(function(a){return a[0]}),c=Blockly.shortestStringLength(b),d=Blockly.commonWordPrefix(b,c),e=Blockly.commonWordSuffix(b,c);if((d||e)&&!(c<=d+e)){d&&(this.prefixField=b[0].substring(0,d-1));e&&(this.suffixField=b[0].substr(1-e));b=[];for(c=0;c<a.length;c++){var f=a[c][0],g=a[c][1],f=f.substring(d,f.length-e);b[c]=[f,g]}this.menuGenerator_=
		b}}};Blockly.FieldDropdown.prototype.getOptions_=function(){return goog.isFunction(this.menuGenerator_)?this.menuGenerator_.call(this):this.menuGenerator_};Blockly.FieldDropdown.prototype.getValue=function(){return this.value_};
		Blockly.FieldDropdown.prototype.setValue=function(a){if(null!==a&&a!==this.value_){this.sourceBlock_&&Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,this.value_,a));this.selectedItem&&(this.selectedItem.setChecked(!1),this.selectedItem=null);this.value_=a;for(var b=this.getOptions_(),c=0;c<b.length;c++)if(b[c][1]==a){this.setText(b[c][0]);return}this.setText(a)}};
		Blockly.FieldDropdown.prototype.setText=function(a){null!==a&&a!==this.text_&&(this.text_=a,this.updateTextNode_(),this.textElement_&&(this.textElement_.setAttribute("class",this.textElement_.getAttribute("class")+" blocklyDropdownText"),this.textElement_.parentNode.appendChild(this.arrow_)),this.sourceBlock_&&this.sourceBlock_.rendered&&(this.sourceBlock_.render(),this.sourceBlock_.bumpNeighbours_()))};
		Blockly.FieldDropdown.prototype.positionArrow=function(a){this.arrowX_=this.sourceBlock_.RTL?this.arrowSize_-Blockly.BlockSvg.DROPDOWN_ARROW_PADDING:a+Blockly.BlockSvg.DROPDOWN_ARROW_PADDING/2;a=this.arrowSize_+Blockly.BlockSvg.DROPDOWN_ARROW_PADDING;this.box_&&(this.arrowX_+=Blockly.BlockSvg.BOX_FIELD_PADDING);this.arrow_.setAttribute("transform","translate("+this.arrowX_+","+this.arrowY_+")");return a};
		Blockly.FieldDropdown.prototype.dispose=function(){this.selectedItem=null;Blockly.WidgetDiv.hideIfOwner(this);Blockly.FieldDropdown.superClass_.dispose.call(this)};Blockly.FieldIconMenu=function(a){this.icons_=a;Blockly.FieldIconMenu.superClass_.constructor.call(this,a[0].value);this.addArgType("iconmenu")};goog.inherits(Blockly.FieldIconMenu,Blockly.Field);Blockly.FieldIconMenu.DROPDOWN_WIDTH=168;Blockly.FieldIconMenu.savedPrimary_=null;
		Blockly.FieldIconMenu.prototype.init=function(a){this.arrowX_=18;this.arrowY_=10;a.RTL&&(this.arrowX_=-this.arrowX_-12);this.arrowIcon_=Blockly.createSvgElement("image",{height:"12px",width:"12px",transform:"translate("+this.arrowX_+","+this.arrowY_+")"});this.arrowIcon_.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",Blockly.mainWorkspace.options.pathToMedia+"dropdown-arrow.svg");a.getSvgRoot().appendChild(this.arrowIcon_);Blockly.FieldIconMenu.superClass_.init.call(this,a)};
		Blockly.FieldIconMenu.prototype.CURSOR="default";Blockly.FieldIconMenu.prototype.setValue=function(a){null!==a&&a!==this.value_&&(this.sourceBlock_&&Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,this.value_,a)),this.value_=a,this.setParentFieldImage(this.getSrcForValue(this.value_)))};
		Blockly.FieldIconMenu.prototype.setParentFieldImage=function(a){if(this.sourceBlock_&&this.sourceBlock_.parentBlock_)for(var b=this.sourceBlock_.parentBlock_,c=0,d;d=b.inputList[c];c++)for(var e=0,f;f=d.fieldRow[e];e++)if(f instanceof Blockly.FieldImage){f.setValue(a);return}};Blockly.FieldIconMenu.prototype.getValue=function(){return this.value_};Blockly.FieldIconMenu.prototype.getSrcForValue=function(a){for(var b=0,c;c=this.icons_[b];b++)if(c.value===a)return c.src};
		Blockly.FieldIconMenu.prototype.showEditor_=function(){if(!Blockly.DropDownDiv.hideIfOwner(this)){Blockly.DropDownDiv.hideWithoutAnimation();Blockly.DropDownDiv.clearContent();var a=Blockly.DropDownDiv.getContentDiv();a.setAttribute("role","menu");a.setAttribute("aria-haspopup","true");for(var b=0,c;c=this.icons_[b];b++){if("placeholder"==c.type){var d=document.createElement("span");d.setAttribute("class","blocklyDropDownPlaceholder");d.style.width=c.width+"px";d.style.height=c.height+"px"}else{d=
		document.createElement("button");d.setAttribute("id",":"+b);d.setAttribute("role","menuitem");d.setAttribute("class","blocklyDropDownButton");d.title=c.alt;d.style.width=c.width+"px";d.style.height=c.height+"px";var e=this.sourceBlock_.getColour();c.value==this.getValue()&&(e=this.sourceBlock_.getColourTertiary(),d.setAttribute("aria-selected","true"));d.style.backgroundColor=e;d.style.borderColor=this.sourceBlock_.getColourTertiary();Blockly.bindEvent_(d,"click",this,this.buttonClick_);Blockly.bindEvent_(d,
		"mouseup",this,this.buttonClick_);Blockly.bindEvent_(d,"mousedown",d,function(a){this.setAttribute("class","blocklyDropDownButton blocklyDropDownButtonHover");a.preventDefault()});Blockly.bindEvent_(d,"mouseover",d,function(){this.setAttribute("class","blocklyDropDownButton blocklyDropDownButtonHover");a.setAttribute("aria-activedescendant",this.id)});Blockly.bindEvent_(d,"mouseout",d,function(){this.setAttribute("class","blocklyDropDownButton");a.removeAttribute("aria-activedescendant")});e=document.createElement("img");
		e.src=c.src;d.setAttribute("data-value",c.value);e.setAttribute("data-value",c.value);d.appendChild(e)}a.appendChild(d)}a.style.width=Blockly.FieldIconMenu.DROPDOWN_WIDTH+"px";Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(),this.sourceBlock_.getColourTertiary());Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());this.savedPrimary_=this.sourceBlock_.getColour();this.sourceBlock_.setColour(this.sourceBlock_.getColourSecondary(),this.sourceBlock_.getColourSecondary(),
		this.sourceBlock_.getColourTertiary());b=this.sourceBlock_.workspace.scale;b=-(Blockly.BlockSvg.MIN_BLOCK_Y*b)-Blockly.BlockSvg.FIELD_Y_OFFSET*b;Blockly.DropDownDiv.showPositionedByBlock(this,this.sourceBlock_,this.onHide_.bind(this),b)||this.arrowIcon_.setAttribute("transform","translate("+(this.arrowX_+Blockly.DropDownDiv.ARROW_SIZE/1.5+1)+","+(this.arrowY_+Blockly.DropDownDiv.ARROW_SIZE/1.5)+") rotate(180)")}};
		Blockly.FieldIconMenu.prototype.buttonClick_=function(a){a=a.target.getAttribute("data-value");this.setValue(a);Blockly.DropDownDiv.hide()};
		Blockly.FieldIconMenu.prototype.onHide_=function(){this.sourceBlock_&&this.sourceBlock_.setColour(this.savedPrimary_,this.sourceBlock_.getColourSecondary(),this.sourceBlock_.getColourTertiary());Blockly.DropDownDiv.content_.removeAttribute("role");Blockly.DropDownDiv.content_.removeAttribute("aria-haspopup");Blockly.DropDownDiv.content_.removeAttribute("aria-activedescendant");this.arrowIcon_.setAttribute("transform","translate("+this.arrowX_+","+this.arrowY_+")")};Blockly.FieldImage=function(a,b,c,d,e){this.sourceBlock_=null;this.height_=Number(c);this.width_=Number(b);this.size_=new goog.math.Size(this.width_,this.height_);this.text_=d||"";this.flipRTL_=e;this.setValue(a)};goog.inherits(Blockly.FieldImage,Blockly.Field);Blockly.FieldImage.prototype.rectElement_=null;Blockly.FieldImage.prototype.EDITABLE=!1;
		Blockly.FieldImage.prototype.init=function(){if(!this.fieldGroup_){this.fieldGroup_=Blockly.createSvgElement("g",{},null);this.visible_||(this.fieldGroup_.style.display="none");this.imageElement_=Blockly.createSvgElement("image",{height:this.height_+"px",width:this.width_+"px"},this.fieldGroup_);this.setValue(this.src_);goog.userAgent.GECKO&&(this.rectElement_=Blockly.createSvgElement("rect",{height:this.height_+"px",width:this.width_+"px","fill-opacity":0},this.fieldGroup_));this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);
		var a=this.rectElement_||this.imageElement_;a.tooltip=this.sourceBlock_;Blockly.Tooltip.bindMouseEvents(a)}};Blockly.FieldImage.prototype.dispose=function(){goog.dom.removeNode(this.fieldGroup_);this.rectElement_=this.imageElement_=this.fieldGroup_=null};Blockly.FieldImage.prototype.setTooltip=function(a){(this.rectElement_||this.imageElement_).tooltip=a};Blockly.FieldImage.prototype.getValue=function(){return this.src_};
		Blockly.FieldImage.prototype.setValue=function(a){null!==a&&(this.src_=a,this.imageElement_&&this.imageElement_.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",goog.isString(a)?a:""))};Blockly.FieldImage.prototype.getFlipRTL=function(){return this.flipRTL_};Blockly.FieldImage.prototype.setText=function(a){null!==a&&(this.text_=a)};Blockly.FieldImage.prototype.render_=function(){};Blockly.FieldTextDropdown=function(a,b,c,d){this.menuGenerator_=b;Blockly.FieldDropdown.prototype.trimOptions_.call(this);Blockly.FieldTextDropdown.superClass_.constructor.call(this,a,c,d);this.addArgType("textdropdown")};goog.inherits(Blockly.FieldTextDropdown,Blockly.FieldTextInput);
		Blockly.FieldTextDropdown.prototype.init=function(){Blockly.FieldTextDropdown.superClass_.init.call(this);this.arrow_||(this.arrowSize_=12,this.arrowX_=0,this.arrowY_=11,this.arrow_=Blockly.createSvgElement("image",{height:this.arrowSize_+"px",width:this.arrowSize_+"px"}),this.arrow_.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",Blockly.mainWorkspace.options.pathToMedia+"dropdown-arrow-dark.svg"),this.arrow_.style.cursor="pointer",this.fieldGroup_.appendChild(this.arrow_),this.mouseUpWrapper_=
		Blockly.bindEvent_(this.arrow_,"mouseup",this,this.showDropdown_));this.disableColourChange_=!0};Blockly.FieldTextDropdown.prototype.dispose=function(){this.mouseUpWrapper_&&(Blockly.unbindEvent_(this.mouseUpWrapper_),this.mouseUpWrapper_=null,Blockly.Touch.clearTouchIdentifier());Blockly.FieldTextDropdown.superClass_.dispose.call(this)};
		Blockly.FieldTextDropdown.prototype.showEditor_=function(){this.dropDownOpen_||Blockly.FieldTextDropdown.superClass_.showEditor_.call(this,null,null,!0,function(){Blockly.WidgetDiv.hide();this.showDropdown_();Blockly.Touch.clearTouchIdentifier()})};Blockly.FieldTextDropdown.prototype.getOptions_=Blockly.FieldDropdown.prototype.getOptions_;Blockly.FieldTextDropdown.prototype.positionArrow=Blockly.FieldDropdown.prototype.positionArrow;Blockly.FieldTextDropdown.prototype.showDropdown_=Blockly.FieldDropdown.prototype.showEditor_;
		Blockly.FieldTextDropdown.prototype.onHide=Blockly.FieldDropdown.prototype.onHide;Blockly.FieldNumber=function(a,b,c,d,e){b=this.getNumRestrictor(b,c,d);Blockly.FieldNumber.superClass_.constructor.call(this,a,e,b);this.addArgType("number")};goog.inherits(Blockly.FieldNumber,Blockly.FieldTextInput);Blockly.FieldNumber.DROPDOWN_WIDTH=168;Blockly.FieldNumber.DROPDOWN_Y_PADDING=8;Blockly.FieldNumber.NUMPAD_BUTTONS="789456123.0".split("");
		Blockly.FieldNumber.NUMPAD_DELETE_ICON='data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40"><path d="M28.89,11.45H16.79a2.86,2.86,0,0,0-2,.84L9.09,18a2.85,2.85,0,0,0,0,4l5.69,5.69a2.86,2.86,0,0,0,2,.84h12.1a2.86,2.86,0,0,0,2.86-2.86V14.31A2.86,2.86,0,0,0,28.89,11.45ZM27.15,22.73a1,1,0,0,1,0,1.41,1,1,0,0,1-.71.3,1,1,0,0,1-.71-0.3L23,21.41l-2.73,2.73a1,1,0,0,1-1.41,0,1,1,0,0,1,0-1.41L21.59,20l-2.73-2.73a1,1,0,0,1,0-1.41,1,1,0,0,1,1.41,0L23,18.59l2.73-2.73a1,1,0,1,1,1.42,1.41L24.42,20Z" fill="'+Blockly.Colours.numPadText+
		'"/></svg>';Blockly.FieldNumber.activeField_=null;Blockly.FieldNumber.prototype.getNumRestrictor=function(a,b,c){this.setConstraints_(a,b,c);a="[\\d]";this.decimalAllowed_&&(a+="|[\\.]");this.negativeAllowed_&&(a+="|[-]");return new RegExp(a)};Blockly.FieldNumber.prototype.setConstraints_=function(a,b,c){this.decimalAllowed_="undefined"==typeof c||isNaN(c)||0==c||Math.floor(c)!=c;this.negativeAllowed_="undefined"==typeof a||isNaN(a)||0>a};
		Blockly.FieldNumber.prototype.showEditor_=function(){Blockly.FieldNumber.activeField_=this;var a=goog.userAgent.MOBILE||goog.userAgent.ANDROID||goog.userAgent.IPAD;Blockly.FieldNumber.superClass_.showEditor_.call(this,!1,a);a&&this.showNumPad_()};
		Blockly.FieldNumber.prototype.showNumPad_=function(){Blockly.DropDownDiv.hideWithoutAnimation();Blockly.DropDownDiv.clearContent();var a=Blockly.DropDownDiv.getContentDiv();a.setAttribute("role","menu");a.setAttribute("aria-haspopup","true");this.addButtons_(a);Blockly.DropDownDiv.setColour(Blockly.Colours.numPadBackground,Blockly.Colours.numPadBorder);a.style.width=Blockly.FieldNumber.DROPDOWN_WIDTH+"px";this.position_()};
		Blockly.FieldNumber.prototype.position_=function(){var a=this.sourceBlock_.workspace.scale,b=this.sourceBlock_.getHeightWidth();b.width*=a;b.height*=a;var c=this.getAbsoluteXY_(),d=c.x+b.width/2,b=c.y+b.height+Blockly.FieldNumber.DROPDOWN_Y_PADDING,a=c.y-Blockly.BlockSvg.MIN_BLOCK_Y*a-Blockly.BlockSvg.FIELD_Y_OFFSET*a;Blockly.DropDownDiv.setBoundsElement(this.sourceBlock_.workspace.getParentSvg().parentNode);Blockly.DropDownDiv.show(this,d,b,d,a,this.onHide_.bind(this))};
		Blockly.FieldNumber.prototype.addButtons_=function(a){for(var b=Blockly.FieldNumber.NUMPAD_BUTTONS,c=0,d;d=b[c];c++){var e=document.createElement("button");e.setAttribute("role","menuitem");e.setAttribute("class","blocklyNumPadButton");e.title=d;e.innerHTML=d;Blockly.bindEvent_(e,"mousedown",e,Blockly.FieldNumber.numPadButtonTouch);"."!=d||this.decimalAllowed_||e.setAttribute("style","visibility: hidden");a.appendChild(e)}b=document.createElement("button");b.setAttribute("role","menuitem");b.setAttribute("class",
		"blocklyNumPadButton");b.title="Delete";c=document.createElement("img");c.src=Blockly.FieldNumber.NUMPAD_DELETE_ICON;b.appendChild(c);Blockly.bindEvent_(b,"mousedown",null,Blockly.FieldNumber.numPadEraseButtonTouch);a.appendChild(b)};
		Blockly.FieldNumber.numPadButtonTouch=function(){var a=this.innerHTML,b=Blockly.FieldTextInput.htmlInput_.value,c=Blockly.FieldTextInput.htmlInput_.selectionEnd,a=b.slice(0,Blockly.FieldTextInput.htmlInput_.selectionStart)+a+b.slice(c);Blockly.FieldNumber.updateDisplay_(a);Blockly.Touch.clearTouchIdentifier()};
		Blockly.FieldNumber.numPadEraseButtonTouch=function(){var a=Blockly.FieldTextInput.htmlInput_.value,b=Blockly.FieldTextInput.htmlInput_.selectionStart,c=Blockly.FieldTextInput.htmlInput_.selectionEnd,d=a.slice(0,b)+a.slice(c);0==c-b&&(d=a.slice(0,b-1)+a.slice(b));Blockly.FieldNumber.updateDisplay_(d);Blockly.Touch.clearTouchIdentifier()};
		Blockly.FieldNumber.updateDisplay_=function(a){Blockly.FieldTextInput.htmlInput_.value=a;Blockly.FieldNumber.superClass_.resizeEditor_.call(Blockly.FieldNumber.activeField_);Blockly.FieldTextInput.htmlInput_.setSelectionRange(a.length,a.length);Blockly.FieldTextInput.htmlInput_.scrollLeft=Blockly.FieldTextInput.htmlInput_.scrollWidth;Blockly.FieldNumber.activeField_.validate_()};Blockly.FieldNumber.prototype.onHide_=function(){Blockly.DropDownDiv.content_.removeAttribute("role");Blockly.DropDownDiv.content_.removeAttribute("aria-haspopup")};Blockly.FieldNumberDropdown=function(a,b,c,d,e,f){c=Blockly.FieldNumber.prototype.getNumRestrictor.call(this,c,d,e);Blockly.FieldNumberDropdown.superClass_.constructor.call(this,a,b,f,c);this.addArgType("numberdropdown")};goog.inherits(Blockly.FieldNumberDropdown,Blockly.FieldTextDropdown);Blockly.Variables={};Blockly.Variables.NAME_TYPE="VARIABLE";Blockly.Variables.allUsedVariables=function(a){var b;if(a instanceof Blockly.Block)b=a.getDescendants();else if(a instanceof Blockly.Workspace||a instanceof Blockly.WorkspaceSvg)b=a.getAllBlocks();else throw"Not Block or Workspace: "+a;a=Object.create(null);for(var c=0;c<b.length;c++){var d=b[c].getVars();if(d)for(var e=0;e<d.length;e++){var f=d[e];f&&(a[f.toLowerCase()]=f)}}b=[];for(var g in a)b.push(a[g]);return b};
		Blockly.Variables.allVariables=function(a){a instanceof Blockly.Block&&console.warn("Deprecated call to Blockly.Variables.allVariables with a block instead of a workspace.  You may want Blockly.Variables.allUsedVariables");return a.variableList};
		Blockly.Variables.flyoutCategory=function(a){a=a.variableList;a.sort(goog.string.caseInsensitiveCompare);var b=[],c=goog.dom.createDom("button");c.setAttribute("text",Blockly.Msg.NEW_VARIABLE);b.push(c);for(c=0;c<a.length;c++)if(Blockly.Blocks.data_variable){var d=goog.dom.createDom("block");d.setAttribute("type","data_variable");d.setAttribute("gap",8);d.appendChild(Blockly.Variables.createVariableDom_(a[c]));b.push(d)}1<b.length&&(b[b.length-1].setAttribute("gap",24),Blockly.Blocks.data_setvariableto&&
		(d=goog.dom.createDom("block"),d.setAttribute("type","data_setvariableto"),d.setAttribute("gap",8),d.appendChild(Blockly.Variables.createVariableDom_(a[0])),d.appendChild(Blockly.Variables.createTextDom_()),b.push(d)),Blockly.Blocks.data_changevariableby&&(d=goog.dom.createDom("block"),d.setAttribute("type","data_changevariableby"),d.setAttribute("gap",8),d.appendChild(Blockly.Variables.createVariableDom_(a[0])),d.appendChild(Blockly.Variables.createMathNumberDom_()),b.push(d)),Blockly.Blocks.data_showvariable&&
		(d=goog.dom.createDom("block"),d.setAttribute("type","data_showvariable"),d.setAttribute("gap",8),d.appendChild(Blockly.Variables.createVariableDom_(a[0])),b.push(d)),Blockly.Blocks.data_hidevariable&&(d=goog.dom.createDom("block"),d.setAttribute("type","data_hidevariable"),d.appendChild(Blockly.Variables.createVariableDom_(a[0])),b.push(d)));return b};Blockly.Variables.createValueDom_=function(a){var b=goog.dom.createDom("value");b.setAttribute("name",a);return b};
		Blockly.Variables.createShadowDom_=function(a){var b=goog.dom.createDom("shadow");b.setAttribute("type",a);return b};Blockly.Variables.createVariableDom_=function(a){var b=Blockly.Variables.createValueDom_("VARIABLE"),c=Blockly.Variables.createShadowDom_("data_variablemenu");a=goog.dom.createDom("field",null,a);a.setAttribute("name","VARIABLE");c.appendChild(a);b.appendChild(c);return b};
		Blockly.Variables.createTextDom_=function(){var a=Blockly.Variables.createValueDom_("VALUE"),b=Blockly.Variables.createShadowDom_("text"),c=goog.dom.createDom("field",null,"0");c.setAttribute("name","TEXT");b.appendChild(c);a.appendChild(b);return a};
		Blockly.Variables.createMathNumberDom_=function(){var a=Blockly.Variables.createValueDom_("VALUE"),b=Blockly.Variables.createShadowDom_("math_number"),c=goog.dom.createDom("field",null,"1");c.setAttribute("name","NUM");b.appendChild(c);a.appendChild(b);return a};
		Blockly.Variables.generateUniqueName=function(a){a=a.variableList;var b="";if(a.length)for(var c=1,d=0,e="ijkmnopqrstuvwxyzabcdefgh".charAt(d);!b;){for(var f=!1,g=0;g<a.length;g++)if(a[g].toLowerCase()==e){f=!0;break}f?(d++,25==d&&(d=0,c++),e="ijkmnopqrstuvwxyzabcdefgh".charAt(d),1<c&&(e+=c)):b=e}else b="i";return b};
		Blockly.Variables.createVariable=function(a){for(;;){var b=Blockly.Variables.promptName(Blockly.Msg.NEW_VARIABLE_TITLE,"");if(b)if(-1!=a.variableIndexOf(b))window.alert(Blockly.Msg.VARIABLE_ALREADY_EXISTS.replace("%1",b.toLowerCase()));else{a.createVariable(b);break}else{b=null;break}}return b};Blockly.Variables.promptName=function(a,b){var c=window.prompt(a,b);c&&(c=c.replace(/[\s\xa0]+/g," ").replace(/^ | $/g,""),c==Blockly.Msg.RENAME_VARIABLE||c==Blockly.Msg.NEW_VARIABLE)&&(c=null);return c};Blockly.FieldVariable=function(a,b){Blockly.FieldVariable.superClass_.constructor.call(this,Blockly.FieldVariable.dropdownCreate,b);this.setValue(a||"");this.addArgType("variable")};goog.inherits(Blockly.FieldVariable,Blockly.FieldDropdown);
		Blockly.FieldVariable.prototype.init=function(){this.fieldGroup_||(Blockly.FieldVariable.superClass_.init.call(this),this.getValue()||this.setValue(Blockly.Variables.generateUniqueName(this.sourceBlock_.isInFlyout?this.sourceBlock_.workspace.targetWorkspace:this.sourceBlock_.workspace)),this.sourceBlock_.isInFlyout||this.sourceBlock_.workspace.createVariable(this.getValue()))};Blockly.FieldVariable.prototype.getValue=function(){return this.getText()};
		Blockly.FieldVariable.prototype.setValue=function(a){this.sourceBlock_&&Blockly.Events.isEnabled()&&Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_,"field",this.name,this.value_,a));this.value_=a;this.setText(a)};
		Blockly.FieldVariable.dropdownCreate=function(){var a=this.sourceBlock_&&this.sourceBlock_.workspace?this.sourceBlock_.workspace.variableList.slice(0):[],b=this.getText();b&&-1==a.indexOf(b)&&a.push(b);a.sort(goog.string.caseInsensitiveCompare);a.push(Blockly.Msg.RENAME_VARIABLE);a.push(Blockly.Msg.DELETE_VARIABLE.replace("%1",b));for(var b=[],c=0;c<a.length;c++)b[c]=[a[c],a[c]];return b};
		Blockly.FieldVariable.prototype.classValidator=function(a){var b=this.sourceBlock_.workspace;if(a==Blockly.Msg.RENAME_VARIABLE){var c=this.getText();Blockly.hideChaff();(a=Blockly.Variables.promptName(Blockly.Msg.RENAME_VARIABLE_TITLE.replace("%1",c),c))&&b.renameVariable(c,a);return null}if(a==Blockly.Msg.DELETE_VARIABLE.replace("%1",this.getText()))return b.deleteVariable(this.getText()),null};Blockly.Generator=function(a){this.name_=a;this.FUNCTION_NAME_PLACEHOLDER_REGEXP_=new RegExp(this.FUNCTION_NAME_PLACEHOLDER_,"g")};Blockly.Generator.NAME_TYPE="generated_function";Blockly.Generator.prototype.INFINITE_LOOP_TRAP=null;Blockly.Generator.prototype.STATEMENT_PREFIX=null;Blockly.Generator.prototype.INDENT="  ";Blockly.Generator.prototype.COMMENT_WRAP=60;Blockly.Generator.prototype.ORDER_OVERRIDES=[];
		Blockly.Generator.prototype.workspaceToCode=function(a){a||(console.warn("No workspace specified in workspaceToCode call.  Guessing."),a=Blockly.getMainWorkspace());var b=[];this.init(a);a=a.getTopBlocks(!0);for(var c=0,d;d=a[c];c++){var e=this.blockToCode(d);goog.isArray(e)&&(e=e[0]);e&&(d.outputConnection&&this.scrubNakedValue&&(e=this.scrubNakedValue(e)),b.push(e))}b=b.join("\n");b=this.finish(b);b=b.replace(/^\s+\n/,"");b=b.replace(/\n\s+$/,"\n");return b=b.replace(/[ \t]+\n/g,"\n")};
		Blockly.Generator.prototype.prefixLines=function(a,b){return b+a.replace(/(?!\n$)\n/g,"\n"+b)};Blockly.Generator.prototype.allNestedComments=function(a){var b=[];a=a.getDescendants();for(var c=0;c<a.length;c++){var d=a[c].getCommentText();d&&b.push(d)}b.length&&b.push("");return b.join("\n")};
		Blockly.Generator.prototype.blockToCode=function(a){if(!a)return"";if(a.disabled)return this.blockToCode(a.getNextBlock());var b=this[a.type];goog.asserts.assertFunction(b,'Language "%s" does not know how to generate code for block type "%s".',this.name_,a.type);b=b.call(a,a);if(goog.isArray(b))return goog.asserts.assert(a.outputConnection,'Expecting string from statement block "%s".',a.type),[this.scrub_(a,b[0]),b[1]];if(goog.isString(b))return this.STATEMENT_PREFIX&&(b=this.STATEMENT_PREFIX.replace(/%1/g,
		"'"+a.id+"'")+b),this.scrub_(a,b);if(null===b)return"";goog.asserts.fail("Invalid code generated: %s",b)};
		Blockly.Generator.prototype.valueToCode=function(a,b,c){isNaN(c)&&goog.asserts.fail('Expecting valid order from block "%s".',a.type);var d=a.getInputTargetBlock(b);if(!d)return"";b=this.blockToCode(d);if(""===b)return"";goog.asserts.assertArray(b,'Expecting tuple from value block "%s".',d.type);a=b[0];b=b[1];isNaN(b)&&goog.asserts.fail('Expecting valid order from value block "%s".',d.type);if(!a)return"";var d=!1,e=Math.floor(c),f=Math.floor(b);if(e<=f&&(e!=f||0!=e&&99!=e))for(d=!0,e=0;e<this.ORDER_OVERRIDES.length;e++)if(this.ORDER_OVERRIDES[e][0]==
		c&&this.ORDER_OVERRIDES[e][1]==b){d=!1;break}d&&(a="("+a+")");return a};Blockly.Generator.prototype.statementToCode=function(a,b){var c=a.getInputTargetBlock(b),d=this.blockToCode(c);goog.asserts.assertString(d,'Expecting code from statement block "%s".',c&&c.type);d&&(d=this.prefixLines(d,this.INDENT));return d};
		Blockly.Generator.prototype.addLoopTrap=function(a,b){this.INFINITE_LOOP_TRAP&&(a=this.INFINITE_LOOP_TRAP.replace(/%1/g,"'"+b+"'")+a);this.STATEMENT_PREFIX&&(a+=this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g,"'"+b+"'"),this.INDENT));return a};Blockly.Generator.prototype.RESERVED_WORDS_="";Blockly.Generator.prototype.addReservedWords=function(a){this.RESERVED_WORDS_+=a+","};Blockly.Generator.prototype.FUNCTION_NAME_PLACEHOLDER_="{leCUI8hutHZI4480Dc}";
		Blockly.Generator.prototype.provideFunction_=function(a,b){if(!this.definitions_[a]){var c=this.variableDB_.getDistinctName(a,Blockly.Procedures.NAME_TYPE);this.functionNames_[a]=c;for(var c=b.join("\n").replace(this.FUNCTION_NAME_PLACEHOLDER_REGEXP_,c),d;d!=c;)d=c,c=c.replace(/^(( {2})*) {2}/gm,"$1"+this.INDENT);this.definitions_[a]=c}return this.functionNames_[a]};Blockly.Names=function(a,b){this.variablePrefix_=b||"";this.reservedDict_=Object.create(null);if(a)for(var c=a.split(","),d=0;d<c.length;d++)this.reservedDict_[c[d]]=!0;this.reset()};Blockly.Names.prototype.reset=function(){this.db_=Object.create(null);this.dbReverse_=Object.create(null)};
		Blockly.Names.prototype.getName=function(a,b){var c=a.toLowerCase()+"_"+b,d=b==Blockly.Variables.NAME_TYPE?this.variablePrefix_:"";if(c in this.db_)return d+this.db_[c];var e=this.getDistinctName(a,b);this.db_[c]=e.substr(d.length);return e};Blockly.Names.prototype.getDistinctName=function(a,b){for(var c=this.safeName_(a),d="";this.dbReverse_[c+d]||c+d in this.reservedDict_;)d=d?d+1:2;c+=d;this.dbReverse_[c]=!0;return(b==Blockly.Variables.NAME_TYPE?this.variablePrefix_:"")+c};
		Blockly.Names.prototype.safeName_=function(a){a?(a=encodeURI(a.replace(/ /g,"_")).replace(/[^\w]/g,"_"),-1!="0123456789".indexOf(a[0])&&(a="my_"+a)):a="unnamed";return a};Blockly.Names.equals=function(a,b){return a.toLowerCase()==b.toLowerCase()};Blockly.Procedures={};Blockly.Procedures.NAME_TYPE="PROCEDURE";Blockly.Procedures.allProcedures=function(a){a=a.getAllBlocks();for(var b=[],c=[],d=0;d<a.length;d++)if(a[d].getProcedureDef){var e=a[d].getProcedureDef();e&&(e[2]?b.push(e):c.push(e))}c.sort(Blockly.Procedures.procTupleComparator_);b.sort(Blockly.Procedures.procTupleComparator_);return[c,b]};Blockly.Procedures.procTupleComparator_=function(a,b){return a[0].toLowerCase().localeCompare(b[0].toLowerCase())};
		Blockly.Procedures.findLegalName=function(a,b){if(b.isInFlyout)return a;for(;!Blockly.Procedures.isLegalName_(a,b.workspace,b);){var c=a.match(/^(.*?)(\d+)$/);a=c?c[1]+(parseInt(c[2],10)+1):a+"2"}return a};Blockly.Procedures.isLegalName_=function(a,b,c){b=b.getAllBlocks();for(var d=0;d<b.length;d++)if(b[d]!=c&&b[d].getProcedureDef){var e=b[d].getProcedureDef();if(Blockly.Names.equals(e[0],a))return!1}return!0};
		Blockly.Procedures.rename=function(a){a=a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"");var b=Blockly.Procedures.findLegalName(a,this.sourceBlock_),c=this.text_;if(c!=a&&c!=b){a=this.sourceBlock_.workspace.getAllBlocks();for(var d=0;d<a.length;d++)a[d].renameProcedure&&a[d].renameProcedure(c,b)}return b};
		Blockly.Procedures.flyoutCategory=function(a){function b(a,b){for(var d=0;d<a.length;d++){var e=a[d][0],f=a[d][1],l=goog.dom.createDom("block");l.setAttribute("type",b);l.setAttribute("gap",16);var m=goog.dom.createDom("mutation");m.setAttribute("name",e);l.appendChild(m);for(e=0;e<f.length;e++){var n=goog.dom.createDom("arg");n.setAttribute("name",f[e]);m.appendChild(n)}c.push(l)}}var c=[];if(Blockly.Blocks.procedures_defnoreturn){var d=goog.dom.createDom("block");d.setAttribute("type","procedures_defnoreturn");
		d.setAttribute("gap",16);c.push(d)}Blockly.Blocks.procedures_defreturn&&(d=goog.dom.createDom("block"),d.setAttribute("type","procedures_defreturn"),d.setAttribute("gap",16),c.push(d));Blockly.Blocks.procedures_report&&(d=goog.dom.createDom("block"),d.setAttribute("type","procedures_report"),d.setAttribute("gap",16),c.push(d));c.length&&c[c.length-1].setAttribute("gap",24);a=Blockly.Procedures.allProcedures(a);b(a[0],"procedures_callnoreturn");b(a[1],"procedures_callreturn");return c};
		Blockly.Procedures.getCallers=function(a,b){for(var c=[],d=b.getAllBlocks(),e=0;e<d.length;e++)if(d[e].getProcedureCall){var f=d[e].getProcedureCall();f&&Blockly.Names.equals(f,a)&&c.push(d[e])}return c};
		Blockly.Procedures.mutateCallers=function(a){var b=Blockly.Events.recordUndo,c=a.getProcedureDef()[0],d=a.mutationToDom(!0);a=Blockly.Procedures.getCallers(c,a.workspace);for(var c=0,e;e=a[c];c++){var f=e.mutationToDom(),f=f&&Blockly.Xml.domToText(f);e.domToMutation(d);var g=e.mutationToDom(),g=g&&Blockly.Xml.domToText(g);f!=g&&(Blockly.Events.recordUndo=!1,Blockly.Events.fire(new Blockly.Events.Change(e,"mutation",null,f,g)),Blockly.Events.recordUndo=b)}};
		Blockly.Procedures.getDefinition=function(a,b){for(var c=b.getTopBlocks(!1),d=0;d<c.length;d++)if(c[d].getProcedureDef){var e=c[d].getProcedureDef();if(e&&Blockly.Names.equals(e[0],a))return c[d]}return null};Blockly.FlyoutButton=function(a,b,c){this.workspace_=a;this.targetWorkspace_=b;this.text_=c;this.position_=new goog.math.Coordinate(0,0)};Blockly.FlyoutButton.MARGIN=5;Blockly.FlyoutButton.prototype.width=0;Blockly.FlyoutButton.prototype.height=0;
		Blockly.FlyoutButton.prototype.createDom=function(){this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyFlyoutButton"},this.workspace_.getCanvas());var a=Blockly.createSvgElement("rect",{"class":"blocklyFlyoutButtonShadow",rx:4,ry:4,x:1,y:1},this.svgGroup_),b=Blockly.createSvgElement("rect",{"class":"blocklyFlyoutButtonBackground",rx:4,ry:4},this.svgGroup_),c=Blockly.createSvgElement("text",{"class":"blocklyText",x:0,y:0,"text-anchor":"middle"},this.svgGroup_);c.textContent=this.text_;this.width=
		c.getComputedTextLength()+2*Blockly.FlyoutButton.MARGIN;this.height=20;a.setAttribute("width",this.width);a.setAttribute("height",this.height);b.setAttribute("width",this.width);b.setAttribute("height",this.height);c.setAttribute("x",this.width/2);c.setAttribute("y",this.height-Blockly.FlyoutButton.MARGIN);this.updateTransform_();return this.svgGroup_};Blockly.FlyoutButton.prototype.show=function(){this.updateTransform_();this.svgGroup_.setAttribute("display","block")};
		Blockly.FlyoutButton.prototype.updateTransform_=function(){this.svgGroup_.setAttribute("transform","translate("+this.position_.x+","+this.position_.y+")")};Blockly.FlyoutButton.prototype.moveTo=function(a,b){this.position_.x=a;this.position_.y=b;this.updateTransform_()};Blockly.FlyoutButton.prototype.dispose=function(){this.svgGroup_&&(goog.dom.removeNode(this.svgGroup_),this.svgGroup_=null);this.targetWorkspace_=this.workspace_=null};
		Blockly.FlyoutButton.prototype.onMouseUp=function(a){a.preventDefault();a.stopPropagation();Blockly.Flyout.terminateDrag_();Blockly.Variables.createVariable(this.targetWorkspace_)};Blockly.Flyout=function(a){a.getMetrics=this.getMetrics_.bind(this);a.setMetrics=this.setMetrics_.bind(this);this.workspace_=new Blockly.WorkspaceSvg(a);this.workspace_.isFlyout=!0;this.RTL=!!a.RTL;this.horizontalLayout_=a.horizontalLayout;this.toolboxPosition_=a.toolboxPosition;this.eventWrappers_=[];this.backgroundButtons_=[];this.buttons_=[];this.listeners_=[];this.permanentlyDisabled_=[];this.startDragMouseX_=this.startDragMouseY_=0;this.parentToolbox_=null};Blockly.Flyout.startFlyout_=null;
		Blockly.Flyout.startDownEvent_=null;Blockly.Flyout.startBlock_=null;Blockly.Flyout.onMouseUpWrapper_=null;Blockly.Flyout.onMouseMoveWrapper_=null;Blockly.Flyout.onMouseMoveBlockWrapper_=null;Blockly.Flyout.prototype.autoClose=!0;Blockly.Flyout.prototype.CORNER_RADIUS=0;Blockly.Flyout.prototype.DRAG_RADIUS=10;Blockly.Flyout.prototype.MARGIN=12;Blockly.Flyout.prototype.GAP_X=3*Blockly.Flyout.prototype.MARGIN;Blockly.Flyout.prototype.GAP_Y=3*Blockly.Flyout.prototype.MARGIN;
		Blockly.Flyout.prototype.SCROLLBAR_PADDING=2;Blockly.Flyout.prototype.width_=0;Blockly.Flyout.prototype.height_=0;Blockly.Flyout.prototype.contentWidth_=0;Blockly.Flyout.prototype.contentHeight_=0;Blockly.Flyout.prototype.verticalOffset_=0;Blockly.Flyout.prototype.dragAngleRange_=70;Blockly.Flyout.prototype.dragMode_=Blockly.DRAG_NONE;
		Blockly.Flyout.prototype.createDom=function(){this.svgGroup_=Blockly.createSvgElement("g",{"class":"blocklyFlyout"},null);this.svgBackground_=Blockly.createSvgElement("path",{"class":"blocklyFlyoutBackground"},this.svgGroup_);this.svgGroup_.appendChild(this.workspace_.createDom());return this.svgGroup_};
		Blockly.Flyout.prototype.init=function(a){this.targetWorkspace_=a;this.workspace_.targetWorkspace=a;this.scrollbar_=new Blockly.Scrollbar(this.workspace_,this.horizontalLayout_,!1);this.position();Array.prototype.push.apply(this.eventWrappers_,Blockly.bindEvent_(this.svgGroup_,"wheel",this,this.wheel_));Array.prototype.push.apply(this.eventWrappers_,Blockly.bindEvent_(this.svgGroup_,"mousedown",this,this.onMouseDown_))};
		Blockly.Flyout.prototype.dispose=function(){this.hide();Blockly.unbindEvent_(this.eventWrappers_);this.scrollbar_&&(this.scrollbar_.dispose(),this.scrollbar_=null);this.workspace_&&(this.workspace_.targetWorkspace=null,this.workspace_.dispose(),this.workspace_=null);this.svgGroup_&&(goog.dom.removeNode(this.svgGroup_),this.svgGroup_=null);this.targetWorkspace_=this.svgBackground_=this.parentToolbox_=null};Blockly.Flyout.prototype.setParentToolbox=function(a){this.parentToolbox_=a};
		Blockly.Flyout.prototype.getWidth=function(){return this.parentToolbox_?this.parentToolbox_.getWidth():this.DEFAULT_WIDTH};Blockly.Flyout.prototype.getHeight=function(){return this.height_};Blockly.Flyout.prototype.getWorkspace=function(){return this.workspace_};Blockly.Flyout.prototype.isVisible=function(){return this.svgGroup_&&"block"==this.svgGroup_.style.display};
		Blockly.Flyout.prototype.hide=function(){if(this.isVisible()){this.svgGroup_.style.display="none";for(var a=0,b;b=this.listeners_[a];a++)Blockly.unbindEvent_(b);this.listeners_.length=0;this.reflowWrapper_&&(this.workspace_.removeChangeListener(this.reflowWrapper_),this.reflowWrapper_=null)}};
		Blockly.Flyout.prototype.show=function(a){this.hide();this.clearOldBlocks_();a==Blockly.Variables.NAME_TYPE?a=Blockly.Variables.flyoutCategory(this.workspace_.targetWorkspace):a==Blockly.Procedures.NAME_TYPE&&(a=Blockly.Procedures.flyoutCategory(this.workspace_.targetWorkspace));this.svgGroup_.style.display="block";for(var b=[],c=[],d=this.permanentlyDisabled_.length=0,e;e=a[d];d++)if(e.tagName){var f=e.tagName.toUpperCase(),g=this.horizontalLayout_?this.GAP_X:this.GAP_Y;"BLOCK"==f?(f=Blockly.Xml.domToBlock(e,
		this.workspace_),f.disabled&&this.permanentlyDisabled_.push(f),b.push({type:"block",block:f}),e=parseInt(e.getAttribute("gap"),10),c.push(isNaN(e)?g:e)):"SEP"==e.tagName.toUpperCase()?(e=parseInt(e.getAttribute("gap"),10),!isNaN(e)&&0<c.length?c[c.length-1]=e:c.push(g)):"BUTTON"==f&&(e=e.getAttribute("text"),e=new Blockly.FlyoutButton(this.workspace_,this.targetWorkspace_,e),b.push({type:"button",button:e}),c.push(g))}this.layout_(b,c);this.listeners_.push(Blockly.bindEvent_(this.svgBackground_,"mouseover",
		this,function(){for(var a=this.workspace_.getTopBlocks(!1),b=0,c;c=a[b];b++)c.removeSelect()}));this.reflow();this.position();this.reflowWrapper_=this.reflow.bind(this);this.workspace_.addChangeListener(this.reflowWrapper_)};
		Blockly.Flyout.prototype.clearOldBlocks_=function(){for(var a=this.workspace_.getTopBlocks(!1),b=0,c;c=a[b];b++)c.workspace==this.workspace_&&c.dispose(!1,!1);for(b=0;a=this.backgroundButtons_[b];b++)goog.dom.removeNode(a);for(b=this.backgroundButtons_.length=0;a=this.buttons_[b];b++)a.dispose();this.buttons_.length=0};
		Blockly.Flyout.prototype.addBlockListeners_=function(a,b,c){this.autoClose?(this.listeners_.push(Blockly.bindEvent_(a,"mousedown",null,this.createBlockFunc_(b))),this.listeners_.push(Blockly.bindEvent_(c,"mousedown",null,this.createBlockFunc_(b)))):(this.listeners_.push(Blockly.bindEvent_(a,"mousedown",null,this.blockMouseDown_(b))),this.listeners_.push(Blockly.bindEvent_(c,"mousedown",null,this.blockMouseDown_(b))));this.listeners_.push(Blockly.bindEvent_(a,"mouseover",b,b.addSelect));this.listeners_.push(Blockly.bindEvent_(a,
		"mouseout",b,b.removeSelect));this.listeners_.push(Blockly.bindEvent_(c,"mouseover",b,b.addSelect));this.listeners_.push(Blockly.bindEvent_(c,"mouseout",b,b.removeSelect))};Blockly.Flyout.blockRightClick_=function(a,b){Blockly.terminateDrag_();Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();Blockly.hideChaff(!0);b.showContextMenu_(a);Blockly.Touch.clearTouchIdentifier()};
		Blockly.Flyout.prototype.blockMouseDown_=function(a){var b=this;return function(c){Blockly.isRightButton(c)?Blockly.Flyout.blockRightClick_(c,a):(b.dragMode_=Blockly.DRAG_NONE,Blockly.terminateDrag_(),Blockly.WidgetDiv.hide(!0),Blockly.DropDownDiv.hideWithoutAnimation(),Blockly.hideChaff(),b.startDragMouseY_=c.clientY,b.startDragMouseX_=c.clientX,Blockly.Flyout.startDownEvent_=c,Blockly.Flyout.startBlock_=a,Blockly.Flyout.startFlyout_=b,Blockly.Flyout.onMouseUpWrapper_=Blockly.bindEvent_(document,
		"mouseup",b,b.onMouseUp_),Blockly.Flyout.onMouseMoveBlockWrapper_=Blockly.bindEvent_(document,"mousemove",b,b.onMouseMoveBlock_));c.stopPropagation();c.preventDefault()}};
		Blockly.Flyout.prototype.onMouseDown_=function(a){this.dragMode_=Blockly.DRAG_FREE;Blockly.isRightButton(a)?Blockly.Touch.clearTouchIdentifier():(Blockly.WidgetDiv.hide(!0),Blockly.DropDownDiv.hideWithoutAnimation(),Blockly.hideChaff(!0),this.dragMode_=Blockly.DRAG_FREE,this.startDragMouseY_=a.clientY,this.startDragMouseX_=a.clientX,Blockly.Flyout.startFlyout_=this,Blockly.Flyout.onMouseMoveWrapper_=Blockly.bindEvent_(document,"mousemove",this,this.onMouseMove_),Blockly.Flyout.onMouseUpWrapper_=Blockly.bindEvent_(document,
		"mouseup",this,Blockly.Flyout.terminateDrag_),a.preventDefault(),a.stopPropagation())};
		Blockly.Flyout.prototype.onMouseUp_=function(){this.workspace_.isDragging()||(Blockly.Touch.clearTouchIdentifier(),this.autoClose?this.createBlockFunc_(Blockly.Flyout.startBlock_)(Blockly.Flyout.startDownEvent_):Blockly.WidgetDiv.isVisible()||(Blockly.Events.fire(new Blockly.Events.Ui(Blockly.Flyout.startBlock_,"click",void 0,void 0)),Blockly.Events.fire(new Blockly.Events.Ui(Blockly.Flyout.startBlock_,"stackclick",void 0,void 0))));Blockly.terminateDrag_()};
		Blockly.Flyout.prototype.onMouseMove_=function(a){var b=this.getMetrics_();if(this.horizontalLayout_){if(!(0>b.contentWidth-b.viewWidth)){var c=a.clientX-this.startDragMouseX_;this.startDragMouseX_=a.clientX;a=b.viewLeft-c;a=goog.math.clamp(a,0,b.contentWidth-b.viewWidth);this.scrollbar_.set(a)}}else 0>b.contentHeight-b.viewHeight||(c=a.clientY-this.startDragMouseY_,this.startDragMouseY_=a.clientY,a=b.viewTop-c,a=goog.math.clamp(a,0,b.contentHeight-b.viewHeight),this.scrollbar_.set(a))};
		Blockly.Flyout.prototype.onMouseMoveBlock_=function(a){if(!("mousemove"==a.type&&1>=a.clientX&&0==a.clientY&&0==a.button)){Blockly.Css.setCursor(Blockly.Css.Cursor.CLOSED);var b=this.determineDragIntention_(a.clientX-Blockly.Flyout.startDownEvent_.clientX,a.clientY-Blockly.Flyout.startDownEvent_.clientY);Blockly.longStop_();if(b)this.createBlockFunc_(Blockly.Flyout.startBlock_)(Blockly.Flyout.startDownEvent_);else if(this.dragMode_==Blockly.DRAG_FREE)this.onMouseMove_(a)}a.stopPropagation()};
		Blockly.Flyout.prototype.determineDragIntention_=function(a,b){if(this.dragMode_==Blockly.DRAG_FREE)return!1;if(Math.sqrt(a*a+b*b)<this.DRAG_RADIUS)return this.dragMode_=Blockly.DRAG_STICKY,!1;if(this.isDragTowardWorkspace_(a,b)||!this.scrollbar_.isVisible())return!0;this.dragMode_=Blockly.DRAG_FREE;return!1};
		Blockly.Flyout.prototype.createBlockFunc_=function(a){var b=this;return function(c){Blockly.WidgetDiv.hide(!0);Blockly.DropDownDiv.hideWithoutAnimation();if(!Blockly.isRightButton(c)&&!a.disabled){Blockly.Events.disable();try{var d=b.placeNewBlock_(a)}finally{Blockly.Events.enable()}Blockly.Events.isEnabled()&&(Blockly.Events.setGroup(!0),Blockly.Events.fire(new Blockly.Events.Create(d)));b.autoClose&&b.hide();d.onMouseDown_(c);Blockly.dragMode_=Blockly.DRAG_FREE;d.setDragging_(!0);d.moveToDragSurface_()}}};
		Blockly.Flyout.terminateDrag_=function(){this.dragMode_=Blockly.DRAG_NONE;Blockly.Flyout.startFlyout_&&(Blockly.Flyout.startFlyout_.dragMode_==Blockly.DRAG_FREE&&Blockly.Touch.clearTouchIdentifier(),Blockly.Flyout.startFlyout_.dragMode_=Blockly.DRAG_NONE,Blockly.Flyout.startFlyout_=null);Blockly.Flyout.onMouseUpWrapper_&&(Blockly.unbindEvent_(Blockly.Flyout.onMouseUpWrapper_),Blockly.Flyout.onMouseUpWrapper_=null);Blockly.Flyout.onMouseMoveBlockWrapper_&&(Blockly.unbindEvent_(Blockly.Flyout.onMouseMoveBlockWrapper_),
		Blockly.Flyout.onMouseMoveBlockWrapper_=null);Blockly.Flyout.onMouseMoveWrapper_&&(Blockly.unbindEvent_(Blockly.Flyout.onMouseMoveWrapper_),Blockly.Flyout.onMouseMoveWrapper_=null);Blockly.Flyout.startDownEvent_=null;Blockly.Flyout.startBlock_=null};Blockly.Flyout.prototype.reflow=function(){this.reflowWrapper_&&this.workspace_.removeChangeListener(this.reflowWrapper_);var a=this.workspace_.getTopBlocks(!1);this.reflowInternal_(a);this.reflowWrapper_&&this.workspace_.addChangeListener(this.reflowWrapper_)};Blockly.HorizontalFlyout=function(a){a.getMetrics=this.getMetrics_.bind(this);a.setMetrics=this.setMetrics_.bind(this);Blockly.HorizontalFlyout.superClass_.constructor.call(this,a);this.horizontalLayout_=!0};goog.inherits(Blockly.HorizontalFlyout,Blockly.Flyout);
		Blockly.HorizontalFlyout.prototype.getMetrics_=function(){if(!this.isVisible())return null;try{var a=this.workspace_.getCanvas().getBBox()}catch(e){a={height:0,y:0,width:0,x:0}}var b=this.SCROLLBAR_PADDING,c=this.SCROLLBAR_PADDING;this.toolboxPosition_==Blockly.TOOLBOX_AT_BOTTOM&&(b=0);var d=this.height_;this.toolboxPosition_==Blockly.TOOLBOX_AT_TOP&&(d+=this.MARGIN-this.SCROLLBAR_PADDING);return{viewHeight:d,viewWidth:this.width_-2*this.SCROLLBAR_PADDING,contentHeight:a.height*this.workspace_.scale+
		2*this.MARGIN,contentWidth:a.width*this.workspace_.scale+2*this.MARGIN,viewTop:-this.workspace_.scrollY,viewLeft:-this.workspace_.scrollX,contentTop:a.y,contentLeft:a.x,absoluteTop:b,absoluteLeft:c}};Blockly.HorizontalFlyout.prototype.setMetrics_=function(a){var b=this.getMetrics_();b&&(goog.isNumber(a.x)&&(this.workspace_.scrollX=-b.contentWidth*a.x),this.workspace_.translate(this.workspace_.scrollX+b.absoluteLeft,this.workspace_.scrollY+b.absoluteTop))};
		Blockly.HorizontalFlyout.prototype.position=function(){if(this.isVisible()){var a=this.targetWorkspace_.getMetrics();if(a){var b=this.horizontalLayout_?a.viewWidth:this.width_,b=b-this.CORNER_RADIUS;this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT&&(b*=-1);this.setBackgroundPath_(b,this.horizontalLayout_?this.height_:a.viewHeight);b=a.absoluteLeft;this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT&&(b+=a.viewWidth,b-=this.width_);var c=a.absoluteTop;this.toolboxPosition_==Blockly.TOOLBOX_AT_BOTTOM&&(c+=
		a.viewHeight,c-=this.height_);this.svgGroup_.setAttribute("transform","translate("+b+","+c+")");this.horizontalLayout_?this.width_=a.viewWidth:this.height_=a.viewHeight;this.scrollbar_&&this.scrollbar_.resize();this.svgGroup_.style.opacity=1}}};
		Blockly.HorizontalFlyout.prototype.setBackgroundPath_=function(a,b){var c=this.toolboxPosition_==Blockly.TOOLBOX_AT_TOP,d=["M 0,"+(c?0:this.CORNER_RADIUS)];c?(d.push("h",a+this.CORNER_RADIUS),d.push("v",b),d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,1,-this.CORNER_RADIUS,this.CORNER_RADIUS),d.push("h",-1*(a-this.CORNER_RADIUS)),d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,1,-this.CORNER_RADIUS,-this.CORNER_RADIUS)):(d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,1,this.CORNER_RADIUS,
		-this.CORNER_RADIUS),d.push("h",a-this.CORNER_RADIUS),d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,1,this.CORNER_RADIUS,this.CORNER_RADIUS),d.push("v",b-this.CORNER_RADIUS),d.push("h",-a-this.CORNER_RADIUS));d.push("z");this.svgBackground_.setAttribute("d",d.join(" "))};Blockly.HorizontalFlyout.prototype.scrollToStart=function(){this.scrollbar_.set(this.RTL?Infinity:0)};
		Blockly.HorizontalFlyout.prototype.wheel_=function(a){var b=a.deltaX;if(b){goog.userAgent.GECKO&&(b*=10);var c=this.getMetrics_(),b=c.viewLeft+b,b=Math.min(b,c.contentWidth-c.viewWidth),b=Math.max(b,0);this.scrollbar_.set(b)}a.preventDefault();a.stopPropagation()};
		Blockly.HorizontalFlyout.prototype.layout_=function(a,b){this.workspace_.scale=this.targetWorkspace_.scale;var c=this.MARGIN,d=c;this.RTL&&(a=a.reverse());for(var e=0,f;f=a[e];e++)if("block"==f.type){f=f.block;for(var g=f.getDescendants(),h=0,k;k=g[h];h++)k.isInFlyout=!0;g=f.getSvgRoot();h=f.getHeightWidth();k=d;this.RTL&&(k+=h.width);f.moveBy(k,c);d+=h.width+b[e];h=Blockly.createSvgElement("rect",{"fill-opacity":0},null);h.tooltip=f;Blockly.Tooltip.bindMouseEvents(h);this.workspace_.getCanvas().insertBefore(h,
		f.getSvgRoot());f.flyoutRect_=h;this.backgroundButtons_[e]=h;this.addBlockListeners_(g,f,h)}else"button"==f.type&&(f=f.button,g=f.createDom(),f.moveTo(d,c),f.show(),Blockly.bindEvent_(g,"mouseup",f,f.onMouseUp),this.buttons_.push(f),d+=f.width+b[e])};
		Blockly.HorizontalFlyout.prototype.onMouseMove_=function(a){var b=this.getMetrics_();if(!(0>b.contentWidth-b.viewWidth)){var c=a.clientX-this.startDragMouseX_;this.startDragMouseX_=a.clientX;a=b.viewLeft-c;a=goog.math.clamp(a,0,b.contentWidth-b.viewWidth);this.scrollbar_.set(a)}};
		Blockly.HorizontalFlyout.prototype.isDragTowardWorkspace_=function(a,b){var c=Math.atan2(b,a)/Math.PI*180,d=!1,e=this.dragAngleRange_;this.toolboxPosition_==Blockly.TOOLBOX_AT_TOP?c<90+e&&c>90-e&&(d=!0):c>-90-e&&c<-90+e&&(d=!0);return d};
		Blockly.HorizontalFlyout.prototype.placeNewBlock_=function(a){var b=this.targetWorkspace_,c=a.getSvgRoot();if(!c)throw"originBlock is not rendered.";var c=Blockly.getSvgXY_(c,b),d=this.workspace_.scrollX,e=this.workspace_.scale;c.x+=d/e-d;this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT&&(d=b.getMetrics().viewWidth-this.width_,e=b.scale,c.x+=d/e-d);d=this.workspace_.scrollY;e=this.workspace_.scale;c.y+=d/e-d;this.toolboxPosition_==Blockly.TOOLBOX_AT_BOTTOM&&(d=b.getMetrics().viewHeight-this.height_,
		e=b.scale,c.y+=d/e-d);a=Blockly.Xml.blockToDom(a);a=Blockly.Xml.domToBlock(a,b);e=a.getSvgRoot();if(!e)throw"block is not rendered.";e=Blockly.getSvgXY_(e,b);e.x+=b.scrollX/b.scale-b.scrollX;e.y+=b.scrollY/b.scale-b.scrollY;b.toolbox_&&!b.scrollbar&&(e.x+=b.toolbox_.getWidth()/b.scale,e.y+=b.toolbox_.getHeight()/b.scale);a.moveBy(c.x-e.x,c.y-e.y);return a};
		Blockly.HorizontalFlyout.prototype.getClientRect=function(){if(!this.svgGroup_)return null;var a=this.svgGroup_.getBoundingClientRect(),b=a.top,a=a.height;if(this.toolboxPosition_==Blockly.TOOLBOX_AT_TOP)return new goog.math.Rect(-1E9,b-1E9,2E9,1E9+a);if(this.toolboxPosition_==Blockly.TOOLBOX_AT_BOTTOM)return new goog.math.Rect(-1E9,b,2E9,1E9+a)};
		Blockly.HorizontalFlyout.prototype.reflowInternal_=function(a){this.workspace_.scale=this.targetWorkspace_.scale;for(var b=0,c=0,d;d=a[c];c++)b=Math.max(b,d.getHeightWidth().height);b+=1.5*this.MARGIN;b*=this.workspace_.scale;b+=Blockly.Scrollbar.scrollbarThickness;if(this.height_!=b){for(c=0;d=a[c];c++){var e=d.getHeightWidth();if(d.flyoutRect_){d.flyoutRect_.setAttribute("width",e.width);d.flyoutRect_.setAttribute("height",e.height);var f=d.getRelativeToSurfaceXY();d.flyoutRect_.setAttribute("y",
		f.y);d.flyoutRect_.setAttribute("x",this.RTL?f.x-e.width:f.x);(e=d.startHat_?Blockly.BlockSvg.START_HAT_HEIGHT:0)&&d.moveBy(0,e);d.flyoutRect_.setAttribute("y",f.y)}}this.height_=b;this.targetWorkspace_.resize()}};Blockly.VerticalFlyout=function(a){a.getMetrics=this.getMetrics_.bind(this);a.setMetrics=this.setMetrics_.bind(this);Blockly.VerticalFlyout.superClass_.constructor.call(this,a);this.horizontalLayout_=!1;this.checkboxes_=[]};goog.inherits(Blockly.VerticalFlyout,Blockly.Flyout);Blockly.VerticalFlyout.prototype.autoClose=!1;Blockly.VerticalFlyout.prototype.DEFAULT_WIDTH=250;Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE=20;Blockly.VerticalFlyout.prototype.CHECKBOX_MARGIN=Blockly.Flyout.prototype.MARGIN;
		Blockly.VerticalFlyout.prototype.CHECKBOX_SPACE_X=Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE+2*Blockly.VerticalFlyout.prototype.CHECKBOX_MARGIN;Blockly.VerticalFlyout.prototype.init=function(a){Blockly.VerticalFlyout.superClass_.init.call(this,a);this.workspace_.scale=a.scale};
		Blockly.VerticalFlyout.prototype.createDom=function(){Blockly.VerticalFlyout.superClass_.createDom.call(this);this.defs_=Blockly.createSvgElement("defs",{},this.svgGroup_);var a=Blockly.createSvgElement("clipPath",{id:"blocklyBlockMenuClipPath"},this.defs_);this.clipRect_=Blockly.createSvgElement("rect",{id:"blocklyBlockMenuClipRect",height:"0",width:"0",y:"0",x:"0"},a);this.workspace_.svgGroup_.setAttribute("clip-path","url(#blocklyBlockMenuClipPath)");return this.svgGroup_};
		Blockly.VerticalFlyout.prototype.getMetrics_=function(){if(!this.isVisible())return null;try{var a=this.workspace_.getCanvas().getBBox()}catch(e){a={height:0,y:0,width:0,x:0}}var b=this.SCROLLBAR_PADDING,c=this.height_-2*this.SCROLLBAR_PADDING,d=this.getWidth()-this.SCROLLBAR_PADDING;return{viewHeight:c,viewWidth:d,contentHeight:a.height*this.workspace_.scale+2*this.MARGIN,contentWidth:a.width*this.workspace_.scale+2*this.MARGIN,viewTop:-this.workspace_.scrollY,viewLeft:-this.workspace_.scrollX,contentTop:a.y,
		contentLeft:a.x,absoluteTop:b,absoluteLeft:0}};Blockly.VerticalFlyout.prototype.setMetrics_=function(a){var b=this.getMetrics_();b&&(goog.isNumber(a.y)&&(this.workspace_.scrollY=-b.contentHeight*a.y),this.workspace_.translate(this.workspace_.scrollX+b.absoluteLeft,this.workspace_.scrollY+b.absoluteTop),this.clipRect_.setAttribute("height",b.viewHeight+"px"),this.clipRect_.setAttribute("width",b.viewWidth+"px"))};
		Blockly.VerticalFlyout.prototype.position=function(){if(this.isVisible()){var a=this.targetWorkspace_.getMetrics();if(a){this.width_=this.getWidth();if(this.parentToolbox_)var b=this.parentToolbox_.HtmlDiv.offsetLeft,c=this.parentToolbox_.HtmlDiv.offsetTop+this.parentToolbox_.getHeight();else b=this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT?a.viewWidth-this.width_:0,c=0;this.svgGroup_.setAttribute("transform","translate("+b+","+c+")");this.height_=a.viewHeight-c;this.setBackgroundPath_(this.width_,
		this.height_);this.scrollbar_&&this.scrollbar_.resize();this.svgGroup_.style.opacity=1}}};
		Blockly.VerticalFlyout.prototype.setBackgroundPath_=function(a,b){var c=this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT,d=["M 0,0"];d.push("h",a);d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,c?0:1,c?-this.CORNER_RADIUS:this.CORNER_RADIUS,this.CORNER_RADIUS);d.push("v",Math.max(0,b-2*this.CORNER_RADIUS));d.push("a",this.CORNER_RADIUS,this.CORNER_RADIUS,0,0,c?0:1,c?this.CORNER_RADIUS:-this.CORNER_RADIUS,this.CORNER_RADIUS);d.push("h",-a);d.push("z");this.svgBackground_.setAttribute("d",d.join(" "))};
		Blockly.VerticalFlyout.prototype.scrollToStart=function(){this.scrollbar_.set(0)};Blockly.VerticalFlyout.prototype.wheel_=function(a){var b=a.deltaY;if(b){goog.userAgent.GECKO&&(b*=10);var c=this.getMetrics_(),b=c.viewTop+b,b=Math.min(b,c.contentHeight-c.viewHeight),b=Math.max(b,0);this.scrollbar_.set(b)}a.preventDefault();a.stopPropagation()};
		Blockly.VerticalFlyout.prototype.clearOldBlocks_=function(){Blockly.VerticalFlyout.superClass_.clearOldBlocks_.call(this);for(var a=0,b;b=this.checkboxes_[a];a++)b.block.flyoutCheckbox=null,goog.dom.removeNode(b.svgRoot);this.checkboxes_=[]};Blockly.VerticalFlyout.prototype.addBlockListeners_=function(a,b,c){Blockly.VerticalFlyout.superClass_.addBlockListeners_.call(this,a,b,c);b.flyoutCheckbox&&this.listeners_.push(Blockly.bindEvent_(b.flyoutCheckbox.svgRoot,"mousedown",null,this.checkboxClicked_(b.flyoutCheckbox)))};
		Blockly.VerticalFlyout.prototype.layout_=function(a,b){for(var c=this.MARGIN,d=this.getWidth()/this.workspace_.scale,e=c,f=0,g;g=a[f];f++)if("block"==g.type){g=g.block;for(var h=g.getDescendants(),k=0,l;l=h[k];k++)l.isInFlyout=!0;h=g.getSvgRoot();k=g.getHeightWidth();l=g.getRelativeToSurfaceXY().x;var m=d-this.MARGIN;l=this.RTL?m-l:c;g.hasCheckboxInFlyout()&&(this.createCheckbox_(g,c,e,k),l=this.RTL?l-(this.CHECKBOX_SIZE+this.CHECKBOX_MARGIN):l+(this.CHECKBOX_SIZE+this.CHECKBOX_MARGIN));g.moveBy(l,
		e+(g.startHat_?Blockly.BlockSvg.START_HAT_HEIGHT:0));l=this.createRect_(g,l,e,k,f);this.addBlockListeners_(h,g,l);e+=k.height+b[f]}else"button"==g.type&&(g=g.button,h=g.createDom(),g.moveTo(c,e),g.show(),Blockly.bindEvent_(h,"mouseup",g,g.onMouseUp),this.buttons_.push(g),e+=g.height+b[f])};
		Blockly.VerticalFlyout.prototype.createRect_=function(a,b,c,d,e){b=Blockly.createSvgElement("rect",{"fill-opacity":0,x:b,y:c,height:d.height,width:d.width},null);b.tooltip=a;Blockly.Tooltip.bindMouseEvents(b);this.workspace_.getCanvas().insertBefore(b,a.getSvgRoot());a.flyoutRect_=b;return this.backgroundButtons_[e]=b};
		Blockly.VerticalFlyout.prototype.createCheckbox_=function(a,b,c,d){var e=a.getSvgRoot(),f=this.CHECKBOX_SIZE+this.CHECKBOX_MARGIN;b=Blockly.createSvgElement("rect",{"class":"blocklyFlyoutCheckbox",height:this.CHECKBOX_SIZE,width:this.CHECKBOX_SIZE,x:this.RTL?this.getWidth()/this.workspace_.scale-f:b,y:c+d.height/2-this.CHECKBOX_SIZE/2},null);c={svgRoot:b,clicked:!1,block:a};a.flyoutCheckbox=c;this.workspace_.getCanvas().insertBefore(b,e);this.checkboxes_.push(c)};
		Blockly.VerticalFlyout.prototype.checkboxClicked_=function(a){return function(b){a.clicked=!a.clicked;a.clicked?Blockly.addClass_(a.svgRoot,"checked"):Blockly.removeClass_(a.svgRoot,"checked");b.stopPropagation();b.preventDefault()}};Blockly.VerticalFlyout.prototype.setCheckboxState=function(a,b){var c=this.workspace_.getBlockById(a);if(!c)throw"No block found in the flyout for id "+a;c=c.flyoutCheckbox;c.clicked=b;c.clicked?Blockly.addClass_(c.svgRoot,"checked"):Blockly.removeClass_(c.svgRoot,"checked")};
		Blockly.VerticalFlyout.prototype.onMouseMove_=function(a){var b=this.getMetrics_();if(!(0>b.contentHeight-b.viewHeight)){var c=a.clientY-this.startDragMouseY_;this.startDragMouseY_=a.clientY;a=b.viewTop-c;a=goog.math.clamp(a,0,b.contentHeight-b.viewHeight);this.scrollbar_.set(a)}};
		Blockly.VerticalFlyout.prototype.isDragTowardWorkspace_=function(a,b){var c=Math.atan2(b,a)/Math.PI*180,d=!1,e=this.dragAngleRange_;if(this.toolboxPosition_==Blockly.TOOLBOX_AT_LEFT)c<e&&c>-e&&(d=!0);else if(c<-180+e||c>180-e)d=!0;return d};
		Blockly.VerticalFlyout.prototype.placeNewBlock_=function(a){var b=this.targetWorkspace_,c=a.getSvgRoot();if(!c)throw"originBlock is not rendered.";var c=Blockly.getSvgXY_(c,b),d=this.workspace_.scale,e=b.getMetrics();this.toolboxPosition_==Blockly.TOOLBOX_AT_RIGHT&&(scrollX=e.viewWidth-this.width_,c.x+=scrollX/d-scrollX);this.parentToolbox_&&(c.y+=this.parentToolbox_.getHeight()/b.scale-this.parentToolbox_.getHeight(),e=this.parentToolbox_.getWidth()/b.scale-this.parentToolbox_.getWidth(),c.x=this.toolboxPosition_==
		Blockly.TOOLBOX_AT_RIGHT?c.x+e:c.x-e);e=this.workspace_.scrollY;c.y+=e/d-e;a=Blockly.Xml.blockToDom(a);b.setResizesEnabled(!1);a=Blockly.Xml.domToBlock(a,b);e=a.getSvgRoot();if(!e)throw"block is not rendered.";e=Blockly.getSvgXY_(e,b);e.x+=b.scrollX/b.scale-b.scrollX;e.y+=b.scrollY/b.scale-b.scrollY;a.moveBy((d*c.x-b.scale*e.x)/b.scale,(d*c.y-b.scale*e.y)/b.scale);return a};
		Blockly.VerticalFlyout.prototype.getClientRect=function(){if(!this.svgGroup_)return null;var a=this.svgGroup_.getBoundingClientRect(),b=a.left,a=a.width;return this.toolboxPosition_==Blockly.TOOLBOX_AT_LEFT?new goog.math.Rect(b-1E9,-1E9,1E9+a,2E9):new goog.math.Rect(b,-1E9,1E9+a,2E9)};Blockly.VerticalFlyout.prototype.reflowInternal_=function(){};Blockly.Toolbox=function(a){this.workspace_=a;this.iconic_=!1;this.RTL=a.options.RTL;this.horizontalLayout_=a.options.horizontalLayout;this.toolboxPosition=a.options.toolboxPosition};Blockly.Toolbox.prototype.width=250;Blockly.Toolbox.prototype.height=0;Blockly.Toolbox.prototype.selectedItem_=null;
		Blockly.Toolbox.prototype.init=function(){var a=this.workspace_,b=this.workspace_.getParentSvg();this.HtmlDiv=goog.dom.createDom("DIV","blocklyToolboxDiv");this.HtmlDiv.setAttribute("dir",a.RTL?"RTL":"LTR");b.parentNode.insertBefore(this.HtmlDiv,b);Blockly.bindEvent_(this.HtmlDiv,"mousedown",this,function(a){Blockly.DropDownDiv.hide();Blockly.isRightButton(a)||a.target==this.HtmlDiv?Blockly.hideChaff(!1):Blockly.hideChaff(!0);Blockly.Touch.clearTouchIdentifier()});this.createFlyout_();this.categoryMenu_=
		new Blockly.Toolbox.CategoryMenu(this,this.HtmlDiv);this.populate_(a.options.languageTree);this.position()};Blockly.Toolbox.prototype.dispose=function(){this.flyout_.dispose();this.categoryMenu_.dispose();this.categoryMenu_=null;goog.dom.removeNode(this.HtmlDiv);this.lastCategory_=this.workspace_=null};
		Blockly.Toolbox.prototype.createFlyout_=function(){var a=this.workspace_,b={disabledPatternId:a.options.disabledPatternId,parentWorkspace:a,RTL:a.RTL,horizontalLayout:a.horizontalLayout,toolboxPosition:a.options.toolboxPosition};this.flyout_=a.horizontalLayout?new Blockly.HorizontalFlyout(b):new Blockly.VerticalFlyout(b);this.flyout_.setParentToolbox(this);goog.dom.insertSiblingAfter(this.flyout_.createDom(),a.svgGroup_);this.flyout_.init(a)};
		Blockly.Toolbox.prototype.populate_=function(a){this.categoryMenu_.populate(a);this.setSelectedItem(this.categoryMenu_.categories_[0])};Blockly.Toolbox.prototype.getWidth=function(){return this.width};Blockly.Toolbox.prototype.getHeight=function(){return this.categoryMenu_?this.categoryMenu_.getHeight():0};
		Blockly.Toolbox.prototype.position=function(){var a=this.HtmlDiv;if(a){var b=this.workspace_.getParentSvg(),b=Blockly.svgSize(b);this.horizontalLayout_?(a.style.left="0",a.style.height="auto",a.style.width=b.width+"px",this.height=a.offsetHeight,this.toolboxPosition==Blockly.TOOLBOX_AT_TOP?a.style.top="0":a.style.bottom="0"):(this.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT?a.style.right="0":a.style.left="0",a.style.height=this.getHeight()+"px",a.style.width=this.width+"px");this.flyout_.position()}};
		Blockly.Toolbox.prototype.clearSelection=function(){this.setSelectedItem(null)};
		Blockly.Toolbox.prototype.getClientRect=function(){if(!this.HtmlDiv)return null;var a=this.HtmlDiv.getBoundingClientRect(),b=a.left,c=a.top,d=a.width,a=a.height;return this.toolboxPosition==Blockly.TOOLBOX_AT_LEFT?new goog.math.Rect(-1E7,-1E7,1E7+b+d,2E7):this.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT?new goog.math.Rect(b,-1E7,1E7+d,2E7):this.toolboxPosition==Blockly.TOOLBOX_AT_TOP?new goog.math.Rect(-1E7,-1E7,2E7,1E7+c+a):new goog.math.Rect(0,c,2E7,1E7+d)};
		Blockly.Toolbox.prototype.refreshSelection=function(){var a=this.getSelectedItem();a&&a.getContents()&&this.flyout_.show(a.getContents())};Blockly.Toolbox.prototype.getSelectedItem=function(){return this.selectedItem_};Blockly.Toolbox.prototype.setSelectedItem=function(a){if(this.selectedItem_){if(this.selectedItem_==a)return;this.selectedItem_.setSelected(!1)}this.selectedItem_=a;null!=this.selectedItem_&&(this.selectedItem_.setSelected(!0),this.flyout_.show(a.getContents()),this.flyout_.scrollToStart())};
		Blockly.Toolbox.prototype.setSelectedItemFactory=function(a){return function(){this.setSelectedItem(a);Blockly.Touch.clearTouchIdentifier()}};Blockly.Toolbox.CategoryMenu=function(a,b){this.parent_=a;this.height_=0;this.parentHtml_=b;this.createDom();this.categories_=[]};Blockly.Toolbox.CategoryMenu.prototype.getHeight=function(){return this.height_};Blockly.Toolbox.CategoryMenu.prototype.createDom=function(){this.table=goog.dom.createDom("table","scratchCategoryMenu");this.parentHtml_.appendChild(this.table)};
		Blockly.Toolbox.CategoryMenu.prototype.populate=function(a){if(a){for(var b=[],c=0,d;d=a.childNodes[c];c++)d.tagName&&"CATEGORY"==d.tagName.toUpperCase()&&b.push(d);a=Math.ceil(b.length/2);for(c=0;c<a;c+=1){d=b[c];var e=goog.dom.createDom("tr","scratchCategoryMenuRow");this.table.appendChild(e);d&&this.categories_.push(new Blockly.Toolbox.Category(this,e,d));b[c+a]&&this.categories_.push(new Blockly.Toolbox.Category(this,e,b[c+a]))}this.height_=this.table.offsetHeight}};
		Blockly.Toolbox.CategoryMenu.prototype.dispose=function(){for(var a=0,b;b=this.categories_[a];a++)b.dispose();this.table&&(goog.dom.removeNode(this.table),this.table=null)};Blockly.Toolbox.Category=function(a,b,c){this.parent_=a;this.parentHtml_=b;this.name_=c.getAttribute("name");this.setColour(c);this.custom_=c.getAttribute("custom");this.contents_=[];this.custom_||this.parseContents_(c);this.createDom()};
		Blockly.Toolbox.Category.prototype.dispose=function(){this.item_&&(goog.dom.removeNode(this.item_),this.item=null);this.contents_=this.parentHtml_=this.parent_=null};
		Blockly.Toolbox.Category.prototype.createDom=function(){var a=this.parent_.parent_;this.item_=goog.dom.createDom("td",{"class":"scratchCategoryMenuItem"},this.name_);this.bubble_=goog.dom.createDom("div",{"class":a.RTL?"scratchCategoryItemBubbleRTL":"scratchCategoryItemBubbleLTR"});this.bubble_.style.backgroundColor=this.colour_;this.bubble_.style.borderColor=this.secondaryColour_;this.item_.appendChild(this.bubble_);this.parentHtml_.appendChild(this.item_);Blockly.bindEvent_(this.item_,"mousedown",
		a,a.setSelectedItemFactory(this))};Blockly.Toolbox.Category.prototype.setSelected=function(a){this.item_.className=a?"scratchCategoryMenuItem categorySelected":"scratchCategoryMenuItem"};Blockly.Toolbox.Category.prototype.parseContents_=function(a){for(var b=0,c;c=a.childNodes[b];b++)if(c.tagName)switch(c.tagName.toUpperCase()){case "BLOCK":case "SHADOW":case "BUTTON":case "TEXT":this.contents_.push(c)}};Blockly.Toolbox.Category.prototype.getContents=function(){return this.custom_?this.custom_:this.contents_};
		Blockly.Toolbox.Category.prototype.setColour=function(a){var b=a.getAttribute("colour");a=a.getAttribute("secondaryColour");goog.isString(b)?(b.match(/^#[0-9a-fA-F]{6}$/)?this.colour_=b:this.colour_=Blockly.hueToRgb(b),a.match(/^#[0-9a-fA-F]{6}$/)?this.secondaryColour_=a:this.secondaryColour_=Blockly.hueToRgb(a),this.hasColours_=!0):this.secondaryColour_=this.colour_="#000000"};Blockly.Css={};Blockly.Css.Cursor={OPEN:"handopen",CLOSED:"handclosed",DELETE:"handdelete"};Blockly.Css.currentCursor_="";Blockly.Css.styleSheet_=null;Blockly.Css.mediaPath_="";
		Blockly.Css.inject=function(a,b){if(!Blockly.Css.styleSheet_){var c=".blocklyDraggable {}\n";a&&(c+=Blockly.Css.CONTENT.join("\n"),Blockly.FieldDate&&(c+=Blockly.FieldDate.CSS.join("\n")));Blockly.Css.mediaPath_=b.replace(/[\\\/]$/,"");var c=c.replace(/<<<PATH>>>/g,Blockly.Css.mediaPath_),d;for(d in Blockly.Colours)Blockly.Colours.hasOwnProperty(d)&&(c=c.replace(new RegExp("\\$colour\\_"+d,"g"),Blockly.Colours[d]));d=document.createElement("style");document.head.appendChild(d);c=document.createTextNode(c);
		d.appendChild(c);Blockly.Css.styleSheet_=d.sheet;Blockly.Css.setCursor(Blockly.Css.Cursor.OPEN)}};
		Blockly.Css.setCursor=function(a){if(!(goog.userAgent.MOBILE||goog.userAgent.ANDROID||goog.userAgent.IPAD)&&Blockly.Css.currentCursor_!=a){Blockly.Css.currentCursor_=a;var b;b=a==Blockly.Css.Cursor.OPEN?"default":"url("+Blockly.Css.mediaPath_+"/"+a+".cur), auto";var c=".blocklyDraggable {\n  cursor: "+b+";\n}\n";Blockly.Css.styleSheet_.deleteRule(0);Blockly.Css.styleSheet_.insertRule(c,0);for(var c=document.getElementsByClassName("blocklyToolboxDiv"),d=0,e;e=c[d];d++)e.style.cursor=a==Blockly.Css.Cursor.DELETE?
		b:"";document.body.parentNode.style.cursor=a==Blockly.Css.Cursor.OPEN?"":b}};
		Blockly.Css.CONTENT=[".blocklySvg {","background-color: $colour_workspace;","outline: none;","overflow: hidden;","display: block;","}",".blocklyRelativeWrapper {","position: relative;","width: 100%;","height: 100%;","}",".blocklyWidgetDiv {","display: none;","position: absolute;","z-index: 99999;","}",".injectionDiv {","height: 100%;","position: relative;","}",".blocklyNonSelectable {","user-select: none;","-moz-user-select: none;","-webkit-user-select: none;","-ms-user-select: none;","}",".blocklyWidgetDiv.fieldTextInput {",
		"overflow: hidden;","border: 1px solid;","box-sizing: border-box;","transform-origin: 0 0;","-ms-transform-origin: 0 0;","-moz-transform-origin: 0 0;","-webkit-transform-origin: 0 0;","}",".blocklyTextDropDownArrow {","position: absolute;","}",".blocklyNonSelectable {","user-select: none;","-moz-user-select: none;","-webkit-user-select: none;","-ms-user-select: none;","}",".blocklyTooltipDiv {","background-color: #ffffc7;","border: 1px solid #ddc;","box-shadow: 4px 4px 20px 1px rgba(0,0,0,.15);",
		"color: #000;","display: none;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: 9pt;","opacity: 0.9;","padding: 2px;","position: absolute;","z-index: 100000;","}",".blocklyDragSurface {","display: none;","position: absolute;","top: 0;","left: 0;","right: 0;","bottom: 0;","overflow: visible !important;","z-index: 5000;","-webkit-backface-visibility: hidden;","backface-visibility: hidden;","-webkit-perspective: 1000;","perspective: 1000;","}",".blocklyDropDownDiv {","position: fixed;",
		"left: 0;","top: 0;","z-index: 1000;","display: none;","border: 1px solid;","border-radius: 4px;","box-shadow: 0px 0px 8px 1px "+Blockly.Colours.dropDownShadow+";","padding: 4px;","-webkit-user-select: none;","}",".blocklyDropDownContent {","max-height: 300px;","overflow: auto;","}",".blocklyDropDownArrow {","position: absolute;","left: 0;","top: 0;","width: 16px;","height: 16px;","z-index: -1;","background-color: inherit;","border-color: inherit;","}",".blocklyDropDownButton {","display: inline-block;",
		"float: left;","padding: 0;","margin: 4px;","border-radius: 4px;","outline: none;","border: 1px solid;","transition: box-shadow .1s;","cursor: pointer;","}",".blocklyDropDownButtonHover {","box-shadow: 0px 0px 0px 4px "+Blockly.Colours.fieldShadow+";","}",".blocklyDropDownButton:active {","box-shadow: 0px 0px 0px 6px "+Blockly.Colours.fieldShadow+";","}",".blocklyDropDownButton > img {","width: 80%;","height: 80%;","margin-top: 5%","}",".blocklyDropDownPlaceholder {","display: inline-block;","float: left;",
		"padding: 0;","margin: 4px;","}",".blocklyNumPadButton {","display: inline-block;","float: left;","padding: 0;","width: 48px;","height: 48px;","margin: 4px;","border-radius: 4px;","background: $colour_numPadBackground;","color: $colour_numPadText;","outline: none;","border: 1px solid $colour_numPadBorder;","cursor: pointer;","font-weight: 600;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: 12pt;","-webkit-tap-highlight-color: rgba(0,0,0,0);","}",".blocklyNumPadButton > img {",
		"margin-top: 10%;","width: 80%;","height: 80%;","}",".blocklyNumPadButton:active {","background: $colour_numPadActiveBackground;","-webkit-tap-highlight-color: rgba(0,0,0,0);","}",".arrowTop {","border-top: 1px solid;","border-left: 1px solid;","border-top-left-radius: 4px;","border-color: inherit;","}",".arrowBottom {","border-bottom: 1px solid;","border-right: 1px solid;","border-bottom-right-radius: 4px;","border-color: inherit;","}",".valueReportBox {","min-width: 50px;","max-width: 300px;","max-height: 200px;",
		"overflow: auto;","word-wrap: break-word;","text-align: center;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: .8em;","}",".blocklyResizeSE {","cursor: se-resize;","fill: #aaa;","}",".blocklyResizeSW {","cursor: sw-resize;","fill: #aaa;","}",".blocklyResizeLine {","stroke: #888;","stroke-width: 1;","}",".blocklyHighlightedConnectionPath {","fill: none;","stroke: #fc3;","stroke-width: 4px;","}",".blocklyPath {","stroke-width: 1px;","}",".blocklySelected>.blocklyPath {","}",".blocklyDragging>.blocklyPath {",
		"}",".blocklyDisabled>.blocklyPath {","fill-opacity: .5;","stroke-opacity: .5;","}",".blocklyText {","fill: #fff;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: 12pt;","font-weight: 500;","}",".blocklyTextTruncated {","font-size: 11pt;","}",".blocklyNonEditableText>text {","pointer-events: none;","}",".blocklyNonEditableText>text,",".blocklyEditableText>text {","fill: $colour_text;","}",".blocklyDropdownText {","fill: #fff !important;","}",".blocklyBubbleText {","fill: $colour_text;",
		"}",".blocklyFlyoutButton {","fill: #888;","cursor: default;","}",".blocklyFlyoutButtonShadow {","fill: #666;","}",".blocklyFlyoutButton:hover {","fill: #aaa;","}",".blocklySvg text {","user-select: none;","-moz-user-select: none;","-webkit-user-select: none;","cursor: inherit;","}",".blocklyHidden {","display: none;","}",".blocklyFieldDropdown:not(.blocklyHidden) {","display: block;","}",".blocklyIconGroup {","cursor: default;","}",".blocklyIconGroup:not(:hover),",".blocklyIconGroupReadonly {","opacity: .6;",
		"}",".blocklyIconShape {","fill: #00f;","stroke: #fff;","stroke-width: 1px;","}",".blocklyIconSymbol {","fill: #fff;","}",".blocklyMinimalBody {","margin: 0;","padding: 0;","}",".blocklyCommentTextarea {","background-color: #ffc;","border: 0;","margin: 0;","padding: 2px;","resize: none;","}",".blocklyHtmlInput {","border: none;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: 12pt;","height: 100%;","margin: 0;","outline: none;","box-sizing: border-box;","width: 100%;","text-align: center;",
		"color: $colour_text;","font-weight: 500;","}",".blocklyMainBackground {","stroke-width: 1;","stroke: #c6c6c6;","}",".blocklyMutatorBackground {","fill: #fff;","stroke: #ddd;","stroke-width: 1;","}",".blocklyFlyoutBackground {","fill: $colour_flyout;","fill-opacity: .8;","}",".blocklyScrollbarBackground {","opacity: 0;","}",".blocklyScrollbarHandle {","fill: $colour_scrollbar;","}",".blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,",".blocklyScrollbarHandle:hover {","fill: $colour_scrollbarHover;",
		"}",".blocklyZoom>image {","opacity: .4;","}",".blocklyZoom>image:hover {","opacity: .6;","}",".blocklyZoom>image:active {","opacity: .8;","}",".blocklyFlyout .blocklyScrollbarHandle {","fill: #bbb;","}",".blocklyFlyout .blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,",".blocklyFlyout .blocklyScrollbarHandle:hover {","fill: #aaa;","}",".blocklyInvalidInput {","background: #faa;","}",".blocklyAngleCircle {","stroke: #444;","stroke-width: 1;","fill: #ddd;","fill-opacity: .8;","}",".blocklyAngleMarks {",
		"stroke: #444;","stroke-width: 1;","}",".blocklyAngleGauge {","fill: #f88;","fill-opacity: .8;","}",".blocklyAngleLine {","stroke: #f00;","stroke-width: 2;","stroke-linecap: round;","}",".blocklyContextMenu {","border-radius: 4px;","}",".blocklyDropdownMenu {","padding: 0 !important;","}",".blocklyDropDownNumPad {","background-color: $colour_numPadBackground;","}",".blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,",".blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {","background: url(<<<PATH>>>/sprites.png) no-repeat -48px -16px !important;",
		"}",".blocklyToolboxDiv {","background-color: $colour_toolbox;","color: $colour_toolboxText;","overflow-x: visible;","overflow-y: auto;","position: absolute;","}",".blocklyTreeRoot {","padding: 4px 0;","}",".blocklyTreeRoot:focus {","outline: none;","}",".blocklyTreeRow {","height: 22px;","line-height: 22px;","margin-bottom: 3px;","padding-right: 8px;","white-space: nowrap;","}",".blocklyHorizontalTree {","float: left;","margin: 1px 5px 8px 0;","}",".blocklyHorizontalTreeRtl {","float: right;","margin: 1px 0 8px 5px;",
		"}",'.blocklyToolboxDiv[dir="RTL"] .blocklyTreeRow {',"margin-left: 8px;","}",".blocklyTreeRow:not(.blocklyTreeSelected):hover {","background-color: #e4e4e4;","}",".blocklyTreeSeparator {","border-bottom: solid #e5e5e5 1px;","height: 0;","margin: 5px 0;","}",".blocklyTreeSeparatorHorizontal {","border-right: solid #e5e5e5 1px;","width: 0;","padding: 5px 0;","margin: 0 5px;","}",".blocklyTreeIcon {","background-image: url(<<<PATH>>>/sprites.png);","height: 16px;","vertical-align: middle;","width: 16px;",
		"}",".blocklyTreeIconClosedLtr {","background-position: -32px -1px;","}",".blocklyTreeIconClosedRtl {","background-position: 0px -1px;","}",".blocklyTreeIconOpen {","background-position: -16px -1px;","}",".blocklyTreeSelected>.blocklyTreeIconClosedLtr {","background-position: -32px -17px;","}",".blocklyTreeSelected>.blocklyTreeIconClosedRtl {","background-position: 0px -17px;","}",".blocklyTreeSelected>.blocklyTreeIconOpen {","background-position: -16px -17px;","}",".blocklyTreeIconNone,",".blocklyTreeSelected>.blocklyTreeIconNone {",
		"background-position: -48px -1px;","}",".blocklyTreeLabel {","cursor: default;",'font-family: "Helvetica Neue", Helvetica, sans-serif;',"font-size: 16px;","padding: 0 3px;","vertical-align: middle;","}",".blocklyTreeSelected .blocklyTreeLabel {","color: #fff;","}",".blocklyWidgetDiv .goog-palette {","outline: none;","cursor: default;","}",".blocklyWidgetDiv .goog-palette-table {","border-collapse: collapse;","}",".blocklyWidgetDiv .goog-palette-cell {","height: 13px;","width: 15px;","margin: 0;",
		"border: 0;","text-align: center;","vertical-align: middle;","font-size: 1px;","}",".blocklyWidgetDiv .goog-palette-colorswatch {","position: relative;","height: 13px;","width: 15px;","}",".blocklyWidgetDiv .goog-palette-cell-hover .goog-palette-colorswatch {","border: 1px solid #FFF;","box-sizing: border-box;","}",".blocklyWidgetDiv .goog-palette-cell-selected .goog-palette-colorswatch {","border: 1px solid #000;","box-sizing: border-box;","color: #fff;","}",".blocklyWidgetDiv .goog-menu {","background: #fff;",
		"border-color: #ccc #666 #666 #ccc;","border-style: solid;","border-width: 1px;","cursor: default;",'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',"margin: 0;","outline: none;","padding: 4px 0;","position: absolute;","overflow-y: auto;","overflow-x: hidden;","max-height: 100%;","z-index: 20000;","}",".blocklyDropDownDiv .goog-menu {","cursor: default;",'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',"outline: none;","z-index: 20000;","}",".blocklyWidgetDiv .goog-menuitem {",
		"color: #000;",'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',"list-style: none;","margin: 0;","padding: 4px 7em 4px 28px;","white-space: nowrap;","}",".blocklyDropDownDiv .goog-menuitem {","color: #fff;",'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',"font-weight: bold;","list-style: none;","margin: 0;","padding: 4px 7em 4px 28px;","white-space: nowrap;","}",".blocklyWidgetDiv .goog-menuitem.goog-menuitem-rtl, ",".blocklyDropDownDiv .goog-menuitem.goog-menuitem-rtl {",
		"padding-left: 7em;","padding-right: 28px;","}",".blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,",".blocklyWidgetDiv .goog-menu-noicon .goog-menuitem, ",".blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,",".blocklyDropDownDiv .goog-menu-noicon .goog-menuitem { ","padding-left: 12px;","}",".blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem, ",".blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem {","padding-right: 20px;","}",".blocklyWidgetDiv .goog-menuitem-content ",".blocklyDropDownDiv .goog-menuitem-content {",
		"color: #000;",'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',"}",".blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,",".blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content, ",".blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,",".blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content {","color: #ccc !important;","}",".blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon, ",".blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon {",
		"opacity: 0.3;","-moz-opacity: 0.3;","filter: alpha(opacity=30);","}",".blocklyWidgetDiv .goog-menuitem-highlight,",".blocklyWidgetDiv .goog-menuitem-hover {","background-color: #d6e9f8;","border-color: #d6e9f8;","border-style: dotted;","border-width: 1px 0;","padding-bottom: 3px;","padding-top: 3px;","}",".blocklyDropDownDiv .goog-menuitem-highlight,",".blocklyDropDownDiv .goog-menuitem-hover {","background-color: rgba(0, 0, 0, 0.2);","}",".blocklyWidgetDiv .goog-menuitem-checkbox,",".blocklyWidgetDiv .goog-menuitem-icon, ",
		".blocklyDropDownDiv .goog-menuitem-checkbox,",".blocklyDropDownDiv .goog-menuitem-icon {","background-repeat: no-repeat;","height: 16px;","left: 6px;","position: absolute;","right: auto;","vertical-align: middle;","width: 16px;","}",".blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,",".blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,",".blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,",".blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon {","background: url(<<<PATH>>>/sprites.png) no-repeat -48px -16px !important;",
		"position: static;","float: left;","margin-left: -24px;","}",".blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,",".blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,",".blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,",".blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon {","float: right;","margin-left: 6px;","}",".blocklyWidgetDiv .goog-menuitem-accel, ",".blocklyDropDownDiv .goog-menuitem-accel {","color: #999;","direction: ltr;","left: auto;","padding: 0 6px;",
		"position: absolute;","right: 0;","text-align: right;","}",".blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel, ",".blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel {","left: 0;","right: auto;","text-align: left;","}",".blocklyWidgetDiv .goog-menuitem-mnemonic-hint, ",".blocklyDropDownDiv .goog-menuitem-mnemonic-hint {","text-decoration: underline;","}",".blocklyWidgetDiv .goog-menuitem-mnemonic-separator, ",".blocklyDropDownDiv .goog-menuitem-mnemonic-separator {","color: #999;",
		"font-size: 12px;","padding-left: 4px;","}",".blocklyWidgetDiv .goog-menuseparator, ",".blocklyDropDownDiv .goog-menuseparator {","border-top: 1px solid #ccc;","margin: 4px 0;","padding: 0;","}",".blocklyFlyoutCheckbox {","fill: red;","}",".blocklyFlyoutCheckbox.checked {","fill: blue;","}",".scratchCategoryMenu {","width: 250px;","background: $colour_toolbox;","color: $colour_toolboxText;","font-size: .9em;","user-select: none;","-webkit-user-select: none;","-moz-user-select: none;","-ms-user-select: none;",
		"}",".scratchCategoryRow {","width: 50%;","}",".scratchCategoryMenuItem {","padding: 4px;","width: 50%;","cursor: pointer;","}",".scratchCategoryMenuItem.categorySelected {","background: $colour_toolboxSelected;","border-radius: 16px;","}",".scratchCategoryItemBubbleLTR {","width: 14px;","height: 14px;","border: 1px solid;","border-radius: 8px;","float: left;","margin-right: 8px;","}",".scratchCategoryItemBubbleRTL {","width: 14px;","height: 14px;","border: 1px solid;","border-radius: 8px;","float: right;",
		"margin-left: 8px;","}",".scratchCategoryMenuItem:hover {","color: $colour_toolboxHover !important;","}",""];Blockly.WidgetDiv={};Blockly.WidgetDiv.DIV=null;Blockly.WidgetDiv.owner_=null;Blockly.WidgetDiv.dispose_=null;Blockly.WidgetDiv.disposeAnimationFinished_=null;Blockly.WidgetDiv.disposeAnimationTimer_=null;Blockly.WidgetDiv.disposeAnimationTimerLength_=0;Blockly.WidgetDiv.createDom=function(){Blockly.WidgetDiv.DIV||(Blockly.WidgetDiv.DIV=goog.dom.createDom("DIV","blocklyWidgetDiv"),document.body.appendChild(Blockly.WidgetDiv.DIV))};
		Blockly.WidgetDiv.show=function(a,b,c,d,e){Blockly.WidgetDiv.hide();Blockly.WidgetDiv.owner_=a;Blockly.WidgetDiv.dispose_=c;Blockly.WidgetDiv.disposeAnimationFinished_=d;Blockly.WidgetDiv.disposeAnimationTimerLength_=e;a=goog.style.getViewportPageOffset(document);Blockly.WidgetDiv.DIV.style.top=a.y+"px";Blockly.WidgetDiv.DIV.style.direction=b?"rtl":"ltr";Blockly.WidgetDiv.DIV.style.display="block"};
		Blockly.WidgetDiv.hide=function(a){Blockly.WidgetDiv.disposeAnimationTimer_?(window.clearTimeout(Blockly.WidgetDiv.disposeAnimationTimer_),Blockly.WidgetDiv.disposeAnimationFinished_&&Blockly.WidgetDiv.disposeAnimationFinished_(),Blockly.WidgetDiv.disposeAnimationFinished_=null,Blockly.WidgetDiv.disposeAnimationTimer_=null,Blockly.WidgetDiv.owner_=null,Blockly.WidgetDiv.hideAndClearDom_()):Blockly.WidgetDiv.isVisible()&&(Blockly.WidgetDiv.dispose_&&Blockly.WidgetDiv.dispose_(),Blockly.WidgetDiv.dispose_=
		null,Blockly.WidgetDiv.disposeAnimationFinished_&&!a?Blockly.WidgetDiv.disposeAnimationTimer_=window.setTimeout(Blockly.WidgetDiv.hide,1E3*Blockly.WidgetDiv.disposeAnimationTimerLength_):(Blockly.WidgetDiv.disposeAnimationFinished_&&Blockly.WidgetDiv.disposeAnimationFinished_(),Blockly.WidgetDiv.disposeAnimationFinished_=null,Blockly.WidgetDiv.owner_=null,Blockly.WidgetDiv.hideAndClearDom_()),Blockly.Events.setGroup(!1))};
		Blockly.WidgetDiv.hideAndClearDom_=function(){Blockly.WidgetDiv.DIV.style.display="none";Blockly.WidgetDiv.DIV.style.left="";Blockly.WidgetDiv.DIV.style.top="";Blockly.WidgetDiv.DIV.style.height="";goog.dom.removeChildren(Blockly.WidgetDiv.DIV)};Blockly.WidgetDiv.isVisible=function(){return!!Blockly.WidgetDiv.owner_};Blockly.WidgetDiv.hideIfOwner=function(a){Blockly.WidgetDiv.owner_==a&&Blockly.WidgetDiv.hide()};
		Blockly.WidgetDiv.position=function(a,b,c,d,e){b<d.y&&(b=d.y);e?a>c.width+d.x&&(a=c.width+d.x):a<d.x&&(a=d.x);Blockly.WidgetDiv.DIV.style.left=a+"px";Blockly.WidgetDiv.DIV.style.top=b+"px";Blockly.WidgetDiv.DIV.style.height=c.height+"px"};Blockly.DragSurfaceSvg=function(a){this.container_=a};Blockly.DragSurfaceSvg.prototype.SVG_=null;Blockly.DragSurfaceSvg.prototype.dragGroup_=null;Blockly.DragSurfaceSvg.prototype.container_=null;Blockly.DragSurfaceSvg.prototype.scale_=1;Blockly.DragSurfaceSvg.prototype.dragShadowFilterId_="";Blockly.DragSurfaceSvg.SHADOW_STD_DEVIATION=6;
		Blockly.DragSurfaceSvg.prototype.createDom=function(){if(!this.SVG_){this.SVG_=Blockly.createSvgElement("svg",{xmlns:Blockly.SVG_NS,"xmlns:html":Blockly.HTML_NS,"xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1","class":"blocklyDragSurface"},this.container_);var a=Blockly.createSvgElement("defs",{},this.SVG_);this.dragShadowFilterId_=this.createDropShadowDom_(a);this.dragGroup_=Blockly.createSvgElement("g",{},this.SVG_);this.dragGroup_.setAttribute("filter","url(#"+this.dragShadowFilterId_+
		")")}};
		Blockly.DragSurfaceSvg.prototype.createDropShadowDom_=function(a){a=Blockly.createSvgElement("filter",{id:"blocklyDragShadowFilter",height:"140%",width:"140%",y:"-20%",x:"-20%"},a);Blockly.createSvgElement("feGaussianBlur",{"in":"SourceAlpha",stdDeviation:Blockly.DragSurfaceSvg.SHADOW_STD_DEVIATION},a);var b=Blockly.createSvgElement("feComponentTransfer",{result:"offsetBlur"},a);Blockly.createSvgElement("feFuncA",{type:"linear",slope:Blockly.Colours.dragShadowOpacity},b);Blockly.createSvgElement("feComposite",{"in":"SourceGraphic",
		in2:"offsetBlur",operator:"over"},a);return a.id};Blockly.DragSurfaceSvg.prototype.setBlocksAndShow=function(a){goog.asserts.assert(0==this.dragGroup_.childNodes.length,"Already dragging a block.");this.dragGroup_.appendChild(a);this.SVG_.style.display="block"};
		Blockly.DragSurfaceSvg.prototype.translateAndScaleGroup=function(a,b,c){this.scale_=c;a=a.toFixed(2);b=b.toFixed(2);Blockly.is3dSupported()?this.dragGroup_.setAttribute("style","transform: translate3d("+a+"px, "+b+"px, 0px)scale3d("+c+","+c+","+c+")"):this.dragGroup_.setAttribute("transform","translate("+a+", "+b+") scale("+c+")")};
		Blockly.DragSurfaceSvg.prototype.translateSurface=function(a,b){a*=this.scale_;b*=this.scale_;a=a.toFixed(2);b=b.toFixed(2);Blockly.is3dSupported()?this.SVG_.setAttribute("style","transform: translate3d("+a+"px, "+b+"px, 0px); display: block;"):this.SVG_.setAttribute("transform","translate("+a+", "+b+")")};Blockly.DragSurfaceSvg.prototype.getSurfaceTranslation=function(){var a=Blockly.getRelativeXY_(this.SVG_);return new goog.math.Coordinate(a.x/this.scale_,a.y/this.scale_)};
		Blockly.DragSurfaceSvg.prototype.getGroup=function(){return this.dragGroup_};Blockly.DragSurfaceSvg.prototype.getCurrentBlock=function(){return this.dragGroup_.childNodes[0]};Blockly.DragSurfaceSvg.prototype.clearAndHide=function(a){a.appendChild(this.getCurrentBlock());this.SVG_.style.display="none";goog.asserts.assert(0==this.dragGroup_.childNodes.length,"Drag group was not cleared.")};Blockly.inject=function(a,b){goog.isString(a)&&(a=document.getElementById(a)||document.querySelector(a));if(!goog.dom.contains(document,a))throw"Error: container is not in current document.";var c=new Blockly.Options(b||{}),d=goog.dom.createDom("div","injectionDiv");a.appendChild(d);var e=Blockly.createDom_(d,c),d=new Blockly.DragSurfaceSvg(d);d.createDom();c=Blockly.createMainWorkspace_(e,c,d);Blockly.init_(c);c.markFocused();Blockly.bindEvent_(e,"focus",c,c.markFocused);Blockly.svgResize(c);return c};
		Blockly.createDom_=function(a,b){a.setAttribute("dir","LTR");goog.ui.Component.setDefaultRightToLeft(b.RTL);Blockly.Css.inject(b.hasCss,b.pathToMedia);var c=Blockly.createSvgElement("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:html":"http://www.w3.org/1999/xhtml","xmlns:xlink":"http://www.w3.org/1999/xlink",version:"1.1","class":"blocklySvg"},a),d=Blockly.createSvgElement("defs",{},c),e=String(Math.random()).substring(2),f=Blockly.createSvgElement("filter",{id:"blocklyStackGlowFilter",height:"160%",
		width:"180%",y:"-30%",x:"-40%"},d);b.stackGlowBlur=Blockly.createSvgElement("feGaussianBlur",{"in":"SourceGraphic",stdDeviation:Blockly.STACK_GLOW_RADIUS},f);var g=Blockly.createSvgElement("feComponentTransfer",{result:"outBlur"},f);Blockly.createSvgElement("feFuncA",{type:"table",tableValues:"0"+" 1".repeat(16)},g);Blockly.createSvgElement("feFlood",{"flood-color":Blockly.Colours.stackGlow,"flood-opacity":Blockly.Colours.stackGlowOpacity,result:"outColor"},f);Blockly.createSvgElement("feComposite",
		{"in":"outColor",in2:"outBlur",operator:"in",result:"outGlow"},f);Blockly.createSvgElement("feComposite",{"in":"SourceGraphic",in2:"outGlow",operator:"over"},f);f=Blockly.createSvgElement("filter",{id:"blocklyReplacementGlowFilter",height:"160%",width:"180%",y:"-30%",x:"-40%"},d);Blockly.createSvgElement("feGaussianBlur",{"in":"SourceGraphic",stdDeviation:Blockly.REPLACEMENT_GLOW_RADIUS},f);g=Blockly.createSvgElement("feComponentTransfer",{result:"outBlur"},f);Blockly.createSvgElement("feFuncA",{type:"table",
		tableValues:"0"+" 1".repeat(16)},g);Blockly.createSvgElement("feFlood",{"flood-color":Blockly.Colours.replacementGlow,"flood-opacity":Blockly.Colours.replacementGlowOpacity,result:"outColor"},f);Blockly.createSvgElement("feComposite",{"in":"outColor",in2:"outBlur",operator:"in",result:"outGlow"},f);Blockly.createSvgElement("feComposite",{"in":"SourceGraphic",in2:"outGlow",operator:"over"},f);g=Blockly.createSvgElement("pattern",{id:"blocklyDisabledPattern"+e,patternUnits:"userSpaceOnUse",width:10,
		height:10},d);Blockly.createSvgElement("rect",{width:10,height:10,fill:"#aaa"},g);Blockly.createSvgElement("path",{d:"M 0 0 L 10 10 M 10 0 L 0 10",stroke:"#cc0"},g);b.disabledPatternId=g.id;d=Blockly.createSvgElement("pattern",{id:"blocklyGridPattern"+e,patternUnits:"userSpaceOnUse"},d);0<b.gridOptions.length&&0<b.gridOptions.spacing&&(Blockly.createSvgElement("line",{stroke:b.gridOptions.colour},d),1<b.gridOptions.length&&Blockly.createSvgElement("line",{stroke:b.gridOptions.colour},d));b.gridPattern=
		d;return c};
		Blockly.createMainWorkspace_=function(a,b,c){b.parentWorkspace=null;var d=new Blockly.WorkspaceSvg(b,c);d.scale=b.zoomOptions.startScale;a.appendChild(d.createDom("blocklyMainBackground"));d.translate(0,0);d.markFocused();b.readOnly||b.hasScrollbars||d.addChangeListener(function(){if(Blockly.dragMode_==Blockly.DRAG_NONE){var a=d.getMetrics(),c=a.viewLeft+a.absoluteLeft,g=a.viewTop+a.absoluteTop;if(a.contentTop<g||a.contentTop+a.contentHeight>a.viewHeight+g||a.contentLeft<(b.RTL?a.viewLeft:c)||a.contentLeft+
		a.contentWidth>(b.RTL?a.viewWidth:a.viewWidth+c))for(var h=d.getTopBlocks(!1),k=0,l;l=h[k];k++){var m=l.getRelativeToSurfaceXY(),n=l.getHeightWidth(),p=g+25-n.height-m.y;0<p&&l.moveBy(0,p);p=g+a.viewHeight-25-m.y;0>p&&l.moveBy(0,p);p=25+c-m.x-(b.RTL?0:n.width);0<p&&l.moveBy(p,0);m=c+a.viewWidth-25-m.x+(b.RTL?n.width:0);0>m&&l.moveBy(m,0)}}});Blockly.svgResize(d);Blockly.WidgetDiv.createDom();Blockly.DropDownDiv.createDom();Blockly.Tooltip.createDom();return d};
		Blockly.init_=function(a){var b=a.options,c=a.getParentSvg();Blockly.bindEvent_(c,"contextmenu",null,function(a){Blockly.isTargetInput_(a)||a.preventDefault()});c=Blockly.bindEvent_(window,"resize",null,function(){Blockly.hideChaff(!0);Blockly.svgResize(a)});a.setResizeHandlerWrapper(c);Blockly.inject.bindDocumentEvents_();b.languageTree&&(a.toolbox_?a.toolbox_.init(a):a.flyout_&&(a.flyout_.init(a),a.flyout_.show(b.languageTree.childNodes),a.flyout_.scrollToStart(),b.horizontalLayout?(a.scrollY=a.flyout_.height_,
		b.toolboxPosition==Blockly.TOOLBOX_AT_BOTTOM&&(a.scrollY*=-1)):(a.scrollX=a.flyout_.width_,b.toolboxPosition==Blockly.TOOLBOX_AT_RIGHT&&(a.scrollX*=-1)),a.translate(a.scrollX,a.scrollY)));b.hasScrollbars&&(a.scrollbar=new Blockly.ScrollbarPair(a),a.scrollbar.resize());b.hasSounds&&Blockly.inject.loadSounds_(b.pathToMedia,a)};
		Blockly.inject.bindDocumentEvents_=function(){Blockly.documentEventsBound_||(Blockly.bindEvent_(document,"keydown",null,Blockly.onKeyDown_),Blockly.bindEvent_(document,"touchend",null,Blockly.longStop_),Blockly.bindEvent_(document,"touchcancel",null,Blockly.longStop_),document.addEventListener("mouseup",Blockly.onMouseUp_,!1),goog.userAgent.IPAD&&Blockly.bindEvent_(window,"orientationchange",document,function(){Blockly.svgResize(Blockly.getMainWorkspace())}));Blockly.documentEventsBound_=!0};
		Blockly.inject.loadSounds_=function(a,b){b.loadAudio_([a+"click.wav"],"click");b.loadAudio_([a+"delete.wav"],"delete");var c=[],d=function(){for(;c.length;)Blockly.unbindEvent_(c.pop());b.preloadAudio_()};c.push(Blockly.bindEvent_(document,"mousemove",null,d,!0));c.push(Blockly.bindEvent_(document,"touchstart",null,d,!0))};Blockly.updateToolbox=function(a){console.warn("Deprecated call to Blockly.updateToolbox, use workspace.updateToolbox instead.");Blockly.getMainWorkspace().updateToolbox(a)};var CLOSURE_DEFINES={"goog.DEBUG":!1};Blockly.mainWorkspace=null;Blockly.selected=null;Blockly.highlightedConnection_=null;Blockly.localConnection_=null;Blockly.draggingConnections_=[];Blockly.insertionMarkerConnection_=null;Blockly.insertionMarker_=null;Blockly.replacementMarker_=null;Blockly.bumpedConnection_=null;Blockly.clipboardXml_=null;Blockly.clipboardSource_=null;Blockly.dragMode_=Blockly.DRAG_NONE;Blockly.hueToRgb=function(a){return goog.color.hsvToHex(a,Blockly.HSV_SATURATION,255*Blockly.HSV_VALUE)};
		Blockly.svgSize=function(a){return{width:a.cachedWidth_,height:a.cachedHeight_}};Blockly.resizeSvgContents=function(a){a.resizeContents()};Blockly.svgResize=function(a){for(;a.options.parentWorkspace;)a=a.options.parentWorkspace;var b=a.getParentSvg(),c=b.parentNode;if(c){var d=c.offsetWidth,c=c.offsetHeight;b.cachedWidth_!=d&&(b.setAttribute("width",d+"px"),b.cachedWidth_=d);b.cachedHeight_!=c&&(b.setAttribute("height",c+"px"),b.cachedHeight_=c);a.resize()}};
		Blockly.onKeyDown_=function(a){if(!Blockly.mainWorkspace.options.readOnly&&!Blockly.isTargetInput_(a))if(27==a.keyCode)Blockly.hideChaff(),Blockly.DropDownDiv.hide();else if(8==a.keyCode||46==a.keyCode)a.preventDefault();else if(a.altKey||a.ctrlKey||a.metaKey)Blockly.selected&&Blockly.selected.isDeletable()&&Blockly.selected.isMovable()&&(67==a.keyCode?(Blockly.hideChaff(),Blockly.copy_(Blockly.selected)):88==a.keyCode&&(Blockly.copy_(Blockly.selected),Blockly.hideChaff(),Blockly.selected.dispose(Blockly.dragMode_!=
		Blockly.DRAG_FREE,!0),Blockly.highlightedConnection_&&(Blockly.highlightedConnection_.unhighlight(),Blockly.highlightedConnection_=null))),86==a.keyCode?Blockly.clipboardXml_&&(Blockly.Events.setGroup(!0),Blockly.clipboardSource_.paste(Blockly.clipboardXml_),Blockly.Events.setGroup(!1)):90==a.keyCode&&(Blockly.hideChaff(),Blockly.mainWorkspace.undo(a.shiftKey))};Blockly.terminateDrag_=function(){Blockly.BlockSvg.terminateDrag();Blockly.Flyout.terminateDrag_()};
		Blockly.copy_=function(a){var b=Blockly.Xml.blockToDom(a);Blockly.dragMode_!=Blockly.DRAG_FREE&&Blockly.Xml.deleteNext(b);var c=a.getRelativeToSurfaceXY();b.setAttribute("x",a.RTL?-c.x:c.x);b.setAttribute("y",c.y);Blockly.clipboardXml_=b;Blockly.clipboardSource_=a.workspace};Blockly.duplicate_=function(a){var b=Blockly.clipboardXml_,c=Blockly.clipboardSource_;Blockly.copy_(a);a.workspace.paste(Blockly.clipboardXml_);Blockly.clipboardXml_=b;Blockly.clipboardSource_=c};
		Blockly.onContextMenu_=function(a){Blockly.isTargetInput_(a)||a.preventDefault()};Blockly.hideChaff=function(a){Blockly.Tooltip.hide();Blockly.WidgetDiv.hide();a||(a=Blockly.getMainWorkspace(),a.toolbox_&&a.toolbox_.flyout_&&a.toolbox_.flyout_.autoClose&&a.toolbox_.clearSelection())};Blockly.getMainWorkspace=function(){return Blockly.mainWorkspace};goog.global.console||(goog.global.console={log:function(){},warn:function(){}});goog.global.Blockly||(goog.global.Blockly={});
		goog.global.Blockly.getMainWorkspace=Blockly.getMainWorkspace;

		/*** EXPORTS FROM exports-loader ***/
		exports["Blockly"] = (Blockly);
		exports["goog"] = (goog);
		}.call(window));

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(17);


	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		/*** IMPORTS FROM imports-loader ***/
		var Blockly = __webpack_require__(18);

		// Do not edit this file; automatically generated by build.py.
		'use strict';


		// Copyright 2016 Google Inc.  Apache License 2.0
		Blockly.constants={};Blockly.DRAG_RADIUS=3;Blockly.SNAP_RADIUS=48;Blockly.CONNECTING_SNAP_RADIUS=96;Blockly.CURRENT_CONNECTION_PREFERENCE=20;Blockly.BUMP_DELAY=0;Blockly.COLLAPSE_CHARS=30;Blockly.LONGPRESS=750;Blockly.SOUND_LIMIT=100;Blockly.HSV_SATURATION=.45;Blockly.HSV_VALUE=.65;Blockly.SPRITE={width:96,height:124,url:"sprites.png"};Blockly.SVG_NS="http://www.w3.org/2000/svg";Blockly.HTML_NS="http://www.w3.org/1999/xhtml";Blockly.INPUT_VALUE=1;Blockly.OUTPUT_VALUE=2;Blockly.NEXT_STATEMENT=3;
		Blockly.PREVIOUS_STATEMENT=4;Blockly.DUMMY_INPUT=5;Blockly.ALIGN_LEFT=-1;Blockly.ALIGN_CENTRE=0;Blockly.ALIGN_RIGHT=1;Blockly.DRAG_NONE=0;Blockly.DRAG_STICKY=1;Blockly.DRAG_BEGIN=1;Blockly.DRAG_FREE=2;Blockly.OPPOSITE_TYPE=[];Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE]=Blockly.OUTPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE]=Blockly.INPUT_VALUE;Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT]=Blockly.PREVIOUS_STATEMENT;Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT]=Blockly.NEXT_STATEMENT;
		Blockly.TOOLBOX_AT_TOP=0;Blockly.TOOLBOX_AT_BOTTOM=1;Blockly.TOOLBOX_AT_LEFT=2;Blockly.TOOLBOX_AT_RIGHT=3;Blockly.OUTPUT_SHAPE_HEXAGONAL=1;Blockly.OUTPUT_SHAPE_ROUND=2;Blockly.OUTPUT_SHAPE_SQUARE=3;Blockly.STACK_GLOW_RADIUS=1.3;Blockly.REPLACEMENT_GLOW_RADIUS=2;Blockly.Categories={motion:"motion",looks:"looks",sound:"sounds",pen:"pen",data:"data",event:"events",control:"control",sensing:"sensing",operators:"operators",more:"more"};
		// Copyright 2012 Google Inc.  Apache License 2.0
		Blockly.Blocks.colour={};function randomColour(){return"#"+("00000"+Math.floor(Math.random()*Math.pow(2,24)).toString(16)).substr(-6)}Blockly.Blocks.colour_picker={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_colour",name:"COLOUR",colour:randomColour()}],outputShape:Blockly.OUTPUT_SHAPE_ROUND,output:"Colour"})}};/*

		 Visual Blocks Editor

		 Copyright 2016 Massachusetts Institute of Technology
		 All rights reserved.

		 Licensed under the Apache License, Version 2.0 (the "License");
		 you may not use this file except in compliance with the License.
		 You may obtain a copy of the License at

		   http://www.apache.org/licenses/LICENSE-2.0

		 Unless required by applicable law or agreed to in writing, software
		 distributed under the License is distributed on an "AS IS" BASIS,
		 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 See the License for the specific language governing permissions and
		 limitations under the License.
		*/
		Blockly.Colours={motion:{primary:"#4C97FF",secondary:"#4280D7",tertiary:"#3373CC"},looks:{primary:"#9966FF",secondary:"#855CD6",tertiary:"#774DCB"},sounds:{primary:"#CF63CF",secondary:"#C94FC9",tertiary:"#BD42BD"},control:{primary:"#FFAB19",secondary:"#EC9C13",tertiary:"#CF8B17"},event:{primary:"#FFBF00",secondary:"#E6AC00",tertiary:"#CC9900"},sensing:{primary:"#5CB1D6",secondary:"#47A8D1",tertiary:"#2E8EB8"},pen:{primary:"#0fBD8C",secondary:"#0DA57A",tertiary:"#0B8E69"},operators:{primary:"#59C059",
		secondary:"#46B946",tertiary:"#389438"},data:{primary:"#FF8C1A",secondary:"#FF8000",tertiary:"#DB6E00"},more:{primary:"#FF6680",secondary:"#FF4D6A",tertiary:"#FF3355"},text:"#575E75",workspace:"#F5F8FF",toolboxHover:"#4C97FF",toolboxSelected:"#e9eef2",toolboxText:"#575E75",toolbox:"#FFFFFF",flyout:"#DDDDDD",scrollbar:"#CCCCCC",scrollbarHover:"#BBBBBB",textField:"#FFFFFF",insertionMarker:"#949494",insertionMarkerOpacity:.6,dragShadowOpacity:.3,stackGlow:"#FFF200",stackGlowOpacity:1,replacementGlow:"#FFFFFF",
		replacementGlowOpacity:1,colourPickerStroke:"#FFFFFF",fieldShadow:"rgba(0,0,0,0.1)",dropDownShadow:"rgba(0, 0, 0, .3)",numPadBackground:"#547AB2",numPadBorder:"#435F91",numPadActiveBackground:"#435F91",numPadText:"#FFFFFF",valueReportBackground:"#FFFFFF",valueReportBorder:"#AAAAAA"};Blockly.Blocks.math={};Blockly.Blocks.math_number={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_number",name:"NUM",value:"0"}],output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};Blockly.Blocks.math_integer={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_number",name:"NUM",precision:1}],output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};
		Blockly.Blocks.math_whole_number={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_number",name:"NUM",min:0,precision:1}],output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};Blockly.Blocks.math_positive_number={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_number",name:"NUM",min:0}],output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};
		Blockly.Blocks.math_angle={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_angle",name:"NUM",value:90}],output:"Number",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};Blockly.Blocks.texts={};Blockly.Blocks.text={init:function(){this.jsonInit({message0:"%1",args0:[{type:"field_input",name:"TEXT"}],output:"String",outputShape:Blockly.OUTPUT_SHAPE_ROUND,colour:Blockly.Colours.textField})}};

		/*** EXPORTS FROM exports-loader ***/
		module.exports = Blockly;


	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = __webpack_require__(14).Blockly;


	/***/ }
	/******/ ]);

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var BlocksComponent = function (_React$Component) {
	    _inherits(BlocksComponent, _React$Component);

	    function BlocksComponent() {
	        _classCallCheck(this, BlocksComponent);

	        return _possibleConstructorReturn(this, (BlocksComponent.__proto__ || Object.getPrototypeOf(BlocksComponent)).apply(this, arguments));
	    }

	    _createClass(BlocksComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var componentRef = _props.componentRef;

	            var props = _objectWithoutProperties(_props, ['componentRef']);

	            return React.createElement('div', _extends({
	                className: 'scratch-blocks',
	                ref: componentRef,
	                style: {
	                    position: 'absolute',
	                    top: 0,
	                    right: '40%',
	                    bottom: 0,
	                    left: 0
	                }
	            }, props));
	        }
	    }]);

	    return BlocksComponent;
	}(React.Component);

	BlocksComponent.propTypes = {
	    componentRef: React.PropTypes.func
	};

	module.exports = BlocksComponent;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var defaultsDeep = __webpack_require__(175);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);

	var VMManager = __webpack_require__(186);
	var MediaLibrary = __webpack_require__(187);
	var shapeFromPropTypes = __webpack_require__(195);

	var Blocks = __webpack_require__(174);
	var GUIComponent = __webpack_require__(196);
	var GreenFlag = __webpack_require__(197);
	var SpriteSelector = __webpack_require__(199);
	var Stage = __webpack_require__(201);
	var StopAll = __webpack_require__(204);

	var SpriteLibrary = __webpack_require__(206);
	var CostumeLibrary = __webpack_require__(235);
	var BackdropLibrary = __webpack_require__(236);

	var GUI = function (_React$Component) {
	    _inherits(GUI, _React$Component);

	    function GUI(props) {
	        _classCallCheck(this, GUI);

	        var _this = _possibleConstructorReturn(this, (GUI.__proto__ || Object.getPrototypeOf(GUI)).call(this, props));

	        bindAll(_this, ['closeModal']);
	        _this.vmManager = new VMManager(_this.props.vm);
	        _this.mediaLibrary = new MediaLibrary();
	        _this.state = { currentModal: null };
	        return _this;
	    }

	    _createClass(GUI, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.vmManager.attachKeyboardEvents();
	            this.props.vm.loadProject(this.props.projectData);
	            this.props.vm.start();
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (this.props.projectData !== nextProps.projectData) {
	                this.props.vm.loadProject(nextProps.projectData);
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.vmManager.detachKeyboardEvents();
	            this.props.vm.stopAll();
	        }
	    }, {
	        key: 'openModal',
	        value: function openModal(modalName) {
	            this.setState({ currentModal: modalName });
	        }
	    }, {
	        key: 'closeModal',
	        value: function closeModal() {
	            this.setState({ currentModal: null });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _props = this.props;
	            var backdropLibraryProps = _props.backdropLibraryProps;
	            var basePath = _props.basePath;
	            var blocksProps = _props.blocksProps;
	            var costumeLibraryProps = _props.costumeLibraryProps;
	            var greenFlagProps = _props.greenFlagProps;
	            var projectData = _props.projectData;
	            var spriteLibraryProps = _props.spriteLibraryProps;
	            var spriteSelectorProps = _props.spriteSelectorProps;
	            var stageProps = _props.stageProps;
	            var stopAllProps = _props.stopAllProps;
	            var vm = _props.vm;

	            var guiProps = _objectWithoutProperties(_props, ['backdropLibraryProps', 'basePath', 'blocksProps', 'costumeLibraryProps', 'greenFlagProps', 'projectData', 'spriteLibraryProps', 'spriteSelectorProps', 'stageProps', 'stopAllProps', 'vm']);

	            backdropLibraryProps = defaultsDeep({}, backdropLibraryProps, {
	                mediaLibrary: this.mediaLibrary,
	                onRequestClose: this.closeModal,
	                visible: this.state.currentModal === 'backdrop-library'
	            });
	            blocksProps = defaultsDeep({}, blocksProps, {
	                options: {
	                    media: basePath + 'static/blocks-media/'
	                }
	            });
	            costumeLibraryProps = defaultsDeep({}, costumeLibraryProps, {
	                mediaLibrary: this.mediaLibrary,
	                onRequestClose: this.closeModal,
	                visible: this.state.currentModal === 'costume-library'
	            });
	            spriteLibraryProps = defaultsDeep({}, spriteLibraryProps, {
	                mediaLibrary: this.mediaLibrary,
	                onRequestClose: this.closeModal,
	                visible: this.state.currentModal === 'sprite-library'
	            });
	            spriteSelectorProps = defaultsDeep({}, spriteSelectorProps, {
	                openNewBackdrop: function openNewBackdrop() {
	                    return _this2.openModal('backdrop-library');
	                },
	                openNewCostume: function openNewCostume() {
	                    return _this2.openModal('costume-library');
	                },
	                openNewSprite: function openNewSprite() {
	                    return _this2.openModal('sprite-library');
	                }
	            });
	            if (this.props.children) {
	                return React.createElement(
	                    GUIComponent,
	                    guiProps,
	                    this.props.children
	                );
	            }
	            /* eslint-disable react/jsx-max-props-per-line, lines-around-comment */
	            return React.createElement(
	                GUIComponent,
	                guiProps,
	                React.createElement(GreenFlag, _extends({ vm: vm }, greenFlagProps)),
	                React.createElement(StopAll, _extends({ vm: vm }, stopAllProps)),
	                React.createElement(Stage, _extends({ vm: vm }, stageProps)),
	                React.createElement(SpriteSelector, _extends({ vm: vm }, spriteSelectorProps)),
	                React.createElement(Blocks, _extends({ vm: vm }, blocksProps)),
	                React.createElement(SpriteLibrary, _extends({ vm: vm }, spriteLibraryProps)),
	                React.createElement(CostumeLibrary, _extends({ vm: vm }, costumeLibraryProps)),
	                React.createElement(BackdropLibrary, _extends({ vm: vm }, backdropLibraryProps))
	            );
	            /* eslint-enable react/jsx-max-props-per-line, lines-around-comment */
	        }
	    }]);

	    return GUI;
	}(React.Component);

	GUI.propTypes = {
	    backdropLibraryProps: shapeFromPropTypes(BackdropLibrary.propTypes, { omit: ['vm'] }),
	    basePath: React.PropTypes.string,
	    blocksProps: shapeFromPropTypes(Blocks.propTypes, { omit: ['vm'] }),
	    children: React.PropTypes.node,
	    costumeLibraryProps: shapeFromPropTypes(CostumeLibrary.propTypes, { omit: ['vm'] }),
	    greenFlagProps: shapeFromPropTypes(GreenFlag.propTypes, { omit: ['vm'] }),
	    projectData: React.PropTypes.string,
	    spriteLibraryProps: shapeFromPropTypes(SpriteLibrary.propTypes, { omit: ['vm'] }),
	    spriteSelectorProps: shapeFromPropTypes(SpriteSelector.propTypes, { omit: ['vm'] }),
	    stageProps: shapeFromPropTypes(Stage.propTypes, { omit: ['vm'] }),
	    stopAllProps: shapeFromPropTypes(StopAll.propTypes, { omit: ['vm'] }),
	    vm: React.PropTypes.instanceOf(VM)
	};

	GUI.defaultProps = {
	    backdropLibraryProps: {},
	    basePath: '/',
	    blocksProps: {},
	    costumeLibraryProps: {},
	    greenFlagProps: {},
	    spriteSelectorProps: {},
	    spriteLibraryProps: {},
	    stageProps: {},
	    stopAllProps: {},
	    vm: new VM()
	};

	module.exports = GUI;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var bindAll = __webpack_require__(1);

	var VMManager = function () {
	    function VMManager(vm) {
	        _classCallCheck(this, VMManager);

	        bindAll(this, ['attachKeyboardEvents', 'detachKeyboardEvents', 'onKeyDown', 'onKeyUp']);
	        this.vm = vm;
	    }

	    _createClass(VMManager, [{
	        key: 'attachKeyboardEvents',
	        value: function attachKeyboardEvents() {
	            // Feed keyboard events as VM I/O events.
	            document.addEventListener('keydown', this.onKeyDown);
	            document.addEventListener('keyup', this.onKeyUp);
	        }
	    }, {
	        key: 'detachKeyboardEvents',
	        value: function detachKeyboardEvents() {
	            document.removeEventListener('keydown', this.onKeyDown);
	            document.removeEventListener('keyup', this.onKeyUp);
	        }
	    }, {
	        key: 'onKeyDown',
	        value: function onKeyDown(e) {
	            // Don't capture keys intended for Blockly inputs.
	            if (e.target !== document && e.target !== document.body) {
	                return;
	            }
	            this.vm.postIOData('keyboard', {
	                keyCode: e.keyCode,
	                isDown: true
	            });
	            e.preventDefault();
	        }
	    }, {
	        key: 'onKeyUp',
	        value: function onKeyUp(e) {
	            // Always capture up events,
	            // even those that have switched to other targets.
	            this.vm.postIOData('keyboard', {
	                keyCode: e.keyCode,
	                isDown: false
	            });

	            // E.g., prevent scroll.
	            if (e.target !== document && e.target !== document.body) {
	                e.preventDefault();
	            }
	        }
	    }]);

	    return VMManager;
	}();

	module.exports = VMManager;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var xhr = __webpack_require__(188);

	var LIBRARY_PREFIX = 'https://cdn.scratch.mit.edu/scratchr2/static/' + '__8d9c95eb5aa1272a311775ca32568417__/medialibraries/';
	var LIBRARY_URL = {
	    sprite: LIBRARY_PREFIX + 'spriteLibrary.json',
	    costume: LIBRARY_PREFIX + 'costumeLibrary.json',
	    backdrop: LIBRARY_PREFIX + 'backdropLibrary.json'
	};
	var SPRITE_OBJECT_PREFIX = 'https://cdn.assets.scratch.mit.edu/internalapi/asset/';
	var SPRITE_OBJECT_SUFFIX = '/get/';

	var MediaLibrary = function () {
	    function MediaLibrary() {
	        _classCallCheck(this, MediaLibrary);

	        /*
	         * Cached library data, from JSON.
	         * @type {Object}
	         */
	        this._libraryData = {};

	        /**
	         * Cached sprite data, from JSON.
	         * @type {Object.<!string, Object>}
	         */
	        this._spriteData = {};
	    }

	    /**
	     * Get the media library data for a particular scratchr2 library.
	     * In the future, load this from `scratch-storage` asset manager,
	     * e.g., for offline support.
	     * @param {string} libraryType Type of library, i.e., sprite, costume, sound, backdrop.
	     * @param {!Function} callback Callback, called with list of data.
	     */


	    _createClass(MediaLibrary, [{
	        key: 'getMediaLibrary',
	        value: function getMediaLibrary(libraryType, callback) {
	            var _this = this;

	            if (!this._libraryData.hasOwnProperty(libraryType)) {
	                this._libraryData[libraryType] = null;
	            }
	            if (this._libraryData[libraryType]) {
	                callback(this._libraryData[libraryType]);
	            } else {
	                xhr.get({
	                    useXDR: true,
	                    url: LIBRARY_URL[libraryType]
	                }, function (err, response, body) {
	                    if (!err) {
	                        var data = JSON.parse(body);
	                        _this._libraryData[libraryType] = data;
	                        callback(_this._libraryData[libraryType]);
	                    }
	                });
	            }
	        }

	        /**
	         * Get media library info for a specific scratchr2 sprite.
	         * In the future, load this from `scratch-storage` asset manager,
	         * e.g., for offline support.
	         * @param {string} url URL to sprite (md5.json).
	         * @param {!Function} callback Callback, called with sprite data.
	         */

	    }, {
	        key: 'getSprite',
	        value: function getSprite(url, callback) {
	            var _this2 = this;

	            if (this._spriteData.hasOwnProperty(url)) {
	                callback(url, this._spriteData[url]);
	            } else {
	                xhr.get({
	                    useXDR: true,
	                    url: SPRITE_OBJECT_PREFIX + url + SPRITE_OBJECT_SUFFIX
	                }, function (err, response, body) {
	                    if (!err) {
	                        var data = JSON.parse(body);
	                        _this2._spriteData[url] = data;
	                        callback(url, data);
	                    }
	                });
	            }
	        }
	    }]);

	    return MediaLibrary;
	}();

	module.exports = MediaLibrary;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(189)
	var isFunction = __webpack_require__(190)
	var parseHeaders = __webpack_require__(191)
	var xtend = __webpack_require__(194)

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer

	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    xhr.send(body)

	    return xhr


	}

	function getXml(xhr) {
	    if (xhr.responseType === "document") {
	        return xhr.responseXML
	    }
	    var firefoxBugTakenEffect = xhr.status === 204 && xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	        return xhr.responseXML
	    }

	    return null
	}

	function noop() {}


/***/ },
/* 189 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 190 */
/***/ function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(192)
	  , forEach = __webpack_require__(193)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}

/***/ },
/* 192 */
/***/ function(module, exports) {

	
	exports = module.exports = trim;

	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}

	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};

	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(190)

	module.exports = forEach

	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty

	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }

	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}

	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}

	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}

	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}


/***/ },
/* 194 */
/***/ function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var React = __webpack_require__(2);

	module.exports = function shapeFromPropTypes(propTypes, opts) {
	    opts = Object.assign({}, opts, { omit: [] });
	    var shape = Object.keys(propTypes).filter(function (key) {
	        return opts.omit.indexOf(key) !== -1;
	    }).reduce(function (newPropTypes, key) {
	        newPropTypes[key] = propTypes[key];
	        return newPropTypes;
	    }, {});
	    return React.PropTypes.shape(shape);
	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var GUIComponent = function (_React$Component) {
	    _inherits(GUIComponent, _React$Component);

	    function GUIComponent() {
	        _classCallCheck(this, GUIComponent);

	        return _possibleConstructorReturn(this, (GUIComponent.__proto__ || Object.getPrototypeOf(GUIComponent)).apply(this, arguments));
	    }

	    _createClass(GUIComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var children = _props.children;

	            var props = _objectWithoutProperties(_props, ['children']);

	            return React.createElement(
	                'div',
	                _extends({
	                    className: 'scratch-gui',
	                    style: {
	                        position: 'absolute',
	                        top: 0,
	                        right: 0,
	                        bottom: 0,
	                        left: 0
	                    }
	                }, props),
	                children
	            );
	        }
	    }]);

	    return GUIComponent;
	}(React.Component);

	GUIComponent.propTypes = {
	    children: React.PropTypes.node
	};

	module.exports = GUIComponent;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);

	var VM = __webpack_require__(173);

	var GreenFlagComponent = __webpack_require__(198);

	var GreenFlag = function (_React$Component) {
	    _inherits(GreenFlag, _React$Component);

	    function GreenFlag(props) {
	        _classCallCheck(this, GreenFlag);

	        var _this = _possibleConstructorReturn(this, (GreenFlag.__proto__ || Object.getPrototypeOf(GreenFlag)).call(this, props));

	        bindAll(_this, ['handleClick']);
	        return _this;
	    }

	    _createClass(GreenFlag, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            e.preventDefault();
	            this.props.vm.greenFlag();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var vm = _props.vm;

	            var props = _objectWithoutProperties(_props, ['vm']);

	            return React.createElement(GreenFlagComponent, _extends({
	                onClick: this.handleClick
	            }, props));
	        }
	    }]);

	    return GreenFlag;
	}(React.Component);

	GreenFlag.propTypes = {
	    vm: React.PropTypes.instanceOf(VM)
	};

	module.exports = GreenFlag;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var GreenFlagComponent = function (_React$Component) {
	    _inherits(GreenFlagComponent, _React$Component);

	    function GreenFlagComponent() {
	        _classCallCheck(this, GreenFlagComponent);

	        return _possibleConstructorReturn(this, (GreenFlagComponent.__proto__ || Object.getPrototypeOf(GreenFlagComponent)).apply(this, arguments));
	    }

	    _createClass(GreenFlagComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var onClick = _props.onClick;
	            var title = _props.title;

	            var props = _objectWithoutProperties(_props, ['onClick', 'title']);

	            return React.createElement(
	                'div',
	                _extends({
	                    className: 'scratch-green-flag',
	                    style: {
	                        position: 'absolute',
	                        top: 380,
	                        right: 440,
	                        width: 50
	                    }
	                }, props),
	                React.createElement(
	                    'button',
	                    { onClick: onClick },
	                    title
	                )
	            );
	        }
	    }]);

	    return GreenFlagComponent;
	}(React.Component);

	GreenFlagComponent.propTypes = {
	    onClick: React.PropTypes.func,
	    title: React.PropTypes.string
	};

	GreenFlagComponent.defaultProps = {
	    title: 'Go'
	};

	module.exports = GreenFlagComponent;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);

	var SpriteSelectorComponent = __webpack_require__(200);

	var SpriteSelector = function (_React$Component) {
	    _inherits(SpriteSelector, _React$Component);

	    function SpriteSelector(props) {
	        _classCallCheck(this, SpriteSelector);

	        var _this = _possibleConstructorReturn(this, (SpriteSelector.__proto__ || Object.getPrototypeOf(SpriteSelector)).call(this, props));

	        bindAll(_this, ['handleChange', 'targetsUpdate']);
	        _this.state = {
	            targets: {
	                targetList: []
	            }
	        };
	        return _this;
	    }

	    _createClass(SpriteSelector, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.props.vm.on('targetsUpdate', this.targetsUpdate);
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(event) {
	            this.props.vm.setEditingTarget(event.target.value);
	        }
	    }, {
	        key: 'targetsUpdate',
	        value: function targetsUpdate(data) {
	            this.setState({ targets: data });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var vm = _props.vm;
	            var openNewSprite = _props.openNewSprite;
	            var openNewCostume = _props.openNewCostume;
	            var openNewBackdrop = _props.openNewBackdrop;

	            var props = _objectWithoutProperties(_props, ['vm', 'openNewSprite', 'openNewCostume', 'openNewBackdrop']);

	            return React.createElement(SpriteSelectorComponent, _extends({
	                openNewBackdrop: openNewBackdrop,
	                openNewCostume: openNewCostume,
	                openNewSprite: openNewSprite,
	                sprites: this.state.targets.targetList.map(function (target) {
	                    return {
	                        id: target[0],
	                        name: target[1]
	                    };
	                }),
	                value: this.state.targets.editingTarget && [this.state.targets.editingTarget],
	                onChange: this.handleChange
	            }, props));
	        }
	    }]);

	    return SpriteSelector;
	}(React.Component);

	SpriteSelector.propTypes = {
	    openNewBackdrop: React.PropTypes.func,
	    openNewCostume: React.PropTypes.func,
	    openNewSprite: React.PropTypes.func,
	    vm: React.PropTypes.instanceOf(VM)
	};

	module.exports = SpriteSelector;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var SpriteSelectorComponent = function (_React$Component) {
	    _inherits(SpriteSelectorComponent, _React$Component);

	    function SpriteSelectorComponent() {
	        _classCallCheck(this, SpriteSelectorComponent);

	        return _possibleConstructorReturn(this, (SpriteSelectorComponent.__proto__ || Object.getPrototypeOf(SpriteSelectorComponent)).apply(this, arguments));
	    }

	    _createClass(SpriteSelectorComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var onChange = _props.onChange;
	            var sprites = _props.sprites;
	            var value = _props.value;
	            var openNewSprite = _props.openNewSprite;
	            var openNewCostume = _props.openNewCostume;
	            var openNewBackdrop = _props.openNewBackdrop;

	            var props = _objectWithoutProperties(_props, ['onChange', 'sprites', 'value', 'openNewSprite', 'openNewCostume', 'openNewBackdrop']);

	            return React.createElement(
	                'div',
	                _extends({
	                    style: {
	                        position: 'absolute',
	                        top: 380,
	                        right: 10
	                    }
	                }, props),
	                React.createElement(
	                    'select',
	                    {
	                        multiple: true,
	                        value: value,
	                        onChange: onChange
	                    },
	                    sprites.map(function (sprite) {
	                        return React.createElement(
	                            'option',
	                            {
	                                key: sprite.id,
	                                value: sprite.id
	                            },
	                            sprite.name
	                        );
	                    })
	                ),
	                React.createElement(
	                    'p',
	                    null,
	                    React.createElement(
	                        'button',
	                        { onClick: openNewSprite },
	                        'New sprite'
	                    ),
	                    React.createElement(
	                        'button',
	                        { onClick: openNewCostume },
	                        'New costume'
	                    ),
	                    React.createElement(
	                        'button',
	                        { onClick: openNewBackdrop },
	                        'New backdrop'
	                    )
	                )
	            );
	        }
	    }]);

	    return SpriteSelectorComponent;
	}(React.Component);

	SpriteSelectorComponent.propTypes = {
	    onChange: React.PropTypes.func,
	    openNewBackdrop: React.PropTypes.func,
	    openNewCostume: React.PropTypes.func,
	    openNewSprite: React.PropTypes.func,
	    sprites: React.PropTypes.arrayOf(React.PropTypes.shape({
	        id: React.PropTypes.string,
	        name: React.PropTypes.string
	    })),
	    value: React.PropTypes.arrayOf(React.PropTypes.string)
	};

	module.exports = SpriteSelectorComponent;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var Renderer = __webpack_require__(202);
	var VM = __webpack_require__(173);

	var StageComponent = __webpack_require__(203);

	var Stage = function (_React$Component) {
	    _inherits(Stage, _React$Component);

	    function Stage(props) {
	        _classCallCheck(this, Stage);

	        var _this = _possibleConstructorReturn(this, (Stage.__proto__ || Object.getPrototypeOf(Stage)).call(this, props));

	        bindAll(_this, ['attachMouseEvents', 'detachMouseEvents', 'onMouseUp', 'onMouseMove', 'onMouseDown', 'animate', 'startAnimation', 'stopAnimation']);
	        return _this;
	    }

	    _createClass(Stage, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.renderer = new Renderer(this.canvas);
	            this.props.vm.attachRenderer(this.renderer);
	            this.attachMouseEvents(this.canvas);
	            this.startAnimation();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.detachMouseEvents(this.canvas);
	            this.stopAnimation();
	        }
	    }, {
	        key: 'attachMouseEvents',
	        value: function attachMouseEvents(canvas) {
	            document.addEventListener('mousemove', this.onMouseMove);
	            canvas.addEventListener('mouseup', this.onMouseUp);
	            canvas.addEventListener('mousedown', this.onMouseDown);
	        }
	    }, {
	        key: 'detachMouseEvents',
	        value: function detachMouseEvents(canvas) {
	            document.removeEventListener('mousemove', this.onMouseMove);
	            canvas.removeEventListener('mouseup', this.onMouseUp);
	            canvas.removeEventListener('mousedown', this.onMouseDown);
	        }
	    }, {
	        key: 'onMouseMove',
	        value: function onMouseMove(e) {
	            var rect = this.canvas.getBoundingClientRect();
	            var coordinates = {
	                x: e.clientX - rect.left,
	                y: e.clientY - rect.top,
	                canvasWidth: rect.width,
	                canvasHeight: rect.height
	            };
	            this.props.vm.postIOData('mouse', coordinates);
	        }
	    }, {
	        key: 'onMouseUp',
	        value: function onMouseUp(e) {
	            var rect = this.canvas.getBoundingClientRect();
	            var data = {
	                isDown: false,
	                x: e.clientX - rect.left,
	                y: e.clientY - rect.top,
	                canvasWidth: rect.width,
	                canvasHeight: rect.height
	            };
	            this.props.vm.postIOData('mouse', data);
	            e.preventDefault();
	        }
	    }, {
	        key: 'onMouseDown',
	        value: function onMouseDown(e) {
	            var rect = this.canvas.getBoundingClientRect();
	            var data = {
	                isDown: true,
	                x: e.clientX - rect.left,
	                y: e.clientY - rect.top,
	                canvasWidth: rect.width,
	                canvasHeight: rect.height
	            };
	            this.props.vm.postIOData('mouse', data);
	            e.preventDefault();
	        }
	    }, {
	        key: 'startAnimation',
	        value: function startAnimation() {
	            this.animationFrame = requestAnimationFrame(this.animate);
	        }
	    }, {
	        key: 'stopAnimation',
	        value: function stopAnimation() {
	            cancelAnimationFrame(this.animationFrame);
	        }
	    }, {
	        key: 'animate',
	        value: function animate() {
	            this.props.vm.animationFrame();
	            this.animationFrame = requestAnimationFrame(this.animate);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var _props = this.props;
	            var vm = _props.vm;

	            var props = _objectWithoutProperties(_props, ['vm']);

	            return React.createElement(StageComponent, _extends({
	                canvasRef: function canvasRef(canvas) {
	                    return _this2.canvas = canvas;
	                }
	            }, props));
	        }
	    }]);

	    return Stage;
	}(React.Component);

	Stage.propTypes = {
	    vm: React.PropTypes.instanceOf(VM)
	};

	Stage.defaultProps = {
	    vm: new VM()
	};

	module.exports = Stage;

/***/ },
/* 202 */
/***/ function(module, exports) {

	module.exports =
	/******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var RenderWebGL = __webpack_require__(1);

		/**
		 * Export for NPM / Node.js
		 */
		module.exports = RenderWebGL;

	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';

		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var hull = __webpack_require__(6);
		var twgl = __webpack_require__(11);

		var Drawable = __webpack_require__(12);
		var ShaderManager = __webpack_require__(25);

		var RenderWebGL =
		/**
		 * Create a renderer for drawing Scratch sprites to a canvas using WebGL.
		 * Coordinates will default to Scratch 2.0 values if unspecified.
		 * The stage's "native" size will be calculated from the these coordinates.
		 * For example, the defaults result in a native size of 480x360.
		 * Queries such as "touching color?" will always execute at the native size.
		 * @see setStageSize
		 * @see resize
		 * @param {canvas} canvas The canvas to draw onto.
		 * @param {int} [xLeft=-240] The x-coordinate of the left edge.
		 * @param {int} [xRight=240] The x-coordinate of the right edge.
		 * @param {int} [yBottom=-180] The y-coordinate of the bottom edge.
		 * @param {int} [yTop=180] The y-coordinate of the top edge.
		 * @constructor
		 */
		function RenderWebGL(canvas, xLeft, xRight, yBottom, yTop) {
		    _classCallCheck(this, RenderWebGL);

		    // TODO: remove?
		    twgl.setDefaults({ crossOrigin: true });

		    this._gl = twgl.getWebGLContext(canvas, { alpha: false, stencil: true });
		    this._drawables = [];
		    this._projection = twgl.m4.identity();

		    this._createGeometry();

		    this.setBackgroundColor(1, 1, 1);
		    this.setStageSize(xLeft || -240, xRight || 240, yBottom || -180, yTop || 180);
		    this.resize(this._nativeSize[0], this._nativeSize[1]);
		    this._createQueryBuffers();

		    var gl = this._gl;
		    gl.disable(gl.DEPTH_TEST);
		    gl.enable(gl.BLEND); // TODO: disable when no partial transparency?
		    gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);
		    this._shaderManager = new ShaderManager(gl);
		};

		module.exports = RenderWebGL;

		/**
		 * Maximum touch size for a picking check.
		 * TODO: Figure out a reasonable max size. Maybe this should be configurable?
		 * @type {int[]}
		 */
		RenderWebGL.MAX_TOUCH_SIZE = [3, 3];

		/**
		 * "touching {color}?" or "{color} touching {color}?" tests will be true if the
		 * target is touching a color whose components are each within this tolerance of
		 * the corresponding component of the query color.
		 * @type {int} between 0 (exact matches only) and 255 (match anything).
		 */
		RenderWebGL.TOLERANCE_TOUCHING_COLOR = 2;

		/********
		 * Functions called only locally: these are not available from a worker.
		 ********/

		/**
		 * Set the physical size of the stage in device-independent pixels.
		 * This will be multiplied by the device's pixel ratio on high-DPI displays.
		 * @param {int} pixelsWide The desired width in device-independent pixels.
		 * @param {int} pixelsTall The desired height in device-independent pixels.
		 */
		RenderWebGL.prototype.resize = function (pixelsWide, pixelsTall) {
		    var pixelRatio = window.devicePixelRatio || 1;
		    this._gl.canvas.width = pixelsWide * pixelRatio;
		    this._gl.canvas.height = pixelsTall * pixelRatio;
		};

		/**
		 * Set the background color for the stage. The stage will be cleared with this
		 * color each frame.
		 * @param {number} red The red component for the background.
		 * @param {number} green The green component for the background.
		 * @param {number} blue The blue component for the background.
		 */
		RenderWebGL.prototype.setBackgroundColor = function (red, green, blue) {
		    this._backgroundColor = [red, green, blue, 1];
		};

		/**
		 * Tell the renderer to draw various debug information to the provided canvas
		 * during certain operations.
		 * @param {canvas} canvas The canvas to use for debug output.
		 */
		RenderWebGL.prototype.setDebugCanvas = function (canvas) {
		    this._debugCanvas = canvas;
		};

		/**
		 * Set logical size of the stage in Scratch units.
		 * @param {int} xLeft The left edge's x-coordinate. Scratch 2 uses -240.
		 * @param {int} xRight The right edge's x-coordinate. Scratch 2 uses 240.
		 * @param {int} yBottom The bottom edge's y-coordinate. Scratch 2 uses -180.
		 * @param {int} yTop The top edge's y-coordinate. Scratch 2 uses 180.
		 */
		RenderWebGL.prototype.setStageSize = function (xLeft, xRight, yBottom, yTop) {
		    this._xLeft = xLeft;
		    this._xRight = xRight;
		    this._yBottom = yBottom;
		    this._yTop = yTop;
		    this._nativeSize = [Math.abs(xRight - xLeft), Math.abs(yBottom - yTop)];
		    this._projection = twgl.m4.ortho(xLeft, xRight, yBottom, yTop, -1, 1);
		};

		/**
		 * Create a new Drawable and add it to the scene.
		 * @returns {int} The ID of the new Drawable.
		 */
		RenderWebGL.prototype.createDrawable = function () {
		    var drawable = new Drawable(this._gl);
		    var drawableID = drawable.getID();
		    this._drawables.push(drawableID);
		    return drawableID;
		};

		/**
		 * Destroy a Drawable, removing it from the scene.
		 * @param {int} drawableID The ID of the Drawable to remove.
		 * @returns {Boolean} True iff the drawable was found and removed.
		 */
		RenderWebGL.prototype.destroyDrawable = function (drawableID) {
		    var index = this._drawables.indexOf(drawableID);
		    if (index >= 0) {
		        Drawable.getDrawableByID(drawableID).dispose();
		        this._drawables.splice(index, 1);
		        return true;
		    }
		    return false;
		};

		/**
		 * Set a drawable's order in the drawable list (effectively, z/layer).
		 * Can be used to move drawables to absolute positions in the list,
		 * or relative to their current positions.
		 * "go back N layers": setDrawableOrder(id, -N, true, 1); (assuming stage at 0).
		 * "go to back": setDrawableOrder(id, 1); (assuming stage at 0).
		 * "go to front": setDrawableOrder(id, Infinity);
		 * @param {int} drawableID ID of Drawable to reorder.
		 * @param {Number} order New absolute order or relative order adjusment.
		 * @param {Boolean=} opt_isRelative If set, `order` refers to a relative change.
		 * @param {Number=} opt_min If set, order constrained to be at least `opt_min`.
		 * @return {?Number} New order if changed, or null.
		 */
		RenderWebGL.prototype.setDrawableOrder = function (drawableID, order, opt_isRelative, opt_min) {
		    var oldIndex = this._drawables.indexOf(drawableID);
		    if (oldIndex >= 0) {
		        // Remove drawable from the list.
		        var drawable = this._drawables.splice(oldIndex, 1)[0];
		        // Determine new index.
		        var newIndex = order;
		        if (opt_isRelative) {
		            newIndex += oldIndex;
		        }
		        if (opt_min) {
		            newIndex = Math.max(newIndex, opt_min);
		        }
		        newIndex = Math.max(newIndex, 0);
		        // Insert at new index.
		        this._drawables.splice(newIndex, 0, drawable);
		        return this._drawables.indexOf(drawable);
		    }
		    return null;
		};

		/**
		 * Draw all current drawables and present the frame on the canvas.
		 */
		RenderWebGL.prototype.draw = function () {
		    var gl = this._gl;

		    twgl.bindFramebufferInfo(gl, null);
		    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
		    gl.clearColor.apply(gl, this._backgroundColor);
		    gl.clear(gl.COLOR_BUFFER_BIT);

		    this._drawThese(this._drawables, ShaderManager.DRAW_MODE.default, this._projection);
		};

		/**
		 * Get the precise bounds for a Drawable.
		 * @param {int} drawableID ID of Drawable to get bounds for.
		 * @return {Object} Bounds for a tight box around the Drawable.
		 */
		RenderWebGL.prototype.getBounds = function (drawableID) {
		    var drawable = Drawable.getDrawableByID(drawableID);
		    // Tell the Drawable about its updated convex hull, if necessary.
		    if (drawable.needsConvexHullPoints()) {
		        var points = this._getConvexHullPointsForDrawable(drawableID);
		        drawable.setConvexHullPoints(points);
		    }
		    var bounds = drawable.getBounds();
		    // In debug mode, draw the bounds.
		    if (this._debugCanvas) {
		        var gl = this._gl;
		        this._debugCanvas.width = gl.canvas.width;
		        this._debugCanvas.height = gl.canvas.height;
		        var context = this._debugCanvas.getContext('2d');
		        context.drawImage(gl.canvas, 0, 0);
		        context.strokeStyle = '#FF0000';
		        var pr = window.devicePixelRatio;
		        context.strokeRect(pr * (bounds.left + this._nativeSize[0] / 2), pr * (-bounds.top + this._nativeSize[1] / 2), pr * (bounds.right - bounds.left), pr * (-bounds.bottom + bounds.top));
		    }
		    return bounds;
		};

		/**
		 * Get the current skin (costume) size of a Drawable.
		 * @param {int} drawableID The ID of the Drawable to measure.
		 * @return {Array.<number>} Skin size, width and height.
		 */
		RenderWebGL.prototype.getSkinSize = function (drawableID) {
		    var drawable = Drawable.getDrawableByID(drawableID);
		    return drawable.getSkinSize();
		};

		/**
		 * Check if a particular Drawable is touching a particular color.
		 * @param {int} drawableID The ID of the Drawable to check.
		 * @param {int[]} color3b Test if the Drawable is touching this color.
		 * @param {int[]} [mask3b] Optionally mask the check to this part of Drawable.
		 * @returns {Boolean} True iff the Drawable is touching the color.
		 */
		RenderWebGL.prototype.isTouchingColor = function (drawableID, color3b, mask3b) {
		    var gl = this._gl;
		    twgl.bindFramebufferInfo(gl, this._queryBufferInfo);

		    var bounds = this._touchingBounds(drawableID);
		    if (!bounds) {
		        return;
		    }
		    var candidateIDs = this._filterCandidatesTouching(drawableID, this._drawables, bounds);
		    if (!candidateIDs) {
		        return;
		    }

		    // Limit size of viewport to the bounds around the target Drawable,
		    // and create the projection matrix for the draw.
		    gl.viewport(0, 0, bounds.width, bounds.height);
		    var projection = twgl.m4.ortho(bounds.left, bounds.right, bounds.bottom, bounds.top, -1, 1);

		    gl.clearColor.apply(gl, this._backgroundColor);
		    gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

		    var extraUniforms;
		    if (mask3b) {
		        extraUniforms = {
		            u_colorMask: [mask3b[0] / 255, mask3b[1] / 255, mask3b[2] / 255],
		            u_colorMaskTolerance: RenderWebGL.TOLERANCE_TOUCHING_COLOR / 255
		        };
		    }

		    try {
		        gl.enable(gl.STENCIL_TEST);
		        gl.stencilFunc(gl.ALWAYS, 1, 1);
		        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
		        gl.colorMask(false, false, false, false);
		        this._drawThese([drawableID], mask3b ? ShaderManager.DRAW_MODE.colorMask : ShaderManager.DRAW_MODE.silhouette, projection, undefined, extraUniforms);

		        gl.stencilFunc(gl.EQUAL, 1, 1);
		        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
		        gl.colorMask(true, true, true, true);

		        this._drawThese(candidateIDs, ShaderManager.DRAW_MODE.default, projection, function (testID) {
		            return testID != drawableID;
		        });
		    } finally {
		        gl.colorMask(true, true, true, true);
		        gl.disable(gl.STENCIL_TEST);
		    }

		    var pixels = new Buffer(bounds.width * bounds.height * 4);
		    gl.readPixels(0, 0, bounds.width, bounds.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

		    if (this._debugCanvas) {
		        this._debugCanvas.width = bounds.width;
		        this._debugCanvas.height = bounds.height;
		        var context = this._debugCanvas.getContext('2d');
		        var imageData = context.getImageData(0, 0, bounds.width, bounds.height);
		        for (var i = 0, bytes = pixels.length; i < bytes; ++i) {
		            imageData.data[i] = pixels[i];
		        }
		        context.putImageData(imageData, 0, 0);
		    }

		    for (var pixelBase = 0; pixelBase < pixels.length; pixelBase += 4) {
		        var pixelDistanceR = Math.abs(pixels[pixelBase] - color3b[0]);
		        var pixelDistanceG = Math.abs(pixels[pixelBase + 1] - color3b[1]);
		        var pixelDistanceB = Math.abs(pixels[pixelBase + 2] - color3b[2]);

		        if (pixelDistanceR <= RenderWebGL.TOLERANCE_TOUCHING_COLOR && pixelDistanceG <= RenderWebGL.TOLERANCE_TOUCHING_COLOR && pixelDistanceB <= RenderWebGL.TOLERANCE_TOUCHING_COLOR) {
		            return true;
		        }
		    }

		    return false;
		};

		/**
		 * Check if a particular Drawable is touching any in a set of Drawables.
		 * @param {int} drawableID The ID of the Drawable to check.
		 * @param {int[]} candidateIDs The Drawable IDs to check, otherwise all.
		 * @returns {Boolean} True iff the Drawable is touching one of candidateIDs.
		 */
		RenderWebGL.prototype.isTouchingDrawables = function (drawableID, candidateIDs) {
		    candidateIDs = candidateIDs || this._drawables;

		    var gl = this._gl;

		    twgl.bindFramebufferInfo(gl, this._queryBufferInfo);

		    var bounds = this._touchingBounds(drawableID);
		    if (!bounds) {
		        return;
		    }
		    candidateIDs = this._filterCandidatesTouching(drawableID, candidateIDs, bounds);
		    if (!candidateIDs) {
		        return;
		    }

		    // Limit size of viewport to the bounds around the target Drawable,
		    // and create the projection matrix for the draw.
		    gl.viewport(0, 0, bounds.width, bounds.height);
		    var projection = twgl.m4.ortho(bounds.left, bounds.right, bounds.bottom, bounds.top, -1, 1);

		    var noneColor = Drawable.color4fFromID(Drawable.NONE);
		    gl.clearColor.apply(gl, noneColor);
		    gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);

		    try {
		        gl.enable(gl.STENCIL_TEST);
		        gl.stencilFunc(gl.ALWAYS, 1, 1);
		        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
		        gl.colorMask(false, false, false, false);
		        this._drawThese([drawableID], ShaderManager.DRAW_MODE.silhouette, projection);

		        gl.stencilFunc(gl.EQUAL, 1, 1);
		        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
		        gl.colorMask(true, true, true, true);

		        this._drawThese(candidateIDs, ShaderManager.DRAW_MODE.silhouette, projection, function (testID) {
		            return testID != drawableID;
		        });
		    } finally {
		        gl.colorMask(true, true, true, true);
		        gl.disable(gl.STENCIL_TEST);
		    }

		    var pixels = new Buffer(bounds.width * bounds.height * 4);
		    gl.readPixels(0, 0, bounds.width, bounds.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

		    if (this._debugCanvas) {
		        this._debugCanvas.width = bounds.width;
		        this._debugCanvas.height = bounds.height;
		        var context = this._debugCanvas.getContext('2d');
		        var imageData = context.getImageData(0, 0, bounds.width, bounds.height);
		        for (var i = 0, bytes = pixels.length; i < bytes; ++i) {
		            imageData.data[i] = pixels[i];
		        }
		        context.putImageData(imageData, 0, 0);
		    }

		    for (var pixelBase = 0; pixelBase < pixels.length; pixelBase += 4) {
		        var pixelID = Drawable.color4bToID(pixels[pixelBase], pixels[pixelBase + 1], pixels[pixelBase + 2], pixels[pixelBase + 3]);
		        if (pixelID > Drawable.NONE) {
		            return true;
		        }
		    }

		    return false;
		};

		/**
		 * Detect which sprite, if any, is at the given location.
		 * @param {int} centerX The client x coordinate of the picking location.
		 * @param {int} centerY The client y coordinate of the picking location.
		 * @param {int} touchWidth The client width of the touch event (optional).
		 * @param {int} touchHeight The client height of the touch event (optional).
		 * @param {int[]} candidateIDs The Drawable IDs to pick from, otherwise all.
		 * @returns {int} The ID of the topmost Drawable under the picking location, or
		 * Drawable.NONE if there is no Drawable at that location.
		 */
		RenderWebGL.prototype.pick = function (centerX, centerY, touchWidth, touchHeight, candidateIDs) {
		    var gl = this._gl;

		    touchWidth = touchWidth || 1;
		    touchHeight = touchHeight || 1;
		    candidateIDs = candidateIDs || this._drawables;

		    var clientToGLX = gl.canvas.width / gl.canvas.clientWidth;
		    var clientToGLY = gl.canvas.height / gl.canvas.clientHeight;

		    centerX *= clientToGLX;
		    centerY *= clientToGLY;
		    touchWidth *= clientToGLX;
		    touchHeight *= clientToGLY;

		    touchWidth = Math.max(1, Math.min(touchWidth, RenderWebGL.MAX_TOUCH_SIZE[0]));
		    touchHeight = Math.max(1, Math.min(touchHeight, RenderWebGL.MAX_TOUCH_SIZE[1]));

		    var pixelLeft = Math.floor(centerX - Math.floor(touchWidth / 2) + 0.5);
		    var pixelRight = Math.floor(centerX + Math.ceil(touchWidth / 2) + 0.5);
		    var pixelTop = Math.floor(centerY - Math.floor(touchHeight / 2) + 0.5);
		    var pixelBottom = Math.floor(centerY + Math.ceil(touchHeight / 2) + 0.5);

		    twgl.bindFramebufferInfo(gl, this._pickBufferInfo);
		    gl.viewport(0, 0, touchWidth, touchHeight);

		    var noneColor = Drawable.color4fFromID(Drawable.NONE);
		    gl.clearColor.apply(gl, noneColor);
		    gl.clear(gl.COLOR_BUFFER_BIT);

		    var widthPerPixel = (this._xRight - this._xLeft) / this._gl.canvas.width;
		    var heightPerPixel = (this._yBottom - this._yTop) / this._gl.canvas.height;

		    var pickLeft = this._xLeft + pixelLeft * widthPerPixel;
		    var pickRight = this._xLeft + pixelRight * widthPerPixel;
		    var pickTop = this._yTop + pixelTop * heightPerPixel;
		    var pickBottom = this._yTop + pixelBottom * heightPerPixel;

		    var projection = twgl.m4.ortho(pickLeft, pickRight, pickTop, pickBottom, -1, 1);

		    this._drawThese(candidateIDs, ShaderManager.DRAW_MODE.silhouette, projection);

		    var pixels = new Buffer(touchWidth * touchHeight * 4);
		    gl.readPixels(0, 0, touchWidth, touchHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

		    if (this._debugCanvas) {
		        this._debugCanvas.width = touchWidth;
		        this._debugCanvas.height = touchHeight;
		        var context = this._debugCanvas.getContext('2d');
		        var imageData = context.getImageData(0, 0, touchWidth, touchHeight);
		        for (var i = 0, bytes = pixels.length; i < bytes; ++i) {
		            imageData.data[i] = pixels[i];
		        }
		        context.putImageData(imageData, 0, 0);
		    }

		    var hits = {};
		    for (var pixelBase = 0; pixelBase < pixels.length; pixelBase += 4) {
		        var pixelID = Drawable.color4bToID(pixels[pixelBase], pixels[pixelBase + 1], pixels[pixelBase + 2], pixels[pixelBase + 3]);
		        hits[pixelID] = (hits[pixelID] || 0) + 1;
		    }

		    // Bias toward selecting anything over nothing
		    hits[Drawable.NONE] = 0;

		    var hit = Drawable.NONE;
		    for (var hitID in hits) {
		        if (hits.hasOwnProperty(hitID) && hits[hitID] > hits[hit]) {
		            hit = hitID;
		        }
		    }

		    return hit | 0;
		};

		/**
		 * Get the candidate bounding box for a touching query.
		 * @param {int} drawableID ID for drawable of query.
		 * @return {?Rectangle} Rectangle bounds for touching query, or null.
		 */
		RenderWebGL.prototype._touchingBounds = function (drawableID) {
		    var drawable = Drawable.getDrawableByID(drawableID);
		    var bounds = drawable.getFastBounds();

		    // Limit queries to the stage size.
		    bounds.clamp(this._xLeft, this._xRight, this._yBottom, this._yTop);

		    // Use integer coordinates for queries - weird things happen
		    // when you provide float width/heights to gl.viewport and projection.
		    bounds.snapToInt();

		    if (bounds.width == 0 || bounds.height == 0) {
		        // No space to query.
		        return null;
		    }
		    return bounds;
		};

		/**
		 * Filter a list of candidates for a touching query into only those that
		 * could possibly intersect the given bounds.
		 * @param {int} drawableID ID for drawable of query.
		 * @param {Array.<int>} candidateIDs Candidates for touching query.
		 * @param {Rectangle} Bounds to limit candidates to.
		 * @return {?Array.<int>} Filtered candidateIDs, or null if none.
		 */
		RenderWebGL.prototype._filterCandidatesTouching = function (drawableID, candidateIDs, bounds) {
		    // Filter candidates by rough bounding box intersection.
		    // Do this before _drawThese, so we can prevent any GL operations
		    // and readback by returning early.
		    candidateIDs = candidateIDs.filter(function (testID) {
		        if (testID == drawableID) return false;
		        // Only draw items which could possibly overlap target Drawable.
		        var candidate = Drawable.getDrawableByID(testID);
		        var candidateBounds = candidate.getFastBounds();
		        return bounds.intersects(candidateBounds);
		    });
		    if (candidateIDs.length == 0) {
		        // No possible intersections based on bounding boxes.
		        return null;
		    }
		    return candidateIDs;
		};

		/**
		* Update the position, direction, scale, or effect properties of this Drawable.
		* @param {int} drawableID The ID of the Drawable to update.
		* @param {Object.<string,*>} properties The new property values to set.
		 */
		RenderWebGL.prototype.updateDrawableProperties = function (drawableID, properties) {
		    var drawable = Drawable.getDrawableByID(drawableID);
		    drawable.updateProperties(properties);
		};

		/********
		 * Truly internal functions: these support the functions above.
		 ********/

		/**
		 * Build geometry (vertex and index) buffers.
		 * @private
		 */
		RenderWebGL.prototype._createGeometry = function () {
		    var quad = {
		        a_position: {
		            numComponents: 2,
		            data: [-0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5]
		        },
		        a_texCoord: {
		            numComponents: 2,
		            data: [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1]
		        }
		    };
		    this._bufferInfo = twgl.createBufferInfoFromArrays(this._gl, quad);
		};

		/**
		 * Create the frame buffers used for queries such as picking and color-touching.
		 * These buffers are fixed in size regardless of the size of the main render
		 * target. The fixed size allows (more) consistent behavior across devices and
		 * presentation modes.
		 * @private
		 */
		RenderWebGL.prototype._createQueryBuffers = function () {
		    var gl = this._gl;
		    var attachments = [{ format: gl.RGBA }, { format: gl.DEPTH_STENCIL }];

		    this._pickBufferInfo = twgl.createFramebufferInfo(gl, attachments, RenderWebGL.MAX_TOUCH_SIZE[0], RenderWebGL.MAX_TOUCH_SIZE[1]);

		    // TODO: should we create this on demand to save memory?
		    // A 480x360 32-bpp buffer is 675 KiB.
		    this._queryBufferInfo = twgl.createFramebufferInfo(gl, attachments, this._nativeSize[0], this._nativeSize[1]);
		};

		/**
		 * Draw all Drawables, with the possible exception of
		 * @param {int[]} drawables The Drawable IDs to draw, possibly this._drawables.
		 * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
		 * @param {module:twgl/m4.Mat4} projection The projection matrix to use.
		 * @param {Drawable~idFilterFunc} [filter] An optional filter function.
		 * @param {Object.<string,*>} [extraUniforms] Extra uniforms for the shaders.
		 * @private
		 */
		RenderWebGL.prototype._drawThese = function (drawables, drawMode, projection, filter, extraUniforms) {

		    var gl = this._gl;
		    var currentShader = null;

		    var numDrawables = drawables.length;
		    for (var drawableIndex = 0; drawableIndex < numDrawables; ++drawableIndex) {
		        var drawableID = drawables[drawableIndex];

		        // If we have a filter, check whether the ID fails
		        if (filter && !filter(drawableID)) continue;

		        var drawable = Drawable.getDrawableByID(drawableID);
		        // TODO: check if drawable is inside the viewport before anything else

		        // Hidden drawables (e.g., by a "hide" block) are never drawn.
		        if (!drawable.getVisible()) continue;

		        var effectBits = drawable.getEnabledEffects();
		        var newShader = this._shaderManager.getShader(drawMode, effectBits);
		        if (currentShader != newShader) {
		            currentShader = newShader;
		            gl.useProgram(currentShader.program);
		            twgl.setBuffersAndAttributes(gl, currentShader, this._bufferInfo);
		            twgl.setUniforms(currentShader, { u_projectionMatrix: projection });
		            twgl.setUniforms(currentShader, { u_fudge: window.fudge || 0 });
		        }

		        twgl.setUniforms(currentShader, drawable.getUniforms());

		        // Apply extra uniforms after the Drawable's, to allow overwriting.
		        if (extraUniforms) {
		            twgl.setUniforms(currentShader, extraUniforms);
		        }

		        twgl.drawBufferInfo(gl, gl.TRIANGLES, this._bufferInfo);
		    }
		};

		/**
		 * Get the convex hull points for a particular Drawable.
		 * To do this, draw the Drawable unrotated, unscaled, and untranslated.
		 * Read back the pixels and find all boundary points.
		 * Finally, apply a convex hull algorithm to simplify the set.
		 * @param {int} drawablesID The Drawable IDs calculate convex hull for.
		 * @return {Array.<Array.<number>>} points Convex hull points, as [[x, y], ...]
		 */
		RenderWebGL.prototype._getConvexHullPointsForDrawable = function (drawableID) {
		    var drawable = Drawable.getDrawableByID(drawableID);

		    var _drawable$_uniforms$u = _slicedToArray(drawable._uniforms.u_skinSize, 2);

		    var width = _drawable$_uniforms$u[0];
		    var height = _drawable$_uniforms$u[1];
		    // No points in the hull if invisible or size is 0.

		    if (!drawable.getVisible() || width == 0 || height == 0) {
		        return [];
		    }

		    // Only draw to the size of the untransformed drawable.
		    var gl = this._gl;
		    twgl.bindFramebufferInfo(gl, this._queryBufferInfo);
		    gl.viewport(0, 0, width, height);

		    // Clear the canvas with Drawable.NONE.
		    var noneColor = Drawable.color4fFromID(Drawable.NONE);
		    gl.clearColor.apply(gl, noneColor);
		    gl.clear(gl.COLOR_BUFFER_BIT);

		    // Overwrite the model matrix to be unrotated, unscaled, untranslated.
		    var modelMatrix = twgl.m4.identity();
		    twgl.m4.rotateZ(modelMatrix, Math.PI, modelMatrix);
		    twgl.m4.scale(modelMatrix, [width, height], modelMatrix);

		    var projection = twgl.m4.ortho(-0.5 * width, 0.5 * width, -0.5 * height, 0.5 * height, -1, 1);

		    this._drawThese([drawableID], ShaderManager.DRAW_MODE.silhouette, projection, undefined, { u_modelMatrix: modelMatrix });

		    var pixels = new Buffer(width * height * 4);
		    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);

		    // Known boundary points on left/right edges of pixels.
		    var boundaryPoints = [];

		    /**
		     * Helper method to look up a pixel.
		     * @param {int} x X coordinate of the pixel in `pixels`.
		     * @param {int} y Y coordinate of the pixel in `pixels`.
		     * @return Known ID at that pixel, or Drawable.NONE.
		     */
		    var _getPixel = function _getPixel(x, y) {
		        var pixelBase = (width * y + x) * 4;
		        return Drawable.color4bToID(pixels[pixelBase], pixels[pixelBase + 1], pixels[pixelBase + 2], pixels[pixelBase + 3]);
		    };
		    for (var y = 0; y <= height; y++) {
		        // Scan from left.
		        for (var x = 0; x < width; x++) {
		            if (_getPixel(x, y) > Drawable.NONE) {
		                boundaryPoints.push([x, y]);
		                break;
		            }
		        }
		        // Scan from right.
		        for (var _x = width - 1; _x >= 0; _x--) {
		            if (_getPixel(_x, y) > Drawable.NONE) {
		                boundaryPoints.push([_x, y]);
		                break;
		            }
		        }
		    }
		    // Simplify boundary points using convex hull.
		    return hull(boundaryPoints, Infinity);
		};
		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
		 * The buffer module from node.js, for the browser.
		 *
		 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
		 * @license  MIT
		 */
		/* eslint-disable no-proto */

		'use strict'

		var base64 = __webpack_require__(3)
		var ieee754 = __webpack_require__(4)
		var isArray = __webpack_require__(5)

		exports.Buffer = Buffer
		exports.SlowBuffer = SlowBuffer
		exports.INSPECT_MAX_BYTES = 50

		/**
		 * If `Buffer.TYPED_ARRAY_SUPPORT`:
		 *   === true    Use Uint8Array implementation (fastest)
		 *   === false   Use Object implementation (most compatible, even IE6)
		 *
		 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
		 * Opera 11.6+, iOS 4.2+.
		 *
		 * Due to various browser bugs, sometimes the Object implementation will be used even
		 * when the browser supports typed arrays.
		 *
		 * Note:
		 *
		 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
		 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
		 *
		 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
		 *
		 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
		 *     incorrect length in some situations.

		 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
		 * get the Object implementation, which is slower but behaves correctly.
		 */
		Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
		  ? global.TYPED_ARRAY_SUPPORT
		  : typedArraySupport()

		/*
		 * Export kMaxLength after typed array support is determined.
		 */
		exports.kMaxLength = kMaxLength()

		function typedArraySupport () {
		  try {
		    var arr = new Uint8Array(1)
		    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
		    return arr.foo() === 42 && // typed array instances can be augmented
		        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
		        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
		  } catch (e) {
		    return false
		  }
		}

		function kMaxLength () {
		  return Buffer.TYPED_ARRAY_SUPPORT
		    ? 0x7fffffff
		    : 0x3fffffff
		}

		function createBuffer (that, length) {
		  if (kMaxLength() < length) {
		    throw new RangeError('Invalid typed array length')
		  }
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = new Uint8Array(length)
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    if (that === null) {
		      that = new Buffer(length)
		    }
		    that.length = length
		  }

		  return that
		}

		/**
		 * The Buffer constructor returns instances of `Uint8Array` that have their
		 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
		 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
		 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
		 * returns a single octet.
		 *
		 * The `Uint8Array` prototype remains unmodified.
		 */

		function Buffer (arg, encodingOrOffset, length) {
		  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
		    return new Buffer(arg, encodingOrOffset, length)
		  }

		  // Common case.
		  if (typeof arg === 'number') {
		    if (typeof encodingOrOffset === 'string') {
		      throw new Error(
		        'If encoding is specified then the first argument must be a string'
		      )
		    }
		    return allocUnsafe(this, arg)
		  }
		  return from(this, arg, encodingOrOffset, length)
		}

		Buffer.poolSize = 8192 // not used by this implementation

		// TODO: Legacy, not needed anymore. Remove in next major version.
		Buffer._augment = function (arr) {
		  arr.__proto__ = Buffer.prototype
		  return arr
		}

		function from (that, value, encodingOrOffset, length) {
		  if (typeof value === 'number') {
		    throw new TypeError('"value" argument must not be a number')
		  }

		  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
		    return fromArrayBuffer(that, value, encodingOrOffset, length)
		  }

		  if (typeof value === 'string') {
		    return fromString(that, value, encodingOrOffset)
		  }

		  return fromObject(that, value)
		}

		/**
		 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
		 * if value is a number.
		 * Buffer.from(str[, encoding])
		 * Buffer.from(array)
		 * Buffer.from(buffer)
		 * Buffer.from(arrayBuffer[, byteOffset[, length]])
		 **/
		Buffer.from = function (value, encodingOrOffset, length) {
		  return from(null, value, encodingOrOffset, length)
		}

		if (Buffer.TYPED_ARRAY_SUPPORT) {
		  Buffer.prototype.__proto__ = Uint8Array.prototype
		  Buffer.__proto__ = Uint8Array
		  if (typeof Symbol !== 'undefined' && Symbol.species &&
		      Buffer[Symbol.species] === Buffer) {
		    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
		    Object.defineProperty(Buffer, Symbol.species, {
		      value: null,
		      configurable: true
		    })
		  }
		}

		function assertSize (size) {
		  if (typeof size !== 'number') {
		    throw new TypeError('"size" argument must be a number')
		  } else if (size < 0) {
		    throw new RangeError('"size" argument must not be negative')
		  }
		}

		function alloc (that, size, fill, encoding) {
		  assertSize(size)
		  if (size <= 0) {
		    return createBuffer(that, size)
		  }
		  if (fill !== undefined) {
		    // Only pay attention to encoding if it's a string. This
		    // prevents accidentally sending in a number that would
		    // be interpretted as a start offset.
		    return typeof encoding === 'string'
		      ? createBuffer(that, size).fill(fill, encoding)
		      : createBuffer(that, size).fill(fill)
		  }
		  return createBuffer(that, size)
		}

		/**
		 * Creates a new filled Buffer instance.
		 * alloc(size[, fill[, encoding]])
		 **/
		Buffer.alloc = function (size, fill, encoding) {
		  return alloc(null, size, fill, encoding)
		}

		function allocUnsafe (that, size) {
		  assertSize(size)
		  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) {
		    for (var i = 0; i < size; ++i) {
		      that[i] = 0
		    }
		  }
		  return that
		}

		/**
		 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
		 * */
		Buffer.allocUnsafe = function (size) {
		  return allocUnsafe(null, size)
		}
		/**
		 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
		 */
		Buffer.allocUnsafeSlow = function (size) {
		  return allocUnsafe(null, size)
		}

		function fromString (that, string, encoding) {
		  if (typeof encoding !== 'string' || encoding === '') {
		    encoding = 'utf8'
		  }

		  if (!Buffer.isEncoding(encoding)) {
		    throw new TypeError('"encoding" must be a valid string encoding')
		  }

		  var length = byteLength(string, encoding) | 0
		  that = createBuffer(that, length)

		  var actual = that.write(string, encoding)

		  if (actual !== length) {
		    // Writing a hex string, for example, that contains invalid characters will
		    // cause everything after the first invalid character to be ignored. (e.g.
		    // 'abxxcd' will be treated as 'ab')
		    that = that.slice(0, actual)
		  }

		  return that
		}

		function fromArrayLike (that, array) {
		  var length = array.length < 0 ? 0 : checked(array.length) | 0
		  that = createBuffer(that, length)
		  for (var i = 0; i < length; i += 1) {
		    that[i] = array[i] & 255
		  }
		  return that
		}

		function fromArrayBuffer (that, array, byteOffset, length) {
		  array.byteLength // this throws if `array` is not a valid ArrayBuffer

		  if (byteOffset < 0 || array.byteLength < byteOffset) {
		    throw new RangeError('\'offset\' is out of bounds')
		  }

		  if (array.byteLength < byteOffset + (length || 0)) {
		    throw new RangeError('\'length\' is out of bounds')
		  }

		  if (byteOffset === undefined && length === undefined) {
		    array = new Uint8Array(array)
		  } else if (length === undefined) {
		    array = new Uint8Array(array, byteOffset)
		  } else {
		    array = new Uint8Array(array, byteOffset, length)
		  }

		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    // Return an augmented `Uint8Array` instance, for best performance
		    that = array
		    that.__proto__ = Buffer.prototype
		  } else {
		    // Fallback: Return an object instance of the Buffer class
		    that = fromArrayLike(that, array)
		  }
		  return that
		}

		function fromObject (that, obj) {
		  if (Buffer.isBuffer(obj)) {
		    var len = checked(obj.length) | 0
		    that = createBuffer(that, len)

		    if (that.length === 0) {
		      return that
		    }

		    obj.copy(that, 0, 0, len)
		    return that
		  }

		  if (obj) {
		    if ((typeof ArrayBuffer !== 'undefined' &&
		        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
		      if (typeof obj.length !== 'number' || isnan(obj.length)) {
		        return createBuffer(that, 0)
		      }
		      return fromArrayLike(that, obj)
		    }

		    if (obj.type === 'Buffer' && isArray(obj.data)) {
		      return fromArrayLike(that, obj.data)
		    }
		  }

		  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
		}

		function checked (length) {
		  // Note: cannot use `length < kMaxLength()` here because that fails when
		  // length is NaN (which is otherwise coerced to zero.)
		  if (length >= kMaxLength()) {
		    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
		                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
		  }
		  return length | 0
		}

		function SlowBuffer (length) {
		  if (+length != length) { // eslint-disable-line eqeqeq
		    length = 0
		  }
		  return Buffer.alloc(+length)
		}

		Buffer.isBuffer = function isBuffer (b) {
		  return !!(b != null && b._isBuffer)
		}

		Buffer.compare = function compare (a, b) {
		  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
		    throw new TypeError('Arguments must be Buffers')
		  }

		  if (a === b) return 0

		  var x = a.length
		  var y = b.length

		  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		    if (a[i] !== b[i]) {
		      x = a[i]
		      y = b[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		Buffer.isEncoding = function isEncoding (encoding) {
		  switch (String(encoding).toLowerCase()) {
		    case 'hex':
		    case 'utf8':
		    case 'utf-8':
		    case 'ascii':
		    case 'latin1':
		    case 'binary':
		    case 'base64':
		    case 'ucs2':
		    case 'ucs-2':
		    case 'utf16le':
		    case 'utf-16le':
		      return true
		    default:
		      return false
		  }
		}

		Buffer.concat = function concat (list, length) {
		  if (!isArray(list)) {
		    throw new TypeError('"list" argument must be an Array of Buffers')
		  }

		  if (list.length === 0) {
		    return Buffer.alloc(0)
		  }

		  var i
		  if (length === undefined) {
		    length = 0
		    for (i = 0; i < list.length; ++i) {
		      length += list[i].length
		    }
		  }

		  var buffer = Buffer.allocUnsafe(length)
		  var pos = 0
		  for (i = 0; i < list.length; ++i) {
		    var buf = list[i]
		    if (!Buffer.isBuffer(buf)) {
		      throw new TypeError('"list" argument must be an Array of Buffers')
		    }
		    buf.copy(buffer, pos)
		    pos += buf.length
		  }
		  return buffer
		}

		function byteLength (string, encoding) {
		  if (Buffer.isBuffer(string)) {
		    return string.length
		  }
		  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
		      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
		    return string.byteLength
		  }
		  if (typeof string !== 'string') {
		    string = '' + string
		  }

		  var len = string.length
		  if (len === 0) return 0

		  // Use a for loop to avoid recursion
		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'ascii':
		      case 'latin1':
		      case 'binary':
		        return len
		      case 'utf8':
		      case 'utf-8':
		      case undefined:
		        return utf8ToBytes(string).length
		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return len * 2
		      case 'hex':
		        return len >>> 1
		      case 'base64':
		        return base64ToBytes(string).length
		      default:
		        if (loweredCase) return utf8ToBytes(string).length // assume utf8
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}
		Buffer.byteLength = byteLength

		function slowToString (encoding, start, end) {
		  var loweredCase = false

		  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
		  // property of a typed array.

		  // This behaves neither like String nor Uint8Array in that we set start/end
		  // to their upper/lower bounds if the value passed is out of range.
		  // undefined is handled specially as per ECMA-262 6th Edition,
		  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
		  if (start === undefined || start < 0) {
		    start = 0
		  }
		  // Return early if start > this.length. Done here to prevent potential uint32
		  // coercion fail below.
		  if (start > this.length) {
		    return ''
		  }

		  if (end === undefined || end > this.length) {
		    end = this.length
		  }

		  if (end <= 0) {
		    return ''
		  }

		  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
		  end >>>= 0
		  start >>>= 0

		  if (end <= start) {
		    return ''
		  }

		  if (!encoding) encoding = 'utf8'

		  while (true) {
		    switch (encoding) {
		      case 'hex':
		        return hexSlice(this, start, end)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Slice(this, start, end)

		      case 'ascii':
		        return asciiSlice(this, start, end)

		      case 'latin1':
		      case 'binary':
		        return latin1Slice(this, start, end)

		      case 'base64':
		        return base64Slice(this, start, end)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return utf16leSlice(this, start, end)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = (encoding + '').toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
		// Buffer instances.
		Buffer.prototype._isBuffer = true

		function swap (b, n, m) {
		  var i = b[n]
		  b[n] = b[m]
		  b[m] = i
		}

		Buffer.prototype.swap16 = function swap16 () {
		  var len = this.length
		  if (len % 2 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 16-bits')
		  }
		  for (var i = 0; i < len; i += 2) {
		    swap(this, i, i + 1)
		  }
		  return this
		}

		Buffer.prototype.swap32 = function swap32 () {
		  var len = this.length
		  if (len % 4 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 32-bits')
		  }
		  for (var i = 0; i < len; i += 4) {
		    swap(this, i, i + 3)
		    swap(this, i + 1, i + 2)
		  }
		  return this
		}

		Buffer.prototype.swap64 = function swap64 () {
		  var len = this.length
		  if (len % 8 !== 0) {
		    throw new RangeError('Buffer size must be a multiple of 64-bits')
		  }
		  for (var i = 0; i < len; i += 8) {
		    swap(this, i, i + 7)
		    swap(this, i + 1, i + 6)
		    swap(this, i + 2, i + 5)
		    swap(this, i + 3, i + 4)
		  }
		  return this
		}

		Buffer.prototype.toString = function toString () {
		  var length = this.length | 0
		  if (length === 0) return ''
		  if (arguments.length === 0) return utf8Slice(this, 0, length)
		  return slowToString.apply(this, arguments)
		}

		Buffer.prototype.equals = function equals (b) {
		  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
		  if (this === b) return true
		  return Buffer.compare(this, b) === 0
		}

		Buffer.prototype.inspect = function inspect () {
		  var str = ''
		  var max = exports.INSPECT_MAX_BYTES
		  if (this.length > 0) {
		    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
		    if (this.length > max) str += ' ... '
		  }
		  return '<Buffer ' + str + '>'
		}

		Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
		  if (!Buffer.isBuffer(target)) {
		    throw new TypeError('Argument must be a Buffer')
		  }

		  if (start === undefined) {
		    start = 0
		  }
		  if (end === undefined) {
		    end = target ? target.length : 0
		  }
		  if (thisStart === undefined) {
		    thisStart = 0
		  }
		  if (thisEnd === undefined) {
		    thisEnd = this.length
		  }

		  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		    throw new RangeError('out of range index')
		  }

		  if (thisStart >= thisEnd && start >= end) {
		    return 0
		  }
		  if (thisStart >= thisEnd) {
		    return -1
		  }
		  if (start >= end) {
		    return 1
		  }

		  start >>>= 0
		  end >>>= 0
		  thisStart >>>= 0
		  thisEnd >>>= 0

		  if (this === target) return 0

		  var x = thisEnd - thisStart
		  var y = end - start
		  var len = Math.min(x, y)

		  var thisCopy = this.slice(thisStart, thisEnd)
		  var targetCopy = target.slice(start, end)

		  for (var i = 0; i < len; ++i) {
		    if (thisCopy[i] !== targetCopy[i]) {
		      x = thisCopy[i]
		      y = targetCopy[i]
		      break
		    }
		  }

		  if (x < y) return -1
		  if (y < x) return 1
		  return 0
		}

		// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
		// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
		//
		// Arguments:
		// - buffer - a Buffer to search
		// - val - a string, Buffer, or number
		// - byteOffset - an index into `buffer`; will be clamped to an int32
		// - encoding - an optional encoding, relevant is val is a string
		// - dir - true for indexOf, false for lastIndexOf
		function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
		  // Empty buffer means no match
		  if (buffer.length === 0) return -1

		  // Normalize byteOffset
		  if (typeof byteOffset === 'string') {
		    encoding = byteOffset
		    byteOffset = 0
		  } else if (byteOffset > 0x7fffffff) {
		    byteOffset = 0x7fffffff
		  } else if (byteOffset < -0x80000000) {
		    byteOffset = -0x80000000
		  }
		  byteOffset = +byteOffset  // Coerce to Number.
		  if (isNaN(byteOffset)) {
		    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		    byteOffset = dir ? 0 : (buffer.length - 1)
		  }

		  // Normalize byteOffset: negative offsets start from the end of the buffer
		  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
		  if (byteOffset >= buffer.length) {
		    if (dir) return -1
		    else byteOffset = buffer.length - 1
		  } else if (byteOffset < 0) {
		    if (dir) byteOffset = 0
		    else return -1
		  }

		  // Normalize val
		  if (typeof val === 'string') {
		    val = Buffer.from(val, encoding)
		  }

		  // Finally, search either indexOf (if dir is true) or lastIndexOf
		  if (Buffer.isBuffer(val)) {
		    // Special case: looking for empty string/buffer always fails
		    if (val.length === 0) {
		      return -1
		    }
		    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
		  } else if (typeof val === 'number') {
		    val = val & 0xFF // Search for a byte value [0-255]
		    if (Buffer.TYPED_ARRAY_SUPPORT &&
		        typeof Uint8Array.prototype.indexOf === 'function') {
		      if (dir) {
		        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		      } else {
		        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		      }
		    }
		    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
		  }

		  throw new TypeError('val must be string, number or Buffer')
		}

		function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
		  var indexSize = 1
		  var arrLength = arr.length
		  var valLength = val.length

		  if (encoding !== undefined) {
		    encoding = String(encoding).toLowerCase()
		    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
		        encoding === 'utf16le' || encoding === 'utf-16le') {
		      if (arr.length < 2 || val.length < 2) {
		        return -1
		      }
		      indexSize = 2
		      arrLength /= 2
		      valLength /= 2
		      byteOffset /= 2
		    }
		  }

		  function read (buf, i) {
		    if (indexSize === 1) {
		      return buf[i]
		    } else {
		      return buf.readUInt16BE(i * indexSize)
		    }
		  }

		  var i
		  if (dir) {
		    var foundIndex = -1
		    for (i = byteOffset; i < arrLength; i++) {
		      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
		        if (foundIndex === -1) foundIndex = i
		        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		      } else {
		        if (foundIndex !== -1) i -= i - foundIndex
		        foundIndex = -1
		      }
		    }
		  } else {
		    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
		    for (i = byteOffset; i >= 0; i--) {
		      var found = true
		      for (var j = 0; j < valLength; j++) {
		        if (read(arr, i + j) !== read(val, j)) {
		          found = false
		          break
		        }
		      }
		      if (found) return i
		    }
		  }

		  return -1
		}

		Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
		  return this.indexOf(val, byteOffset, encoding) !== -1
		}

		Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
		}

		Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
		  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
		}

		function hexWrite (buf, string, offset, length) {
		  offset = Number(offset) || 0
		  var remaining = buf.length - offset
		  if (!length) {
		    length = remaining
		  } else {
		    length = Number(length)
		    if (length > remaining) {
		      length = remaining
		    }
		  }

		  // must be an even number of digits
		  var strLen = string.length
		  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

		  if (length > strLen / 2) {
		    length = strLen / 2
		  }
		  for (var i = 0; i < length; ++i) {
		    var parsed = parseInt(string.substr(i * 2, 2), 16)
		    if (isNaN(parsed)) return i
		    buf[offset + i] = parsed
		  }
		  return i
		}

		function utf8Write (buf, string, offset, length) {
		  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
		}

		function asciiWrite (buf, string, offset, length) {
		  return blitBuffer(asciiToBytes(string), buf, offset, length)
		}

		function latin1Write (buf, string, offset, length) {
		  return asciiWrite(buf, string, offset, length)
		}

		function base64Write (buf, string, offset, length) {
		  return blitBuffer(base64ToBytes(string), buf, offset, length)
		}

		function ucs2Write (buf, string, offset, length) {
		  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
		}

		Buffer.prototype.write = function write (string, offset, length, encoding) {
		  // Buffer#write(string)
		  if (offset === undefined) {
		    encoding = 'utf8'
		    length = this.length
		    offset = 0
		  // Buffer#write(string, encoding)
		  } else if (length === undefined && typeof offset === 'string') {
		    encoding = offset
		    length = this.length
		    offset = 0
		  // Buffer#write(string, offset[, length][, encoding])
		  } else if (isFinite(offset)) {
		    offset = offset | 0
		    if (isFinite(length)) {
		      length = length | 0
		      if (encoding === undefined) encoding = 'utf8'
		    } else {
		      encoding = length
		      length = undefined
		    }
		  // legacy write(string, encoding, offset, length) - remove in v0.13
		  } else {
		    throw new Error(
		      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		    )
		  }

		  var remaining = this.length - offset
		  if (length === undefined || length > remaining) length = remaining

		  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		    throw new RangeError('Attempt to write outside buffer bounds')
		  }

		  if (!encoding) encoding = 'utf8'

		  var loweredCase = false
		  for (;;) {
		    switch (encoding) {
		      case 'hex':
		        return hexWrite(this, string, offset, length)

		      case 'utf8':
		      case 'utf-8':
		        return utf8Write(this, string, offset, length)

		      case 'ascii':
		        return asciiWrite(this, string, offset, length)

		      case 'latin1':
		      case 'binary':
		        return latin1Write(this, string, offset, length)

		      case 'base64':
		        // Warning: maxLength not taken into account in base64Write
		        return base64Write(this, string, offset, length)

		      case 'ucs2':
		      case 'ucs-2':
		      case 'utf16le':
		      case 'utf-16le':
		        return ucs2Write(this, string, offset, length)

		      default:
		        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
		        encoding = ('' + encoding).toLowerCase()
		        loweredCase = true
		    }
		  }
		}

		Buffer.prototype.toJSON = function toJSON () {
		  return {
		    type: 'Buffer',
		    data: Array.prototype.slice.call(this._arr || this, 0)
		  }
		}

		function base64Slice (buf, start, end) {
		  if (start === 0 && end === buf.length) {
		    return base64.fromByteArray(buf)
		  } else {
		    return base64.fromByteArray(buf.slice(start, end))
		  }
		}

		function utf8Slice (buf, start, end) {
		  end = Math.min(buf.length, end)
		  var res = []

		  var i = start
		  while (i < end) {
		    var firstByte = buf[i]
		    var codePoint = null
		    var bytesPerSequence = (firstByte > 0xEF) ? 4
		      : (firstByte > 0xDF) ? 3
		      : (firstByte > 0xBF) ? 2
		      : 1

		    if (i + bytesPerSequence <= end) {
		      var secondByte, thirdByte, fourthByte, tempCodePoint

		      switch (bytesPerSequence) {
		        case 1:
		          if (firstByte < 0x80) {
		            codePoint = firstByte
		          }
		          break
		        case 2:
		          secondByte = buf[i + 1]
		          if ((secondByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
		            if (tempCodePoint > 0x7F) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 3:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
		            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
		              codePoint = tempCodePoint
		            }
		          }
		          break
		        case 4:
		          secondByte = buf[i + 1]
		          thirdByte = buf[i + 2]
		          fourthByte = buf[i + 3]
		          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
		            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
		            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
		              codePoint = tempCodePoint
		            }
		          }
		      }
		    }

		    if (codePoint === null) {
		      // we did not generate a valid codePoint so insert a
		      // replacement char (U+FFFD) and advance only 1 byte
		      codePoint = 0xFFFD
		      bytesPerSequence = 1
		    } else if (codePoint > 0xFFFF) {
		      // encode to utf16 (surrogate pair dance)
		      codePoint -= 0x10000
		      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
		      codePoint = 0xDC00 | codePoint & 0x3FF
		    }

		    res.push(codePoint)
		    i += bytesPerSequence
		  }

		  return decodeCodePointsArray(res)
		}

		// Based on http://stackoverflow.com/a/22747272/680742, the browser with
		// the lowest limit is Chrome, with 0x10000 args.
		// We go 1 magnitude less, for safety
		var MAX_ARGUMENTS_LENGTH = 0x1000

		function decodeCodePointsArray (codePoints) {
		  var len = codePoints.length
		  if (len <= MAX_ARGUMENTS_LENGTH) {
		    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
		  }

		  // Decode in chunks to avoid "call stack size exceeded".
		  var res = ''
		  var i = 0
		  while (i < len) {
		    res += String.fromCharCode.apply(
		      String,
		      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		    )
		  }
		  return res
		}

		function asciiSlice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i] & 0x7F)
		  }
		  return ret
		}

		function latin1Slice (buf, start, end) {
		  var ret = ''
		  end = Math.min(buf.length, end)

		  for (var i = start; i < end; ++i) {
		    ret += String.fromCharCode(buf[i])
		  }
		  return ret
		}

		function hexSlice (buf, start, end) {
		  var len = buf.length

		  if (!start || start < 0) start = 0
		  if (!end || end < 0 || end > len) end = len

		  var out = ''
		  for (var i = start; i < end; ++i) {
		    out += toHex(buf[i])
		  }
		  return out
		}

		function utf16leSlice (buf, start, end) {
		  var bytes = buf.slice(start, end)
		  var res = ''
		  for (var i = 0; i < bytes.length; i += 2) {
		    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
		  }
		  return res
		}

		Buffer.prototype.slice = function slice (start, end) {
		  var len = this.length
		  start = ~~start
		  end = end === undefined ? len : ~~end

		  if (start < 0) {
		    start += len
		    if (start < 0) start = 0
		  } else if (start > len) {
		    start = len
		  }

		  if (end < 0) {
		    end += len
		    if (end < 0) end = 0
		  } else if (end > len) {
		    end = len
		  }

		  if (end < start) end = start

		  var newBuf
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    newBuf = this.subarray(start, end)
		    newBuf.__proto__ = Buffer.prototype
		  } else {
		    var sliceLen = end - start
		    newBuf = new Buffer(sliceLen, undefined)
		    for (var i = 0; i < sliceLen; ++i) {
		      newBuf[i] = this[i + start]
		    }
		  }

		  return newBuf
		}

		/*
		 * Need to make sure that buffer isn't trying to write out of bounds.
		 */
		function checkOffset (offset, ext, length) {
		  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
		  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
		}

		Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }

		  return val
		}

		Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    checkOffset(offset, byteLength, this.length)
		  }

		  var val = this[offset + --byteLength]
		  var mul = 1
		  while (byteLength > 0 && (mul *= 0x100)) {
		    val += this[offset + --byteLength] * mul
		  }

		  return val
		}

		Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  return this[offset]
		}

		Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return this[offset] | (this[offset + 1] << 8)
		}

		Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  return (this[offset] << 8) | this[offset + 1]
		}

		Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return ((this[offset]) |
		      (this[offset + 1] << 8) |
		      (this[offset + 2] << 16)) +
		      (this[offset + 3] * 0x1000000)
		}

		Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] * 0x1000000) +
		    ((this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    this[offset + 3])
		}

		Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var val = this[offset]
		  var mul = 1
		  var i = 0
		  while (++i < byteLength && (mul *= 0x100)) {
		    val += this[offset + i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) checkOffset(offset, byteLength, this.length)

		  var i = byteLength
		  var mul = 1
		  var val = this[offset + --i]
		  while (i > 0 && (mul *= 0x100)) {
		    val += this[offset + --i] * mul
		  }
		  mul *= 0x80

		  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

		  return val
		}

		Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 1, this.length)
		  if (!(this[offset] & 0x80)) return (this[offset])
		  return ((0xff - this[offset] + 1) * -1)
		}

		Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset] | (this[offset + 1] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 2, this.length)
		  var val = this[offset + 1] | (this[offset] << 8)
		  return (val & 0x8000) ? val | 0xFFFF0000 : val
		}

		Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset]) |
		    (this[offset + 1] << 8) |
		    (this[offset + 2] << 16) |
		    (this[offset + 3] << 24)
		}

		Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)

		  return (this[offset] << 24) |
		    (this[offset + 1] << 16) |
		    (this[offset + 2] << 8) |
		    (this[offset + 3])
		}

		Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, true, 23, 4)
		}

		Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 4, this.length)
		  return ieee754.read(this, offset, false, 23, 4)
		}

		Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, true, 52, 8)
		}

		Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
		  if (!noAssert) checkOffset(offset, 8, this.length)
		  return ieee754.read(this, offset, false, 52, 8)
		}

		function checkInt (buf, value, offset, ext, max, min) {
		  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
		  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		}

		Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var mul = 1
		  var i = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  byteLength = byteLength | 0
		  if (!noAssert) {
		    var maxBytes = Math.pow(2, 8 * byteLength) - 1
		    checkInt(this, value, offset, byteLength, maxBytes, 0)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    this[offset + i] = (value / mul) & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		function objectWriteUInt16 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
		    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
		      (littleEndian ? i : 1 - i) * 8
		  }
		}

		Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		function objectWriteUInt32 (buf, value, offset, littleEndian) {
		  if (value < 0) value = 0xffffffff + value + 1
		  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
		    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
		  }
		}

		Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset + 3] = (value >>> 24)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 1] = (value >>> 8)
		    this[offset] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = 0
		  var mul = 1
		  var sub = 0
		  this[offset] = value & 0xFF
		  while (++i < byteLength && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) {
		    var limit = Math.pow(2, 8 * byteLength - 1)

		    checkInt(this, value, offset, byteLength, limit - 1, -limit)
		  }

		  var i = byteLength - 1
		  var mul = 1
		  var sub = 0
		  this[offset + i] = value & 0xFF
		  while (--i >= 0 && (mul *= 0x100)) {
		    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		      sub = 1
		    }
		    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
		  }

		  return offset + byteLength
		}

		Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
		  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
		  if (value < 0) value = 0xff + value + 1
		  this[offset] = (value & 0xff)
		  return offset + 1
		}

		Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		  } else {
		    objectWriteUInt16(this, value, offset, true)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 8)
		    this[offset + 1] = (value & 0xff)
		  } else {
		    objectWriteUInt16(this, value, offset, false)
		  }
		  return offset + 2
		}

		Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value & 0xff)
		    this[offset + 1] = (value >>> 8)
		    this[offset + 2] = (value >>> 16)
		    this[offset + 3] = (value >>> 24)
		  } else {
		    objectWriteUInt32(this, value, offset, true)
		  }
		  return offset + 4
		}

		Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
		  value = +value
		  offset = offset | 0
		  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
		  if (value < 0) value = 0xffffffff + value + 1
		  if (Buffer.TYPED_ARRAY_SUPPORT) {
		    this[offset] = (value >>> 24)
		    this[offset + 1] = (value >>> 16)
		    this[offset + 2] = (value >>> 8)
		    this[offset + 3] = (value & 0xff)
		  } else {
		    objectWriteUInt32(this, value, offset, false)
		  }
		  return offset + 4
		}

		function checkIEEE754 (buf, value, offset, ext, max, min) {
		  if (offset + ext > buf.length) throw new RangeError('Index out of range')
		  if (offset < 0) throw new RangeError('Index out of range')
		}

		function writeFloat (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 23, 4)
		  return offset + 4
		}

		Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
		  return writeFloat(this, value, offset, false, noAssert)
		}

		function writeDouble (buf, value, offset, littleEndian, noAssert) {
		  if (!noAssert) {
		    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
		  }
		  ieee754.write(buf, value, offset, littleEndian, 52, 8)
		  return offset + 8
		}

		Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, true, noAssert)
		}

		Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
		  return writeDouble(this, value, offset, false, noAssert)
		}

		// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
		Buffer.prototype.copy = function copy (target, targetStart, start, end) {
		  if (!start) start = 0
		  if (!end && end !== 0) end = this.length
		  if (targetStart >= target.length) targetStart = target.length
		  if (!targetStart) targetStart = 0
		  if (end > 0 && end < start) end = start

		  // Copy 0 bytes; we're done
		  if (end === start) return 0
		  if (target.length === 0 || this.length === 0) return 0

		  // Fatal error conditions
		  if (targetStart < 0) {
		    throw new RangeError('targetStart out of bounds')
		  }
		  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
		  if (end < 0) throw new RangeError('sourceEnd out of bounds')

		  // Are we oob?
		  if (end > this.length) end = this.length
		  if (target.length - targetStart < end - start) {
		    end = target.length - targetStart + start
		  }

		  var len = end - start
		  var i

		  if (this === target && start < targetStart && targetStart < end) {
		    // descending copy from end
		    for (i = len - 1; i >= 0; --i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
		    // ascending copy from start
		    for (i = 0; i < len; ++i) {
		      target[i + targetStart] = this[i + start]
		    }
		  } else {
		    Uint8Array.prototype.set.call(
		      target,
		      this.subarray(start, start + len),
		      targetStart
		    )
		  }

		  return len
		}

		// Usage:
		//    buffer.fill(number[, offset[, end]])
		//    buffer.fill(buffer[, offset[, end]])
		//    buffer.fill(string[, offset[, end]][, encoding])
		Buffer.prototype.fill = function fill (val, start, end, encoding) {
		  // Handle string cases:
		  if (typeof val === 'string') {
		    if (typeof start === 'string') {
		      encoding = start
		      start = 0
		      end = this.length
		    } else if (typeof end === 'string') {
		      encoding = end
		      end = this.length
		    }
		    if (val.length === 1) {
		      var code = val.charCodeAt(0)
		      if (code < 256) {
		        val = code
		      }
		    }
		    if (encoding !== undefined && typeof encoding !== 'string') {
		      throw new TypeError('encoding must be a string')
		    }
		    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		      throw new TypeError('Unknown encoding: ' + encoding)
		    }
		  } else if (typeof val === 'number') {
		    val = val & 255
		  }

		  // Invalid ranges are not set to a default, so can range check early.
		  if (start < 0 || this.length < start || this.length < end) {
		    throw new RangeError('Out of range index')
		  }

		  if (end <= start) {
		    return this
		  }

		  start = start >>> 0
		  end = end === undefined ? this.length : end >>> 0

		  if (!val) val = 0

		  var i
		  if (typeof val === 'number') {
		    for (i = start; i < end; ++i) {
		      this[i] = val
		    }
		  } else {
		    var bytes = Buffer.isBuffer(val)
		      ? val
		      : utf8ToBytes(new Buffer(val, encoding).toString())
		    var len = bytes.length
		    for (i = 0; i < end - start; ++i) {
		      this[i + start] = bytes[i % len]
		    }
		  }

		  return this
		}

		// HELPER FUNCTIONS
		// ================

		var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

		function base64clean (str) {
		  // Node strips out invalid characters like \n and \t from the string, base64-js does not
		  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
		  // Node converts strings with length < 2 to ''
		  if (str.length < 2) return ''
		  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
		  while (str.length % 4 !== 0) {
		    str = str + '='
		  }
		  return str
		}

		function stringtrim (str) {
		  if (str.trim) return str.trim()
		  return str.replace(/^\s+|\s+$/g, '')
		}

		function toHex (n) {
		  if (n < 16) return '0' + n.toString(16)
		  return n.toString(16)
		}

		function utf8ToBytes (string, units) {
		  units = units || Infinity
		  var codePoint
		  var length = string.length
		  var leadSurrogate = null
		  var bytes = []

		  for (var i = 0; i < length; ++i) {
		    codePoint = string.charCodeAt(i)

		    // is surrogate component
		    if (codePoint > 0xD7FF && codePoint < 0xE000) {
		      // last char was a lead
		      if (!leadSurrogate) {
		        // no lead yet
		        if (codePoint > 0xDBFF) {
		          // unexpected trail
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        } else if (i + 1 === length) {
		          // unpaired lead
		          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		          continue
		        }

		        // valid lead
		        leadSurrogate = codePoint

		        continue
		      }

		      // 2 leads in a row
		      if (codePoint < 0xDC00) {
		        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		        leadSurrogate = codePoint
		        continue
		      }

		      // valid surrogate pair
		      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
		    } else if (leadSurrogate) {
		      // valid bmp char, but last char was a lead
		      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		    }

		    leadSurrogate = null

		    // encode utf8
		    if (codePoint < 0x80) {
		      if ((units -= 1) < 0) break
		      bytes.push(codePoint)
		    } else if (codePoint < 0x800) {
		      if ((units -= 2) < 0) break
		      bytes.push(
		        codePoint >> 0x6 | 0xC0,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x10000) {
		      if ((units -= 3) < 0) break
		      bytes.push(
		        codePoint >> 0xC | 0xE0,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else if (codePoint < 0x110000) {
		      if ((units -= 4) < 0) break
		      bytes.push(
		        codePoint >> 0x12 | 0xF0,
		        codePoint >> 0xC & 0x3F | 0x80,
		        codePoint >> 0x6 & 0x3F | 0x80,
		        codePoint & 0x3F | 0x80
		      )
		    } else {
		      throw new Error('Invalid code point')
		    }
		  }

		  return bytes
		}

		function asciiToBytes (str) {
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    // Node's code seems to be doing this and not & 0x7F..
		    byteArray.push(str.charCodeAt(i) & 0xFF)
		  }
		  return byteArray
		}

		function utf16leToBytes (str, units) {
		  var c, hi, lo
		  var byteArray = []
		  for (var i = 0; i < str.length; ++i) {
		    if ((units -= 2) < 0) break

		    c = str.charCodeAt(i)
		    hi = c >> 8
		    lo = c % 256
		    byteArray.push(lo)
		    byteArray.push(hi)
		  }

		  return byteArray
		}

		function base64ToBytes (str) {
		  return base64.toByteArray(base64clean(str))
		}

		function blitBuffer (src, dst, offset, length) {
		  for (var i = 0; i < length; ++i) {
		    if ((i + offset >= dst.length) || (i >= src.length)) break
		    dst[i + offset] = src[i]
		  }
		  return i
		}

		function isnan (val) {
		  return val !== val // eslint-disable-line no-self-compare
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer, (function() { return this; }())))

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		'use strict'

		exports.toByteArray = toByteArray
		exports.fromByteArray = fromByteArray

		var lookup = []
		var revLookup = []
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

		function init () {
		  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
		  for (var i = 0, len = code.length; i < len; ++i) {
		    lookup[i] = code[i]
		    revLookup[code.charCodeAt(i)] = i
		  }

		  revLookup['-'.charCodeAt(0)] = 62
		  revLookup['_'.charCodeAt(0)] = 63
		}

		init()

		function toByteArray (b64) {
		  var i, j, l, tmp, placeHolders, arr
		  var len = b64.length

		  if (len % 4 > 0) {
		    throw new Error('Invalid string. Length must be a multiple of 4')
		  }

		  // the number of equal signs (place holders)
		  // if there are two placeholders, than the two characters before it
		  // represent one byte
		  // if there is only one, then the three characters before it represent 2 bytes
		  // this is just a cheap hack to not do indexOf twice
		  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

		  // base64 is 4/3 + up to two characters of the original data
		  arr = new Arr(len * 3 / 4 - placeHolders)

		  // if there are placeholders, only get up to the last complete 4 chars
		  l = placeHolders > 0 ? len - 4 : len

		  var L = 0

		  for (i = 0, j = 0; i < l; i += 4, j += 3) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
		    arr[L++] = (tmp >> 16) & 0xFF
		    arr[L++] = (tmp >> 8) & 0xFF
		    arr[L++] = tmp & 0xFF
		  }

		  if (placeHolders === 2) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
		    arr[L++] = tmp & 0xFF
		  } else if (placeHolders === 1) {
		    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
		    arr[L++] = (tmp >> 8) & 0xFF
		    arr[L++] = tmp & 0xFF
		  }

		  return arr
		}

		function tripletToBase64 (num) {
		  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
		}

		function encodeChunk (uint8, start, end) {
		  var tmp
		  var output = []
		  for (var i = start; i < end; i += 3) {
		    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
		    output.push(tripletToBase64(tmp))
		  }
		  return output.join('')
		}

		function fromByteArray (uint8) {
		  var tmp
		  var len = uint8.length
		  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
		  var output = ''
		  var parts = []
		  var maxChunkLength = 16383 // must be multiple of 3

		  // go through the array every three bytes, we'll deal with trailing stuff later
		  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
		  }

		  // pad the end with zeros, but make sure to not forget the extra bytes
		  if (extraBytes === 1) {
		    tmp = uint8[len - 1]
		    output += lookup[tmp >> 2]
		    output += lookup[(tmp << 4) & 0x3F]
		    output += '=='
		  } else if (extraBytes === 2) {
		    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
		    output += lookup[tmp >> 10]
		    output += lookup[(tmp >> 4) & 0x3F]
		    output += lookup[(tmp << 2) & 0x3F]
		    output += '='
		  }

		  parts.push(output)

		  return parts.join('')
		}


	/***/ },
	/* 4 */
	/***/ function(module, exports) {

		exports.read = function (buffer, offset, isLE, mLen, nBytes) {
		  var e, m
		  var eLen = nBytes * 8 - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var nBits = -7
		  var i = isLE ? (nBytes - 1) : 0
		  var d = isLE ? -1 : 1
		  var s = buffer[offset + i]

		  i += d

		  e = s & ((1 << (-nBits)) - 1)
		  s >>= (-nBits)
		  nBits += eLen
		  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		  m = e & ((1 << (-nBits)) - 1)
		  e >>= (-nBits)
		  nBits += mLen
		  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

		  if (e === 0) {
		    e = 1 - eBias
		  } else if (e === eMax) {
		    return m ? NaN : ((s ? -1 : 1) * Infinity)
		  } else {
		    m = m + Math.pow(2, mLen)
		    e = e - eBias
		  }
		  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
		}

		exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
		  var e, m, c
		  var eLen = nBytes * 8 - mLen - 1
		  var eMax = (1 << eLen) - 1
		  var eBias = eMax >> 1
		  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
		  var i = isLE ? 0 : (nBytes - 1)
		  var d = isLE ? 1 : -1
		  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

		  value = Math.abs(value)

		  if (isNaN(value) || value === Infinity) {
		    m = isNaN(value) ? 1 : 0
		    e = eMax
		  } else {
		    e = Math.floor(Math.log(value) / Math.LN2)
		    if (value * (c = Math.pow(2, -e)) < 1) {
		      e--
		      c *= 2
		    }
		    if (e + eBias >= 1) {
		      value += rt / c
		    } else {
		      value += rt * Math.pow(2, 1 - eBias)
		    }
		    if (value * c >= 2) {
		      e++
		      c /= 2
		    }

		    if (e + eBias >= eMax) {
		      m = 0
		      e = eMax
		    } else if (e + eBias >= 1) {
		      m = (value * c - 1) * Math.pow(2, mLen)
		      e = e + eBias
		    } else {
		      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
		      e = 0
		    }
		  }

		  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

		  e = (e << mLen) | m
		  eLen += mLen
		  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

		  buffer[offset + i - d] |= s * 128
		}


	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		var toString = {}.toString;

		module.exports = Array.isArray || function (arr) {
		  return toString.call(arr) == '[object Array]';
		};


	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		/*
		 (c) 2014-2016, Andrii Heonia
		 Hull.js, a JavaScript library for concave hull generation by set of points.
		 https://github.com/AndriiHeonia/hull
		*/

		'use strict';

		var intersect = __webpack_require__(7);
		var grid = __webpack_require__(8);
		var formatUtil = __webpack_require__(9);
		var convexHull = __webpack_require__(10);

		function _filterDuplicates(pointset) {
		    return pointset.filter(function(el, idx, arr) {
		        var prevEl = arr[idx - 1];
		        return idx === 0 || !(prevEl[0] === el[0] && prevEl[1] === el[1]);
		    });
		}

		function _sortByX(pointset) {
		    return pointset.sort(function(a, b) {
		        if (a[0] == b[0]) {
		            return a[1] - b[1];
		        } else {
		            return a[0] - b[0];
		        }
		    });
		}

		function _sqLength(a, b) {
		    return Math.pow(b[0] - a[0], 2) + Math.pow(b[1] - a[1], 2);
		}

		function _cos(o, a, b) {
		    var aShifted = [a[0] - o[0], a[1] - o[1]],
		        bShifted = [b[0] - o[0], b[1] - o[1]],
		        sqALen = _sqLength(o, a),
		        sqBLen = _sqLength(o, b),
		        dot = aShifted[0] * bShifted[0] + aShifted[1] * bShifted[1];

		    return dot / Math.sqrt(sqALen * sqBLen);
		}

		function _intersect(segment, pointset) {
		    for (var i = 0; i < pointset.length - 1; i++) {
		        var seg = [pointset[i], pointset[i + 1]];
		        if (segment[0][0] === seg[0][0] && segment[0][1] === seg[0][1] ||
		            segment[0][0] === seg[1][0] && segment[0][1] === seg[1][1]) {
		            continue;
		        }
		        if (intersect(segment, seg)) {
		            return true;
		        }
		    }
		    return false;
		}

		function _occupiedArea(pointset) {
		    var minX = Infinity,
		        minY = Infinity,
		        maxX = -Infinity,
		        maxY = -Infinity;

		    for (var i = pointset.length - 1; i >= 0; i--) {
		        if (pointset[i][0] < minX) {
		            minX = pointset[i][0];
		        }
		        if (pointset[i][1] < minY) {
		            minY = pointset[i][1];
		        }
		        if (pointset[i][0] > maxX) {
		            maxX = pointset[i][0];
		        }
		        if (pointset[i][1] > maxY) {
		            maxY = pointset[i][1];
		        }
		    }

		    return [
		        maxX - minX, // width
		        maxY - minY  // height
		    ];
		}

		function _bBoxAround(edge) {
		    return [
		        Math.min(edge[0][0], edge[1][0]), // left
		        Math.min(edge[0][1], edge[1][1]), // top
		        Math.max(edge[0][0], edge[1][0]), // right
		        Math.max(edge[0][1], edge[1][1])  // bottom
		    ];
		}

		function _midPoint(edge, innerPoints, convex) {
		    var point = null,
		        angle1Cos = MAX_CONCAVE_ANGLE_COS,
		        angle2Cos = MAX_CONCAVE_ANGLE_COS,
		        a1Cos, a2Cos;

		    for (var i = 0; i < innerPoints.length; i++) {
		        a1Cos = _cos(edge[0], edge[1], innerPoints[i]);
		        a2Cos = _cos(edge[1], edge[0], innerPoints[i]);

		        if (a1Cos > angle1Cos && a2Cos > angle2Cos &&
		            !_intersect([edge[0], innerPoints[i]], convex) &&
		            !_intersect([edge[1], innerPoints[i]], convex)) {

		            angle1Cos = a1Cos;
		            angle2Cos = a2Cos;
		            point = innerPoints[i];
		        }
		    }

		    return point;
		}

		function _concave(convex, maxSqEdgeLen, maxSearchArea, grid, edgeSkipList) {
		    var edge,
		        keyInSkipList,
		        scaleFactor,
		        midPoint,
		        bBoxAround,
		        bBoxWidth,
		        bBoxHeight,
		        midPointInserted = false;

		    for (var i = 0; i < convex.length - 1; i++) {
		        edge = [convex[i], convex[i + 1]];
		        keyInSkipList = edge[0].join() + ',' + edge[1].join();

		        if (_sqLength(edge[0], edge[1]) < maxSqEdgeLen ||
		            edgeSkipList[keyInSkipList] === true) { continue; }

		        scaleFactor = 0;
		        bBoxAround = _bBoxAround(edge);
		        do {
		            bBoxAround = grid.extendBbox(bBoxAround, scaleFactor);
		            bBoxWidth = bBoxAround[2] - bBoxAround[0];
		            bBoxHeight = bBoxAround[3] - bBoxAround[1];

		            midPoint = _midPoint(edge, grid.rangePoints(bBoxAround), convex);            
		            scaleFactor++;
		        }  while (midPoint === null && (maxSearchArea[0] > bBoxWidth || maxSearchArea[1] > bBoxHeight));

		        if (bBoxWidth >= maxSearchArea[0] && bBoxHeight >= maxSearchArea[1]) {
		            edgeSkipList[keyInSkipList] = true;
		        }

		        if (midPoint !== null) {
		            convex.splice(i + 1, 0, midPoint);
		            grid.removePoint(midPoint);
		            midPointInserted = true;
		        }
		    }

		    if (midPointInserted) {
		        return _concave(convex, maxSqEdgeLen, maxSearchArea, grid, edgeSkipList);
		    }

		    return convex;
		}

		function hull(pointset, concavity, format) {
		    var convex,
		        concave,
		        innerPoints,
		        occupiedArea,
		        maxSearchArea,
		        cellSize,
		        points,
		        maxEdgeLen = concavity || 20;

		    if (pointset.length < 4) {
		        return pointset.slice();
		    }

		    points = _filterDuplicates(_sortByX(formatUtil.toXy(pointset, format)));

		    occupiedArea = _occupiedArea(points);
		    maxSearchArea = [
		        occupiedArea[0] * MAX_SEARCH_BBOX_SIZE_PERCENT,
		        occupiedArea[1] * MAX_SEARCH_BBOX_SIZE_PERCENT
		    ];

		    convex = convexHull(points);
		    innerPoints = points.filter(function(pt) {
		        return convex.indexOf(pt) < 0;
		    });

		    cellSize = Math.ceil(1 / (points.length / (occupiedArea[0] * occupiedArea[1])));

		    concave = _concave(
		        convex, Math.pow(maxEdgeLen, 2),
		        maxSearchArea, grid(innerPoints, cellSize), {});
		 
		    return formatUtil.fromXy(concave, format);
		}

		var MAX_CONCAVE_ANGLE_COS = Math.cos(90 / (180 / Math.PI)); // angle = 90 deg
		var MAX_SEARCH_BBOX_SIZE_PERCENT = 0.6;

		module.exports = hull;

	/***/ },
	/* 7 */
	/***/ function(module, exports) {

		function ccw(x1, y1, x2, y2, x3, y3) {           
		    var cw = ((y3 - y1) * (x2 - x1)) - ((y2 - y1) * (x3 - x1));
		    return cw > 0 ? true : cw < 0 ? false : true; // colinear
		}

		function intersect(seg1, seg2) {
		  var x1 = seg1[0][0], y1 = seg1[0][1],
		      x2 = seg1[1][0], y2 = seg1[1][1],
		      x3 = seg2[0][0], y3 = seg2[0][1],
		      x4 = seg2[1][0], y4 = seg2[1][1];

		    return ccw(x1, y1, x3, y3, x4, y4) !== ccw(x2, y2, x3, y3, x4, y4) && ccw(x1, y1, x2, y2, x3, y3) !== ccw(x1, y1, x2, y2, x4, y4);
		}

		module.exports = intersect;

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

		function Grid(points, cellSize) {
		    this._cells = [];
		    this._cellSize = cellSize;

		    points.forEach(function(point) {
		        var cellXY = this.point2CellXY(point),
		            x = cellXY[0],
		            y = cellXY[1];
		        if (this._cells[x] === undefined) {
		            this._cells[x] = [];
		        }
		        if (this._cells[x][y] === undefined) {
		            this._cells[x][y] = [];
		        }
		        this._cells[x][y].push(point);
		    }, this);
		}

		Grid.prototype = {
		    cellPoints: function(x, y) { // (Number, Number) -> Array
		        return (this._cells[x] !== undefined && this._cells[x][y] !== undefined) ? this._cells[x][y] : [];
		    },

		    rangePoints: function(bbox) { // (Array) -> Array
		        var tlCellXY = this.point2CellXY([bbox[0], bbox[1]]),
		            brCellXY = this.point2CellXY([bbox[2], bbox[3]]),
		            points = [];

		        for (var x = tlCellXY[0]; x <= brCellXY[0]; x++) {
		            for (var y = tlCellXY[1]; y <= brCellXY[1]; y++) {
		                points = points.concat(this.cellPoints(x, y));
		            }
		        }

		        return points;
		    },

		    removePoint: function(point) { // (Array) -> Array
		        var cellXY = this.point2CellXY(point),
		            cell = this._cells[cellXY[0]][cellXY[1]],
		            pointIdxInCell;
		        
		        for (var i = 0; i < cell.length; i++) {
		            if (cell[i][0] === point[0] && cell[i][1] === point[1]) {
		                pointIdxInCell = i;
		                break;
		            }
		        }

		        cell.splice(pointIdxInCell, 1);

		        return cell;
		    },

		    point2CellXY: function(point) { // (Array) -> Array
		        var x = parseInt(point[0] / this._cellSize),
		            y = parseInt(point[1] / this._cellSize);
		        return [x, y];
		    },

		    extendBbox: function(bbox, scaleFactor) { // (Array, Number) -> Array
		        return [
		            bbox[0] - (scaleFactor * this._cellSize),
		            bbox[1] - (scaleFactor * this._cellSize),
		            bbox[2] + (scaleFactor * this._cellSize),
		            bbox[3] + (scaleFactor * this._cellSize)
		        ];
		    }
		};

		function grid(points, cellSize) {
		    return new Grid(points, cellSize);
		}

		module.exports = grid;

	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		module.exports = {

		    toXy: function(pointset, format) {
		        if (format === undefined) {
		            return pointset.slice();
		        }
		        return pointset.map(function(pt) {
		            /*jslint evil: true */
		            var _getXY = new Function('pt', 'return [pt' + format[0] + ',' + 'pt' + format[1] + '];');
		            return _getXY(pt);
		        });
		    },

		    fromXy: function(pointset, format) {
		        if (format === undefined) {
		            return pointset.slice();
		        }
		        return pointset.map(function(pt) {
		            /*jslint evil: true */
		            var _getObj = new Function('pt', 'var o = {}; o' + format[0] + '= pt[0]; o' + format[1] + '= pt[1]; return o;');
		            return _getObj(pt);
		        });
		    }

		}

	/***/ },
	/* 10 */
	/***/ function(module, exports) {

		function _cross(o, a, b) {
		    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
		}

		function _upperTangent(pointset) {
		    var lower = [];
		    for (var l = 0; l < pointset.length; l++) {
		        while (lower.length >= 2 && (_cross(lower[lower.length - 2], lower[lower.length - 1], pointset[l]) <= 0)) {
		            lower.pop();
		        }
		        lower.push(pointset[l]);
		    }
		    lower.pop();
		    return lower;
		}

		function _lowerTangent(pointset) {
		    var reversed = pointset.reverse(),
		        upper = [];
		    for (var u = 0; u < reversed.length; u++) {
		        while (upper.length >= 2 && (_cross(upper[upper.length - 2], upper[upper.length - 1], reversed[u]) <= 0)) {
		            upper.pop();
		        }
		        upper.push(reversed[u]);
		    }
		    upper.pop();
		    return upper;
		}

		// pointset has to be sorted by X
		function convex(pointset) {
		    var convex,
		        upper = _upperTangent(pointset),
		        lower = _lowerTangent(pointset);
		    convex = lower.concat(upper);
		    convex.push(pointset[0]);  
		    return convex;  
		}

		module.exports = convex;


	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
		 * @license twgl.js 1.5.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.
		 * Available via the MIT license.
		 * see: http://github.com/greggman/twgl.js for details
		 */
		/**
		 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
		 * Available via the MIT or new BSD license.
		 * see: http://github.com/jrburke/almond for details
		 */
		(function (root, factory) {
		    if (true) {
		        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		    } if (typeof module !== 'undefined' && module.exports) {
		        module.exports = factory();
		    } else {
		        root.twgl = factory();
		    }
		}(this, function () {

		/**
		 * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
		 * Available via the MIT or new BSD license.
		 * see: http://github.com/jrburke/almond for details
		 */
		//Going sloppy to avoid 'use strict' string cost, but strict practices should
		//be followed.
		/*jslint sloppy: true */
		/*global setTimeout: false */

		var notrequirebecasebrowserifymessesupjs, notrequirebecasebrowserifymessesup, define;
		(function (undef) {
		    var main, req, makeMap, handlers,
		        defined = {},
		        waiting = {},
		        config = {},
		        defining = {},
		        hasOwn = Object.prototype.hasOwnProperty,
		        aps = [].slice,
		        jsSuffixRegExp = /\.js$/;

		    function hasProp(obj, prop) {
		        return hasOwn.call(obj, prop);
		    }

		    /**
		     * Given a relative module name, like ./something, normalize it to
		     * a real name that can be mapped to a path.
		     * @param {String} name the relative name
		     * @param {String} baseName a real name that the name arg is relative
		     * to.
		     * @returns {String} normalized name
		     */
		    function normalize(name, baseName) {
		        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
		            foundI, foundStarMap, starI, i, j, part,
		            baseParts = baseName && baseName.split("/"),
		            map = config.map,
		            starMap = (map && map['*']) || {};

		        //Adjust any relative paths.
		        if (name && name.charAt(0) === ".") {
		            //If have a base name, try to normalize against it,
		            //otherwise, assume it is a top-level notrequirebecasebrowserifymessesup that will
		            //be relative to baseUrl in the end.
		            if (baseName) {
		                name = name.split('/');
		                lastIndex = name.length - 1;

		                // Node .js allowance:
		                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
		                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
		                }

		                //Lop off the last part of baseParts, so that . matches the
		                //"directory" and not name of the baseName's module. For instance,
		                //baseName of "one/two/three", maps to "one/two/three.js", but we
		                //want the directory, "one/two" for this normalization.
		                name = baseParts.slice(0, baseParts.length - 1).concat(name);

		                //start trimDots
		                for (i = 0; i < name.length; i += 1) {
		                    part = name[i];
		                    if (part === ".") {
		                        name.splice(i, 1);
		                        i -= 1;
		                    } else if (part === "..") {
		                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
		                            //End of the line. Keep at least one non-dot
		                            //path segment at the front so it can be mapped
		                            //correctly to disk. Otherwise, there is likely
		                            //no path mapping for a path starting with '..'.
		                            //This can still fail, but catches the most reasonable
		                            //uses of ..
		                            break;
		                        } else if (i > 0) {
		                            name.splice(i - 1, 2);
		                            i -= 2;
		                        }
		                    }
		                }
		                //end trimDots

		                name = name.join("/");
		            } else if (name.indexOf('./') === 0) {
		                // No baseName, so this is ID is resolved relative
		                // to baseUrl, pull off the leading dot.
		                name = name.substring(2);
		            }
		        }

		        //Apply map config if available.
		        if ((baseParts || starMap) && map) {
		            nameParts = name.split('/');

		            for (i = nameParts.length; i > 0; i -= 1) {
		                nameSegment = nameParts.slice(0, i).join("/");

		                if (baseParts) {
		                    //Find the longest baseName segment match in the config.
		                    //So, do joins on the biggest to smallest lengths of baseParts.
		                    for (j = baseParts.length; j > 0; j -= 1) {
		                        mapValue = map[baseParts.slice(0, j).join('/')];

		                        //baseName segment has  config, find if it has one for
		                        //this name.
		                        if (mapValue) {
		                            mapValue = mapValue[nameSegment];
		                            if (mapValue) {
		                                //Match, update name to the new value.
		                                foundMap = mapValue;
		                                foundI = i;
		                                break;
		                            }
		                        }
		                    }
		                }

		                if (foundMap) {
		                    break;
		                }

		                //Check for a star map match, but just hold on to it,
		                //if there is a shorter segment match later in a matching
		                //config, then favor over this star map.
		                if (!foundStarMap && starMap && starMap[nameSegment]) {
		                    foundStarMap = starMap[nameSegment];
		                    starI = i;
		                }
		            }

		            if (!foundMap && foundStarMap) {
		                foundMap = foundStarMap;
		                foundI = starI;
		            }

		            if (foundMap) {
		                nameParts.splice(0, foundI, foundMap);
		                name = nameParts.join('/');
		            }
		        }

		        return name;
		    }

		    function makeRequire(relName, forceSync) {
		        return function () {
		            //A version of a notrequirebecasebrowserifymessesup function that passes a moduleName
		            //value for items that may need to
		            //look up paths relative to the moduleName
		            var args = aps.call(arguments, 0);

		            //If first arg is not notrequirebecasebrowserifymessesup('string'), and there is only
		            //one arg, it is the array form without a callback. Insert
		            //a null so that the following concat is correct.
		            if (typeof args[0] !== 'string' && args.length === 1) {
		                args.push(null);
		            }
		            return req.apply(undef, args.concat([relName, forceSync]));
		        };
		    }

		    function makeNormalize(relName) {
		        return function (name) {
		            return normalize(name, relName);
		        };
		    }

		    function makeLoad(depName) {
		        return function (value) {
		            defined[depName] = value;
		        };
		    }

		    function callDep(name) {
		        if (hasProp(waiting, name)) {
		            var args = waiting[name];
		            delete waiting[name];
		            defining[name] = true;
		            main.apply(undef, args);
		        }

		        if (!hasProp(defined, name) && !hasProp(defining, name)) {
		            throw new Error('No ' + name);
		        }
		        return defined[name];
		    }

		    //Turns a plugin!resource to [plugin, resource]
		    //with the plugin being undefined if the name
		    //did not have a plugin prefix.
		    function splitPrefix(name) {
		        var prefix,
		            index = name ? name.indexOf('!') : -1;
		        if (index > -1) {
		            prefix = name.substring(0, index);
		            name = name.substring(index + 1, name.length);
		        }
		        return [prefix, name];
		    }

		    /**
		     * Makes a name map, normalizing the name, and using a plugin
		     * for normalization if necessary. Grabs a ref to plugin
		     * too, as an optimization.
		     */
		    makeMap = function (name, relName) {
		        var plugin,
		            parts = splitPrefix(name),
		            prefix = parts[0];

		        name = parts[1];

		        if (prefix) {
		            prefix = normalize(prefix, relName);
		            plugin = callDep(prefix);
		        }

		        //Normalize according
		        if (prefix) {
		            if (plugin && plugin.normalize) {
		                name = plugin.normalize(name, makeNormalize(relName));
		            } else {
		                name = normalize(name, relName);
		            }
		        } else {
		            name = normalize(name, relName);
		            parts = splitPrefix(name);
		            prefix = parts[0];
		            name = parts[1];
		            if (prefix) {
		                plugin = callDep(prefix);
		            }
		        }

		        //Using ridiculous property names for space reasons
		        return {
		            f: prefix ? prefix + '!' + name : name, //fullName
		            n: name,
		            pr: prefix,
		            p: plugin
		        };
		    };

		    function makeConfig(name) {
		        return function () {
		            return (config && config.config && config.config[name]) || {};
		        };
		    }

		    handlers = {
		        notrequirebecasebrowserifymessesup: function (name) {
		            return makeRequire(name);
		        },
		        exports: function (name) {
		            var e = defined[name];
		            if (typeof e !== 'undefined') {
		                return e;
		            } else {
		                return (defined[name] = {});
		            }
		        },
		        module: function (name) {
		            return {
		                id: name,
		                uri: '',
		                exports: defined[name],
		                config: makeConfig(name)
		            };
		        }
		    };

		    main = function (name, deps, callback, relName) {
		        var cjsModule, depName, ret, map, i,
		            args = [],
		            callbackType = typeof callback,
		            usingExports;

		        //Use name if no relName
		        relName = relName || name;

		        //Call the callback to define the module, if necessary.
		        if (callbackType === 'undefined' || callbackType === 'function') {
		            //Pull out the defined dependencies and pass the ordered
		            //values to the callback.
		            //Default to [notrequirebecasebrowserifymessesup, exports, module] if no deps
		            deps = !deps.length && callback.length ? ['notrequirebecasebrowserifymessesup', 'exports', 'module'] : deps;
		            for (i = 0; i < deps.length; i += 1) {
		                map = makeMap(deps[i], relName);
		                depName = map.f;

		                //Fast path CommonJS standard dependencies.
		                if (depName === "notrequirebecasebrowserifymessesup") {
		                    args[i] = handlers.notrequirebecasebrowserifymessesup(name);
		                } else if (depName === "exports") {
		                    //CommonJS module spec 1.1
		                    args[i] = handlers.exports(name);
		                    usingExports = true;
		                } else if (depName === "module") {
		                    //CommonJS module spec 1.1
		                    cjsModule = args[i] = handlers.module(name);
		                } else if (hasProp(defined, depName) ||
		                           hasProp(waiting, depName) ||
		                           hasProp(defining, depName)) {
		                    args[i] = callDep(depName);
		                } else if (map.p) {
		                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
		                    args[i] = defined[depName];
		                } else {
		                    throw new Error(name + ' missing ' + depName);
		                }
		            }

		            ret = callback ? callback.apply(defined[name], args) : undefined;

		            if (name) {
		                //If setting exports via "module" is in play,
		                //favor that over return value and exports. After that,
		                //favor a non-undefined return value over exports use.
		                if (cjsModule && cjsModule.exports !== undef &&
		                        cjsModule.exports !== defined[name]) {
		                    defined[name] = cjsModule.exports;
		                } else if (ret !== undef || !usingExports) {
		                    //Use the return value from the function.
		                    defined[name] = ret;
		                }
		            }
		        } else if (name) {
		            //May just be an object definition for the module. Only
		            //worry about defining if have a module name.
		            defined[name] = callback;
		        }
		    };

		    notrequirebecasebrowserifymessesupjs = notrequirebecasebrowserifymessesup = req = function (deps, callback, relName, forceSync, alt) {
		        if (typeof deps === "string") {
		            if (handlers[deps]) {
		                //callback in this case is really relName
		                return handlers[deps](callback);
		            }
		            //Just return the module wanted. In this scenario, the
		            //deps arg is the module name, and second arg (if passed)
		            //is just the relName.
		            //Normalize module name, if it contains . or ..
		            return callDep(makeMap(deps, callback).f);
		        } else if (!deps.splice) {
		            //deps is a config object, not an array.
		            config = deps;
		            if (config.deps) {
		                req(config.deps, config.callback);
		            }
		            if (!callback) {
		                return;
		            }

		            if (callback.splice) {
		                //callback is an array, which means it is a dependency list.
		                //Adjust args if there are dependencies
		                deps = callback;
		                callback = relName;
		                relName = null;
		            } else {
		                deps = undef;
		            }
		        }

		        //Support notrequirebecasebrowserifymessesup(['a'])
		        callback = callback || function () {};

		        //If relName is a function, it is an errback handler,
		        //so remove it.
		        if (typeof relName === 'function') {
		            relName = forceSync;
		            forceSync = alt;
		        }

		        //Simulate async callback;
		        if (forceSync) {
		            main(undef, deps, callback, relName);
		        } else {
		            //Using a non-zero value because of concern for what old browsers
		            //do, and latest browsers "upgrade" to 4 if lower value is used:
		            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
		            //If want a value immediately, use notrequirebecasebrowserifymessesup('id') instead -- something
		            //that works in almond on the global level, but not guaranteed and
		            //unlikely to work in other AMD implementations.
		            setTimeout(function () {
		                main(undef, deps, callback, relName);
		            }, 4);
		        }

		        return req;
		    };

		    /**
		     * Just drops the config on the floor, but returns req in case
		     * the config return value is used.
		     */
		    req.config = function (cfg) {
		        return req(cfg);
		    };

		    /**
		     * Expose module registry for debugging and tooling
		     */
		    notrequirebecasebrowserifymessesupjs._defined = defined;

		    define = function (name, deps, callback) {
		        if (typeof name !== 'string') {
		            throw new Error('See almond README: incorrect module build, no module name');
		        }

		        //This module may not have dependencies
		        if (!deps.splice) {
		            //deps is not an array, so probably means
		            //an object literal or factory function for
		            //the value. Adjust args.
		            callback = deps;
		            deps = [];
		        }

		        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
		            waiting[name] = [name, deps, callback];
		        }
		    };

		    define.amd = {
		        jQuery: true
		    };
		}());

		define("node_modules/almond/almond.js", function(){});

		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */
		define('twgl/typedarrays',[], function() {
		  

		  /**
		   * Low level shader typed array related functions
		   *
		   * You should generally not need to use these functions. They are provided
		   * for those cases where you're doing something out of the ordinary
		   * and you need lower level access.
		   *
		   * For backward compatibily they are available at both `twgl.typedArray` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/typedArray
		   */


		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line

		  /* DataType */
		  var BYTE                           = 0x1400;
		  var UNSIGNED_BYTE                  = 0x1401;
		  var SHORT                          = 0x1402;
		  var UNSIGNED_SHORT                 = 0x1403;
		  var INT                            = 0x1404;
		  var UNSIGNED_INT                   = 0x1405;
		  var FLOAT                          = 0x1406;

		  /**
		   * Get the GL type for a typedArray
		   * @param {ArrayBuffer|ArrayBufferView} typedArray a typedArray
		   * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will
		   *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned
		   * @memberOf module:twgl/typedArray
		   */
		  function getGLTypeForTypedArray(typedArray) {
		    if (typedArray instanceof Int8Array)         { return BYTE; }           // eslint-disable-line
		    if (typedArray instanceof Uint8Array)        { return UNSIGNED_BYTE; }  // eslint-disable-line
		    if (typedArray instanceof Uint8ClampedArray) { return UNSIGNED_BYTE; }  // eslint-disable-line
		    if (typedArray instanceof Int16Array)        { return SHORT; }          // eslint-disable-line
		    if (typedArray instanceof Uint16Array)       { return UNSIGNED_SHORT; } // eslint-disable-line
		    if (typedArray instanceof Int32Array)        { return INT; }            // eslint-disable-line
		    if (typedArray instanceof Uint32Array)       { return UNSIGNED_INT; }   // eslint-disable-line
		    if (typedArray instanceof Float32Array)      { return FLOAT; }          // eslint-disable-line
		    throw "unsupported typed array type";
		  }

		  /**
		   * Get the typed array constructor for a given GL type
		   * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)
		   * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).
		   * @memberOf module:twgl/typedArray
		   */
		  function getTypedArrayTypeForGLType(type) {
		    switch (type) {
		      case BYTE:           return Int8Array;     // eslint-disable-line
		      case UNSIGNED_BYTE:  return Uint8Array;    // eslint-disable-line
		      case SHORT:          return Int16Array;    // eslint-disable-line
		      case UNSIGNED_SHORT: return Uint16Array;   // eslint-disable-line
		      case INT:            return Int32Array;    // eslint-disable-line
		      case UNSIGNED_INT:   return Uint32Array;   // eslint-disable-line
		      case FLOAT:          return Float32Array;  // eslint-disable-line
		      default:
		        throw "unknown gl type";
		    }
		  }

		  function isArrayBuffer(a) {
		    return a && a.buffer && a.buffer instanceof ArrayBuffer;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  return {
		    "getGLTypeForTypedArray": getGLTypeForTypedArray,
		    "getTypedArrayTypeForGLType": getTypedArrayTypeForGLType,
		    "isArrayBuffer": isArrayBuffer,
		  };
		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/utils',[], function() {
		  

		  /**
		   * Copy an object 1 level deep
		   * @param {object} src object to copy
		   * @return {object} the copy
		   */
		  function shallowCopy(src) {
		    var dst = {};
		    Object.keys(src).forEach(function(key) {
		      dst[key] = src[key];
		    });
		    return dst;
		  }

		  /**
		   * Copy named properties
		   *
		   * @param {string[]} names names of properties to copy
		   * @param {object} src object to copy properties from
		   * @param {object} dst object to copy properties to
		   */
		  function copyNamedProperties(names, src, dst) {
		    names.forEach(function(name) {
		      var value = src[name];
		      if (value !== undefined) {
		        dst[name] = value;
		      }
		    });
		  }

		  /**
		   * Copies properties from source to dest only if a matching key is in dest
		   *
		   * @param {Object.<string, ?>} src the source
		   * @param {Object.<string, ?>} dst the dest
		   */
		  function copyExistingProperties(src, dst) {
		    Object.keys(dst).forEach(function(key) {
		      if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {
		        dst[key] = src[key];
		      }
		    });
		  }

		  /**
		   * Check if context is WebGL 2.0
		   * @return {bool} true if it's WebGL 2.0
		   * @memberOf module:twgl
		   */
		  function isWebGL2(gl) {
		    return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0") === 0;
		  }

		  /**
		   * Check if context is WebGL 1.0
		   * @return {bool} true if it's WebGL 1.0
		   * @memberOf module:twgl
		   */
		  function isWebGL1(gl) {
		    return gl.getParameter(gl.VERSION).indexOf("WebGL 1.0") === 0;
		  }

		  var error =
		      (    window.console
		        && window.console.error
		        && typeof window.console.error === "function"
		      )
		      ? window.console.error.bind(window.console)
		      : function() { };

		  var warn =
		      (    window.console
		        && window.console.warn
		        && typeof window.console.warn === "function"
		      )
		      ? window.console.warn.bind(window.console)
		      : function() { };

		  return {
		    copyExistingProperties: copyExistingProperties,
		    copyNamedProperties: copyNamedProperties,
		    shallowCopy: shallowCopy,
		    isWebGL1: isWebGL1,
		    isWebGL2: isWebGL2,
		    error: error,
		    warn: warn,
		  };
		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/attributes',[
		    './typedarrays',
		    './utils',
		  ], function(
		    typedArrays,
		    utils) {
		  

		  /**
		   * Low level attribute and buffer related functions
		   *
		   * You should generally not need to use these functions. They are provided
		   * for those cases where you're doing something out of the ordinary
		   * and you need lower level access.
		   *
		   * For backward compatibily they are available at both `twgl.attributes` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/attributes
		   */

		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line
		  var defaults = {
		    attribPrefix: "",
		  };

		  /**
		   * Sets the default attrib prefix
		   *
		   * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
		   * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.
		   *
		   * In otherwords I'll create arrays of geometry like this
		   *
		   *     var arrays = {
		   *       position: ...
		   *       normal: ...
		   *       texcoord: ...
		   *     };
		   *
		   * But need those mapped to attributes and my attributes start with `a_`.
		   *
		   * @deprecated see {@link module:twgl.setDefaults}
		   * @param {string} prefix prefix for attribs
		   * @memberOf module:twgl/attributes
		   */
		  function setAttributePrefix(prefix) {
		    defaults.attribPrefix = prefix;
		  }

		  function setDefaults(newDefaults) {
		    utils.copyExistingProperties(newDefaults, defaults);
		  }

		  function setBufferFromTypedArray(gl, type, buffer, array, drawType) {
		    gl.bindBuffer(type, buffer);
		    gl.bufferData(type, array, drawType || gl.STATIC_DRAW);
		  }

		  /**
		   * Given typed array creates a WebGLBuffer and copies the typed array
		   * into it.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {ArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken
		   * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.
		   * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.
		   * @return {WebGLBuffer} the created WebGLBuffer
		   * @memberOf module:twgl/attributes
		   */
		  function createBufferFromTypedArray(gl, typedArray, type, drawType) {
		    if (typedArray instanceof WebGLBuffer) {
		      return typedArray;
		    }
		    type = type || gl.ARRAY_BUFFER;
		    var buffer = gl.createBuffer();
		    setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);
		    return buffer;
		  }

		  function isIndices(name) {
		    return name === "indices";
		  }

		  // This is really just a guess. Though I can't really imagine using
		  // anything else? Maybe for some compression?
		  function getNormalizationForTypedArray(typedArray) {
		    if (typedArray instanceof Int8Array)    { return true; }  // eslint-disable-line
		    if (typedArray instanceof Uint8Array)   { return true; }  // eslint-disable-line
		    return false;
		  }

		  function getArray(array) {
		    return array.length ? array : array.data;
		  }

		  function guessNumComponentsFromName(name, length) {
		    var numComponents;
		    if (name.indexOf("coord") >= 0) {
		      numComponents = 2;
		    } else if (name.indexOf("color") >= 0) {
		      numComponents = 4;
		    } else {
		      numComponents = 3;  // position, normals, indices ...
		    }

		    if (length % numComponents > 0) {
		      throw "can not guess numComponents. You should specify it.";
		    }

		    return numComponents;
		  }

		  function getNumComponents(array, arrayName) {
		    return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);
		  }

		  function makeTypedArray(array, name) {
		    if (typedArrays.isArrayBuffer(array)) {
		      return array;
		    }

		    if (typedArrays.isArrayBuffer(array.data)) {
		      return array.data;
		    }

		    if (Array.isArray(array)) {
		      array = {
		        data: array,
		      };
		    }

		    var Type = array.type;
		    if (!Type) {
		      if (name === "indices") {
		        Type = Uint16Array;
		      } else {
		        Type = Float32Array;
		      }
		    }
		    return new Type(array.data);
		  }

		  /**
		   * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer
		   * for the attribute.
		   *
		   * @typedef {Object} AttribInfo
		   * @property {number} [numComponents] the number of components for this attribute.
		   * @property {number} [size] synonym for `numComponents`.
		   * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`
		   * @property {boolean} [normalized] whether or not to normalize the data. Default = false
		   * @property {number} [offset] offset into buffer in bytes. Default = 0
		   * @property {number} [stride] the stride in bytes per element. Default = 0
		   * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute
		   * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW
		   * @memberOf module:twgl
		   */

		  /**
		   * Use this type of array spec when TWGL can't guess the type or number of compoments of an array
		   * @typedef {Object} FullArraySpec
		   * @property {(number[]|ArrayBuffer)} data The data of the array.
		   * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.
		   *    If `coord` is in the name assumes `numComponents = 2`.
		   *    If `color` is in the name assumes `numComponents = 4`.
		   *    otherwise assumes `numComponents = 3`
		   * @property {constructor} type The type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).
		   * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.
		   * @property {number} [size] synonym for `numComponents`.
		   * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.
		   * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0
		   * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0
		   * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.
		   * @property {string} [name] synonym for `attrib`.
		   * @property {string} [attribName] synonym for `attrib`.
		   * @memberOf module:twgl
		   */

		  /**
		   * An individual array in {@link module:twgl.Arrays}
		   *
		   * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBuffer`
		   * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will
		   * be `Float32Array`
		   *
		   * @typedef {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} ArraySpec
		   * @memberOf module:twgl
		   */

		  /**
		   * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your
		   * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.
		   *
		   *     Bare JavaScript Arrays
		   *
		   *         var arrays = {
		   *            position: [-1, 1, 0],
		   *            normal: [0, 1, 0],
		   *            ...
		   *         }
		   *
		   *     Bare TypedArrays
		   *
		   *         var arrays = {
		   *            position: new Float32Array([-1, 1, 0]),
		   *            color: new Uint8Array([255, 128, 64, 255]),
		   *            ...
		   *         }
		   *
		   * *   Will guess at `numComponents` if not specified based on name.
		   *
		   *     If `coord` is in the name assumes `numComponents = 2`
		   *
		   *     If `color` is in the name assumes `numComponents = 4`
		   *
		   *     otherwise assumes `numComponents = 3`
		   *
		   * Objects with various fields. See {@link module:twgl.FullArraySpec}.
		   *
		   *     var arrays = {
		   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
		   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
		   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
		   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
		   *     };
		   *
		   * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays
		   * @memberOf module:twgl
		   */


		  /**
		   * Creates a set of attribute data and WebGLBuffers from set of arrays
		   *
		   * Given
		   *
		   *      var arrays = {
		   *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
		   *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
		   *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
		   *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },
		   *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
		   *      };
		   *
		   * returns something like
		   *
		   *      var attribs = {
		   *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
		   *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
		   *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },
		   *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },
		   *      };
		   *
		   * notes:
		   *
		   * *   Arrays can take various forms
		   *
		   *     Bare JavaScript Arrays
		   *
		   *         var arrays = {
		   *            position: [-1, 1, 0],
		   *            normal: [0, 1, 0],
		   *            ...
		   *         }
		   *
		   *     Bare TypedArrays
		   *
		   *         var arrays = {
		   *            position: new Float32Array([-1, 1, 0]),
		   *            color: new Uint8Array([255, 128, 64, 255]),
		   *            ...
		   *         }
		   *
		   * *   Will guess at `numComponents` if not specified based on name.
		   *
		   *     If `coord` is in the name assumes `numComponents = 2`
		   *
		   *     If `color` is in the name assumes `numComponents = 4`
		   *
		   *     otherwise assumes `numComponents = 3`
		   *
		   * @param {WebGLRenderingContext} gl The webgl rendering context.
		   * @param {module:twgl.Arrays} arrays The arrays
		   * @return {Object.<string, module:twgl.AttribInfo>} the attribs
		   * @memberOf module:twgl/attributes
		   */
		  function createAttribsFromArrays(gl, arrays) {
		    var attribs = {};
		    Object.keys(arrays).forEach(function(arrayName) {
		      if (!isIndices(arrayName)) {
		        var array = arrays[arrayName];
		        var attribName = array.attrib || array.name || array.attribName || (defaults.attribPrefix + arrayName);
		        var typedArray = makeTypedArray(array, arrayName);
		        attribs[attribName] = {
		          buffer:        createBufferFromTypedArray(gl, typedArray, undefined, array.drawType),
		          numComponents: getNumComponents(array, arrayName),
		          type:          typedArrays.getGLTypeForTypedArray(typedArray),
		          normalize:     array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray),
		          stride:        array.stride || 0,
		          offset:        array.offset || 0,
		          drawType:      array.drawType,
		        };
		      }
		    });
		    return attribs;
		  }

		  /**
		   * Sets the contents of a buffer attached to an attribInfo
		   *
		   * This is helper function to dynamically update a buffer.
		   *
		   * Let's say you make a bufferInfo
		   *
		   *     var arrays = {
		   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
		   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
		   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
		   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
		   *     };
		   *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
		   *
		   *  And you want to dynamically upate the positions. You could do this
		   *
		   *     // assuming arrays.position has already been updated with new data.
		   *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);
		   *
		   * @param {WebGLRenderingContext} gl
		   * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix
		   *   the name of the attribute will include the prefix.
		   * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything
		   *    else will have to be converted to a typed array before it can be used by WebGL. During init time that
		   *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.
		   * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer
		   *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`
		   *    for the portion of the array you want to use.
		   *
		   *        var someArray = new Float32Array(1000); // an array with 1000 floats
		   *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray
		   *
		   *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`
		   * @memberOf module:twgl/attributes
		   */
		  function setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {
		    array = makeTypedArray(array);
		    if (offset) {
		      gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);
		      gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);
		    } else {
		      setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);
		    }
		  }

		  /**
		   * tries to get the number of elements from a set of arrays.
		   */

		  var getNumElementsFromNonIndexedArrays = (function() {
		    var positionKeys = ['position', 'positions', 'a_position'];

		    return function getNumElementsFromNonIndexedArrays(arrays) {
		      var key;
		      for (var ii = 0; ii < positionKeys.length; ++ii) {
		        key = positionKeys[ii];
		        if (key in arrays) {
		          break;
		        }
		      }
		      if (ii === positionKeys.length) {
		        key = Object.keys(arrays)[0];
		      }
		      var array = arrays[key];
		      var length = getArray(array).length;
		      var numComponents = getNumComponents(array, key);
		      var numElements = length / numComponents;
		      if (length % numComponents > 0) {
		        throw "numComponents " + numComponents + " not correct for length " + length;
		      }
		      return numElements;
		    };
		  }());

		  /**
		   * @typedef {Object} BufferInfo
		   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
		   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
		   * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.
		   * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`
		   * @memberOf module:twgl
		   */

		  /**
		   * @typedef {Object} VertexArrayInfo
		   * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.
		   * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..
		   * @property {WebGLVertexArrayObject> [vertexArrayObject] a vertex array object
		   * @memberOf module:twgl
		   */

		  /**
		   * Creates a BufferInfo from an object of arrays.
		   *
		   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
		   * {@link module:twgl:drawBufferInfo}.
		   *
		   * Given an object like
		   *
		   *     var arrays = {
		   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
		   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
		   *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },
		   *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },
		   *     };
		   *
		   *  Creates an BufferInfo like this
		   *
		   *     bufferInfo = {
		   *       numElements: 4,        // or whatever the number of elements is
		   *       indices: WebGLBuffer,  // this property will not exist if there are no indices
		   *       attribs: {
		   *         a_position: { buffer: WebGLBuffer, numComponents: 3, },
		   *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },
		   *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },
		   *       },
		   *     };
		   *
		   *  The properties of arrays can be JavaScript arrays in which case the number of components
		   *  will be guessed.
		   *
		   *     var arrays = {
		   *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],
		   *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],
		   *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],
		   *        indices:  [0, 1, 2, 1, 2, 3],
		   *     };
		   *
		   *  They can also by TypedArrays
		   *
		   *     var arrays = {
		   *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),
		   *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),
		   *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),
		   *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),
		   *     };
		   *
		   *  Or augmentedTypedArrays
		   *
		   *     var positions = createAugmentedTypedArray(3, 4);
		   *     var texcoords = createAugmentedTypedArray(2, 4);
		   *     var normals   = createAugmentedTypedArray(3, 4);
		   *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);
		   *
		   *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);
		   *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);
		   *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
		   *     indices.push([0, 1, 2, 1, 2, 3]);
		   *
		   *     var arrays = {
		   *        position: positions,
		   *        texcoord: texcoords,
		   *        normal:   normals,
		   *        indices:  indices,
		   *     };
		   *
		   * For the last example it is equivalent to
		   *
		   *     var bufferInfo = {
		   *       attribs: {
		   *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },
		   *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },
		   *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },
		   *       },
		   *       indices: gl.createBuffer(),
		   *       numElements: 6,
		   *     };
		   *
		   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);
		   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);
		   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);
		   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);
		   *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);
		   *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);
		   *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);
		   *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {module:twgl.Arrays} arrays Your data
		   * @return {module:twgl.BufferInfo} A BufferInfo
		   * @memberOf module:twgl/attributes
		   */
		  function createBufferInfoFromArrays(gl, arrays) {
		    var bufferInfo = {
		      attribs: createAttribsFromArrays(gl, arrays),
		    };
		    var indices = arrays.indices;
		    if (indices) {
		      indices = makeTypedArray(indices, "indices");
		      bufferInfo.indices = createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);
		      bufferInfo.numElements = indices.length;
		      bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(indices);
		    } else {
		      bufferInfo.numElements = getNumElementsFromNonIndexedArrays(arrays);
		    }

		    return bufferInfo;
		  }

		  /**
		   * Creates a buffer from an array, typed array, or array spec
		   *
		   * Given something like this
		   *
		   *     [1, 2, 3],
		   *
		   * or
		   *
		   *     new Uint16Array([1,2,3]);
		   *
		   * or
		   *
		   *     {
		   *        data: [1, 2, 3],
		   *        type: Uint8Array,
		   *     }
		   *
		   * returns a WebGLBuffer that constains the given data.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
		   * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.
		   * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.
		   * @return {WebGLBuffer} a WebGLBuffer containing the data in array.
		   * @memberOf module:twgl/attributes
		   */
		  function createBufferFromArray(gl, array, arrayName) {
		    var type = arrayName === "indices" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;
		    var typedArray = makeTypedArray(array, arrayName);
		    return createBufferFromTypedArray(gl, typedArray, type);
		  }

		  /**
		   * Creates buffers from arrays or typed arrays
		   *
		   * Given something like this
		   *
		   *     var arrays = {
		   *        positions: [1, 2, 3],
		   *        normals: [0, 0, 1],
		   *     }
		   *
		   * returns something like
		   *
		   *     buffers = {
		   *       positions: WebGLBuffer,
		   *       normals: WebGLBuffer,
		   *     }
		   *
		   * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
		   * @param {module:twgl.Arrays} arrays
		   * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array
		   * @memberOf module:twgl/attributes
		   */
		  function createBuffersFromArrays(gl, arrays) {
		    var buffers = { };
		    Object.keys(arrays).forEach(function(key) {
		      buffers[key] = createBufferFromArray(gl, arrays[key], key);
		    });

		    return buffers;
		  }

		  /**
		   * Creates a BufferInfo from an object of arrays.
		   *
		   * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to
		   * {@link module:twgl:drawBufferInfo}.
		   *
		   * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects
		   *   assign buffers to specific attributes at creation time. That means they can only be used with programs
		   *   who's attributes use the same attribute locations for the same purposes.
		   *
		   * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}
		   *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.
		   *
		   * also
		   *
		   * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object
		   *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**
		   *   will affect the Vertex Array Object state.
		   *
		   * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos
		   *
		   *    You need to make sure every attribute that will be used is bound. So for example assume shader 1
		   *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo
		   *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't
		   *    now attribute D's location.
		   *
		   *    So, you can pass in both shader 1 and shader 2's programInfo
		   *
		   * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo
		   *
		   * @memberOf module:twgl/attributes
		   */
		  function createVertexArrayInfo(gl, programInfos, bufferInfo) {
		    var vao = gl.createVertexArray();
		    gl.bindVertexArray(vao);
		    if (!programInfos.length) {
		      programInfos = [programInfos];
		    }
		    programInfos.forEach(function(programInfo) {
		      twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo);
		    });
		    gl.bindVertexArray(null);
		    return {
		      numElements: bufferInfo.numElements,
		      elementType: bufferInfo.elementType,
		      vertexArrayObject: vao,
		    };
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "createAttribsFromArrays": createAttribsFromArrays,
		    "createBuffersFromArrays": createBuffersFromArrays,
		    "createBufferFromArray": createBufferFromArray,
		    "createBufferFromTypedArray": createBufferFromTypedArray,
		    "createBufferInfoFromArrays": createBufferInfoFromArrays,
		    "setAttribInfoBufferFromArray": setAttribInfoBufferFromArray,

		    "createVertexArrayInfo": createVertexArrayInfo,

		    "setAttributePrefix": setAttributePrefix,

		    "setDefaults_": setDefaults,
		    "getNumComponents_": getNumComponents,
		    "getArray_": getArray,
		  };

		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/programs',[
		    './utils',
		  ], function(
		    utils) {
		  

		  /**
		   * Low level shader program related functions
		   *
		   * You should generally not need to use these functions. They are provided
		   * for those cases where you're doing something out of the ordinary
		   * and you need lower level access.
		   *
		   * For backward compatibily they are available at both `twgl.programs` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/programs
		   */

		  var error = utils.error;
		  var warn = utils.warn;

		  var FLOAT                         = 0x1406;
		  var FLOAT_VEC2                    = 0x8B50;
		  var FLOAT_VEC3                    = 0x8B51;
		  var FLOAT_VEC4                    = 0x8B52;
		  var INT                           = 0x1404;
		  var INT_VEC2                      = 0x8B53;
		  var INT_VEC3                      = 0x8B54;
		  var INT_VEC4                      = 0x8B55;
		  var BOOL                          = 0x8B56;
		  var BOOL_VEC2                     = 0x8B57;
		  var BOOL_VEC3                     = 0x8B58;
		  var BOOL_VEC4                     = 0x8B59;
		  var FLOAT_MAT2                    = 0x8B5A;
		  var FLOAT_MAT3                    = 0x8B5B;
		  var FLOAT_MAT4                    = 0x8B5C;
		  var SAMPLER_2D                    = 0x8B5E;
		  var SAMPLER_CUBE                  = 0x8B60;
		  var SAMPLER_3D                    = 0x8B5F;
		  var SAMPLER_2D_SHADOW             = 0x8B62;
		  var FLOAT_MAT2x3                  = 0x8B65;
		  var FLOAT_MAT2x4                  = 0x8B66;
		  var FLOAT_MAT3x2                  = 0x8B67;
		  var FLOAT_MAT3x4                  = 0x8B68;
		  var FLOAT_MAT4x2                  = 0x8B69;
		  var FLOAT_MAT4x3                  = 0x8B6A;
		  var SAMPLER_2D_ARRAY              = 0x8DC1;
		  var SAMPLER_2D_ARRAY_SHADOW       = 0x8DC4;
		  var SAMPLER_CUBE_SHADOW           = 0x8DC5;
		  var UNSIGNED_INT                  = 0x1405;
		  var UNSIGNED_INT_VEC2             = 0x8DC6;
		  var UNSIGNED_INT_VEC3             = 0x8DC7;
		  var UNSIGNED_INT_VEC4             = 0x8DC8;
		  var INT_SAMPLER_2D                = 0x8DCA;
		  var INT_SAMPLER_3D                = 0x8DCB;
		  var INT_SAMPLER_CUBE              = 0x8DCC;
		  var INT_SAMPLER_2D_ARRAY          = 0x8DCF;
		  var UNSIGNED_INT_SAMPLER_2D       = 0x8DD2;
		  var UNSIGNED_INT_SAMPLER_3D       = 0x8DD3;
		  var UNSIGNED_INT_SAMPLER_CUBE     = 0x8DD4;
		  var UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;

		  var TEXTURE_2D                    = 0x0DE1;
		  var TEXTURE_CUBE_MAP              = 0x8513;
		  var TEXTURE_3D                    = 0x806F;
		  var TEXTURE_2D_ARRAY              = 0x8C1A;

		  var typeMap = {};

		  /**
		   * Returns the corresponding bind point for a given sampler type
		   */
		  function getBindPointForSamplerType(gl, type) {
		    return typeMap[type].bindPoint;
		  }

		  // This kind of sucks! If you could compose functions as in `var fn = gl[name];`
		  // this code could be a lot smaller but that is sadly really slow (T_T)

		  function floatSetter(gl, location) {
		    return function(v) {
		      gl.uniform1f(location, v);
		    };
		  }

		  function floatArraySetter(gl, location) {
		    return function(v) {
		      gl.uniform1fv(location, v);
		    };
		  }

		  function floatVec2Setter(gl, location) {
		    return function(v) {
		      gl.uniform2fv(location, v);
		    };
		  }

		  function floatVec3Setter(gl, location) {
		    return function(v) {
		      gl.uniform3fv(location, v);
		    };
		  }

		  function floatVec4Setter(gl, location) {
		    return function(v) {
		      gl.uniform4fv(location, v);
		    };
		  }

		  function intSetter(gl, location) {
		    return function(v) {
		      gl.uniform1i(location, v);
		    };
		  }

		  function intArraySetter(gl, location) {
		    return function(v) {
		      gl.uniform1iv(location, v);
		    };
		  }

		  function intVec2Setter(gl, location) {
		    return function(v) {
		      gl.uniform2iv(location, v);
		    };
		  }

		  function intVec3Setter(gl, location) {
		    return function(v) {
		      gl.uniform3iv(location, v);
		    };
		  }

		  function intVec4Setter(gl, location) {
		    return function(v) {
		      gl.uniform4iv(location, v);
		    };
		  }

		  function uintSetter(gl, location) {
		    return function(v) {
		      gl.uniform1ui(location, v);
		    };
		  }

		  function uintArraySetter(gl, location) {
		    return function(v) {
		      gl.uniform1uiv(location, v);
		    };
		  }

		  function uintVec2Setter(gl, location) {
		    return function(v) {
		      gl.uniform2uiv(location, v);
		    };
		  }

		  function uintVec3Setter(gl, location) {
		    return function(v) {
		      gl.uniform3uiv(location, v);
		    };
		  }

		  function uintVec4Setter(gl, location) {
		    return function(v) {
		      gl.uniform4uiv(location, v);
		    };
		  }

		  function floatMat2Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix2fv(location, false, v);
		    };
		  }

		  function floatMat3Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix3fv(location, false, v);
		    };
		  }

		  function floatMat4Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix4fv(location, false, v);
		    };
		  }

		  function floatMat23Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix2x3fv(location, false, v);
		    };
		  }

		  function floatMat32Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix3x2fv(location, false, v);
		    };
		  }

		  function floatMat24Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix2x4fv(location, false, v);
		    };
		  }

		  function floatMat42Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix4x2fv(location, false, v);
		    };
		  }

		  function floatMat34Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix3x4fv(location, false, v);
		    };
		  }

		  function floatMat43Setter(gl, location) {
		    return function(v) {
		      gl.uniformMatrix4x3fv(location, false, v);
		    };
		  }

		  function samplerSetter(gl, type, unit, location) {
		    var bindPoint = getBindPointForSamplerType(gl, type);
		    return function(texture) {
		      gl.uniform1i(location, unit);
		      gl.activeTexture(gl.TEXTURE0 + unit);
		      gl.bindTexture(bindPoint, texture);
		    };
		  }

		  function samplerArraySetter(gl, type, unit, location, size) {
		    var bindPoint = getBindPointForSamplerType(gl, type);
		    var units = new Int32Array(size);
		    for (var ii = 0; ii < size; ++ii) {
		      units[ii] = unit + ii;
		    }

		    return function(textures) {
		      gl.uniform1iv(location, units);
		      textures.forEach(function(texture, index) {
		        gl.activeTexture(gl.TEXTURE0 + units[index]);
		        gl.bindTexture(bindPoint, texture);
		      });
		    };
		  }

		  typeMap[FLOAT]                         = { Type: Float32Array, size:  4, setter: floatSetter,      arraySetter: floatArraySetter, };
		  typeMap[FLOAT_VEC2]                    = { Type: Float32Array, size:  8, setter: floatVec2Setter,  };
		  typeMap[FLOAT_VEC3]                    = { Type: Float32Array, size: 12, setter: floatVec3Setter,  };
		  typeMap[FLOAT_VEC4]                    = { Type: Float32Array, size: 16, setter: floatVec4Setter,  };
		  typeMap[INT]                           = { Type: Int32Array,   size:  4, setter: intSetter,        arraySetter: intArraySetter, };
		  typeMap[INT_VEC2]                      = { Type: Int32Array,   size:  8, setter: intVec2Setter,    };
		  typeMap[INT_VEC3]                      = { Type: Int32Array,   size: 12, setter: intVec3Setter,    };
		  typeMap[INT_VEC4]                      = { Type: Int32Array,   size: 16, setter: intVec4Setter,    };
		  typeMap[UNSIGNED_INT]                  = { Type: Uint32Array,  size:  4, setter: uintSetter,       arraySetter: uintArraySetter, };
		  typeMap[UNSIGNED_INT_VEC2]             = { Type: Uint32Array,  size:  8, setter: uintVec2Setter,   };
		  typeMap[UNSIGNED_INT_VEC3]             = { Type: Uint32Array,  size: 12, setter: uintVec3Setter,   };
		  typeMap[UNSIGNED_INT_VEC4]             = { Type: Uint32Array,  size: 16, setter: uintVec4Setter,   };
		  typeMap[BOOL]                          = { Type: Uint32Array,  size:  4, setter: intSetter,        arraySetter: intArraySetter, };
		  typeMap[BOOL_VEC2]                     = { Type: Uint32Array,  size:  8, setter: intVec2Setter,    };
		  typeMap[BOOL_VEC3]                     = { Type: Uint32Array,  size: 12, setter: intVec3Setter,    };
		  typeMap[BOOL_VEC4]                     = { Type: Uint32Array,  size: 16, setter: intVec4Setter,    };
		  typeMap[FLOAT_MAT2]                    = { Type: Float32Array, size: 16, setter: floatMat2Setter,  };
		  typeMap[FLOAT_MAT3]                    = { Type: Float32Array, size: 36, setter: floatMat3Setter,  };
		  typeMap[FLOAT_MAT4]                    = { Type: Float32Array, size: 64, setter: floatMat4Setter,  };
		  typeMap[FLOAT_MAT2x3]                  = { Type: Float32Array, size: 24, setter: floatMat23Setter, };
		  typeMap[FLOAT_MAT2x4]                  = { Type: Float32Array, size: 32, setter: floatMat24Setter, };
		  typeMap[FLOAT_MAT3x2]                  = { Type: Float32Array, size: 24, setter: floatMat32Setter, };
		  typeMap[FLOAT_MAT3x4]                  = { Type: Float32Array, size: 48, setter: floatMat34Setter, };
		  typeMap[FLOAT_MAT4x2]                  = { Type: Float32Array, size: 32, setter: floatMat42Setter, };
		  typeMap[FLOAT_MAT4x3]                  = { Type: Float32Array, size: 48, setter: floatMat43Setter, };
		  typeMap[SAMPLER_2D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };
		  typeMap[SAMPLER_CUBE]                  = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };
		  typeMap[SAMPLER_3D]                    = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };
		  typeMap[SAMPLER_2D_SHADOW]             = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };
		  typeMap[SAMPLER_2D_ARRAY]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };
		  typeMap[SAMPLER_2D_ARRAY_SHADOW]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };
		  typeMap[SAMPLER_CUBE_SHADOW]           = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };
		  typeMap[INT_SAMPLER_2D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };
		  typeMap[INT_SAMPLER_3D]                = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };
		  typeMap[INT_SAMPLER_CUBE]              = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };
		  typeMap[INT_SAMPLER_2D_ARRAY]          = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };
		  typeMap[UNSIGNED_INT_SAMPLER_2D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D,       };
		  typeMap[UNSIGNED_INT_SAMPLER_3D]       = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_3D,       };
		  typeMap[UNSIGNED_INT_SAMPLER_CUBE]     = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_CUBE_MAP, };
		  typeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = { Type: null,         size:  0, setter: samplerSetter,    arraySetter: samplerArraySetter, bindPoint: TEXTURE_2D_ARRAY, };

		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line

		  /**
		   * Error Callback
		   * @callback ErrorCallback
		   * @param {string} msg error message.
		   * @param {number} [lineOffset] amount to add to line number
		   * @memberOf module:twgl
		   */

		  function addLineNumbers(src, lineOffset) {
		    lineOffset = lineOffset || 0;
		    ++lineOffset;

		    return src.split("\n").map(function(line, ndx) {
		      return (ndx + lineOffset) + ": " + line;
		    }).join("\n");
		  }

		  var spaceRE = /^[ \t]*\n/;

		  /**
		   * Loads a shader.
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
		   * @param {string} shaderSource The shader source.
		   * @param {number} shaderType The type of shader.
		   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.
		   * @return {WebGLShader} The created shader.
		   */
		  function loadShader(gl, shaderSource, shaderType, opt_errorCallback) {
		    var errFn = opt_errorCallback || error;
		    // Create the shader object
		    var shader = gl.createShader(shaderType);

		    // Remove the first end of line because WebGL 2.0 notrequirebecasebrowserifymessesups
		    // #version 300 es
		    // as the first line. No whitespace allowed before that line
		    // so
		    //
		    // <script>
		    // #version 300 es
		    // </script>
		    //
		    // Has one line before it which is invalid according to GLSL ES 3.00
		    //
		    var lineOffset = 0;
		    if (spaceRE.test(shaderSource)) {
		      lineOffset = 1;
		      shaderSource = shaderSource.replace(spaceRE, '');
		    }

		    // Load the shader source
		    gl.shaderSource(shader, shaderSource);

		    // Compile the shader
		    gl.compileShader(shader);

		    // Check the compile status
		    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
		    if (!compiled) {
		      // Something went wrong during compilation; get the error
		      var lastError = gl.getShaderInfoLog(shader);
		      errFn(addLineNumbers(shaderSource, lineOffset) + "\n*** Error compiling shader: " + lastError);
		      gl.deleteShader(shader);
		      return null;
		    }

		    return shader;
		  }

		  /**
		   * Creates a program, attaches shaders, binds attrib locations, links the
		   * program and calls useProgram.
		   * @param {WebGLShader[]} shaders The shaders to attach
		   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
		   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
		   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console
		   *        on error. If you want something else pass an callback. It's passed an error message.
		   * @return {WebGLProgram?} the created program or null if error.
		   * @memberOf module:twgl/programs
		   */
		  function createProgram(
		      gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {
		    var errFn = opt_errorCallback || error;
		    var program = gl.createProgram();
		    shaders.forEach(function(shader) {
		      gl.attachShader(program, shader);
		    });
		    if (opt_attribs) {
		      opt_attribs.forEach(function(attrib,  ndx) {
		        gl.bindAttribLocation(
		            program,
		            opt_locations ? opt_locations[ndx] : ndx,
		            attrib);
		      });
		    }
		    gl.linkProgram(program);

		    // Check the link status
		    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
		    if (!linked) {
		        // something went wrong with the link
		        var lastError = gl.getProgramInfoLog(program);
		        errFn("Error in program linking:" + lastError);

		        gl.deleteProgram(program);
		        return null;
		    }
		    return program;
		  }

		  /**
		   * Loads a shader from a script tag.
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.
		   * @param {string} scriptId The id of the script tag.
		   * @param {number} [opt_shaderType] The type of shader. If not passed in it will
		   *     be derived from the type of the script tag.
		   * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.
		   * @return {WebGLShader?} The created shader or null if error.
		   */
		  function createShaderFromScript(
		      gl, scriptId, opt_shaderType, opt_errorCallback) {
		    var shaderSource = "";
		    var shaderType;
		    var shaderScript = document.getElementById(scriptId);
		    if (!shaderScript) {
		      throw "*** Error: unknown script element" + scriptId;
		    }
		    shaderSource = shaderScript.text;

		    if (!opt_shaderType) {
		      if (shaderScript.type === "x-shader/x-vertex") {
		        shaderType = gl.VERTEX_SHADER;
		      } else if (shaderScript.type === "x-shader/x-fragment") {
		        shaderType = gl.FRAGMENT_SHADER;
		      } else if (shaderType !== gl.VERTEX_SHADER && shaderType !== gl.FRAGMENT_SHADER) {
		        throw "*** Error: unknown shader type";
		      }
		    }

		    return loadShader(
		        gl, shaderSource, opt_shaderType ? opt_shaderType : shaderType,
		        opt_errorCallback);
		  }

		  var defaultShaderType = [
		    "VERTEX_SHADER",
		    "FRAGMENT_SHADER",
		  ];

		  /**
		   * Creates a program from 2 script tags.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext
		   *        to use.
		   * @param {string[]} shaderScriptIds Array of ids of the script
		   *        tags for the shaders. The first is assumed to be the
		   *        vertex shader, the second the fragment shader.
		   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
		   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
		   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
		   *        on error. If you want something else pass an callback. It's passed an error message.
		   * @return {WebGLProgram} The created program.
		   * @memberOf module:twgl/programs
		   */
		  function createProgramFromScripts(
		      gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {
		    var shaders = [];
		    for (var ii = 0; ii < shaderScriptIds.length; ++ii) {
		      var shader = createShaderFromScript(
		          gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], opt_errorCallback);
		      if (!shader) {
		        return null;
		      }
		      shaders.push(shader);
		    }
		    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);
		  }

		  /**
		   * Creates a program from 2 sources.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext
		   *        to use.
		   * @param {string[]} shaderSourcess Array of sources for the
		   *        shaders. The first is assumed to be the vertex shader,
		   *        the second the fragment shader.
		   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
		   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
		   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
		   *        on error. If you want something else pass an callback. It's passed an error message.
		   * @return {WebGLProgram} The created program.
		   * @memberOf module:twgl/programs
		   */
		  function createProgramFromSources(
		      gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
		    var shaders = [];
		    for (var ii = 0; ii < shaderSources.length; ++ii) {
		      var shader = loadShader(
		          gl, shaderSources[ii], gl[defaultShaderType[ii]], opt_errorCallback);
		      if (!shader) {
		        return null;
		      }
		      shaders.push(shader);
		    }
		    return createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback);
		  }

		  /**
		   * Creates setter functions for all uniforms of a shader
		   * program.
		   *
		   * @see {@link module:twgl.setUniforms}
		   *
		   * @param {WebGLProgram} program the program to create setters for.
		   * @returns {Object.<string, function>} an object with a setter by name for each uniform
		   * @memberOf module:twgl/programs
		   */
		  function createUniformSetters(gl, program) {
		    var textureUnit = 0;

		    /**
		     * Creates a setter for a uniform of the given program with it's
		     * location embedded in the setter.
		     * @param {WebGLProgram} program
		     * @param {WebGLUniformInfo} uniformInfo
		     * @returns {function} the created setter.
		     */
		    function createUniformSetter(program, uniformInfo) {
		      var location = gl.getUniformLocation(program, uniformInfo.name);
		      var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === "[0]");
		      var type = uniformInfo.type;
		      var typeInfo = typeMap[type];
		      if (!typeInfo) {
		        throw ("unknown type: 0x" + type.toString(16)); // we should never get here.
		      }
		      if (typeInfo.bindPoint) {
		        // it's a sampler
		        var unit = textureUnit;
		        textureUnit += uniformInfo.size;

		        if (isArray) {
		          return typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);
		        } else {
		          return typeInfo.setter(gl, type, unit, location, uniformInfo.size);
		        }
		      } else {
		        if (typeInfo.arraySetter && isArray) {
		          return typeInfo.arraySetter(gl, location);
		        } else {
		          return typeInfo.setter(gl, location);
		        }
		      }
		    }

		    var uniformSetters = { };
		    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);

		    for (var ii = 0; ii < numUniforms; ++ii) {
		      var uniformInfo = gl.getActiveUniform(program, ii);
		      if (!uniformInfo) {
		        break;
		      }
		      var name = uniformInfo.name;
		      // remove the array suffix.
		      if (name.substr(-3) === "[0]") {
		        name = name.substr(0, name.length - 3);
		      }
		      var setter = createUniformSetter(program, uniformInfo);
		      uniformSetters[name] = setter;
		    }
		    return uniformSetters;
		  }

		  /**
		   * @typedef {Object} UniformData
		   * @property {number} type The WebGL type enum for this uniform
		   * @property {number} size The number of elements for this uniform
		   * @property {number} blockNdx The block index this uniform appears in
		   * @property {number} offset The byte offset in the block for this uniform's value
		   * @memberOf module:twgl
		   */

		  /**
		   * The specification for one UniformBlockObject
		   *
		   * @typedef {Object} BlockSpec
		   * @property {number} index The index of the block.
		   * @property {number} size The size in bytes needed for the block
		   * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices
		   *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.
		   * @property {bool} usedByVertexShader Self explanitory
		   * @property {bool} usedByFragmentShader Self explanitory
		   * @property {bool} used Self explanitory
		   * @memberOf module:twgl
		   */

		  /**
		   * A `UniformBlockSpec` represents the data needed to create and bind
		   * UniformBlockObjects for a given program
		   *
		   * @typedef {Object} UniformBlockSpec
		   * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name
		   * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.
		   * @memberOf module:twgl
		   */

		  /**
		   * Creates a UniformBlockSpec for the given program.
		   *
		   * A UniformBlockSpec represents the data needed to create and bind
		   * UniformBlockObjects
		   *
		   * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context
		   * @param {WebGLProgram} program A WebGLProgram for a successfully linked program
		   * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec
		   * @memberOf module:twgl/programs
		   */
		  function createUniformBlockSpecFromProgram(gl, program) {
		    var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
		    var uniformData = [];
		    var uniformIndices = [];

		    for (var ii = 0; ii < numUniforms; ++ii) {
		      uniformIndices.push(ii);
		      uniformData.push({});
		      var uniformInfo = gl.getActiveUniform(program, ii);
		      if (!uniformInfo) {
		        break;
		      }
		      // REMOVE [0]?
		      uniformData[ii].name = uniformInfo.name;
		    }

		    [
		      [ "UNIFORM_TYPE", "type" ],
		      [ "UNIFORM_SIZE", "size" ],  // num elements
		      [ "UNIFORM_BLOCK_INDEX", "blockNdx" ],
		      [ "UNIFORM_OFFSET", "offset", ],
		    ].forEach(function(pair) {
		      var pname = pair[0];
		      var key = pair[1];
		      gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function(value, ndx) {
		        uniformData[ndx][key] = value;
		      });
		    });

		    var blockSpecs = {};

		    var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);
		    for (ii = 0; ii < numUniformBlocks; ++ii) {
		      var name = gl.getActiveUniformBlockName(program, ii);
		      var blockSpec = {
		        index: ii,
		        usedByVertexShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
		        usedByFragmentShader: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
		        size: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_DATA_SIZE),
		        uniformIndices: gl.getActiveUniformBlockParameter(program, ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
		      };
		      blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;
		      blockSpecs[name] = blockSpec;
		    }

		    return {
		      blockSpecs: blockSpecs,
		      uniformData: uniformData,
		    };
		  }

		  var arraySuffixRE = /\[\d+\]\.$/;  // better way to check?

		  /**
		   * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values
		   * and a corresponding WebGLBuffer to hold those values on the GPU
		   *
		   * @typedef {Object} UniformBlockInfo
		   * @property {string} name The name of the block
		   * @property {ArrayBuffer} array The array buffer that contains the uniform values
		   * @property {Float32Array} asFloat A float view on the array buffer. This is useful
		   *    inspecting the contents of the buffer in the debugger.
		   * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.
		   * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.
		   *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset
		   *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`
		   *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an
		   *   `Int32Array` view, etc.
		   * @memberOf module:twgl
		   */

		  /**
		   * Creates a `UniformBlockInfo` for the specified block
		   *
		   * Note: **A warning is printed to the console of the blockName makes no existing blocks and a dummy
		   * `UniformBlockInfo` is returned**. This is because when debugging GLSL
		   * it is common to comment out large portions of a shader or for example set
		   * the final output to a constant. When that happens blocks get optimized out.
		   * If this function did not create dummy blocks your code would crash when debugging.
		   *
		   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
		   * @param {WebGLProgram} program A WebGLProgram
		   * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned
		   *     from {@link module:twgl.createUniformBlockSpecFromProgram}.
		   * @param {string} blockName The name of the block.
		   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
		   * @memberOf module:twgl/programs
		   */
		  function createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {
		    var blockSpecs = uniformBlockSpec.blockSpecs;
		    var uniformData = uniformBlockSpec.uniformData;
		    var blockSpec = blockSpecs[blockName];
		    if (!blockSpec) {
		      warn("no uniform block object named:", blockName);
		      return {
		        name: blockName,
		        uniforms: {},
		      };
		    }
		    var array = new ArrayBuffer(blockSpec.size);
		    var buffer = gl.createBuffer();
		    var uniformBufferIndex = blockSpec.index;
		    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);
		    gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);

		    var prefix = blockName + ".";
		    if (arraySuffixRE.test(prefix)) {
		      prefix = prefix.replace(arraySuffixRE, ".");
		    }
		    var uniforms = {};
		    blockSpec.uniformIndices.forEach(function(uniformNdx) {
		      var data = uniformData[uniformNdx];
		      var typeInfo = typeMap[data.type];
		      var Type = typeInfo.Type;
		      var length = data.size * typeInfo.size;
		      var name = data.name;
		      if (name.substr(0, prefix.length) === prefix) {
		        name = name.substr(prefix.length);
		      }
		      uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);
		    });
		    return {
		      name: blockName,
		      array: array,
		      asFloat: new Float32Array(array),  // for debugging
		      buffer: buffer,
		      uniforms: uniforms,
		    };
		  }

		  /**
		   * Creates a `UniformBlockInfo` for the specified block
		   *
		   * Note: **A warning is printed to the console of the blockName makes no existing blocks and a dummy
		   * `UniformBlockInfo` is returned**. This is because when debugging GLSL
		   * it is common to comment out large portions of a shader or for example set
		   * the final output to a constant. When that happens blocks get optimized out.
		   * If this function did not create dummy blocks your code would crash when debugging.
		   *
		   * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext
		   * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`
		   *     as returned from {@link module:twgl.createProgramInfo}
		   * @param {string} blockName The name of the block.
		   * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo
		   * @memberOf module:twgl/programs
		   */
		  function createUniformBlockInfo(gl, programInfo, blockName) {
		    return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);
		  }

		  /**
		   * Binds a unform block to the matching uniform block point.
		   * Matches by blocks by name so blocks must have the same name not just the same
		   * structure.
		   *
		   * If you have changed any values and you upload the valus into the corresponding WebGLBuffer
		   * call {@link module:twgl.setUniformBlock} instead.
		   *
		   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
		   * @param {{module:twgl.ProgramInfo|module:twgl.UniformBlockSpec} programInfo a `ProgramInfo`
		   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
		   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
		   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
		   *     {@link module:twgl.createUniformBlockInfo}.
		   * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name
		   *     no buffer is bound.
		   * @memberOf module:twgl/programs
		   */
		  function bindUniformBlock(gl, programInfo, uniformBlockInfo) {
		    var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;
		    var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];
		    if (blockSpec) {
		      var bufferBindIndex = blockSpec.index;
		      gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, 0, uniformBlockInfo.array.byteLength);
		      return true;
		    }
		    return false;
		  }

		  /**
		   * Uploads the current uniform values to the corresponding WebGLBuffer
		   * and binds that buffer to the program's corresponding bind point for the uniform block object.
		   *
		   * If you haven't changed any values and you only need to bind the uniform block object
		   * call {@link module:twgl.bindUniformBlock} instead.
		   *
		   * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.
		   * @param {{module:twgl.ProgramInfo|module:twgl.UniformBlockSpec} programInfo a `ProgramInfo`
		   *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as
		   *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.
		   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from
		   *     {@link module:twgl.createUniformBlockInfo}.
		   * @memberOf module:twgl/programs
		   */
		  function setUniformBlock(gl, programInfo, uniformBlockInfo) {
		    if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {
		      gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);
		    }
		  }

		  /**
		   * Sets values of a uniform block object
		   *
		   * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.
		   * @param {Object.<string, ???> values A uniform name to value map where the value is correct for the given
		   *    type of uniform. So for example given a block like
		   *
		   *       uniform SomeBlock {
		   *         float someFloat;
		   *         vec2 someVec2;
		   *         vec3 someVec3Array[2];
		   *         int someInt;
		   *       }
		   *
		   *  You can set the values of the uniform block with
		   *
		   *       twgl.setBlockUniforms(someBlockInfo, {
		   *          someFloat: 12.3,
		   *          someVec2: [1, 2],
		   *          someVec3Array: [1, 2, 3, 4, 5, 6],
		   *          someInt: 5,
		   *       }
		   *
		   *  Arrays can be JavaScript arrays or typed arrays
		   *
		   *  Any name that doesn't match will be ignored
		   * @memberOf module:twgl/programs
		   */
		  function setBlockUniforms(uniformBlockInfo, values) {
		    var uniforms = uniformBlockInfo.uniforms;
		    for (var name in values) {
		      var array = uniforms[name];
		      if (array) {
		        var value = values[name];
		        if (value.length) {
		          array.set(value);
		        } else {
		          array[0] = value;
		        }
		      }
		    }
		  }

		  /**
		   * Set uniforms and binds related textures.
		   *
		   * example:
		   *
		   *     var programInfo = createProgramInfo(
		   *         gl, ["some-vs", "some-fs"]);
		   *
		   *     var tex1 = gl.createTexture();
		   *     var tex2 = gl.createTexture();
		   *
		   *     ... assume we setup the textures with data ...
		   *
		   *     var uniforms = {
		   *       u_someSampler: tex1,
		   *       u_someOtherSampler: tex2,
		   *       u_someColor: [1,0,0,1],
		   *       u_somePosition: [0,1,1],
		   *       u_someMatrix: [
		   *         1,0,0,0,
		   *         0,1,0,0,
		   *         0,0,1,0,
		   *         0,0,0,0,
		   *       ],
		   *     };
		   *
		   *     gl.useProgram(program);
		   *
		   * This will automatically bind the textures AND set the
		   * uniforms.
		   *
		   *     twgl.setUniforms(programInfo, uniforms);
		   *
		   * For the example above it is equivalent to
		   *
		   *     var texUnit = 0;
		   *     gl.activeTexture(gl.TEXTURE0 + texUnit);
		   *     gl.bindTexture(gl.TEXTURE_2D, tex1);
		   *     gl.uniform1i(u_someSamplerLocation, texUnit++);
		   *     gl.activeTexture(gl.TEXTURE0 + texUnit);
		   *     gl.bindTexture(gl.TEXTURE_2D, tex2);
		   *     gl.uniform1i(u_someSamplerLocation, texUnit++);
		   *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);
		   *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);
		   *     gl.uniformMatrix4fv(u_someMatrix, false, [
		   *         1,0,0,0,
		   *         0,1,0,0,
		   *         0,0,1,0,
		   *         0,0,0,0,
		   *       ]);
		   *
		   * Note it is perfectly reasonable to call `setUniforms` multiple times. For example
		   *
		   *     var uniforms = {
		   *       u_someSampler: tex1,
		   *       u_someOtherSampler: tex2,
		   *     };
		   *
		   *     var moreUniforms {
		   *       u_someColor: [1,0,0,1],
		   *       u_somePosition: [0,1,1],
		   *       u_someMatrix: [
		   *         1,0,0,0,
		   *         0,1,0,0,
		   *         0,0,1,0,
		   *         0,0,0,0,
		   *       ],
		   *     };
		   *
		   *     twgl.setUniforms(programInfo, uniforms);
		   *     twgl.setUniforms(programInfo, moreUniforms);
		   *
		   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from
		   *        `createUniformSetters`.
		   * @param {Object.<string, ?>} values an object with values for the
		   *        uniforms.
		   *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example
		   *
		   *     var sharedUniforms = {
		   *       u_fogNear: 10,
		   *       u_projection: ...
		   *       ...
		   *     };
		   *
		   *     var localUniforms = {
		   *       u_world: ...
		   *       u_diffuseColor: ...
		   *     };
		   *
		   *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);
		   *
		   *     // is the same as
		   *
		   *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);
		   *
		   *     // is the same as
		   *
		   *     twgl.setUniforms(programInfo, sharedUniforms);
		   *     twgl.setUniforms(programInfo, localUniforms};
		   *
		   * @memberOf module:twgl/programs
		   */
		  function setUniforms(setters, values) {  // eslint-disable-line
		    var actualSetters = setters.uniformSetters || setters;
		    var numArgs = arguments.length;
		    for (var andx = 1; andx < numArgs; ++andx) {
		      var vals = arguments[andx];
		      if (Array.isArray(vals)) {
		        var numValues = vals.length;
		        for (var ii = 0; ii < numValues; ++ii) {
		          setUniforms(actualSetters, vals[ii]);
		        }
		      } else {
		        for (var name in vals) {
		          var setter = actualSetters[name];
		          if (setter) {
		            setter(vals[name]);
		          }
		        }
		      }
		    }
		  }

		  /**
		   * Creates setter functions for all attributes of a shader
		   * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.
		   *
		   * @see {@link module:twgl.setAttributes} for example
		   * @param {WebGLProgram} program the program to create setters for.
		   * @return {Object.<string, function>} an object with a setter for each attribute by name.
		   * @memberOf module:twgl/programs
		   */
		  function createAttributeSetters(gl, program) {
		    var attribSetters = {
		    };

		    function createAttribSetter(index) {
		      return function(b) {
		          gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
		          gl.enableVertexAttribArray(index);
		          gl.vertexAttribPointer(
		              index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);
		        };
		    }

		    var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
		    for (var ii = 0; ii < numAttribs; ++ii) {
		      var attribInfo = gl.getActiveAttrib(program, ii);
		      if (!attribInfo) {
		        break;
		      }
		      var index = gl.getAttribLocation(program, attribInfo.name);
		      attribSetters[attribInfo.name] = createAttribSetter(index);
		    }

		    return attribSetters;
		  }

		  /**
		   * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})
		   *
		   * Example:
		   *
		   *     var program = createProgramFromScripts(
		   *         gl, ["some-vs", "some-fs");
		   *
		   *     var attribSetters = createAttributeSetters(program);
		   *
		   *     var positionBuffer = gl.createBuffer();
		   *     var texcoordBuffer = gl.createBuffer();
		   *
		   *     var attribs = {
		   *       a_position: {buffer: positionBuffer, numComponents: 3},
		   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
		   *     };
		   *
		   *     gl.useProgram(program);
		   *
		   * This will automatically bind the buffers AND set the
		   * attributes.
		   *
		   *     setAttributes(attribSetters, attribs);
		   *
		   * Properties of attribs. For each attrib you can add
		   * properties:
		   *
		   * *   type: the type of data in the buffer. Default = gl.FLOAT
		   * *   normalize: whether or not to normalize the data. Default = false
		   * *   stride: the stride. Default = 0
		   * *   offset: offset into the buffer. Default = 0
		   *
		   * For example if you had 3 value float positions, 2 value
		   * float texcoord and 4 value uint8 colors you'd setup your
		   * attribs like this
		   *
		   *     var attribs = {
		   *       a_position: {buffer: positionBuffer, numComponents: 3},
		   *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},
		   *       a_color: {
		   *         buffer: colorBuffer,
		   *         numComponents: 4,
		   *         type: gl.UNSIGNED_BYTE,
		   *         normalize: true,
		   *       },
		   *     };
		   *
		   * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters
		   * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.
		   * @memberOf module:twgl/programs
		   * @deprecated use {@link module:twgl.setBuffersAndAttributes}
		   */
		  function setAttributes(setters, buffers) {
		    for (var name in buffers) {
		      var setter = setters[name];
		      if (setter) {
		        setter(buffers[name]);
		      }
		    }
		  }

		  /**
		   * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate
		   *
		   * Example:
		   *
		   *     var programInfo = createProgramInfo(
		   *         gl, ["some-vs", "some-fs");
		   *
		   *     var arrays = {
		   *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },
		   *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },
		   *     };
		   *
		   *     var bufferInfo = createBufferInfoFromArrays(gl, arrays);
		   *
		   *     gl.useProgram(programInfo.program);
		   *
		   * This will automatically bind the buffers AND set the
		   * attributes.
		   *
		   *     setBuffersAndAttributes(gl, programInfo, bufferInfo);
		   *
		   * For the example above it is equivilent to
		   *
		   *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
		   *     gl.enableVertexAttribArray(a_positionLocation);
		   *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);
		   *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
		   *     gl.enableVertexAttribArray(a_texcoordLocation);
		   *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext.
		   * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}
		   * @param {(module:twgl.BufferInfo|module:twgl.vertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.
		   *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}
		   * @memberOf module:twgl/programs
		   */
		  function setBuffersAndAttributes(gl, programInfo, buffers) {
		    if (buffers.vertexArrayObject) {
		      gl.bindVertexArray(buffers.vertexArrayObject);
		    } else {
		      setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);
		      if (buffers.indices) {
		        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);
		      }
		    }
		  }

		  /**
		   * @typedef {Object} ProgramInfo
		   * @property {WebGLProgram} program A shader program
		   * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,
		   * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,
		   * @memberOf module:twgl
		   */

		  /**
		   * Creates a ProgramInfo from an existing program.
		   *
		   * A ProgramInfo contains
		   *
		   *     programInfo = {
		   *        program: WebGLProgram,
		   *        uniformSetters: object of setters as returned from createUniformSetters,
		   *        attribSetters: object of setters as returned from createAttribSetters,
		   *     }
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext
		   *        to use.
		   * @param {WebGLProgram} program an existing WebGLProgram.
		   * @return {module:twgl.ProgramInfo} The created ProgramInfo.
		   * @memberOf module:twgl/programs
		   */
		  function createProgramInfoFromProgram(gl, program) {
		    var uniformSetters = createUniformSetters(gl, program);
		    var attribSetters = createAttributeSetters(gl, program);
		    var programInfo = {
		      program: program,
		      uniformSetters: uniformSetters,
		      attribSetters: attribSetters,
		    };

		    if (utils.isWebGL2(gl)) {
		      programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);
		    }

		    return programInfo;
		  }

		  /**
		   * Creates a ProgramInfo from 2 sources.
		   *
		   * A ProgramInfo contains
		   *
		   *     programInfo = {
		   *        program: WebGLProgram,
		   *        uniformSetters: object of setters as returned from createUniformSetters,
		   *        attribSetters: object of setters as returned from createAttribSetters,
		   *     }
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext
		   *        to use.
		   * @param {string[]} shaderSourcess Array of sources for the
		   *        shaders or ids. The first is assumed to be the vertex shader,
		   *        the second the fragment shader.
		   * @param {string[]} [opt_attribs] An array of attribs names. Locations will be assigned by index if not passed in
		   * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.
		   * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors. By default it just prints an error to the console
		   *        on error. If you want something else pass an callback. It's passed an error message.
		   * @return {module:twgl.ProgramInfo?} The created ProgramInfo.
		   * @memberOf module:twgl/programs
		   */
		  function createProgramInfo(
		      gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {
		    shaderSources = shaderSources.map(function(source) {
		      var script = document.getElementById(source);
		      return script ? script.text : source;
		    });
		    var program = createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback);
		    if (!program) {
		      return null;
		    }
		    return createProgramInfoFromProgram(gl, program);
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "createAttributeSetters": createAttributeSetters,

		    "createProgram": createProgram,
		    "createProgramFromScripts": createProgramFromScripts,
		    "createProgramFromSources": createProgramFromSources,
		    "createProgramInfo": createProgramInfo,
		    "createProgramInfoFromProgram": createProgramInfoFromProgram,
		    "createUniformSetters": createUniformSetters,
		    "createUniformBlockSpecFromProgram": createUniformBlockSpecFromProgram,
		    "createUniformBlockInfoFromProgram": createUniformBlockInfoFromProgram,
		    "createUniformBlockInfo": createUniformBlockInfo,

		    "setAttributes": setAttributes,
		    "setBuffersAndAttributes": setBuffersAndAttributes,
		    "setUniforms": setUniforms,
		    "setUniformBlock": setUniformBlock,
		    "setBlockUniforms": setBlockUniforms,
		    "bindUniformBlock": bindUniformBlock,
		  };

		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/draw',[
		    './programs',
		  ], function(
		    programs) {
		  

		  /**
		   * Drawing related functions
		   *
		   * For backward compatibily they are available at both `twgl.draw` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/draw
		   */

		  /**
		   * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate
		   *
		   * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself
		   * but calling this means if you switch from indexed data to non-indexed
		   * data you don't have to remember to update your draw call.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {enum} type eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...)
		   * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or
		   *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
		   * @param {number} [count] An optional count. Defaults to bufferInfo.numElements
		   * @param {number} [offset] An optional offset. Defaults to 0.
		   * @memberOf module:twgl/draw
		   */
		  function drawBufferInfo(gl, type, bufferInfo, count, offset) {
		    var indices = bufferInfo.indices;
		    var elementType = bufferInfo.elementType;
		    var numElements = count === undefined ? bufferInfo.numElements : count;
		    offset = offset === undefined ? 0 : offset;
		    if (elementType || indices) {
		      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);
		    } else {
		      gl.drawArrays(type, offset, numElements);
		    }
		  }

		  /**
		   * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.
		   *
		   * You need either a `BufferInfo` or a `VertexArrayInfo`.
		   *
		   * @typedef {Object} DrawObject
		   * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`
		   * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...
		   * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}
		   * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}
		   * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}
		   * @property {Object<string, ?>} uniforms The values for the uniforms.
		   *   You can pass multiple objects by putting them in an array. For example
		   *
		   *     var sharedUniforms = {
		   *       u_fogNear: 10,
		   *       u_projection: ...
		   *       ...
		   *     };
		   *
		   *     var localUniforms = {
		   *       u_world: ...
		   *       u_diffuseColor: ...
		   *     };
		   *
		   *     var drawObj = {
		   *       ...
		   *       uniforms: [sharedUniforms, localUniforms],
		   *     };
		   *
		   * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.
		   * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.
		   * @memberOf module:twgl
		   */

		  /**
		   * Draws a list of objects
		   * @param {DrawObject[]} objectsToDraw an array of objects to draw.
		   * @memberOf module:twgl/draw
		   */
		  function drawObjectList(gl, objectsToDraw) {
		    var lastUsedProgramInfo = null;
		    var lastUsedBufferInfo = null;

		    objectsToDraw.forEach(function(object) {
		      if (object.active === false) {
		        return;
		      }

		      var programInfo = object.programInfo;
		      var bufferInfo = object.vertexArrayInfo || object.bufferInfo;
		      var bindBuffers = false;

		      if (programInfo !== lastUsedProgramInfo) {
		        lastUsedProgramInfo = programInfo;
		        gl.useProgram(programInfo.program);

		        // We have to rebind buffers when changing programs because we
		        // only bind buffers the program uses. So if 2 programs use the same
		        // bufferInfo but the 1st one uses only positions the when the
		        // we switch to the 2nd one some of the attributes will not be on.
		        bindBuffers = true;
		      }

		      // Setup all the needed attributes.
		      if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {
		        if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {
		          gl.bindVertexArray(null);
		        }
		        lastUsedBufferInfo = bufferInfo;
		        programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);
		      }

		      // Set the uniforms.
		      programs.setUniforms(programInfo, object.uniforms);

		      // Draw
		      drawBufferInfo(gl, object.type || gl.TRIANGLES, bufferInfo, object.count, object.offset);
		    });

		    if (lastUsedBufferInfo.vertexArrayObject) {
		      gl.bindVertexArray(null);
		    }
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "drawBufferInfo": drawBufferInfo,
		    "drawObjectList": drawObjectList,
		  };

		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/textures',[
		    './typedarrays',
		    './utils',
		  ], function(
		    typedArrays,
		    utils) {
		  

		  /**
		   * Low level texture related functions
		   *
		   * You should generally not need to use these functions. They are provided
		   * for those cases where you're doing something out of the ordinary
		   * and you need lower level access.
		   *
		   * For backward compatibily they are available at both `twgl.textures` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/textures
		   */

		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line
		  var defaults = {
		    textureColor: new Uint8Array([128, 192, 255, 255]),
		    textureOptions: {},
		    crossOrigin: undefined,
		  };
		  var isArrayBuffer = typedArrays.isArrayBuffer;

		  /* PixelFormat */
		  var ALPHA                          = 0x1906;
		  var RGB                            = 0x1907;
		  var RGBA                           = 0x1908;
		  var LUMINANCE                      = 0x1909;
		  var LUMINANCE_ALPHA                = 0x190A;

		  /* TextureWrapMode */
		  var REPEAT                         = 0x2901;  // eslint-disable-line
		  var MIRRORED_REPEAT                = 0x8370;  // eslint-disable-line

		  /* TextureMagFilter */
		  var NEAREST                        = 0x2600;  // eslint-disable-line

		  /* TextureMinFilter */
		  var NEAREST_MIPMAP_NEAREST         = 0x2700;  // eslint-disable-line
		  var LINEAR_MIPMAP_NEAREST          = 0x2701;  // eslint-disable-line
		  var NEAREST_MIPMAP_LINEAR          = 0x2702;  // eslint-disable-line
		  var LINEAR_MIPMAP_LINEAR           = 0x2703;  // eslint-disable-line

		  /**
		   * Sets the default texture color.
		   *
		   * The default texture color is used when loading textures from
		   * urls. Because the URL will be loaded async we'd like to be
		   * able to use the texture immediately. By putting a 1x1 pixel
		   * color in the texture we can start using the texture before
		   * the URL has loaded.
		   *
		   * @param {number[]} color Array of 4 values in the range 0 to 1
		   * @deprecated see {@link module:twgl.setDefaults}
		   * @memberOf module:twgl/textures
		   */
		  function setDefaultTextureColor(color) {
		    defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
		  }

		  function setDefaults(newDefaults) {
		    utils.copyExistingProperties(newDefaults, defaults);
		    if (newDefaults.textureColor) {
		      setDefaultTextureColor(newDefaults.textureColor);
		    }
		  }

		  /**
		   * Gets a string for gl enum
		   *
		   * Note: Several enums are the same. Without more
		   * context (which function) it's impossible to always
		   * give the correct enum.
		   *
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {number} value the value of the enum you want to look up.
		   */
		  var glEnumToString = (function() {
		    var enums;

		    function init(gl) {
		      if (!enums) {
		        enums = {};
		        Object.keys(gl).forEach(function(key) {
		          if (typeof gl[key] === 'number') {
		            enums[gl[key]] = key;
		          }
		        });
		      }
		    }

		    return function glEnumToString(gl, value) {
		      init();
		      return enums[value] || ("0x" + value.toString(16));
		    };
		  }());

		  /**
		   * A function to generate the source for a texture.
		   * @callback TextureFunc
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   * @param {module:twgl.TextureOptions} options the texture options
		   * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.
		   * @memberOf module:twgl
		   */

		  /**
		   * Texture options passed to most texture functions. Each function will use whatever options
		   * are appropriate for its needs. This lets you pass the same options to all functions.
		   *
		   * @typedef {Object} TextureOptions
		   * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.
		   * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.
		   * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.
		   * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`
		   *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.
		   * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`
		   * @property {number} [format] format for texture. Defaults to `gl.RGBA`.
		   * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBuffer. If `src`
		   *     is ArrayBuffer defaults to type that matches ArrayBuffer type.
		   * @property {number} [wrap] Texture wrapping for both S and T. Defaults to `gl.REPEAT` for 2D and `gl.CLAMP_TO_EDGE` for cube
		   * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
		   * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.
		   * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.
		   * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.
		   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
		   *     the current setting for specific textures.
		   * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.
		   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
		   *     the current setting for specific textures.
		   * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.
		   *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override
		   *     the current setting for specific textures.
		   * @property {(number[]|ArrayBuffer)} color color used as temporary 1x1 pixel color for textures loaded async when src is a string.
		   *    If it's a JavaScript array assumes color is 0 to 1 like most GL colors as in `[1, 0, 0, 1] = red=1, green=0, blue=0, alpha=0`.
		   *    Defaults to `[0.5, 0.75, 1, 1]`. See {@link module:twgl.setDefaultTextureColor}. If `false` texture is set. Can be used to re-load a texture
		   * @property {boolean} [auto] If not `false` then texture working filtering is set automatically for non-power of 2 images and
		   *    mips are generated for power of 2 images.
		   * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is
		   *
		   *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,
		   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
		   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
		   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
		   *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
		   *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]
		   *
		   * @property {(number[]|ArrayBuffer|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement|string|string[]|module:twgl.TextureFunc)} [src] source for texture
		   *
		   *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable
		   *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.
		   *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.
		   *    The pieces will be uploaded in `cubeFaceOrder`
		   *
		   *    If `string[]` then it must have 6 entries, one for each face of a cube map. Target must be `gl.TEXTURE_CUBE_MAP`.
		   *
		   *    If `HTMLElement` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,
		   *    `HTMLCanvasElement`, `HTMLVideoElement`.
		   *
		   *    If `number[]` or `ArrayBuffer` it's assumed to be data for a texture. If `width` or `height` is
		   *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponets`
		   *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided
		   *    by 6. Then
		   *
		   *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height
		   *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.
		   *
		   *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.
		   *
		   * If `number[]` will be converted to `type`.
		   *
		   * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.
		   * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`
		   * an array etc...
		   *
		   * If `src` is undefined then an empty texture will be created of size `width` by `height`.
		   *
		   * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.
		   *    default: undefined. Also see {@link module:twgl.setDefaults}.
		   *
		   * @memberOf module:twgl
		   */

		  // NOTE: While querying GL is considered slow it's not remotely as slow
		  // as uploading a texture. On top of that you're unlikely to call this in
		  // a perf critical loop. Even if upload a texture every frame that's unlikely
		  // to be more than 1 or 2 textures a frame. In other words, the benefits of
		  // making the API easy to use outweigh any supposed perf benefits
		  var lastPackState = {};

		  /**
		   * Saves any packing state that will be set based on the options.
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   */
		  function savePackState(gl, options) {
		    if (options.colorspaceConversion !== undefined) {
		      lastPackState.colorSpaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);
		    }
		    if (options.premultiplyAlpha !== undefined) {
		      lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);
		    }
		    if (options.flipY !== undefined) {
		      lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);
		    }
		  }

		  /**
		   * Restores any packing state that was set based on the options.
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   */
		  function restorePackState(gl, options) {
		    if (options.colorspaceConversion !== undefined) {
		      gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorSpaceConversion);
		    }
		    if (options.premultiplyAlpha !== undefined) {
		      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);
		    }
		    if (options.flipY !== undefined) {
		      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);
		    }
		  }

		  /**
		   * Sets the texture parameters of a texture.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @memberOf module:twgl/textures
		   */
		  function setTextureParameters(gl, tex, options) {
		    var target = options.target || gl.TEXTURE_2D;
		    gl.bindTexture(target, tex);
		    if (options.min) {
		      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, options.min);
		    }
		    if (options.mag) {
		      gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, options.mag);
		    }
		    if (options.wrap) {
		      gl.texParameteri(target, gl.TEXTURE_WRAP_S, options.wrap);
		      gl.texParameteri(target, gl.TEXTURE_WRAP_T, options.wrap);
		    }
		    if (options.wrapS) {
		      gl.texParameteri(target, gl.TEXTURE_WRAP_S, options.wrapS);
		    }
		    if (options.wrapT) {
		      gl.texParameteri(target, gl.TEXTURE_WRAP_T, options.wrapT);
		    }
		  }

		  /**
		   * Makes a 1x1 pixel
		   * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.
		   * @param {(number[]|ArrayBuffer)} [color] The color using 0-1 values
		   * @return {Uint8Array} Unit8Array with color.
		   */
		  function make1Pixel(color) {
		    color = color || defaults.textureColor;
		    if (isArrayBuffer(color)) {
		      return color;
		    }
		    return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);
		  }

		  /**
		   * Returns true if value is power of 2
		   * @param {number} value number to check.
		   * @return true if value is power of 2
		   */
		  function isPowerOf2(value) {
		    return (value & (value - 1)) === 0;
		  }

		  /**
		   * Sets filtering or generates mips for texture based on width or height
		   * If width or height is not passed in uses `options.width` and//or `options.height`
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @param {number} [width] width of texture
		   * @param {number} [height] height of texture
		   * @memberOf module:twgl/textures
		   */
		  function setTextureFilteringForSize(gl, tex, options, width, height) {
		    options = options || defaults.textureOptions;
		    var target = options.target || gl.TEXTURE_2D;
		    width = width || options.width;
		    height = height || options.height;
		    gl.bindTexture(target, tex);
		    if (!isPowerOf2(width) || !isPowerOf2(height)) {
		      gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		    } else {
		      gl.generateMipmap(target);
		    }
		  }

		  /**
		   * Gets an array of cubemap face enums
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @return {number[]} cubemap face enums
		   */
		  function getCubeFaceOrder(gl, options) {
		    options = options || {};
		    return options.cubeFaceOrder || [
		        gl.TEXTURE_CUBE_MAP_POSITIVE_X,
		        gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
		        gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
		        gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
		        gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
		        gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
		      ];
		  }

		  /**
		   * @typedef {Object} FaceInfo
		   * @property {number} face gl enum for texImage2D
		   * @property {number} ndx face index (0 - 5) into source data
		   * @ignore
		   */

		  /**
		   * Gets an array of FaceInfos
		   * There's a bug in some NVidia drivers that will crash the driver if
		   * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take
		   * the user's desired order from his faces to WebGL and make sure we
		   * do the faces in WebGL order
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but
		   *    it's needed internally to sort the array of `ndx` properties by `face`.
		   */
		  function getCubeFacesWithNdx(gl, options) {
		    var faces = getCubeFaceOrder(gl, options);
		    // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(
		    var facesWithNdx = faces.map(function(face, ndx) {
		      return { face: face, ndx: ndx };
		    });
		    facesWithNdx.sort(function(a, b) {
		      return a.face - b.face;
		    });
		    return facesWithNdx;
		  }

		  /**
		   * Set a texture from the contents of an element. Will also set
		   * texture filtering or generate mips based on the dimensions of the element
		   * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will
		   * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {HTMLElement} element a canvas, img, or video element.
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @memberOf module:twgl/textures
		   * @kind function
		   */
		  var setTextureFromElement = function() {
		    var ctx = document.createElement("canvas").getContext("2d");
		    return function setTextureFromElement(gl, tex, element, options) {
		      options = options || defaults.textureOptions;
		      var target = options.target || gl.TEXTURE_2D;
		      var width = element.width;
		      var height = element.height;
		      var format = options.format || gl.RGBA;
		      var type = options.type || gl.UNSIGNED_BYTE;
		      savePackState(gl, options);
		      gl.bindTexture(target, tex);
		      if (target === gl.TEXTURE_CUBE_MAP) {
		        // guess the parts
		        var imgWidth  = element.width;
		        var imgHeight = element.height;
		        var size;
		        var slices;
		        if (imgWidth / 6 === imgHeight) {
		          // It's 6x1
		          size = imgHeight;
		          slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];
		        } else if (imgHeight / 6 === imgWidth) {
		          // It's 1x6
		          size = imgWidth;
		          slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];
		        } else if (imgWidth / 3 === imgHeight / 2) {
		          // It's 3x2
		          size = imgWidth / 3;
		          slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];
		        } else if (imgWidth / 2 === imgHeight / 3) {
		          // It's 2x3
		          size = imgWidth / 2;
		          slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];
		        } else {
		          throw "can't figure out cube map from element: " + (element.src ? element.src : element.nodeName);
		        }
		        ctx.canvas.width = size;
		        ctx.canvas.height = size;
		        width = size;
		        height = size;
		        getCubeFacesWithNdx(gl, options).forEach(function(f) {
		          var xOffset = slices[f.ndx * 2 + 0] * size;
		          var yOffset = slices[f.ndx * 2 + 1] * size;
		          ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);
		          gl.texImage2D(f.face, 0, format, format, type, ctx.canvas);
		        });
		        // Free up the canvas memory
		        ctx.canvas.width = 1;
		        ctx.canvas.height = 1;
		      } else {
		        gl.texImage2D(target, 0, format, format, type, element);
		      }
		      restorePackState(gl, options);
		      if (options.auto !== false) {
		        setTextureFilteringForSize(gl, tex, options, width, height);
		      }
		      setTextureParameters(gl, tex, options);
		    };
		  }();

		  function noop() {
		  }

		  /**
		   * Loads an image
		   * @param {string} url url to image
		   * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null
		   *     if there was an error
		   * @return {HTMLImageElement} the image being loaded.
		   */
		  function loadImage(url, crossOrigin, callback) {
		    callback = callback || noop;
		    var img = new Image();
		    crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;
		    if (crossOrigin !== undefined) {
		      img.crossOrigin = crossOrigin;
		    }

		    function clearEventHandlers() {
		      img.removeEventListener('error', onError);  // eslint-disable-line
		      img.removeEventListener('load', onLoad);  // eslint-disable-line
		      img = null;
		    }

		    function onError() {
		      var msg = "couldn't load image: " + url;
		      utils.error(msg);
		      callback(msg, img);
		      clearEventHandlers();
		    }

		    function onLoad() {
		      callback(null, img);
		      clearEventHandlers();
		    }

		    img.addEventListener('error', onError);
		    img.addEventListener('load', onLoad);
		    img.src = url;
		    return img;
		  }

		  /**
		   * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set
		   * the default texture color is used which can be set by calling `setDefaultTextureColor`.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @memberOf module:twgl/textures
		   */
		  function setTextureTo1PixelColor(gl, tex, options) {
		    options = options || defaults.textureOptions;
		    var target = options.target || gl.TEXTURE_2D;
		    gl.bindTexture(target, tex);
		    if (options.color === false) {
		      return;
		    }
		    // Assume it's a URL
		    // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.
		    var color = make1Pixel(options.color);
		    if (target === gl.TEXTURE_CUBE_MAP) {
		      for (var ii = 0; ii < 6; ++ii) {
		        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
		      }
		    } else {
		      gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);
		    }
		  }

		  /**
		   * The src image(s) used to create a texture.
		   *
		   * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}
		   * you can pass in urls for images to load into the textures. If it's a single url
		   * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap
		   * this will be a corresponding array of images for the cubemap.
		   *
		   * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc
		   * @memberOf module:twgl
		   */

		  /**
		   * A callback for when an image finished downloading and been uploaded into a texture
		   * @callback TextureReadyCallback
		   * @param {*} err If truthy there was an error.
		   * @param {WebGLTexture} texture the texture.
		   * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture
		   * @memberOf module:twgl
		   */

		  /**
		   * A callback for when all images have finished downloading and been uploaded into their respective textures
		   * @callback TexturesReadyCallback
		   * @param {*} err If truthy there was an error.
		   * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.
		   * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.
		   * @memberOf module:twgl
		   */

		  /**
		   * A callback for when an image finished downloading and been uploaded into a texture
		   * @callback CubemapReadyCallback
		   * @param {*} err If truthy there was an error.
		   * @param {WebGLTexture} tex the texture.
		   * @param {HTMLImageElement[]} imgs the images for each face.
		   * @memberOf module:twgl
		   */

		  /**
		   * Loads a texture from an image from a Url as specified in `options.src`
		   * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is
		   * immediately useable. It will be updated with the contents of the image once the image has finished
		   * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will
		   *    be non null if there was an error.
		   * @return {HTMLImageElement} the image being downloaded.
		   * @memberOf module:twgl/textures
		   */
		  function loadTextureFromUrl(gl, tex, options, callback) {
		    callback = callback || noop;
		    options = options || defaults.textureOptions;
		    setTextureTo1PixelColor(gl, tex, options);
		    // Because it's async we need to copy the options.
		    options = utils.shallowCopy(options);
		    var img = loadImage(options.src, options.crossOrigin, function(err, img) {
		      if (err) {
		        callback(err, tex, img);
		      } else {
		        setTextureFromElement(gl, tex, img, options);
		        callback(null, tex, img);
		      }
		    });
		    return img;
		  }

		  /**
		   * Loads a cubemap from 6 urls as specified in `options.src`. Will set the cubemap to a 1x1 pixel color
		   * so that it is usable immediately unless `option.color === false`.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will
		   *    be non null if there was an error.
		   * @memberOf module:twgl/textures
		   */
		  function loadCubemapFromUrls(gl, tex, options, callback) {
		    callback = callback || noop;
		    var urls = options.src;
		    if (urls.length !== 6) {
		      throw "there must be 6 urls for a cubemap";
		    }
		    var format = options.format || gl.RGBA;
		    var type = options.type || gl.UNSIGNED_BYTE;
		    var target = options.target || gl.TEXTURE_2D;
		    if (target !== gl.TEXTURE_CUBE_MAP) {
		      throw "target must be TEXTURE_CUBE_MAP";
		    }
		    setTextureTo1PixelColor(gl, tex, options);
		    // Because it's async we need to copy the options.
		    options = utils.shallowCopy(options);
		    var numToLoad = 6;
		    var errors = [];
		    var imgs;
		    var faces = getCubeFaceOrder(gl, options);

		    function uploadImg(faceTarget) {
		      return function(err, img) {
		        --numToLoad;
		        if (err) {
		          errors.push(err);
		        } else {
		          if (img.width !== img.height) {
		            errors.push("cubemap face img is not a square: " + img.src);
		          } else {
		            savePackState(gl, options);
		            gl.bindTexture(target, tex);

		            // So assuming this is the first image we now have one face that's img sized
		            // and 5 faces that are 1x1 pixel so size the other faces
		            if (numToLoad === 5) {
		              // use the default order
		              getCubeFaceOrder(gl).forEach(function(otherTarget) {
		                // Should we re-use the same face or a color?
		                gl.texImage2D(otherTarget, 0, format, format, type, img);
		              });
		            } else {
		              gl.texImage2D(faceTarget, 0, format, format, type, img);
		            }

		            restorePackState(gl, options);
		            gl.generateMipmap(target);
		          }
		        }

		        if (numToLoad === 0) {
		          callback(errors.length ? errors : undefined, imgs, tex);
		        }
		      };
		    }

		    imgs = urls.map(function(url, ndx) {
		      return loadImage(url, options.crossOrigin, uploadImg(faces[ndx]));
		    });
		  }

		  /**
		   * Gets the number of compontents for a given image format.
		   * @param {number} format the format.
		   * @return {number} the number of components for the format.
		   * @memberOf module:twgl/textures
		   */
		  function getNumComponentsForFormat(format) {
		    switch (format) {
		      case ALPHA:
		      case LUMINANCE:
		        return 1;
		      case LUMINANCE_ALPHA:
		        return 2;
		      case RGB:
		        return 3;
		      case RGBA:
		        return 4;
		      default:
		        throw "unknown type: " + format;
		    }
		  }

		  /**
		   * Gets the texture type for a given array type.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @return {number} the gl texture type
		   */
		  function getTextureTypeForArrayType(gl, src) {
		    if (isArrayBuffer(src)) {
		      return typedArrays.getGLTypeForTypedArray(src);
		    }
		    return gl.UNSIGNED_BYTE;
		  }

		  /**
		   * Sets a texture from an array or typed array. If the width or height is not provided will attempt to
		   * guess the size. See {@link module:twgl.TextureOptions}.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {(number[]|ArrayBuffer)} src An array or typed arry with texture data.
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   *   This is often the same options you passed in when you created the texture.
		   * @memberOf module:twgl/textures
		   */
		  function setTextureFromArray(gl, tex, src, options) {
		    options = options || defaults.textureOptions;
		    var target = options.target || gl.TEXTURE_2D;
		    gl.bindTexture(target, tex);
		    var width = options.width;
		    var height = options.height;
		    var format = options.format || gl.RGBA;
		    var type = options.type || getTextureTypeForArrayType(gl, src);
		    var numComponents = getNumComponentsForFormat(format);
		    var numElements = src.length / numComponents;
		    if (numElements % 1) {
		      throw "length wrong size for format: " + glEnumToString(gl, format);
		    }
		    if (!width && !height) {
		      var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));
		      if (size % 1 === 0) {
		        width = size;
		        height = size;
		      } else {
		        width = numElements;
		        height = 1;
		      }
		    } else if (!height) {
		      height = numElements / width;
		      if (height % 1) {
		        throw "can't guess height";
		      }
		    } else if (!width) {
		      width = numElements / height;
		      if (width % 1) {
		        throw "can't guess width";
		      }
		    }
		    if (!isArrayBuffer(src)) {
		      var Type = typedArrays.getTypedArrayTypeForGLType(type);
		      src = new Type(src);
		    } else {
		      if (src instanceof Uint8ClampedArray) {
		        src = new Uint8Array(src.buffer);
		      }
		    }
		    gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);
		    savePackState(gl, options);
		    if (target === gl.TEXTURE_CUBE_MAP) {
		      var faceSize = numElements / 6 * numComponents;
		      getCubeFacesWithNdx(gl, options).forEach(function(f) {
		        var offset = faceSize * f.ndx;
		        var data = src.subarray(offset, offset + faceSize);
		        gl.texImage2D(f.face, 0, format, width, height, 0, format, type, data);
		      });
		    } else {
		      gl.texImage2D(target, 0, format, width, height, 0, format, type, src);
		    }
		    restorePackState(gl, options);
		    return {
		      width: width,
		      height: height,
		    };
		  }

		  /**
		   * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.
		   * You must set `options.width` and `options.height`.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the WebGLTexture to set parameters for
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @memberOf module:twgl/textures
		   */
		  function setEmptyTexture(gl, tex, options) {
		    var target = options.target || gl.TEXTURE_2D;
		    gl.bindTexture(target, tex);
		    var format = options.format || gl.RGBA;
		    var type = options.type || gl.UNSIGNED_BYTE;
		    savePackState(gl, options);
		    if (target === gl.TEXTURE_CUBE_MAP) {
		      for (var ii = 0; ii < 6; ++ii) {
		        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, format, options.width, options.height, 0, format, type, null);
		      }
		    } else {
		      gl.texImage2D(target, 0, format, options.width, options.height, 0, format, type, null);
		    }
		  }

		  /**
		   * Creates a texture based on the options passed in.
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.
		   * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.
		   * @return {WebGLTexture} the created texture.
		   * @memberOf module:twgl/textures
		   */
		  function createTexture(gl, options, callback) {
		    callback = callback || noop;
		    options = options || defaults.textureOptions;
		    var tex = gl.createTexture();
		    var target = options.target || gl.TEXTURE_2D;
		    var width  = options.width  || 1;
		    var height = options.height || 1;
		    gl.bindTexture(target, tex);
		    if (target === gl.TEXTURE_CUBE_MAP) {
		      // this should have been the default for CUBEMAPS :(
		      gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		      gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		    }
		    var src = options.src;
		    if (src) {
		      if (typeof src === "function") {
		        src = src(gl, options);
		      }
		      if (typeof (src) === "string") {
		        loadTextureFromUrl(gl, tex, options, callback);
		      } else if (isArrayBuffer(src) ||
		                 (Array.isArray(src) && (
		                      typeof src[0] === 'number' ||
		                      Array.isArray(src[0]) ||
		                      isArrayBuffer(src[0]))
		                 )
		                ) {
		        var dimensions = setTextureFromArray(gl, tex, src, options);
		        width  = dimensions.width;
		        height = dimensions.height;
		      } else if (Array.isArray(src) && typeof (src[0]) === 'string') {
		        loadCubemapFromUrls(gl, tex, options, callback);
		      } else if (src instanceof HTMLElement) {
		        setTextureFromElement(gl, tex, src, options);
		        width  = src.width;
		        height = src.height;
		      } else {
		        throw "unsupported src type";
		      }
		    } else {
		      setEmptyTexture(gl, tex, options);
		    }
		    if (options.auto !== false) {
		      setTextureFilteringForSize(gl, tex, options, width, height);
		    }
		    setTextureParameters(gl, tex, options);
		    return tex;
		  }

		  /**
		   * Resizes a texture based on the options passed in.
		   *
		   * Note: This is not a generic resize anything function.
		   * It's mostly used by {@link module:twgl.resizeFramebufferInfo}
		   * It will use `options.src` if it exists to try to determine a `type`
		   * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided
		   * for the texture. Texture parameters will be set accordingly
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {WebGLTexture} tex the texture to resize
		   * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.
		   * @param {number} [width] the new width. If not passed in will use `options.width`
		   * @param {number} [height] the new height. If not passed in will use `options.height`
		   * @memberOf module:twgl/textures
		   */
		  function resizeTexture(gl, tex, options, width, height) {
		    width = width || options.width;
		    height = height || options.height;
		    var target = options.target || gl.TEXTURE_2D;
		    gl.bindTexture(target, tex);
		    var format = options.format || gl.RGBA;
		    var type;
		    var src = options.src;
		    if (!src) {
		      type = options.type || gl.UNSIGNED_BYTE;
		    } else if (isArrayBuffer(src) || (Array.isArray(src) && typeof (src[0]) === 'number')) {
		      type = options.type || getTextureTypeForArrayType(gl, src);
		    } else {
		      type = options.type || gl.UNSIGNED_BYTE;
		    }
		    if (target === gl.TEXTURE_CUBE_MAP) {
		      for (var ii = 0; ii < 6; ++ii) {
		        gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, format, width, height, 0, format, type, null);
		      }
		    } else {
		      gl.texImage2D(target, 0, format, width, height, 0, format, type, null);
		    }
		  }

		  /**
		   * Check if a src is an async request.
		   * if src is a string we're going to download an image
		   * if src is an array of strings we're going to download cubemap images
		   * @param {*} src The src from a TextureOptions
		   * @returns {bool} true if src is async.
		   */
		  function isAsyncSrc(src) {
		    return typeof src === 'string' ||
		           (Array.isArray(src) && typeof src[0] === 'string');
		  }

		  /**
		   * Creates a bunch of textures based on the passed in options.
		   *
		   * Example:
		   *
		   *     var textures = twgl.createTextures(gl, {
		   *       // a power of 2 image
		   *       hftIcon: { src: "images/hft-icon-16.png", mag: gl.NEAREST },
		   *       // a non-power of 2 image
		   *       clover: { src: "images/clover.jpg" },
		   *       // From a canvas
		   *       fromCanvas: { src: ctx.canvas },
		   *       // A cubemap from 6 images
		   *       yokohama: {
		   *         target: gl.TEXTURE_CUBE_MAP,
		   *         src: [
		   *           'images/yokohama/posx.jpg',
		   *           'images/yokohama/negx.jpg',
		   *           'images/yokohama/posy.jpg',
		   *           'images/yokohama/negy.jpg',
		   *           'images/yokohama/posz.jpg',
		   *           'images/yokohama/negz.jpg',
		   *         ],
		   *       },
		   *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)
		   *       goldengate: {
		   *         target: gl.TEXTURE_CUBE_MAP,
		   *         src: 'images/goldengate.jpg',
		   *       },
		   *       // A 2x2 pixel texture from a JavaScript array
		   *       checker: {
		   *         mag: gl.NEAREST,
		   *         min: gl.LINEAR,
		   *         src: [
		   *           255,255,255,255,
		   *           192,192,192,255,
		   *           192,192,192,255,
		   *           255,255,255,255,
		   *         ],
		   *       },
		   *       // a 1x2 pixel texture from a typed array.
		   *       stripe: {
		   *         mag: gl.NEAREST,
		   *         min: gl.LINEAR,
		   *         format: gl.LUMINANCE,
		   *         src: new Uint8Array([
		   *           255,
		   *           128,
		   *           255,
		   *           128,
		   *           255,
		   *           128,
		   *           255,
		   *           128,
		   *         ]),
		   *         width: 1,
		   *       },
		   *     });
		   *
		   * Now
		   *
		   * *   `textures.hftIcon` will be a 2d texture
		   * *   `textures.clover` will be a 2d texture
		   * *   `textures.fromCanvas` will be a 2d texture
		   * *   `textures.yohohama` will be a cubemap texture
		   * *   `textures.goldengate` will be a cubemap texture
		   * *   `textures.checker` will be a 2d texture
		   * *   `textures.stripe` will be a 2d texture
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.
		   * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.
		   * @return {Object.<string,WebGLTexture>} the created textures by name
		   * @memberOf module:twgl/textures
		   */
		  function createTextures(gl, textureOptions, callback) {
		    callback = callback || noop;
		    var numDownloading = 0;
		    var errors = [];
		    var textures = {};
		    var images = {};

		    function callCallbackIfReady() {
		      if (numDownloading === 0) {
		        setTimeout(function() {
		          callback(errors.length ? errors : undefined, textures, images);
		        }, 0);
		      }
		    }

		    Object.keys(textureOptions).forEach(function(name) {
		      var options = textureOptions[name];
		      var onLoadFn;
		      if (isAsyncSrc(options.src)) {
		        onLoadFn = function(err, tex, img) {
		          images[name] = img;
		          --numDownloading;
		          if (err) {
		            errors.push(err);
		          }
		          callCallbackIfReady();
		        };
		        ++numDownloading;
		      }
		      textures[name] = createTexture(gl, options, onLoadFn);
		    });

		    // queue the callback if there are no images to download.
		    // We do this because if your code is structured to wait for
		    // images to download but then you comment out all the async
		    // images your code would break.
		    callCallbackIfReady();

		    return textures;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "setDefaults_": setDefaults,

		    "createTexture": createTexture,
		    "setEmptyTexture": setEmptyTexture,
		    "setTextureFromArray": setTextureFromArray,
		    "loadTextureFromUrl": loadTextureFromUrl,
		    "setTextureFromElement": setTextureFromElement,
		    "setTextureFilteringForSize": setTextureFilteringForSize,
		    "setTextureParameters": setTextureParameters,
		    "setDefaultTextureColor": setDefaultTextureColor,
		    "createTextures": createTextures,
		    "resizeTexture": resizeTexture,
		    "getNumComponentsForFormat": getNumComponentsForFormat,
		  };
		});



		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/framebuffers',[
		    './textures',
		    './utils',
		  ], function(
		    textures,
		    utils) {
		  

		  /**
		   * Framebuffer related functions
		   *
		   * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`
		   * itself
		   *
		   * See {@link module:twgl} for core functions
		   *
		   * @module twgl/framebuffers
		   */

		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line

		  var UNSIGNED_BYTE                  = 0x1401;

		  /* PixelFormat */
		  var DEPTH_COMPONENT                = 0x1902;
		  var RGBA                           = 0x1908;

		  /* Framebuffer Object. */
		  var RGBA4                          = 0x8056;
		  var RGB5_A1                        = 0x8057;
		  var RGB565                         = 0x8D62;
		  var DEPTH_COMPONENT16              = 0x81A5;
		  var STENCIL_INDEX                  = 0x1901;
		  var STENCIL_INDEX8                 = 0x8D48;
		  var DEPTH_STENCIL                  = 0x84F9;
		  var COLOR_ATTACHMENT0              = 0x8CE0;
		  var DEPTH_ATTACHMENT               = 0x8D00;
		  var STENCIL_ATTACHMENT             = 0x8D20;
		  var DEPTH_STENCIL_ATTACHMENT       = 0x821A;

		  /* TextureWrapMode */
		  var REPEAT                         = 0x2901;  // eslint-disable-line
		  var CLAMP_TO_EDGE                  = 0x812F;
		  var MIRRORED_REPEAT                = 0x8370;  // eslint-disable-line

		  /* TextureMagFilter */
		  var NEAREST                        = 0x2600;  // eslint-disable-line
		  var LINEAR                         = 0x2601;

		  /* TextureMinFilter */
		  var NEAREST_MIPMAP_NEAREST         = 0x2700;  // eslint-disable-line
		  var LINEAR_MIPMAP_NEAREST          = 0x2701;  // eslint-disable-line
		  var NEAREST_MIPMAP_LINEAR          = 0x2702;  // eslint-disable-line
		  var LINEAR_MIPMAP_LINEAR           = 0x2703;  // eslint-disable-line

		  /**
		   * The options for a framebuffer attachment.
		   *
		   * Note: For a `format` that is a texture include all the texture
		   * options from {@link module:twgl.TextureOptions} for example
		   * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}
		   * `auto` defaults to `false` for attachment textures
		   *
		   * @typedef {Object} AttachmentOptions
		   * @property {number} [attach] The attachment point. Defaults
		   *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type
		   *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending
		   *   on the format or attachment type.
		   * @property {number} [format] The format. If one of `gl.RGBA4`,
		   *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,
		   *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a
		   *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`
		   * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.
		   * @property {number} [target] The texture target for `gl.framebufferTexture2D`.
		   *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.
		   * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.
		   * @property {WebGLObject} [attachment] An existing renderbuffer or texture.
		   *    If provided will attach this Object. This allows you to share
		   *    attachemnts across framebuffers.
		   * @memberOf module:twgl
		   */

		  var defaultAttachments = [
		    { format: RGBA, type: UNSIGNED_BYTE, min: LINEAR, wrap: CLAMP_TO_EDGE, },
		    { format: DEPTH_STENCIL, },
		  ];

		  var attachmentsByFormat = {};
		  attachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;
		  attachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;
		  attachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;
		  attachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;
		  attachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;

		  function getAttachmentPointForFormat(format) {
		    return attachmentsByFormat[format];
		  }

		  var renderbufferFormats = {};
		  renderbufferFormats[RGBA4] = true;
		  renderbufferFormats[RGB5_A1] = true;
		  renderbufferFormats[RGB565] = true;
		  renderbufferFormats[DEPTH_STENCIL] = true;
		  renderbufferFormats[DEPTH_COMPONENT16] = true;
		  renderbufferFormats[STENCIL_INDEX] = true;
		  renderbufferFormats[STENCIL_INDEX8] = true;

		  function isRenderbufferFormat(format) {
		    return renderbufferFormats[format];
		  }

		  /**
		   * @typedef {Object} FramebufferInfo
		   * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo
		   * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.
		   * @memberOf module:twgl
		   */

		  /**
		   * Creates a framebuffer and attachments.
		   *
		   * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.
		   *
		   * The simplest usage
		   *
		   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
		   *     var fbi = twgl.createFramebuffer(gl);
		   *
		   * More complex usage
		   *
		   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
		   *     var attachments = [
		   *       { format: RGB565, mag: NEAREST },
		   *       { format: STENCIL_INDEX8 },
		   *     ]
		   *     var fbi = twgl.createFramebuffer(gl, attachments);
		   *
		   * Passing in a specific size
		   *
		   *     var width = 256;
		   *     var height = 256;
		   *     var fbi = twgl.createFramebuffer(gl, attachments, width, height);
		   *
		   * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.
		   * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an
		   *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.
		   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
		   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer
		   * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.
		   * @memberOf module:twgl/framebuffers
		   */
		  function createFramebufferInfo(gl, attachments, width, height) {
		    var target = gl.FRAMEBUFFER;
		    var fb = gl.createFramebuffer();
		    gl.bindFramebuffer(target, fb);
		    width  = width  || gl.drawingBufferWidth;
		    height = height || gl.drawingBufferHeight;
		    attachments = attachments || defaultAttachments;
		    var colorAttachmentCount = 0;
		    var framebufferInfo = {
		      framebuffer: fb,
		      attachments: [],
		      width: width,
		      height: height,
		    };
		    attachments.forEach(function(attachmentOptions) {
		      var attachment = attachmentOptions.attachment;
		      var format = attachmentOptions.format;
		      var attachmentPoint = getAttachmentPointForFormat(format);
		      if (!attachmentPoint) {
		        attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;
		      }
		      if (!attachment) {
		        if (isRenderbufferFormat(format)) {
		          attachment = gl.createRenderbuffer();
		          gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);
		          gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);
		        } else {
		          var textureOptions = utils.shallowCopy(attachmentOptions);
		          textureOptions.width = width;
		          textureOptions.height = height;
		          textureOptions.auto = attachmentOptions.auto === undefined ? false : attachmentOptions.auto;
		          attachment = textures.createTexture(gl, textureOptions);
		        }
		      }
		      if (attachment instanceof WebGLRenderbuffer) {
		        gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);
		      } else if (attachment instanceof WebGLTexture) {
		        gl.framebufferTexture2D(
		            target,
		            attachmentPoint,
		            attachmentOptions.texTarget || gl.TEXTURE_2D,
		            attachment,
		            attachmentOptions.level || 0);
		      } else {
		        throw "unknown attachment type";
		      }
		      framebufferInfo.attachments.push(attachment);
		    });
		    return framebufferInfo;
		  }

		  /**
		   * Resizes the attachments of a framebuffer.
		   *
		   * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebuffer}
		   * because TWGL has no idea the format/type of each attachment.
		   *
		   * The simplest usage
		   *
		   *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer
		   *     var fbi = twgl.createFramebuffer(gl);
		   *
		   *     ...
		   *
		   *     function render() {
		   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
		   *         // resize the attachments
		   *         twgl.resizeFramebufferInfo(gl, fbi);
		   *       }
		   *
		   * More complex usage
		   *
		   *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer
		   *     var attachments = [
		   *       { format: RGB565, mag: NEAREST },
		   *       { format: STENCIL_INDEX8 },
		   *     ]
		   *     var fbi = twgl.createFramebuffer(gl, attachments);
		   *
		   *     ...
		   *
		   *     function render() {
		   *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {
		   *         // resize the attachments to match
		   *         twgl.resizeFramebufferInfo(gl, fbi, attachments);
		   *       }
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebuffer}.
		   * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebuffer}.
		   * @param {number} [width] the width for the attachments. Default = size of drawingBuffer
		   * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer
		   * @memberOf module:twgl/framebuffers
		   */
		  function resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {
		    width  = width  || gl.drawingBufferWidth;
		    height = height || gl.drawingBufferHeight;
		    framebufferInfo.width = width;
		    framebufferInfo.height = height;
		    attachments = attachments || defaultAttachments;
		    attachments.forEach(function(attachmentOptions, ndx) {
		      var attachment = framebufferInfo.attachments[ndx];
		      var format = attachmentOptions.format;
		      if (attachment instanceof WebGLRenderbuffer) {
		        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);
		        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);
		      } else if (attachment instanceof WebGLTexture) {
		        textures.resizeTexture(gl, attachment, attachmentOptions, width, height);
		      } else {
		        throw "unknown attachment type";
		      }
		    });
		  }

		  /**
		   * Binds a framebuffer
		   *
		   * This function pretty much soley exists because I spent hours
		   * trying to figure out why something I wrote wasn't working only
		   * to realize I forget to set the viewport dimensions.
		   * My hope is this function will fix that.
		   *
		   * It is effectively the same as
		   *
		   *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);
		   *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);
		   *
		   * @param {WebGLRenderingContext} gl the WebGLRenderingContext
		   * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebuffer}.
		   *   If not passed will bind the canvas.
		   * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.
		   * @memberOf module:twgl/framebuffers
		   */

		  function bindFramebufferInfo(gl, framebufferInfo, target) {
		    target = target || gl.FRAMEBUFFER;
		    if (framebufferInfo) {
		      gl.bindFramebuffer(target, framebufferInfo.framebuffer);
		      gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);
		    } else {
		      gl.bindFramebuffer(target, null);
		      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
		    }
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "bindFramebufferInfo": bindFramebufferInfo,
		    "createFramebufferInfo": createFramebufferInfo,
		    "resizeFramebufferInfo": resizeFramebufferInfo,
		  };
		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/twgl',[
		    './attributes',
		    './draw',
		    './framebuffers',
		    './programs',
		    './textures',
		    './typedarrays',
		    './utils',
		  ], function(
		    attributes,
		    draw,
		    framebuffers,
		    programs,
		    textures,
		    typedArrays,
		    utils) {
		  

		  /**
		   * The main TWGL module.
		   *
		   * For most use cases you shouldn't need anything outside this module.
		   * Exceptions between the stuff added to twgl-full (v3, m4, primitives)
		   *
		   * @module twgl
		   * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray
		   * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays
		   * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo
		   * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo
		   * @borrows module:twgl/draw.drawObjectList as drawObjectList
		   * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo
		   * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo
		   * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo
		   * @borrows module:twgl/programs.createProgramInfo as createProgramInfo
		   * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo
		   * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock
		   * @borrows module:twgl/programs.setUniformBlock as setUniformBlock
		   * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms
		   * @borrows module:twgl/programs.setUniforms as setUniforms
		   * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes
		   * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray
		   * @borrows module:twgl/textures.createTexture as createTexture
		   * @borrows module:twgl/textures.resizeTexture as resizeTexture
		   * @borrows module:twgl/textures.createTextures as createTextures
		   */

		  // make sure we don't see a global gl
		  var gl = undefined;  // eslint-disable-line
		  var defaults = {
		    enableVertexArrayObjects: true,
		  };

		  /**
		   * Various default settings for twgl.
		   *
		   * Note: You can call this any number of times. Example:
		   *
		   *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });
		   *     twgl.setDefaults({ attribPrefix: 'a_' });
		   *
		   * is equivalent to
		   *
		   *     twgl.setDefaults({
		   *       textureColor: [1, 0, 0, 1],
		   *       attribPrefix: 'a_',
		   *     });
		   *
		   * @typedef {Object} Defaults
		   * @property {string} attribPrefix The prefix to stick on attributes
		   *
		   *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`
		   *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.
		   *
		   *   In otherwords I'll create arrays of geometry like this
		   *
		   *       var arrays = {
		   *         position: ...
		   *         normal: ...
		   *         texcoord: ...
		   *       };
		   *
		   *   But need those mapped to attributes and my attributes start with `a_`.
		   *
		   *   Default: `""`
		   *
		   * @property {number[]} textureColor Array of 4 values in the range 0 to 1
		   *
		   *   The default texture color is used when loading textures from
		   *   urls. Because the URL will be loaded async we'd like to be
		   *   able to use the texture immediately. By putting a 1x1 pixel
		   *   color in the texture we can start using the texture before
		   *   the URL has loaded.
		   *
		   *   Default: `[0.5, 0.75, 1, 1]`
		   *
		   * @property {string} crossOrigin
		   *
		   *   If not undefined sets the crossOrigin attribute on images
		   *   that twgl creates when downloading images for textures.
		   *
		   *   Also see {@link module:twgl.TextureOptions}.
		   *
		   * @property {bool} enableVertexArrayObjects
		   *
		   *   If true then in WebGL 1.0 will attempt to get the `OES_vertex_array_object` extension.
		   *   If successful it will copy create/bind/delete/isVertexArrayOES from the extension to
		   *   the WebGLRenderingContext removing the OES at the end which is the standard entry point
		   *   for WebGL 2.
		   *
		   *   Note: According to webglstats.com 90% of devices support `OES_vertex_array_object`.
		   *   If you just want to count on support I suggest using [this polyfill](https://github.com/KhronosGroup/WebGL/blob/master/sdk/demos/google/resources/OESVertexArrayObject.js)
		   *   or ignoring devices that don't support them.
		   *
		   *   Default: `true`
		   *
		   * @memberOf module:twgl
		   */

		  /**
		   * Sets various defaults for twgl.
		   *
		   * In the interest of terseness which is kind of the point
		   * of twgl I've integrated a few of the older functions here
		   *
		   * @param {module:twgl.Defaults} newDefaults The default settings.
		   * @memberOf module:twgl
		   */
		  function setDefaults(newDefaults) {
		    utils.copyExistingProperties(newDefaults, defaults);
		    attributes.setDefaults_(newDefaults);  // eslint-disable-line
		    textures.setDefaults_(newDefaults);  // eslint-disable-line
		  }

		  /**
		   * Adds Vertex Array Objects to WebGL 1 GL contexts if available
		   * @param {WebGLRenderingContext} gl A WebGLRenderingContext
		   */
		  function addVertexArrayObjectSupport(gl) {
		    if (!gl || !defaults.enableVertexArrayObjects) {
		      return;
		    }
		    if (utils.isWebGL1(gl)) {
		      var ext = gl.getExtension("OES_vertex_array_object");
		      if (ext) {
		        gl.createVertexArray = function() {
		          return ext.createVertexArrayOES();
		        };
		        gl.deleteVertexArray = function(v) {
		          ext.deleteVertexArrayOES(v);
		        };
		        gl.isVertexArray = function(v) {
		          return ext.isVertexArrayOES(v);
		        };
		        gl.bindVertexArray = function(v) {
		          ext.bindVertexArrayOES(v);
		        };
		        gl.VERTEX_ARRAY_BINDING = ext.VERTEX_ARRAY_BINDING_OES;
		      }
		    }
		  }

		  /**
		   * Creates a webgl context.
		   * @param {HTMLCanvasElement} canvas The canvas tag to get
		   *     context from. If one is not passed in one will be
		   *     created.
		   * @return {WebGLRenderingContext} The created context.
		   */
		  function create3DContext(canvas, opt_attribs) {
		    var names = ["webgl", "experimental-webgl"];
		    var context = null;
		    for (var ii = 0; ii < names.length; ++ii) {
		      try {
		        context = canvas.getContext(names[ii], opt_attribs);
		      } catch(e) {}  // eslint-disable-line
		      if (context) {
		        break;
		      }
		    }
		    return context;
		  }

		  /**
		   * Gets a WebGL context.
		   * @param {HTMLCanvasElement} canvas a canvas element.
		   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes
		   * @memberOf module:twgl
		   */
		  function getWebGLContext(canvas, opt_attribs) {
		    var gl = create3DContext(canvas, opt_attribs);
		    addVertexArrayObjectSupport(gl);
		    return gl;
		  }

		  /**
		   * Creates a webgl context.
		   *
		   * Will return a WebGL2 context if possible.
		   *
		   * You can check if it's WebGL2 with
		   *
		   *     twgl.isWebGL2(gl);
		   *
		   * @param {HTMLCanvasElement} canvas The canvas tag to get
		   *     context from. If one is not passed in one will be
		   *     created.
		   * @return {WebGLRenderingContext} The created context.
		   */
		  function createContext(canvas, opt_attribs) {
		    var names = ["webgl2", "experimental-webgl2", "webgl", "experimental-webgl"];
		    var context = null;
		    for (var ii = 0; ii < names.length; ++ii) {
		      try {
		        context = canvas.getContext(names[ii], opt_attribs);
		      } catch(e) {}  // eslint-disable-line
		      if (context) {
		        break;
		      }
		    }
		    return context;
		  }

		  /**
		   * Gets a WebGL context.  Will create a WebGL2 context if possible.
		   *
		   * You can check if it's WebGL2 with
		   *
		   *    function isWebGL2(gl) {
		   *      return gl.getParameter(gl.VERSION).indexOf("WebGL 2.0 ") == 0;
		   *    }
		   *
		   * @param {HTMLCanvasElement} canvas a canvas element.
		   * @param {WebGLContextCreationAttirbutes} [opt_attribs] optional webgl context creation attributes
		   * @return {WebGLRenderingContext} The created context.
		   * @memberOf module:twgl
		   */
		  function getContext(canvas, opt_attribs) {
		    var gl = createContext(canvas, opt_attribs);
		    addVertexArrayObjectSupport(gl);
		    return gl;
		  }

		  /**
		   * Resize a canvas to match the size it's displayed.
		   * @param {HTMLCanvasElement} canvas The canvas to resize.
		   * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` if you want to.
		   * @return {boolean} true if the canvas was resized.
		   * @memberOf module:twgl
		   */
		  function resizeCanvasToDisplaySize(canvas, multiplier) {
		    multiplier = multiplier || 1;
		    multiplier = Math.max(1, multiplier);
		    var width  = canvas.clientWidth  * multiplier | 0;
		    var height = canvas.clientHeight * multiplier | 0;
		    if (canvas.width !== width ||
		        canvas.height !== height) {
		      canvas.width = width;
		      canvas.height = height;
		      return true;
		    }
		    return false;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  var api = {
		    "getContext": getContext,
		    "getWebGLContext": getWebGLContext,
		    "isWebGL1": utils.isWebGL1,
		    "isWebGL2": utils.isWebGL2,
		    "resizeCanvasToDisplaySize": resizeCanvasToDisplaySize,
		    "setDefaults": setDefaults,
		  };

		  function notPrivate(name) {
		    return name[name.length - 1] !== '_';
		  }

		  function copyPublicProperties(src, dst) {
		    Object.keys(src).filter(notPrivate).forEach(function(key) {
		      dst[key] = src[key];
		    });
		    return dst;
		  }

		  var apis = {
		    attributes: attributes,
		    draw: draw,
		    framebuffers: framebuffers,
		    programs: programs,
		    textures: textures,
		    typedArrays: typedArrays,
		  };
		  Object.keys(apis).forEach(function(name) {
		    var srcApi = apis[name];
		    copyPublicProperties(srcApi, api);
		    api[name] = copyPublicProperties(srcApi, {});
		  });

		  return api;

		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/v3',[], function() {
		  

		  /**
		   *
		   * Vec3 math math functions.
		   *
		   * Almost all functions take an optional `dst` argument. If it is not passed in the
		   * functions will create a new Vec3. In other words you can do this
		   *
		   *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.
		   *
		   * or
		   *
		   *     var v3 = v3.create();
		   *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v
		   *
		   * The first style is often easier but depending on where it's used it generates garbage where
		   * as there is almost never allocation with the second style.
		   *
		   * It is always save to pass any vector as the destination. So for example
		   *
		   *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1
		   *
		   * @module twgl/v3
		   */

		  var VecType = Float32Array;

		  /**
		   * A JavaScript array with 3 values or a Float32Array with 3 values.
		   * When created by the library will create the default type which is `Float32Array`
		   * but can be set by calling {@link module:twgl/v3.setDefaultType}.
		   * @typedef {(number[]|Float32Array)} Vec3
		   * @memberOf module:twgl/v3
		   */

		  /**
		   * Sets the type this library creates for a Vec3
		   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
		   * @return {constructor} previous constructor for Vec3
		   */
		  function setDefaultType(ctor) {
		    var oldType = VecType;
		    VecType = ctor;
		    return oldType;
		  }

		  /**
		   * Creates a vec3; may be called with x, y, z to set initial values.
		   * @return {Vec3} the created vector
		   * @memberOf module:twgl/v3
		   */
		  function create(x, y, z) {
		    var dst = new VecType(3);
		    if (x) {
		      dst[0] = x;
		    }
		    if (y) {
		      dst[1] = y;
		    }
		    if (z) {
		      dst[2] = z;
		    }
		    return dst;
		  }

		  /**
		   * Adds two vectors; assumes a and b have the same dimension.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @memberOf module:twgl/v3
		   */
		  function add(a, b, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = a[0] + b[0];
		    dst[1] = a[1] + b[1];
		    dst[2] = a[2] + b[2];

		    return dst;
		  }

		  /**
		   * Subtracts two vectors.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @memberOf module:twgl/v3
		   */
		  function subtract(a, b, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = a[0] - b[0];
		    dst[1] = a[1] - b[1];
		    dst[2] = a[2] - b[2];

		    return dst;
		  }

		  /**
		   * Performs linear interpolation on two vectors.
		   * Given vectors a and b and interpolation coefficient t, returns
		   * (1 - t) * a + t * b.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {number} t Interpolation coefficient.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @memberOf module:twgl/v3
		   */
		  function lerp(a, b, t, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = (1 - t) * a[0] + t * b[0];
		    dst[1] = (1 - t) * a[1] + t * b[1];
		    dst[2] = (1 - t) * a[2] + t * b[2];

		    return dst;
		  }

		  /**
		   * Mutiplies a vector by a scalar.
		   * @param {module:twgl/v3.Vec3} v The vector.
		   * @param {number} k The scalar.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} dst.
		   * @memberOf module:twgl/v3
		   */
		  function mulScalar(v, k, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = v[0] * k;
		    dst[1] = v[1] * k;
		    dst[2] = v[2] * k;

		    return dst;
		  }

		  /**
		   * Divides a vector by a scalar.
		   * @param {module:twgl/v3.Vec3} v The vector.
		   * @param {number} k The scalar.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} dst.
		   * @memberOf module:twgl/v3
		   */
		  function divScalar(v, k, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = v[0] / k;
		    dst[1] = v[1] / k;
		    dst[2] = v[2] / k;

		    return dst;
		  }

		  /**
		   * Computes the cross product of two vectors; assumes both vectors have
		   * three entries.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} The vector a cross b.
		   * @memberOf module:twgl/v3
		   */
		  function cross(a, b, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = a[1] * b[2] - a[2] * b[1];
		    dst[1] = a[2] * b[0] - a[0] * b[2];
		    dst[2] = a[0] * b[1] - a[1] * b[0];

		    return dst;
		  }

		  /**
		   * Computes the dot product of two vectors; assumes both vectors have
		   * three entries.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @return {number} dot product
		   * @memberOf module:twgl/v3
		   */
		  function dot(a, b) {
		    return (a[0] * b[0]) + (a[1] * b[1]) + (a[2] * b[2]);
		  }

		  /**
		   * Computes the length of vector
		   * @param {module:twgl/v3.Vec3} v vector.
		   * @return {number} length of vector.
		   * @memberOf module:twgl/v3
		   */
		  function length(v) {
		    return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);
		  }

		  /**
		   * Computes the square of the length of vector
		   * @param {module:twgl/v3.Vec3} v vector.
		   * @return {number} square of the length of vector.
		   * @memberOf module:twgl/v3
		   */
		  function lengthSq(v) {
		    return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
		  }

		  /**
		   * Divides a vector by its Euclidean length and returns the quotient.
		   * @param {module:twgl/v3.Vec3} a The vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} The normalized vector.
		   * @memberOf module:twgl/v3
		   */
		  function normalize(a, dst) {
		    dst = dst || new VecType(3);

		    var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
		    var len = Math.sqrt(lenSq);
		    if (len > 0.00001) {
		      dst[0] = a[0] / len;
		      dst[1] = a[1] / len;
		      dst[2] = a[2] / len;
		    } else {
		      dst[0] = 0;
		      dst[1] = 0;
		      dst[2] = 0;
		    }

		    return dst;
		  }

		  /**
		   * Negates a vector.
		   * @param {module:twgl/v3.Vec3} v The vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} -v.
		   * @memberOf module:twgl/v3
		   */
		  function negate(v, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = -v[0];
		    dst[1] = -v[1];
		    dst[2] = -v[2];

		    return dst;
		  }

		  /**
		   * Copies a vector.
		   * @param {module:twgl/v3.Vec3} v The vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} A copy of v.
		   * @memberOf module:twgl/v3
		   */
		  function copy(v, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = v[0];
		    dst[1] = v[1];
		    dst[2] = v[2];

		    return dst;
		  }

		  /**
		   * Multiplies a vector by another vector (component-wise); assumes a and
		   * b have the same length.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} The vector of products of entries of a and
		   *     b.
		   * @memberOf module:twgl/v3
		   */
		  function multiply(a, b, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = a[0] * b[0];
		    dst[1] = a[1] * b[1];
		    dst[2] = a[2] * b[2];

		    return dst;
		  }

		  /**
		   * Divides a vector by another vector (component-wise); assumes a and
		   * b have the same length.
		   * @param {module:twgl/v3.Vec3} a Operand vector.
		   * @param {module:twgl/v3.Vec3} b Operand vector.
		   * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..
		   * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and
		   *     b.
		   * @memberOf module:twgl/v3
		   */
		  function divide(a, b, dst) {
		    dst = dst || new VecType(3);

		    dst[0] = a[0] / b[0];
		    dst[1] = a[1] / b[1];
		    dst[2] = a[2] / b[2];

		    return dst;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "add": add,
		    "copy": copy,
		    "create": create,
		    "cross": cross,
		    "divide": divide,
		    "divScalar": divScalar,
		    "dot": dot,
		    "lerp": lerp,
		    "length": length,
		    "lengthSq": lengthSq,
		    "mulScalar": mulScalar,
		    "multiply": multiply,
		    "negate": negate,
		    "normalize": normalize,
		    "setDefaultType": setDefaultType,
		    "subtract": subtract,
		  };

		});

		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		define('twgl/m4',['./v3'], function(v3) {
		  

		  /**
		   * 4x4 Matrix math math functions.
		   *
		   * Almost all functions take an optional `dst` argument. If it is not passed in the
		   * functions will create a new matrix. In other words you can do this
		   *
		   *     var mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix
		   *
		   * or
		   *
		   *     var mat = m4.create();
		   *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.
		   *
		   * The first style is often easier but depending on where it's used it generates garbage where
		   * as there is almost never allocation with the second style.
		   *
		   * It is always save to pass any matrix as the destination. So for example
		   *
		   *     var mat = m4.identity();
		   *     var trans = m4.translation([1, 2, 3]);
		   *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.
		   *
		   * @module twgl/m4
		   */
		  var MatType = Float32Array;

		  var tempV3a = v3.create();
		  var tempV3b = v3.create();
		  var tempV3c = v3.create();

		  /**
		   * A JavaScript array with 16 values or a Float32Array with 16 values.
		   * When created by the library will create the default type which is `Float32Array`
		   * but can be set by calling {@link module:twgl/m4.setDefaultType}.
		   * @typedef {(number[]|Float32Array)} Mat4
		   * @memberOf module:twgl/m4
		   */

		  /**
		   * Sets the type this library creates for a Mat4
		   * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`
		   * @return {constructor} previous constructor for Mat4
		   */
		  function setDefaultType(ctor) {
		    var oldType = MatType;
		    MatType = ctor;
		    return oldType;
		  }

		  /**
		   * Negates a matrix.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} -m.
		   * @memberOf module:twgl/m4
		   */
		  function negate(m, dst) {
		    dst = dst || new MatType(16);

		    dst[ 0] = -m[ 0];
		    dst[ 1] = -m[ 1];
		    dst[ 2] = -m[ 2];
		    dst[ 3] = -m[ 3];
		    dst[ 4] = -m[ 4];
		    dst[ 5] = -m[ 5];
		    dst[ 6] = -m[ 6];
		    dst[ 7] = -m[ 7];
		    dst[ 8] = -m[ 8];
		    dst[ 9] = -m[ 9];
		    dst[10] = -m[10];
		    dst[11] = -m[11];
		    dst[12] = -m[12];
		    dst[13] = -m[13];
		    dst[14] = -m[14];
		    dst[15] = -m[15];

		    return dst;
		  }

		  /**
		   * Copies a matrix.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {module:twgl/m4.Mat4} [dst] The matrix.
		   * @return {module:twgl/m4.Mat4} A copy of m.
		   * @memberOf module:twgl/m4
		   */
		  function copy(m, dst) {
		    dst = dst || new MatType(16);

		    dst[ 0] = m[ 0];
		    dst[ 1] = m[ 1];
		    dst[ 2] = m[ 2];
		    dst[ 3] = m[ 3];
		    dst[ 4] = m[ 4];
		    dst[ 5] = m[ 5];
		    dst[ 6] = m[ 6];
		    dst[ 7] = m[ 7];
		    dst[ 8] = m[ 8];
		    dst[ 9] = m[ 9];
		    dst[10] = m[10];
		    dst[11] = m[11];
		    dst[12] = m[12];
		    dst[13] = m[13];
		    dst[14] = m[14];
		    dst[15] = m[15];

		    return dst;
		  }

		  /**
		   * Creates an n-by-n identity matrix.
		   *
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.
		   * @memberOf module:twgl/m4
		   */
		  function identity(dst) {
		    dst = dst || new MatType(16);

		    dst[ 0] = 1;
		    dst[ 1] = 0;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = 1;
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = 0;
		    dst[ 9] = 0;
		    dst[10] = 1;
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Takes the transpose of a matrix.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The transpose of m.
		   * @memberOf module:twgl/m4
		   */
		   function transpose(m, dst) {
		    dst = dst || new MatType(16);
		    if (dst === m) {
		      var t;

		      t = m[1];
		      m[1] = m[4];
		      m[4] = t;

		      t = m[2];
		      m[2] = m[8];
		      m[8] = t;

		      t = m[3];
		      m[3] = m[12];
		      m[12] = t;

		      t = m[6];
		      m[6] = m[9];
		      m[9] = t;

		      t = m[7];
		      m[7] = m[13];
		      m[13] = t;

		      t = m[11];
		      m[11] = m[14];
		      m[14] = t;
		      return dst;
		    }

		    var m00 = m[0 * 4 + 0];
		    var m01 = m[0 * 4 + 1];
		    var m02 = m[0 * 4 + 2];
		    var m03 = m[0 * 4 + 3];
		    var m10 = m[1 * 4 + 0];
		    var m11 = m[1 * 4 + 1];
		    var m12 = m[1 * 4 + 2];
		    var m13 = m[1 * 4 + 3];
		    var m20 = m[2 * 4 + 0];
		    var m21 = m[2 * 4 + 1];
		    var m22 = m[2 * 4 + 2];
		    var m23 = m[2 * 4 + 3];
		    var m30 = m[3 * 4 + 0];
		    var m31 = m[3 * 4 + 1];
		    var m32 = m[3 * 4 + 2];
		    var m33 = m[3 * 4 + 3];

		    dst[ 0] = m00;
		    dst[ 1] = m10;
		    dst[ 2] = m20;
		    dst[ 3] = m30;
		    dst[ 4] = m01;
		    dst[ 5] = m11;
		    dst[ 6] = m21;
		    dst[ 7] = m31;
		    dst[ 8] = m02;
		    dst[ 9] = m12;
		    dst[10] = m22;
		    dst[11] = m32;
		    dst[12] = m03;
		    dst[13] = m13;
		    dst[14] = m23;
		    dst[15] = m33;

		    return dst;
		  }

		  /**
		   * Computes the inverse of a 4-by-4 matrix.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The inverse of m.
		   * @memberOf module:twgl/m4
		   */
		  function inverse(m, dst) {
		    dst = dst || new MatType(16);

		    var m00 = m[0 * 4 + 0];
		    var m01 = m[0 * 4 + 1];
		    var m02 = m[0 * 4 + 2];
		    var m03 = m[0 * 4 + 3];
		    var m10 = m[1 * 4 + 0];
		    var m11 = m[1 * 4 + 1];
		    var m12 = m[1 * 4 + 2];
		    var m13 = m[1 * 4 + 3];
		    var m20 = m[2 * 4 + 0];
		    var m21 = m[2 * 4 + 1];
		    var m22 = m[2 * 4 + 2];
		    var m23 = m[2 * 4 + 3];
		    var m30 = m[3 * 4 + 0];
		    var m31 = m[3 * 4 + 1];
		    var m32 = m[3 * 4 + 2];
		    var m33 = m[3 * 4 + 3];
		    var tmp_0  = m22 * m33;
		    var tmp_1  = m32 * m23;
		    var tmp_2  = m12 * m33;
		    var tmp_3  = m32 * m13;
		    var tmp_4  = m12 * m23;
		    var tmp_5  = m22 * m13;
		    var tmp_6  = m02 * m33;
		    var tmp_7  = m32 * m03;
		    var tmp_8  = m02 * m23;
		    var tmp_9  = m22 * m03;
		    var tmp_10 = m02 * m13;
		    var tmp_11 = m12 * m03;
		    var tmp_12 = m20 * m31;
		    var tmp_13 = m30 * m21;
		    var tmp_14 = m10 * m31;
		    var tmp_15 = m30 * m11;
		    var tmp_16 = m10 * m21;
		    var tmp_17 = m20 * m11;
		    var tmp_18 = m00 * m31;
		    var tmp_19 = m30 * m01;
		    var tmp_20 = m00 * m21;
		    var tmp_21 = m20 * m01;
		    var tmp_22 = m00 * m11;
		    var tmp_23 = m10 * m01;

		    var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
		        (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
		    var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
		        (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
		    var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
		        (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
		    var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
		        (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);

		    var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);

		    dst[ 0] = d * t0;
		    dst[ 1] = d * t1;
		    dst[ 2] = d * t2;
		    dst[ 3] = d * t3;
		    dst[ 4] = d * ((tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30) -
		            (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));
		    dst[ 5] = d * ((tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30) -
		            (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));
		    dst[ 6] = d * ((tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30) -
		            (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));
		    dst[ 7] = d * ((tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20) -
		            (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));
		    dst[ 8] = d * ((tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33) -
		            (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));
		    dst[ 9] = d * ((tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33) -
		            (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));
		    dst[10] = d * ((tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33) -
		            (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));
		    dst[11] = d * ((tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23) -
		            (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));
		    dst[12] = d * ((tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12) -
		            (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));
		    dst[13] = d * ((tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22) -
		            (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));
		    dst[14] = d * ((tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02) -
		            (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));
		    dst[15] = d * ((tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12) -
		            (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));

		    return dst;
		  }

		  /**
		   * Multiplies two 4-by-4 matrices; assumes that the given matrices are 4-by-4;
		   * assumes matrix entries are accessed in [row][column] fashion.
		   * @param {module:twgl/m4.Mat4} a The matrix on the left.
		   * @param {module:twgl/m4.Mat4} b The matrix on the right.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The matrix product of a and b.
		   * @memberOf module:twgl/m4
		   */
		  function multiply(a, b, dst) {
		    dst = dst || new MatType(16);

		    var a00 = a[0];
		    var a01 = a[1];
		    var a02 = a[2];
		    var a03 = a[3];
		    var a10 = a[ 4 + 0];
		    var a11 = a[ 4 + 1];
		    var a12 = a[ 4 + 2];
		    var a13 = a[ 4 + 3];
		    var a20 = a[ 8 + 0];
		    var a21 = a[ 8 + 1];
		    var a22 = a[ 8 + 2];
		    var a23 = a[ 8 + 3];
		    var a30 = a[12 + 0];
		    var a31 = a[12 + 1];
		    var a32 = a[12 + 2];
		    var a33 = a[12 + 3];
		    var b00 = b[0];
		    var b01 = b[1];
		    var b02 = b[2];
		    var b03 = b[3];
		    var b10 = b[ 4 + 0];
		    var b11 = b[ 4 + 1];
		    var b12 = b[ 4 + 2];
		    var b13 = b[ 4 + 3];
		    var b20 = b[ 8 + 0];
		    var b21 = b[ 8 + 1];
		    var b22 = b[ 8 + 2];
		    var b23 = b[ 8 + 3];
		    var b30 = b[12 + 0];
		    var b31 = b[12 + 1];
		    var b32 = b[12 + 2];
		    var b33 = b[12 + 3];

		    dst[ 0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;
		    dst[ 1] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;
		    dst[ 2] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;
		    dst[ 3] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;
		    dst[ 4] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;
		    dst[ 5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;
		    dst[ 6] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;
		    dst[ 7] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;
		    dst[ 8] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;
		    dst[ 9] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;
		    dst[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;
		    dst[11] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;
		    dst[12] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;
		    dst[13] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;
		    dst[14] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;
		    dst[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;

		    return dst;
		  }

		  /**
		   * Sets the translation component of a 4-by-4 matrix to the given
		   * vector.
		   * @param {module:twgl/m4.Mat4} a The matrix.
		   * @param {Vec3} v The vector.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} a once modified.
		   * @memberOf module:twgl/m4
		   */
		  function setTranslation(a, v, dst) {
		    dst = dst || identity();
		    if (a !== dst) {
		      dst[ 0] = a[ 0];
		      dst[ 1] = a[ 1];
		      dst[ 2] = a[ 2];
		      dst[ 3] = a[ 3];
		      dst[ 4] = a[ 4];
		      dst[ 5] = a[ 5];
		      dst[ 6] = a[ 6];
		      dst[ 7] = a[ 7];
		      dst[ 8] = a[ 8];
		      dst[ 9] = a[ 9];
		      dst[10] = a[10];
		      dst[11] = a[11];
		    }
		    dst[12] = v[0];
		    dst[13] = v[1];
		    dst[14] = v[2];
		    dst[15] = 1;
		    return dst;
		  }

		  /**
		   * Returns the translation component of a 4-by-4 matrix as a vector with 3
		   * entries.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} [dst] vector..
		   * @return {Vec3} The translation component of m.
		   * @memberOf module:twgl/m4
		   */
		  function getTranslation(m, dst) {
		    dst = dst || v3.create();
		    dst[0] = m[12];
		    dst[1] = m[13];
		    dst[2] = m[14];
		    return dst;
		  }

		  /**
		   * Returns an axis of a 4x4 matrix as a vector with 3 entries
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {number} axis The axis 0 = x, 1 = y, 2 = z;
		   * @return {Vec3} [dst] vector.
		   * @return {Vec3} The axis component of m.
		   * @memberOf module:twgl/m4
		   */
		  function getAxis(m, axis, dst) {
		    dst = dst || v3.create();
		    var off = axis * 4;
		    dst[0] = m[off + 0];
		    dst[1] = m[off + 1];
		    dst[2] = m[off + 2];
		    return dst;
		  }

		  /**
		   * Sets an axis of a 4x4 matrix as a vector with 3 entries
		   * @param {Vec3} v the axis vector
		   * @param {number} axis The axis  0 = x, 1 = y, 2 = z;
		   * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none a new one is created
		   * @return {module:twgl/m4.Mat4} dst
		   * @memberOf module:twgl/m4
		   */
		  function setAxis(a, v, axis, dst) {
		    if (dst !== a) {
		      dst = copy(a, dst);
		    }
		    var off = axis * 4;
		    dst[off + 0] = v[0];
		    dst[off + 1] = v[1];
		    dst[off + 2] = v[2];
		    return dst;
		  }

		  /**
		   * Computes a 4-by-4 perspective transformation matrix given the angular height
		   * of the frustum, the aspect ratio, and the near and far clipping planes.  The
		   * arguments define a frustum extending in the negative z direction.  The given
		   * angle is the vertical angle of the frustum, and the horizontal angle is
		   * determined to produce the given aspect ratio.  The arguments near and far are
		   * the distances to the near and far clipping planes.  Note that near and far
		   * are not z coordinates, but rather they are distances along the negative
		   * z-axis.  The matrix generated sends the viewing frustum to the unit box.
		   * We assume a unit box extending from -1 to 1 in the x and y dimensions and
		   * from 0 to 1 in the z dimension.
		   * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).
		   * @param {number} aspect The aspect ratio width / height.
		   * @param {number} zNear The depth (negative z coordinate)
		   *     of the near clipping plane.
		   * @param {number} zFar The depth (negative z coordinate)
		   *     of the far clipping plane.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The perspective matrix.
		   * @memberOf module:twgl/m4
		   */
		  function perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {
		    dst = dst || new MatType(16);

		    var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);
		    var rangeInv = 1.0 / (zNear - zFar);

		    dst[0]  = f / aspect;
		    dst[1]  = 0;
		    dst[2]  = 0;
		    dst[3]  = 0;

		    dst[4]  = 0;
		    dst[5]  = f;
		    dst[6]  = 0;
		    dst[7]  = 0;

		    dst[8]  = 0;
		    dst[9]  = 0;
		    dst[10] = (zNear + zFar) * rangeInv;
		    dst[11] = -1;

		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = zNear * zFar * rangeInv * 2;
		    dst[15] = 0;

		    return dst;
		  }

		  /**
		   * Computes a 4-by-4 othogonal transformation matrix given the left, right,
		   * bottom, and top dimensions of the near clipping plane as well as the
		   * near and far clipping plane distances.
		   * @param {number} left Left side of the near clipping plane viewport.
		   * @param {number} right Right side of the near clipping plane viewport.
		   * @param {number} top Top of the near clipping plane viewport.
		   * @param {number} bottom Bottom of the near clipping plane viewport.
		   * @param {number} near The depth (negative z coordinate)
		   *     of the near clipping plane.
		   * @param {number} far The depth (negative z coordinate)
		   *     of the far clipping plane.
		   * @param {module:twgl/m4.Mat4} [dst] Output matrix.
		   * @return {module:twgl/m4.Mat4} The perspective matrix.
		   * @memberOf module:twgl/m4
		   */
		  function ortho(left, right, bottom, top, near, far, dst) {
		    dst = dst || new MatType(16);

		    dst[0]  = 2 / (right - left);
		    dst[1]  = 0;
		    dst[2]  = 0;
		    dst[3]  = 0;

		    dst[4]  = 0;
		    dst[5]  = 2 / (top - bottom);
		    dst[6]  = 0;
		    dst[7]  = 0;

		    dst[8]  = 0;
		    dst[9]  = 0;
		    dst[10] = -1 / (far - near);
		    dst[11] = 0;

		    dst[12] = (right + left) / (left - right);
		    dst[13] = (top + bottom) / (bottom - top);
		    dst[14] = -near / (near - far);
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Computes a 4-by-4 perspective transformation matrix given the left, right,
		   * top, bottom, near and far clipping planes. The arguments define a frustum
		   * extending in the negative z direction. The arguments near and far are the
		   * distances to the near and far clipping planes. Note that near and far are not
		   * z coordinates, but rather they are distances along the negative z-axis. The
		   * matrix generated sends the viewing frustum to the unit box. We assume a unit
		   * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z
		   * dimension.
		   * @param {number} left The x coordinate of the left plane of the box.
		   * @param {number} right The x coordinate of the right plane of the box.
		   * @param {number} bottom The y coordinate of the bottom plane of the box.
		   * @param {number} top The y coordinate of the right plane of the box.
		   * @param {number} near The negative z coordinate of the near plane of the box.
		   * @param {number} far The negative z coordinate of the far plane of the box.
		   * @param {module:twgl/m4.Mat4} [dst] Output matrix.
		   * @return {module:twgl/m4.Mat4} The perspective projection matrix.
		   * @memberOf module:twgl/m4
		   */
		  function frustum(left, right, bottom, top, near, far, dst) {
		    dst = dst || new MatType(16);

		    var dx = (right - left);
		    var dy = (top - bottom);
		    var dz = (near - far);

		    dst[ 0] = 2 * near / dx;
		    dst[ 1] = 0;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = 2 * near / dy;
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = (left + right) / dx;
		    dst[ 9] = (top + bottom) / dy;
		    dst[10] = far / dz;
		    dst[11] = -1;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = near * far / dz;
		    dst[15] = 0;

		    return dst;
		  }

		  /**
		   * Computes a 4-by-4 look-at transformation.
		   *
		   * This is a matrix which positions the camera itself. If you want
		   * a view matrix (a matrix which moves things in front of the camera)
		   * take the inverse of this.
		   *
		   * @param {Vec3} eye The position of the eye.
		   * @param {Vec3} target The position meant to be viewed.
		   * @param {Vec3} up A vector pointing up.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The look-at matrix.
		   * @memberOf module:twgl/m4
		   */
		  function lookAt(eye, target, up, dst) {
		    dst = dst || new MatType(16);

		    var xAxis = tempV3a;
		    var yAxis = tempV3b;
		    var zAxis = tempV3c;

		    v3.normalize(
		        v3.subtract(eye, target, zAxis), zAxis);
		    v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);
		    v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);

		    dst[ 0] = xAxis[0];
		    dst[ 1] = xAxis[1];
		    dst[ 2] = xAxis[2];
		    dst[ 3] = 0;
		    dst[ 4] = yAxis[0];
		    dst[ 5] = yAxis[1];
		    dst[ 6] = yAxis[2];
		    dst[ 7] = 0;
		    dst[ 8] = zAxis[0];
		    dst[ 9] = zAxis[1];
		    dst[10] = zAxis[2];
		    dst[11] = 0;
		    dst[12] = eye[0];
		    dst[13] = eye[1];
		    dst[14] = eye[2];
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which translates by the given vector v.
		   * @param {Vec3} v The vector by
		   *     which to translate.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The translation matrix.
		   * @memberOf module:twgl/m4
		   */
		  function translation(v, dst) {
		    dst = dst || new MatType(16);

		    dst[ 0] = 1;
		    dst[ 1] = 0;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = 1;
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = 0;
		    dst[ 9] = 0;
		    dst[10] = 1;
		    dst[11] = 0;
		    dst[12] = v[0];
		    dst[13] = v[1];
		    dst[14] = v[2];
		    dst[15] = 1;
		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix by translation by the given vector v.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} v The vector by
		   *     which to translate.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function translate(m, v, dst) {
		    dst = dst || new MatType(16);

		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];
		    var m00 = m[0];
		    var m01 = m[1];
		    var m02 = m[2];
		    var m03 = m[3];
		    var m10 = m[1 * 4 + 0];
		    var m11 = m[1 * 4 + 1];
		    var m12 = m[1 * 4 + 2];
		    var m13 = m[1 * 4 + 3];
		    var m20 = m[2 * 4 + 0];
		    var m21 = m[2 * 4 + 1];
		    var m22 = m[2 * 4 + 2];
		    var m23 = m[2 * 4 + 3];
		    var m30 = m[3 * 4 + 0];
		    var m31 = m[3 * 4 + 1];
		    var m32 = m[3 * 4 + 2];
		    var m33 = m[3 * 4 + 3];

		    if (m !== dst) {
		      dst[ 0] = m00;
		      dst[ 1] = m01;
		      dst[ 2] = m02;
		      dst[ 3] = m03;
		      dst[ 4] = m10;
		      dst[ 5] = m11;
		      dst[ 6] = m12;
		      dst[ 7] = m13;
		      dst[ 8] = m20;
		      dst[ 9] = m21;
		      dst[10] = m22;
		      dst[11] = m23;
		    }

		    dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;
		    dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;
		    dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;
		    dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The rotation matrix.
		   * @memberOf module:twgl/m4
		   */
		  function rotationX(angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[ 0] = 1;
		    dst[ 1] = 0;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = c;
		    dst[ 6] = s;
		    dst[ 7] = 0;
		    dst[ 8] = 0;
		    dst[ 9] = -s;
		    dst[10] = c;
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given
		   * angle.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function rotateX(m, angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var m10 = m[4];
		    var m11 = m[5];
		    var m12 = m[6];
		    var m13 = m[7];
		    var m20 = m[8];
		    var m21 = m[9];
		    var m22 = m[10];
		    var m23 = m[11];
		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[4]  = c * m10 + s * m20;
		    dst[5]  = c * m11 + s * m21;
		    dst[6]  = c * m12 + s * m22;
		    dst[7]  = c * m13 + s * m23;
		    dst[8]  = c * m20 - s * m10;
		    dst[9]  = c * m21 - s * m11;
		    dst[10] = c * m22 - s * m12;
		    dst[11] = c * m23 - s * m13;

		    if (m !== dst) {
		      dst[ 0] = m[ 0];
		      dst[ 1] = m[ 1];
		      dst[ 2] = m[ 2];
		      dst[ 3] = m[ 3];
		      dst[12] = m[12];
		      dst[13] = m[13];
		      dst[14] = m[14];
		      dst[15] = m[15];
		    }

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The rotation matrix.
		   * @memberOf module:twgl/m4
		   */
		  function rotationY(angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[ 0] = c;
		    dst[ 1] = 0;
		    dst[ 2] = -s;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = 1;
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = s;
		    dst[ 9] = 0;
		    dst[10] = c;
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given
		   * angle.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function rotateY(m, angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var m00 = m[0 * 4 + 0];
		    var m01 = m[0 * 4 + 1];
		    var m02 = m[0 * 4 + 2];
		    var m03 = m[0 * 4 + 3];
		    var m20 = m[2 * 4 + 0];
		    var m21 = m[2 * 4 + 1];
		    var m22 = m[2 * 4 + 2];
		    var m23 = m[2 * 4 + 3];
		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[ 0] = c * m00 - s * m20;
		    dst[ 1] = c * m01 - s * m21;
		    dst[ 2] = c * m02 - s * m22;
		    dst[ 3] = c * m03 - s * m23;
		    dst[ 8] = c * m20 + s * m00;
		    dst[ 9] = c * m21 + s * m01;
		    dst[10] = c * m22 + s * m02;
		    dst[11] = c * m23 + s * m03;

		    if (m !== dst) {
		      dst[ 4] = m[ 4];
		      dst[ 5] = m[ 5];
		      dst[ 6] = m[ 6];
		      dst[ 7] = m[ 7];
		      dst[12] = m[12];
		      dst[13] = m[13];
		      dst[14] = m[14];
		      dst[15] = m[15];
		    }

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The rotation matrix.
		   * @memberOf module:twgl/m4
		   */
		  function rotationZ(angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[ 0] = c;
		    dst[ 1] = s;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = -s;
		    dst[ 5] = c;
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = 0;
		    dst[ 9] = 0;
		    dst[10] = 1;
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given
		   * angle.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function rotateZ(m, angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var m00 = m[0 * 4 + 0];
		    var m01 = m[0 * 4 + 1];
		    var m02 = m[0 * 4 + 2];
		    var m03 = m[0 * 4 + 3];
		    var m10 = m[1 * 4 + 0];
		    var m11 = m[1 * 4 + 1];
		    var m12 = m[1 * 4 + 2];
		    var m13 = m[1 * 4 + 3];
		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);

		    dst[ 0] = c * m00 + s * m10;
		    dst[ 1] = c * m01 + s * m11;
		    dst[ 2] = c * m02 + s * m12;
		    dst[ 3] = c * m03 + s * m13;
		    dst[ 4] = c * m10 - s * m00;
		    dst[ 5] = c * m11 - s * m01;
		    dst[ 6] = c * m12 - s * m02;
		    dst[ 7] = c * m13 - s * m03;

		    if (m !== dst) {
		      dst[ 8] = m[ 8];
		      dst[ 9] = m[ 9];
		      dst[10] = m[10];
		      dst[11] = m[11];
		      dst[12] = m[12];
		      dst[13] = m[13];
		      dst[14] = m[14];
		      dst[15] = m[15];
		    }

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which rotates around the given axis by the given
		   * angle.
		   * @param {Vec3} axis The axis
		   *     about which to rotate.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians
		   *     around the axis.
		   * @memberOf module:twgl/m4
		   */
		  function axisRotation(axis, angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var x = axis[0];
		    var y = axis[1];
		    var z = axis[2];
		    var n = Math.sqrt(x * x + y * y + z * z);
		    x /= n;
		    y /= n;
		    z /= n;
		    var xx = x * x;
		    var yy = y * y;
		    var zz = z * z;
		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);
		    var oneMinusCosine = 1 - c;

		    dst[ 0] = xx + (1 - xx) * c;
		    dst[ 1] = x * y * oneMinusCosine + z * s;
		    dst[ 2] = x * z * oneMinusCosine - y * s;
		    dst[ 3] = 0;
		    dst[ 4] = x * y * oneMinusCosine - z * s;
		    dst[ 5] = yy + (1 - yy) * c;
		    dst[ 6] = y * z * oneMinusCosine + x * s;
		    dst[ 7] = 0;
		    dst[ 8] = x * z * oneMinusCosine + y * s;
		    dst[ 9] = y * z * oneMinusCosine - x * s;
		    dst[10] = zz + (1 - zz) * c;
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix by rotation around the given axis by the
		   * given angle.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} axis The axis
		   *     about which to rotate.
		   * @param {number} angleInRadians The angle by which to rotate (in radians).
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function axisRotate(m, axis, angleInRadians, dst) {
		    dst = dst || new MatType(16);

		    var x = axis[0];
		    var y = axis[1];
		    var z = axis[2];
		    var n = Math.sqrt(x * x + y * y + z * z);
		    x /= n;
		    y /= n;
		    z /= n;
		    var xx = x * x;
		    var yy = y * y;
		    var zz = z * z;
		    var c = Math.cos(angleInRadians);
		    var s = Math.sin(angleInRadians);
		    var oneMinusCosine = 1 - c;

		    var r00 = xx + (1 - xx) * c;
		    var r01 = x * y * oneMinusCosine + z * s;
		    var r02 = x * z * oneMinusCosine - y * s;
		    var r10 = x * y * oneMinusCosine - z * s;
		    var r11 = yy + (1 - yy) * c;
		    var r12 = y * z * oneMinusCosine + x * s;
		    var r20 = x * z * oneMinusCosine + y * s;
		    var r21 = y * z * oneMinusCosine - x * s;
		    var r22 = zz + (1 - zz) * c;

		    var m00 = m[0];
		    var m01 = m[1];
		    var m02 = m[2];
		    var m03 = m[3];
		    var m10 = m[4];
		    var m11 = m[5];
		    var m12 = m[6];
		    var m13 = m[7];
		    var m20 = m[8];
		    var m21 = m[9];
		    var m22 = m[10];
		    var m23 = m[11];

		    dst[ 0] = r00 * m00 + r01 * m10 + r02 * m20;
		    dst[ 1] = r00 * m01 + r01 * m11 + r02 * m21;
		    dst[ 2] = r00 * m02 + r01 * m12 + r02 * m22;
		    dst[ 3] = r00 * m03 + r01 * m13 + r02 * m23;
		    dst[ 4] = r10 * m00 + r11 * m10 + r12 * m20;
		    dst[ 5] = r10 * m01 + r11 * m11 + r12 * m21;
		    dst[ 6] = r10 * m02 + r11 * m12 + r12 * m22;
		    dst[ 7] = r10 * m03 + r11 * m13 + r12 * m23;
		    dst[ 8] = r20 * m00 + r21 * m10 + r22 * m20;
		    dst[ 9] = r20 * m01 + r21 * m11 + r22 * m21;
		    dst[10] = r20 * m02 + r21 * m12 + r22 * m22;
		    dst[11] = r20 * m03 + r21 * m13 + r22 * m23;

		    if (m !== dst) {
		      dst[12] = m[12];
		      dst[13] = m[13];
		      dst[14] = m[14];
		      dst[15] = m[15];
		    }

		    return dst;
		  }

		  /**
		   * Creates a 4-by-4 matrix which scales in each dimension by an amount given by
		   * the corresponding entry in the given vector; assumes the vector has three
		   * entries.
		   * @param {Vec3} v A vector of
		   *     three entries specifying the factor by which to scale in each dimension.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} The scaling matrix.
		   * @memberOf module:twgl/m4
		   */
		  function scaling(v, dst) {
		    dst = dst || new MatType(16);

		    dst[ 0] = v[0];
		    dst[ 1] = 0;
		    dst[ 2] = 0;
		    dst[ 3] = 0;
		    dst[ 4] = 0;
		    dst[ 5] = v[1];
		    dst[ 6] = 0;
		    dst[ 7] = 0;
		    dst[ 8] = 0;
		    dst[ 9] = 0;
		    dst[10] = v[2];
		    dst[11] = 0;
		    dst[12] = 0;
		    dst[13] = 0;
		    dst[14] = 0;
		    dst[15] = 1;

		    return dst;
		  }

		  /**
		   * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount
		   * given by the corresponding entry in the given vector; assumes the vector has
		   * three entries.
		   * @param {module:twgl/m4.Mat4} m The matrix to be modified.
		   * @param {Vec3} v A vector of three entries specifying the
		   *     factor by which to scale in each dimension.
		   * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..
		   * @return {module:twgl/m4.Mat4} m once modified.
		   * @memberOf module:twgl/m4
		   */
		  function scale(m, v, dst) {
		    dst = dst || new MatType(16);

		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];

		    dst[ 0] = v0 * m[0 * 4 + 0];
		    dst[ 1] = v0 * m[0 * 4 + 1];
		    dst[ 2] = v0 * m[0 * 4 + 2];
		    dst[ 3] = v0 * m[0 * 4 + 3];
		    dst[ 4] = v1 * m[1 * 4 + 0];
		    dst[ 5] = v1 * m[1 * 4 + 1];
		    dst[ 6] = v1 * m[1 * 4 + 2];
		    dst[ 7] = v1 * m[1 * 4 + 3];
		    dst[ 8] = v2 * m[2 * 4 + 0];
		    dst[ 9] = v2 * m[2 * 4 + 1];
		    dst[10] = v2 * m[2 * 4 + 2];
		    dst[11] = v2 * m[2 * 4 + 3];

		    if (m !== dst) {
		      dst[12] = m[12];
		      dst[13] = m[13];
		      dst[14] = m[14];
		      dst[15] = m[15];
		    }

		    return dst;
		  }

		  /**
		   * Takes a 4-by-4 matrix and a vector with 3 entries,
		   * interprets the vector as a point, transforms that point by the matrix, and
		   * returns the result as a vector with 3 entries.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} v The point.
		   * @param {Vec3} dst optional vec3 to store result
		   * @return {Vec3} dst or new vec3 if not provided
		   * @memberOf module:twgl/m4
		   */
		  function transformPoint(m, v, dst) {
		    dst = dst || v3.create();
		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];
		    var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];

		    dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
		    dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
		    dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;

		    return dst;
		  }

		  /**
		   * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
		   * direction, transforms that direction by the matrix, and returns the result;
		   * assumes the transformation of 3-dimensional space represented by the matrix
		   * is parallel-preserving, i.e. any combination of rotation, scaling and
		   * translation, but not a perspective distortion. Returns a vector with 3
		   * entries.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} v The direction.
		   * @param {Vec3} dst optional Vec3 to store result
		   * @return {Vec3} dst or new Vec3 if not provided
		   * @memberOf module:twgl/m4
		   */
		  function transformDirection(m, v, dst) {
		    dst = dst || v3.create();

		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];

		    dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
		    dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
		    dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];

		    return dst;
		  }

		  /**
		   * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector
		   * as a normal to a surface, and computes a vector which is normal upon
		   * transforming that surface by the matrix. The effect of this function is the
		   * same as transforming v (as a direction) by the inverse-transpose of m.  This
		   * function assumes the transformation of 3-dimensional space represented by the
		   * matrix is parallel-preserving, i.e. any combination of rotation, scaling and
		   * translation, but not a perspective distortion.  Returns a vector with 3
		   * entries.
		   * @param {module:twgl/m4.Mat4} m The matrix.
		   * @param {Vec3} v The normal.
		   * @param {Vec3} [dst] The direction.
		   * @return {Vec3} The transformed direction.
		   * @memberOf module:twgl/m4
		   */
		  function transformNormal(m, v, dst) {
		    dst = dst || v3.create();
		    var mi = inverse(m);
		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];

		    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
		    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
		    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

		    return dst;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "axisRotate": axisRotate,
		    "axisRotation": axisRotation,
		    "create": identity,
		    "copy": copy,
		    "frustum": frustum,
		    "getAxis": getAxis,
		    "getTranslation": getTranslation,
		    "identity": identity,
		    "inverse": inverse,
		    "lookAt": lookAt,
		    "multiply": multiply,
		    "negate": negate,
		    "ortho": ortho,
		    "perspective": perspective,
		    "rotateX": rotateX,
		    "rotateY": rotateY,
		    "rotateZ": rotateZ,
		    "rotateAxis": axisRotate,
		    "rotationX": rotationX,
		    "rotationY": rotationY,
		    "rotationZ": rotationZ,
		    "scale": scale,
		    "scaling": scaling,
		    "setAxis": setAxis,
		    "setDefaultType": setDefaultType,
		    "setTranslation": setTranslation,
		    "transformDirection": transformDirection,
		    "transformNormal": transformNormal,
		    "transformPoint": transformPoint,
		    "translate": translate,
		    "translation": translation,
		    "transpose": transpose,
		  };
		});


		/*
		 * Copyright 2015, Gregg Tavares.
		 * All rights reserved.
		 *
		 * Redistribution and use in source and binary forms, with or without
		 * modification, are permitted provided that the following conditions are
		 * met:
		 *
		 *     * Redistributions of source code must retain the above copyright
		 * notice, this list of conditions and the following disclaimer.
		 *     * Redistributions in binary form must reproduce the above
		 * copyright notice, this list of conditions and the following disclaimer
		 * in the documentation and/or other materials provided with the
		 * distribution.
		 *     * Neither the name of Gregg Tavares. nor the names of his
		 * contributors may be used to endorse or promote products derived from
		 * this software without specific prior written permission.
		 *
		 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
		 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
		 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
		 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
		 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
		 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
		 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
		 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
		 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
		 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
		 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		 */

		/**
		 * Various functions to make simple primitives
		 *
		 * note: Most primitive functions come in 3 styles
		 *
		 * *  `createSomeShapeBufferInfo`
		 *
		 *    These functions are almost always the functions you want to call. They
		 *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s
		 *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}
		 *    and {@link module:twgl.drawBufferInfo} etc...
		 *
		 * *  `createSomeShapeBuffers`
		 *
		 *    These create WebGLBuffers and put your data in them but nothing else.
		 *    It's a shortcut to doing it yourself if you don't want to use
		 *    the higher level functions.
		 *
		 * *  `createSomeShapeVertices`
		 *
		 *    These just create vertices, no buffers. This allows you to manipulate the vertices
		 *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished
		 *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.
		 *
		 *    example:
		 *
		 *        var arrays = twgl.primitives.createPlaneArrays(1);
		 *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));
		 *        var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);
		 *
		 * @module twgl/primitives
		 */
		define('twgl/primitives',[
		    './attributes',
		    './twgl',
		    './utils',
		    './m4',
		    './v3',
		  ], function(
		    attributes,
		    twgl,
		    utils,
		    m4,
		    v3
		  ) {
		  

		  var getArray = attributes.getArray_;  // eslint-disable-line
		  var getNumComponents = attributes.getNumComponents_;  // eslint-disable-line

		  /**
		   * Add `push` to a typed array. It just keeps a 'cursor'
		   * and allows use to `push` values into the array so we
		   * don't have to manually compute offsets
		   * @param {TypedArray} typedArray TypedArray to augment
		   * @param {number} numComponents number of components.
		   */
		  function augmentTypedArray(typedArray, numComponents) {
		    var cursor = 0;
		    typedArray.push = function() {
		      for (var ii = 0; ii < arguments.length; ++ii) {
		        var value = arguments[ii];
		        if (value instanceof Array || (value.buffer && value.buffer instanceof ArrayBuffer)) {
		          for (var jj = 0; jj < value.length; ++jj) {
		            typedArray[cursor++] = value[jj];
		          }
		        } else {
		          typedArray[cursor++] = value;
		        }
		      }
		    };
		    typedArray.reset = function(opt_index) {
		      cursor = opt_index || 0;
		    };
		    typedArray.numComponents = numComponents;
		    Object.defineProperty(typedArray, 'numElements', {
		      get: function() {
		        return this.length / this.numComponents | 0;
		      },
		    });
		    return typedArray;
		  }

		  /**
		   * creates a typed array with a `push` function attached
		   * so that you can easily *push* values.
		   *
		   * `push` can take multiple arguments. If an argument is an array each element
		   * of the array will be added to the typed array.
		   *
		   * Example:
		   *
		   *     var array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
		   *     array.push(1, 2, 3);
		   *     array.push([4, 5, 6]);
		   *     // array now contains [1, 2, 3, 4, 5, 6]
		   *
		   * Also has `numComponents` and `numElements` properties.
		   *
		   * @param {number} numComponents number of components
		   * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
		   * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
		   * @return {ArrayBuffer} A typed array.
		   * @memberOf module:twgl/primitives
		   */
		  function createAugmentedTypedArray(numComponents, numElements, opt_type) {
		    var Type = opt_type || Float32Array;
		    return augmentTypedArray(new Type(numComponents * numElements), numComponents);
		  }

		  function allButIndices(name) {
		    return name !== "indices";
		  }

		  /**
		   * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.
		   * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex
		   * @return {Object.<string, TypedArray>} The deindexed vertices
		   * @memberOf module:twgl/primitives
		   */
		  function deindexVertices(vertices) {
		    var indices = vertices.indices;
		    var newVertices = {};
		    var numElements = indices.length;

		    function expandToUnindexed(channel) {
		      var srcBuffer = vertices[channel];
		      var numComponents = srcBuffer.numComponents;
		      var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);
		      for (var ii = 0; ii < numElements; ++ii) {
		        var ndx = indices[ii];
		        var offset = ndx * numComponents;
		        for (var jj = 0; jj < numComponents; ++jj) {
		          dstBuffer.push(srcBuffer[offset + jj]);
		        }
		      }
		      newVertices[channel] = dstBuffer;
		    }

		    Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);

		    return newVertices;
		  }

		  /**
		   * flattens the normals of deindexed vertices in place.
		   * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten
		   * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)
		   * @memberOf module:twgl/primitives
		   */
		  function flattenNormals(vertices) {
		    if (vertices.indices) {
		      throw "can't flatten normals of indexed vertices. deindex them first";
		    }

		    var normals = vertices.normal;
		    var numNormals = normals.length;
		    for (var ii = 0; ii < numNormals; ii += 9) {
		      // pull out the 3 normals for this triangle
		      var nax = normals[ii + 0];
		      var nay = normals[ii + 1];
		      var naz = normals[ii + 2];

		      var nbx = normals[ii + 3];
		      var nby = normals[ii + 4];
		      var nbz = normals[ii + 5];

		      var ncx = normals[ii + 6];
		      var ncy = normals[ii + 7];
		      var ncz = normals[ii + 8];

		      // add them
		      var nx = nax + nbx + ncx;
		      var ny = nay + nby + ncy;
		      var nz = naz + nbz + ncz;

		      // normalize them
		      var length = Math.sqrt(nx * nx + ny * ny + nz * nz);

		      nx /= length;
		      ny /= length;
		      nz /= length;

		      // copy them back in
		      normals[ii + 0] = nx;
		      normals[ii + 1] = ny;
		      normals[ii + 2] = nz;

		      normals[ii + 3] = nx;
		      normals[ii + 4] = ny;
		      normals[ii + 5] = nz;

		      normals[ii + 6] = nx;
		      normals[ii + 7] = ny;
		      normals[ii + 8] = nz;
		    }

		    return vertices;
		  }

		  function applyFuncToV3Array(array, matrix, fn) {
		    var len = array.length;
		    var tmp = new Float32Array(3);
		    for (var ii = 0; ii < len; ii += 3) {
		      fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
		      array[ii    ] = tmp[0];
		      array[ii + 1] = tmp[1];
		      array[ii + 2] = tmp[2];
		    }
		  }

		  function transformNormal(mi, v, dst) {
		    dst = dst || v3.create();
		    var v0 = v[0];
		    var v1 = v[1];
		    var v2 = v[2];

		    dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
		    dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
		    dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];

		    return dst;
		  }

		  /**
		   * Reorients directions by the given matrix..
		   * @param {number[]|TypedArray} array The array. Assumes value floats per element.
		   * @param {Matrix} matrix A matrix to multiply by.
		   * @return {number[]|TypedArray} the same array that was passed in
		   * @memberOf module:twgl/primitives
		   */
		  function reorientDirections(array, matrix) {
		    applyFuncToV3Array(array, matrix, m4.transformDirection);
		    return array;
		  }

		  /**
		   * Reorients normals by the inverse-transpose of the given
		   * matrix..
		   * @param {number[]|TypedArray} array The array. Assumes value floats per element.
		   * @param {Matrix} matrix A matrix to multiply by.
		   * @return {number[]|TypedArray} the same array that was passed in
		   * @memberOf module:twgl/primitives
		   */
		  function reorientNormals(array, matrix) {
		    applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);
		    return array;
		  }

		  /**
		   * Reorients positions by the given matrix. In other words, it
		   * multiplies each vertex by the given matrix.
		   * @param {number[]|TypedArray} array The array. Assumes value floats per element.
		   * @param {Matrix} matrix A matrix to multiply by.
		   * @return {number[]|TypedArray} the same array that was passed in
		   * @memberOf module:twgl/primitives
		   */
		  function reorientPositions(array, matrix) {
		    applyFuncToV3Array(array, matrix, m4.transformPoint);
		    return array;
		  }

		  /**
		   * Reorients arrays by the given matrix. Assumes arrays have
		   * names that contains 'pos' could be reoriented as positions,
		   * 'binorm' or 'tan' as directions, and 'norm' as normals.
		   *
		   * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient
		   * @param {Matrix} matrix matrix to reorient by.
		   * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.
		   * @memberOf module:twgl/primitives
		   */
		  function reorientVertices(arrays, matrix) {
		    Object.keys(arrays).forEach(function(name) {
		      var array = arrays[name];
		      if (name.indexOf("pos") >= 0) {
		        reorientPositions(array, matrix);
		      } else if (name.indexOf("tan") >= 0 || name.indexOf("binorm") >= 0) {
		        reorientDirections(array, matrix);
		      } else if (name.indexOf("norm") >= 0) {
		        reorientNormals(array, matrix);
		      }
		    });
		    return arrays;
		  }

		  /**
		   * Creates XY quad BufferInfo
		   *
		   * The default with no parameters will return a 2x2 quad with values from -1 to +1.
		   * If you want a unit quad with that goes from 0 to 1 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
		   *
		   * If you want a unit quad centered above 0,0 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
		   * @param {number} [xOffset] the amount to offset the quad in X
		   * @param {number} [yOffset] the amount to offset the quad in Y
		   * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo
		   * @memberOf module:twgl/primitives
		   * @function createXYQuadBufferInfo
		   */

		  /**
		   * Creates XY quad Buffers
		   *
		   * The default with no parameters will return a 2x2 quad with values from -1 to +1.
		   * If you want a unit quad with that goes from 0 to 1 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);
		   *
		   * If you want a unit quad centered above 0,0 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
		   * @param {number} [xOffset] the amount to offset the quad in X
		   * @param {number} [yOffset] the amount to offset the quad in Y
		   * @return {module:twgl.BufferInfo} the created XY Quad buffers
		   * @memberOf module:twgl/primitives
		   * @function createXYQuadBuffers
		   */

		  /**
		   * Creates XY quad vertices
		   *
		   * The default with no parameters will return a 2x2 quad with values from -1 to +1.
		   * If you want a unit quad with that goes from 0 to 1 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);
		   *
		   * If you want a unit quad centered above 0,0 you'd call it with
		   *
		   *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);
		   *
		   * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1
		   * @param {number} [xOffset] the amount to offset the quad in X
		   * @param {number} [yOffset] the amount to offset the quad in Y
		   * @return {Object.<string, TypedArray> the created XY Quad vertices
		   * @memberOf module:twgl/primitives
		   */
		  function createXYQuadVertices(size, xOffset, yOffset) {
		    size = size || 2;
		    xOffset = xOffset || 0;
		    yOffset = yOffset || 0;
		    size *= 0.5;
		    return {
		      position: {
		        numComponents: 2,
		        data: [
		          xOffset + -1 * size, yOffset + -1 * size,
		          xOffset +  1 * size, yOffset + -1 * size,
		          xOffset + -1 * size, yOffset +  1 * size,
		          xOffset +  1 * size, yOffset +  1 * size,
		        ],
		      },
		      normal: [
		        0, 0, 1,
		        0, 0, 1,
		        0, 0, 1,
		        0, 0, 1,
		      ],
		      texcoord: [
		        0, 0,
		        1, 0,
		        0, 1,
		        1, 1,
		      ],
		      indices: [ 0, 1, 2, 2, 1, 3 ],
		    };
		  }

		  /**
		   * Creates XZ plane BufferInfo.
		   *
		   * The created plane has position, normal, and texcoord data
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [width] Width of the plane. Default = 1
		   * @param {number} [depth] Depth of the plane. Default = 1
		   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
		   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
		   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
		   * @return {@module:twgl.BufferInfo} The created plane BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createPlaneBufferInfo
		   */

		  /**
		   * Creates XZ plane buffers.
		   *
		   * The created plane has position, normal, and texcoord data
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [width] Width of the plane. Default = 1
		   * @param {number} [depth] Depth of the plane. Default = 1
		   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
		   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
		   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
		   * @return {Object.<string, WebGLBuffer>} The created plane buffers.
		   * @memberOf module:twgl/primitives
		   * @function createPlaneBuffers
		   */

		  /**
		   * Creates XZ plane vertices.
		   *
		   * The created plane has position, normal, and texcoord data
		   *
		   * @param {number} [width] Width of the plane. Default = 1
		   * @param {number} [depth] Depth of the plane. Default = 1
		   * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
		   * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
		   * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
		   * @return {Object.<string, TypedArray>} The created plane vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createPlaneVertices(
		      width,
		      depth,
		      subdivisionsWidth,
		      subdivisionsDepth,
		      matrix) {
		    width = width || 1;
		    depth = depth || 1;
		    subdivisionsWidth = subdivisionsWidth || 1;
		    subdivisionsDepth = subdivisionsDepth || 1;
		    matrix = matrix || m4.identity();

		    var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
		    var positions = createAugmentedTypedArray(3, numVertices);
		    var normals = createAugmentedTypedArray(3, numVertices);
		    var texcoords = createAugmentedTypedArray(2, numVertices);

		    for (var z = 0; z <= subdivisionsDepth; z++) {
		      for (var x = 0; x <= subdivisionsWidth; x++) {
		        var u = x / subdivisionsWidth;
		        var v = z / subdivisionsDepth;
		        positions.push(
		            width * u - width * 0.5,
		            0,
		            depth * v - depth * 0.5);
		        normals.push(0, 1, 0);
		        texcoords.push(u, v);
		      }
		    }

		    var numVertsAcross = subdivisionsWidth + 1;
		    var indices = createAugmentedTypedArray(
		        3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);

		    for (var z = 0; z < subdivisionsDepth; z++) {  // eslint-disable-line
		      for (var x = 0; x < subdivisionsWidth; x++) {  // eslint-disable-line
		        // Make triangle 1 of quad.
		        indices.push(
		            (z + 0) * numVertsAcross + x,
		            (z + 1) * numVertsAcross + x,
		            (z + 0) * numVertsAcross + x + 1);

		        // Make triangle 2 of quad.
		        indices.push(
		            (z + 1) * numVertsAcross + x,
		            (z + 1) * numVertsAcross + x + 1,
		            (z + 0) * numVertsAcross + x + 1);
		      }
		    }

		    var arrays = reorientVertices({
		      position: positions,
		      normal: normals,
		      texcoord: texcoords,
		      indices: indices,
		    }, matrix);
		    return arrays;
		  }

		  /**
		   * Creates sphere BufferInfo.
		   *
		   * The created sphere has position, normal, and texcoord data
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius radius of the sphere.
		   * @param {number} subdivisionsAxis number of steps around the sphere.
		   * @param {number} subdivisionsHeight number of vertically on the sphere.
		   * @param {number} [opt_startLatitudeInRadians] where to start the
		   *     top of the sphere. Default = 0.
		   * @param {number} [opt_endLatitudeInRadians] Where to end the
		   *     bottom of the sphere. Default = Math.PI.
		   * @param {number} [opt_startLongitudeInRadians] where to start
		   *     wrapping the sphere. Default = 0.
		   * @param {number} [opt_endLongitudeInRadians] where to end
		   *     wrapping the sphere. Default = 2 * Math.PI.
		   * @return {module:twgl.BufferInfo} The created sphere BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createSphereBufferInfo
		   */

		  /**
		   * Creates sphere buffers.
		   *
		   * The created sphere has position, normal, and texcoord data
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius radius of the sphere.
		   * @param {number} subdivisionsAxis number of steps around the sphere.
		   * @param {number} subdivisionsHeight number of vertically on the sphere.
		   * @param {number} [opt_startLatitudeInRadians] where to start the
		   *     top of the sphere. Default = 0.
		   * @param {number} [opt_endLatitudeInRadians] Where to end the
		   *     bottom of the sphere. Default = Math.PI.
		   * @param {number} [opt_startLongitudeInRadians] where to start
		   *     wrapping the sphere. Default = 0.
		   * @param {number} [opt_endLongitudeInRadians] where to end
		   *     wrapping the sphere. Default = 2 * Math.PI.
		   * @return {Object.<string, WebGLBuffer>} The created sphere buffers.
		   * @memberOf module:twgl/primitives
		   * @function createSphereBuffers
		   */

		  /**
		   * Creates sphere vertices.
		   *
		   * The created sphere has position, normal, and texcoord data
		   *
		   * @param {number} radius radius of the sphere.
		   * @param {number} subdivisionsAxis number of steps around the sphere.
		   * @param {number} subdivisionsHeight number of vertically on the sphere.
		   * @param {number} [opt_startLatitudeInRadians] where to start the
		   *     top of the sphere. Default = 0.
		   * @param {number} [opt_endLatitudeInRadians] Where to end the
		   *     bottom of the sphere. Default = Math.PI.
		   * @param {number} [opt_startLongitudeInRadians] where to start
		   *     wrapping the sphere. Default = 0.
		   * @param {number} [opt_endLongitudeInRadians] where to end
		   *     wrapping the sphere. Default = 2 * Math.PI.
		   * @return {Object.<string, TypedArray>} The created sphere vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createSphereVertices(
		      radius,
		      subdivisionsAxis,
		      subdivisionsHeight,
		      opt_startLatitudeInRadians,
		      opt_endLatitudeInRadians,
		      opt_startLongitudeInRadians,
		      opt_endLongitudeInRadians) {
		    if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
		      throw Error('subdivisionAxis and subdivisionHeight must be > 0');
		    }

		    opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
		    opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
		    opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
		    opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);

		    var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
		    var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;

		    // We are going to generate our sphere by iterating through its
		    // spherical coordinates and generating 2 triangles for each quad on a
		    // ring of the sphere.
		    var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
		    var positions = createAugmentedTypedArray(3, numVertices);
		    var normals   = createAugmentedTypedArray(3, numVertices);
		    var texcoords = createAugmentedTypedArray(2 , numVertices);

		    // Generate the individual vertices in our vertex buffer.
		    for (var y = 0; y <= subdivisionsHeight; y++) {
		      for (var x = 0; x <= subdivisionsAxis; x++) {
		        // Generate a vertex based on its spherical coordinates
		        var u = x / subdivisionsAxis;
		        var v = y / subdivisionsHeight;
		        var theta = longRange * u;
		        var phi = latRange * v;
		        var sinTheta = Math.sin(theta);
		        var cosTheta = Math.cos(theta);
		        var sinPhi = Math.sin(phi);
		        var cosPhi = Math.cos(phi);
		        var ux = cosTheta * sinPhi;
		        var uy = cosPhi;
		        var uz = sinTheta * sinPhi;
		        positions.push(radius * ux, radius * uy, radius * uz);
		        normals.push(ux, uy, uz);
		        texcoords.push(1 - u, v);
		      }
		    }

		    var numVertsAround = subdivisionsAxis + 1;
		    var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
		    for (var x = 0; x < subdivisionsAxis; x++) {  // eslint-disable-line
		      for (var y = 0; y < subdivisionsHeight; y++) {  // eslint-disable-line
		        // Make triangle 1 of quad.
		        indices.push(
		            (y + 0) * numVertsAround + x,
		            (y + 0) * numVertsAround + x + 1,
		            (y + 1) * numVertsAround + x);

		        // Make triangle 2 of quad.
		        indices.push(
		            (y + 1) * numVertsAround + x,
		            (y + 0) * numVertsAround + x + 1,
		            (y + 1) * numVertsAround + x + 1);
		      }
		    }

		    return {
		      position: positions,
		      normal: normals,
		      texcoord: texcoords,
		      indices: indices,
		    };
		  }

		  /**
		   * Array of the indices of corners of each face of a cube.
		   * @type {Array.<number[]>}
		   */
		  var CUBE_FACE_INDICES = [
		    [3, 7, 5, 1],  // right
		    [6, 2, 0, 4],  // left
		    [6, 7, 3, 2],  // ??
		    [0, 1, 5, 4],  // ??
		    [7, 6, 4, 5],  // front
		    [2, 3, 1, 0],  // back
		  ];

		  /**
		   * Creates a BufferInfo for a cube.
		   *
		   * The cube is created around the origin. (-size / 2, size / 2).
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [size] width, height and depth of the cube.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createCubeBufferInfo
		   */

		  /**
		   * Creates the buffers and indices for a cube.
		   *
		   * The cube is created around the origin. (-size / 2, size / 2).
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} [size] width, height and depth of the cube.
		   * @return {Object.<string, WebGLBuffer>} The created buffers.
		   * @memberOf module:twgl/primitives
		   * @function createCubeBuffers
		   */

		  /**
		   * Creates the vertices and indices for a cube.
		   *
		   * The cube is created around the origin. (-size / 2, size / 2).
		   *
		   * @param {number} [size] width, height and depth of the cube.
		   * @return {Object.<string, TypedArray>} The created vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createCubeVertices(size) {
		    size = size || 1;
		    var k = size / 2;

		    var cornerVertices = [
		      [-k, -k, -k],
		      [+k, -k, -k],
		      [-k, +k, -k],
		      [+k, +k, -k],
		      [-k, -k, +k],
		      [+k, -k, +k],
		      [-k, +k, +k],
		      [+k, +k, +k],
		    ];

		    var faceNormals = [
		      [+1, +0, +0],
		      [-1, +0, +0],
		      [+0, +1, +0],
		      [+0, -1, +0],
		      [+0, +0, +1],
		      [+0, +0, -1],
		    ];

		    var uvCoords = [
		      [1, 0],
		      [0, 0],
		      [0, 1],
		      [1, 1],
		    ];

		    var numVertices = 6 * 4;
		    var positions = createAugmentedTypedArray(3, numVertices);
		    var normals   = createAugmentedTypedArray(3, numVertices);
		    var texcoords = createAugmentedTypedArray(2 , numVertices);
		    var indices   = createAugmentedTypedArray(3, 6 * 2, Uint16Array);

		    for (var f = 0; f < 6; ++f) {
		      var faceIndices = CUBE_FACE_INDICES[f];
		      for (var v = 0; v < 4; ++v) {
		        var position = cornerVertices[faceIndices[v]];
		        var normal = faceNormals[f];
		        var uv = uvCoords[v];

		        // Each face needs all four vertices because the normals and texture
		        // coordinates are not all the same.
		        positions.push(position);
		        normals.push(normal);
		        texcoords.push(uv);

		      }
		      // Two triangles make a square face.
		      var offset = 4 * f;
		      indices.push(offset + 0, offset + 1, offset + 2);
		      indices.push(offset + 0, offset + 2, offset + 3);
		    }

		    return {
		      position: positions,
		      normal: normals,
		      texcoord: texcoords,
		      indices: indices,
		    };
		  }

		  /**
		   * Creates a BufferInfo for a truncated cone, which is like a cylinder
		   * except that it has different top and bottom radii. A truncated cone
		   * can also be used to create cylinders and regular cones. The
		   * truncated cone will be created centered about the origin, with the
		   * y axis as its vertical axis.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} bottomRadius Bottom radius of truncated cone.
		   * @param {number} topRadius Top radius of truncated cone.
		   * @param {number} height Height of truncated cone.
		   * @param {number} radialSubdivisions The number of subdivisions around the
		   *     truncated cone.
		   * @param {number} verticalSubdivisions The number of subdivisions down the
		   *     truncated cone.
		   * @param {boolean} [opt_topCap] Create top cap. Default = true.
		   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
		   * @return {module:twgl.BufferInfo} The created cone BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createTruncatedConeBufferInfo
		   */

		  /**
		   * Creates buffers for a truncated cone, which is like a cylinder
		   * except that it has different top and bottom radii. A truncated cone
		   * can also be used to create cylinders and regular cones. The
		   * truncated cone will be created centered about the origin, with the
		   * y axis as its vertical axis.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} bottomRadius Bottom radius of truncated cone.
		   * @param {number} topRadius Top radius of truncated cone.
		   * @param {number} height Height of truncated cone.
		   * @param {number} radialSubdivisions The number of subdivisions around the
		   *     truncated cone.
		   * @param {number} verticalSubdivisions The number of subdivisions down the
		   *     truncated cone.
		   * @param {boolean} [opt_topCap] Create top cap. Default = true.
		   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
		   * @return {Object.<string, WebGLBuffer>} The created cone buffers.
		   * @memberOf module:twgl/primitives
		   * @function createTruncatedConeBuffers
		   */

		  /**
		   * Creates vertices for a truncated cone, which is like a cylinder
		   * except that it has different top and bottom radii. A truncated cone
		   * can also be used to create cylinders and regular cones. The
		   * truncated cone will be created centered about the origin, with the
		   * y axis as its vertical axis. .
		   *
		   * @param {number} bottomRadius Bottom radius of truncated cone.
		   * @param {number} topRadius Top radius of truncated cone.
		   * @param {number} height Height of truncated cone.
		   * @param {number} radialSubdivisions The number of subdivisions around the
		   *     truncated cone.
		   * @param {number} verticalSubdivisions The number of subdivisions down the
		   *     truncated cone.
		   * @param {boolean} [opt_topCap] Create top cap. Default = true.
		   * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.
		   * @return {Object.<string, TypedArray>} The created cone vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createTruncatedConeVertices(
		      bottomRadius,
		      topRadius,
		      height,
		      radialSubdivisions,
		      verticalSubdivisions,
		      opt_topCap,
		      opt_bottomCap) {
		    if (radialSubdivisions < 3) {
		      throw Error('radialSubdivisions must be 3 or greater');
		    }

		    if (verticalSubdivisions < 1) {
		      throw Error('verticalSubdivisions must be 1 or greater');
		    }

		    var topCap = (opt_topCap === undefined) ? true : opt_topCap;
		    var bottomCap = (opt_bottomCap === undefined) ? true : opt_bottomCap;

		    var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);

		    var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);
		    var positions = createAugmentedTypedArray(3, numVertices);
		    var normals   = createAugmentedTypedArray(3, numVertices);
		    var texcoords = createAugmentedTypedArray(2, numVertices);
		    var indices   = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);

		    var vertsAroundEdge = radialSubdivisions + 1;

		    // The slant of the cone is constant across its surface
		    var slant = Math.atan2(bottomRadius - topRadius, height);
		    var cosSlant = Math.cos(slant);
		    var sinSlant = Math.sin(slant);

		    var start = topCap ? -2 : 0;
		    var end = verticalSubdivisions + (bottomCap ? 2 : 0);

		    for (var yy = start; yy <= end; ++yy) {
		      var v = yy / verticalSubdivisions;
		      var y = height * v;
		      var ringRadius;
		      if (yy < 0) {
		        y = 0;
		        v = 1;
		        ringRadius = bottomRadius;
		      } else if (yy > verticalSubdivisions) {
		        y = height;
		        v = 1;
		        ringRadius = topRadius;
		      } else {
		        ringRadius = bottomRadius +
		          (topRadius - bottomRadius) * (yy / verticalSubdivisions);
		      }
		      if (yy === -2 || yy === verticalSubdivisions + 2) {
		        ringRadius = 0;
		        v = 0;
		      }
		      y -= height / 2;
		      for (var ii = 0; ii < vertsAroundEdge; ++ii) {
		        var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);
		        var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);
		        positions.push(sin * ringRadius, y, cos * ringRadius);
		        normals.push(
		            (yy < 0 || yy > verticalSubdivisions) ? 0 : (sin * cosSlant),
		            (yy < 0) ? -1 : (yy > verticalSubdivisions ? 1 : sinSlant),
		            (yy < 0 || yy > verticalSubdivisions) ? 0 : (cos * cosSlant));
		        texcoords.push((ii / radialSubdivisions), 1 - v);
		      }
		    }

		    for (var yy = 0; yy < verticalSubdivisions + extra; ++yy) {  // eslint-disable-line
		      for (var ii = 0; ii < radialSubdivisions; ++ii) {  // eslint-disable-line
		        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
		                     vertsAroundEdge * (yy + 0) + 1 + ii,
		                     vertsAroundEdge * (yy + 1) + 1 + ii);
		        indices.push(vertsAroundEdge * (yy + 0) + 0 + ii,
		                     vertsAroundEdge * (yy + 1) + 1 + ii,
		                     vertsAroundEdge * (yy + 1) + 0 + ii);
		      }
		    }

		    return {
		      position: positions,
		      normal: normals,
		      texcoord: texcoords,
		      indices: indices,
		    };
		  }

		  /**
		   * Expands RLE data
		   * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
		   * @param {number[]} [padding] value to add each entry with.
		   * @return {number[]} the expanded rleData
		   */
		  function expandRLEData(rleData, padding) {
		    padding = padding || [];
		    var data = [];
		    for (var ii = 0; ii < rleData.length; ii += 4) {
		      var runLength = rleData[ii];
		      var element = rleData.slice(ii + 1, ii + 4);
		      element.push.apply(element, padding);
		      for (var jj = 0; jj < runLength; ++jj) {
		        data.push.apply(data, element);
		      }
		    }
		    return data;
		  }

		  /**
		   * Creates 3D 'F' BufferInfo.
		   * An 'F' is useful because you can easily tell which way it is oriented.
		   * The created 'F' has position, normal, texcoord, and color buffers.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function create3DFBufferInfo
		   */

		  /**
		   * Creates 3D 'F' buffers.
		   * An 'F' is useful because you can easily tell which way it is oriented.
		   * The created 'F' has position, normal, texcoord, and color buffers.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @return {Object.<string, WebGLBuffer>} The created buffers.
		   * @memberOf module:twgl/primitives
		   * @function create3DFBuffers
		   */

		  /**
		   * Creates 3D 'F' vertices.
		   * An 'F' is useful because you can easily tell which way it is oriented.
		   * The created 'F' has position, normal, texcoord, and color arrays.
		   *
		   * @return {Object.<string, TypedArray>} The created vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function create3DFVertices() {

		    var positions = [
		      // left column front
		      0,   0,  0,
		      0, 150,  0,
		      30,   0,  0,
		      0, 150,  0,
		      30, 150,  0,
		      30,   0,  0,

		      // top rung front
		      30,   0,  0,
		      30,  30,  0,
		      100,   0,  0,
		      30,  30,  0,
		      100,  30,  0,
		      100,   0,  0,

		      // middle rung front
		      30,  60,  0,
		      30,  90,  0,
		      67,  60,  0,
		      30,  90,  0,
		      67,  90,  0,
		      67,  60,  0,

		      // left column back
		        0,   0,  30,
		       30,   0,  30,
		        0, 150,  30,
		        0, 150,  30,
		       30,   0,  30,
		       30, 150,  30,

		      // top rung back
		       30,   0,  30,
		      100,   0,  30,
		       30,  30,  30,
		       30,  30,  30,
		      100,   0,  30,
		      100,  30,  30,

		      // middle rung back
		       30,  60,  30,
		       67,  60,  30,
		       30,  90,  30,
		       30,  90,  30,
		       67,  60,  30,
		       67,  90,  30,

		      // top
		        0,   0,   0,
		      100,   0,   0,
		      100,   0,  30,
		        0,   0,   0,
		      100,   0,  30,
		        0,   0,  30,

		      // top rung front
		      100,   0,   0,
		      100,  30,   0,
		      100,  30,  30,
		      100,   0,   0,
		      100,  30,  30,
		      100,   0,  30,

		      // under top rung
		      30,   30,   0,
		      30,   30,  30,
		      100,  30,  30,
		      30,   30,   0,
		      100,  30,  30,
		      100,  30,   0,

		      // between top rung and middle
		      30,   30,   0,
		      30,   60,  30,
		      30,   30,  30,
		      30,   30,   0,
		      30,   60,   0,
		      30,   60,  30,

		      // top of middle rung
		      30,   60,   0,
		      67,   60,  30,
		      30,   60,  30,
		      30,   60,   0,
		      67,   60,   0,
		      67,   60,  30,

		      // front of middle rung
		      67,   60,   0,
		      67,   90,  30,
		      67,   60,  30,
		      67,   60,   0,
		      67,   90,   0,
		      67,   90,  30,

		      // bottom of middle rung.
		      30,   90,   0,
		      30,   90,  30,
		      67,   90,  30,
		      30,   90,   0,
		      67,   90,  30,
		      67,   90,   0,

		      // front of bottom
		      30,   90,   0,
		      30,  150,  30,
		      30,   90,  30,
		      30,   90,   0,
		      30,  150,   0,
		      30,  150,  30,

		      // bottom
		      0,   150,   0,
		      0,   150,  30,
		      30,  150,  30,
		      0,   150,   0,
		      30,  150,  30,
		      30,  150,   0,

		      // left side
		      0,   0,   0,
		      0,   0,  30,
		      0, 150,  30,
		      0,   0,   0,
		      0, 150,  30,
		      0, 150,   0,
		    ];

		    var texcoords = [
		      // left column front
		      0.22, 0.19,
		      0.22, 0.79,
		      0.34, 0.19,
		      0.22, 0.79,
		      0.34, 0.79,
		      0.34, 0.19,

		      // top rung front
		      0.34, 0.19,
		      0.34, 0.31,
		      0.62, 0.19,
		      0.34, 0.31,
		      0.62, 0.31,
		      0.62, 0.19,

		      // middle rung front
		      0.34, 0.43,
		      0.34, 0.55,
		      0.49, 0.43,
		      0.34, 0.55,
		      0.49, 0.55,
		      0.49, 0.43,

		      // left column back
		      0, 0,
		      1, 0,
		      0, 1,
		      0, 1,
		      1, 0,
		      1, 1,

		      // top rung back
		      0, 0,
		      1, 0,
		      0, 1,
		      0, 1,
		      1, 0,
		      1, 1,

		      // middle rung back
		      0, 0,
		      1, 0,
		      0, 1,
		      0, 1,
		      1, 0,
		      1, 1,

		      // top
		      0, 0,
		      1, 0,
		      1, 1,
		      0, 0,
		      1, 1,
		      0, 1,

		      // top rung front
		      0, 0,
		      1, 0,
		      1, 1,
		      0, 0,
		      1, 1,
		      0, 1,

		      // under top rung
		      0, 0,
		      0, 1,
		      1, 1,
		      0, 0,
		      1, 1,
		      1, 0,

		      // between top rung and middle
		      0, 0,
		      1, 1,
		      0, 1,
		      0, 0,
		      1, 0,
		      1, 1,

		      // top of middle rung
		      0, 0,
		      1, 1,
		      0, 1,
		      0, 0,
		      1, 0,
		      1, 1,

		      // front of middle rung
		      0, 0,
		      1, 1,
		      0, 1,
		      0, 0,
		      1, 0,
		      1, 1,

		      // bottom of middle rung.
		      0, 0,
		      0, 1,
		      1, 1,
		      0, 0,
		      1, 1,
		      1, 0,

		      // front of bottom
		      0, 0,
		      1, 1,
		      0, 1,
		      0, 0,
		      1, 0,
		      1, 1,

		      // bottom
		      0, 0,
		      0, 1,
		      1, 1,
		      0, 0,
		      1, 1,
		      1, 0,

		      // left side
		      0, 0,
		      0, 1,
		      1, 1,
		      0, 0,
		      1, 1,
		      1, 0,
		    ];

		    var normals = expandRLEData([
		      // left column front
		      // top rung front
		      // middle rung front
		      18, 0, 0, 1,

		      // left column back
		      // top rung back
		      // middle rung back
		      18, 0, 0, -1,

		      // top
		      6, 0, 1, 0,

		      // top rung front
		      6, 1, 0, 0,

		      // under top rung
		      6, 0, -1, 0,

		      // between top rung and middle
		      6, 1, 0, 0,

		      // top of middle rung
		      6, 0, 1, 0,

		      // front of middle rung
		      6, 1, 0, 0,

		      // bottom of middle rung.
		      6, 0, -1, 0,

		      // front of bottom
		      6, 1, 0, 0,

		      // bottom
		      6, 0, -1, 0,

		      // left side
		      6, -1, 0, 0,
		    ]);

		    var colors = expandRLEData([
		          // left column front
		          // top rung front
		          // middle rung front
		        18, 200,  70, 120,

		          // left column back
		          // top rung back
		          // middle rung back
		        18, 80, 70, 200,

		          // top
		        6, 70, 200, 210,

		          // top rung front
		        6, 200, 200, 70,

		          // under top rung
		        6, 210, 100, 70,

		          // between top rung and middle
		        6, 210, 160, 70,

		          // top of middle rung
		        6, 70, 180, 210,

		          // front of middle rung
		        6, 100, 70, 210,

		          // bottom of middle rung.
		        6, 76, 210, 100,

		          // front of bottom
		        6, 140, 210, 80,

		          // bottom
		        6, 90, 130, 110,

		          // left side
		        6, 160, 160, 220,
		    ], [255]);

		    var numVerts = positions.length / 3;

		    var arrays = {
		      position: createAugmentedTypedArray(3, numVerts),
		      texcoord: createAugmentedTypedArray(2,  numVerts),
		      normal: createAugmentedTypedArray(3, numVerts),
		      color: createAugmentedTypedArray(4, numVerts, Uint8Array),
		      indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
		    };

		    arrays.position.push(positions);
		    arrays.texcoord.push(texcoords);
		    arrays.normal.push(normals);
		    arrays.color.push(colors);

		    for (var ii = 0; ii < numVerts; ++ii) {
		      arrays.indices.push(ii);
		    }

		    return arrays;
		  }

		  /**
		   * Creates cresent BufferInfo.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} verticalRadius The vertical radius of the cresent.
		   * @param {number} outerRadius The outer radius of the cresent.
		   * @param {number} innerRadius The inner radius of the cresent.
		   * @param {number} thickness The thickness of the cresent.
		   * @param {number} subdivisionsDown number of steps around the cresent.
		   * @param {number} subdivisionsThick number of vertically on the cresent.
		   * @param {number} [startOffset] Where to start arc. Default 0.
		   * @param {number} [endOffset] Where to end arg. Default 1.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createCresentBufferInfo
		   */

		  /**
		   * Creates cresent buffers.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} verticalRadius The vertical radius of the cresent.
		   * @param {number} outerRadius The outer radius of the cresent.
		   * @param {number} innerRadius The inner radius of the cresent.
		   * @param {number} thickness The thickness of the cresent.
		   * @param {number} subdivisionsDown number of steps around the cresent.
		   * @param {number} subdivisionsThick number of vertically on the cresent.
		   * @param {number} [startOffset] Where to start arc. Default 0.
		   * @param {number} [endOffset] Where to end arg. Default 1.
		   * @return {Object.<string, WebGLBuffer>} The created buffers.
		   * @memberOf module:twgl/primitives
		   * @function createCresentBuffers
		   */

		  /**
		   * Creates cresent vertices.
		   *
		   * @param {number} verticalRadius The vertical radius of the cresent.
		   * @param {number} outerRadius The outer radius of the cresent.
		   * @param {number} innerRadius The inner radius of the cresent.
		   * @param {number} thickness The thickness of the cresent.
		   * @param {number} subdivisionsDown number of steps around the cresent.
		   * @param {number} subdivisionsThick number of vertically on the cresent.
		   * @param {number} [startOffset] Where to start arc. Default 0.
		   * @param {number} [endOffset] Where to end arg. Default 1.
		   * @return {Object.<string, TypedArray>} The created vertices.
		   * @memberOf module:twgl/primitives
		   */
		   function createCresentVertices(
		      verticalRadius,
		      outerRadius,
		      innerRadius,
		      thickness,
		      subdivisionsDown,
		      startOffset,
		      endOffset) {
		    if (subdivisionsDown <= 0) {
		      throw Error('subdivisionDown must be > 0');
		    }

		    startOffset = startOffset || 0;
		    endOffset   = endOffset || 1;

		    var subdivisionsThick = 2;

		    var offsetRange = endOffset - startOffset;
		    var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);
		    var positions   = createAugmentedTypedArray(3, numVertices);
		    var normals     = createAugmentedTypedArray(3, numVertices);
		    var texcoords   = createAugmentedTypedArray(2, numVertices);

		    function lerp(a, b, s) {
		      return a + (b - a) * s;
		    }

		    function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {
		      for (var z = 0; z <= subdivisionsDown; z++) {
		        var uBack = x / (subdivisionsThick - 1);
		        var v = z / subdivisionsDown;
		        var xBack = (uBack - 0.5) * 2;
		        var angle = (startOffset + (v * offsetRange)) * Math.PI;
		        var s = Math.sin(angle);
		        var c = Math.cos(angle);
		        var radius = lerp(verticalRadius, arcRadius, s);
		        var px = xBack * thickness;
		        var py = c * verticalRadius;
		        var pz = s * radius;
		        positions.push(px, py, pz);
		        var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);
		        normals.push(n);
		        texcoords.push(uBack * uMult + uAdd, v);
		      }
		    }

		    // Generate the individual vertices in our vertex buffer.
		    for (var x = 0; x < subdivisionsThick; x++) {
		      var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;
		      createArc(outerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
		      createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);
		      createArc(innerRadius, x, [1, 1, 1], [0,     0, 0], 1, 0);
		      createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);
		    }

		    // Do outer surface.
		    var indices = createAugmentedTypedArray(3, (subdivisionsDown * 2) * (2 + subdivisionsThick), Uint16Array);

		    function createSurface(leftArcOffset, rightArcOffset) {
		      for (var z = 0; z < subdivisionsDown; ++z) {
		        // Make triangle 1 of quad.
		        indices.push(
		            leftArcOffset + z + 0,
		            leftArcOffset + z + 1,
		            rightArcOffset + z + 0);

		        // Make triangle 2 of quad.
		        indices.push(
		            leftArcOffset + z + 1,
		            rightArcOffset + z + 1,
		            rightArcOffset + z + 0);
		      }
		    }

		    var numVerticesDown = subdivisionsDown + 1;
		    // front
		    createSurface(numVerticesDown * 0, numVerticesDown * 4);
		    // right
		    createSurface(numVerticesDown * 5, numVerticesDown * 7);
		    // back
		    createSurface(numVerticesDown * 6, numVerticesDown * 2);
		    // left
		    createSurface(numVerticesDown * 3, numVerticesDown * 1);

		    return {
		      position: positions,
		      normal:   normals,
		      texcoord: texcoords,
		      indices:  indices,
		    };
		  }

		  /**
		   * Creates cylinder BufferInfo. The cylinder will be created around the origin
		   * along the y-axis.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius Radius of cylinder.
		   * @param {number} height Height of cylinder.
		   * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
		   * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
		   * @param {boolean} [topCap] Create top cap. Default = true.
		   * @param {boolean} [bottomCap] Create bottom cap. Default = true.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createCylinderBufferInfo
		   */

		   /**
		    * Creates cylinder buffers. The cylinder will be created around the origin
		    * along the y-axis.
		    *
		    * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		    * @param {number} radius Radius of cylinder.
		    * @param {number} height Height of cylinder.
		    * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
		    * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
		    * @param {boolean} [topCap] Create top cap. Default = true.
		    * @param {boolean} [bottomCap] Create bottom cap. Default = true.
		    * @return {Object.<string, WebGLBuffer>} The created buffers.
		    * @memberOf module:twgl/primitives
		    * @function createCylinderBuffers
		    */

		   /**
		    * Creates cylinder vertices. The cylinder will be created around the origin
		    * along the y-axis.
		    *
		    * @param {number} radius Radius of cylinder.
		    * @param {number} height Height of cylinder.
		    * @param {number} radialSubdivisions The number of subdivisions around the cylinder.
		    * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.
		    * @param {boolean} [topCap] Create top cap. Default = true.
		    * @param {boolean} [bottomCap] Create bottom cap. Default = true.
		    * @return {Object.<string, TypedArray>} The created vertices.
		    * @memberOf module:twgl/primitives
		    */
		  function createCylinderVertices(
		      radius,
		      height,
		      radialSubdivisions,
		      verticalSubdivisions,
		      topCap,
		      bottomCap) {
		    return createTruncatedConeVertices(
		        radius,
		        radius,
		        height,
		        radialSubdivisions,
		        verticalSubdivisions,
		        topCap,
		        bottomCap);
		  }

		  /**
		   * Creates BufferInfo for a torus
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius radius of center of torus circle.
		   * @param {number} thickness radius of torus ring.
		   * @param {number} radialSubdivisions The number of subdivisions around the torus.
		   * @param {number} bodySubdivisions The number of subdivisions around the body torus.
		   * @param {boolean} [startAngle] start angle in radians. Default = 0.
		   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createTorusBufferInfo
		   */

		  /**
		   * Creates buffers for a torus
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius radius of center of torus circle.
		   * @param {number} thickness radius of torus ring.
		   * @param {number} radialSubdivisions The number of subdivisions around the torus.
		   * @param {number} bodySubdivisions The number of subdivisions around the body torus.
		   * @param {boolean} [startAngle] start angle in radians. Default = 0.
		   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
		   * @return {Object.<string, WebGLBuffer>} The created buffers.
		   * @memberOf module:twgl/primitives
		   * @function createTorusBuffers
		   */

		  /**
		   * Creates vertices for a torus
		   *
		   * @param {number} radius radius of center of torus circle.
		   * @param {number} thickness radius of torus ring.
		   * @param {number} radialSubdivisions The number of subdivisions around the torus.
		   * @param {number} bodySubdivisions The number of subdivisions around the body torus.
		   * @param {boolean} [startAngle] start angle in radians. Default = 0.
		   * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.
		   * @return {Object.<string, TypedArray>} The created vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createTorusVertices(
		      radius,
		      thickness,
		      radialSubdivisions,
		      bodySubdivisions,
		      startAngle,
		      endAngle) {
		    if (radialSubdivisions < 3) {
		      throw Error('radialSubdivisions must be 3 or greater');
		    }

		    if (bodySubdivisions < 3) {
		      throw Error('verticalSubdivisions must be 3 or greater');
		    }

		    startAngle = startAngle || 0;
		    endAngle = endAngle || Math.PI * 2;
		    range = endAngle - startAngle;

		    var radialParts = radialSubdivisions + 1;
		    var bodyParts   = bodySubdivisions + 1;
		    var numVertices = radialParts * bodyParts;
		    var positions   = createAugmentedTypedArray(3, numVertices);
		    var normals     = createAugmentedTypedArray(3, numVertices);
		    var texcoords   = createAugmentedTypedArray(2, numVertices);
		    var indices     = createAugmentedTypedArray(3, (radialSubdivisions) * (bodySubdivisions) * 2, Uint16Array);

		    for (var slice = 0; slice < bodyParts; ++slice) {
		      var v = slice / bodySubdivisions;
		      var sliceAngle = v * Math.PI * 2;
		      var sliceSin = Math.sin(sliceAngle);
		      var ringRadius = radius + sliceSin * thickness;
		      var ny = Math.cos(sliceAngle);
		      var y = ny * thickness;
		      for (var ring = 0; ring < radialParts; ++ring) {
		        var u = ring / radialSubdivisions;
		        var ringAngle = startAngle + u * range;
		        var xSin = Math.sin(ringAngle);
		        var zCos = Math.cos(ringAngle);
		        var x = xSin * ringRadius;
		        var z = zCos * ringRadius;
		        var nx = xSin * sliceSin;
		        var nz = zCos * sliceSin;
		        positions.push(x, y, z);
		        normals.push(nx, ny, nz);
		        texcoords.push(u, 1 - v);
		      }
		    }

		    for (var slice = 0; slice < bodySubdivisions; ++slice) {  // eslint-disable-line
		      for (var ring = 0; ring < radialSubdivisions; ++ring) {  // eslint-disable-line
		        var nextRingIndex  = 1 + ring;
		        var nextSliceIndex = 1 + slice;
		        indices.push(radialParts * slice          + ring,
		                     radialParts * nextSliceIndex + ring,
		                     radialParts * slice          + nextRingIndex);
		        indices.push(radialParts * nextSliceIndex + ring,
		                     radialParts * nextSliceIndex + nextRingIndex,
		                     radialParts * slice          + nextRingIndex);
		      }
		    }

		    return {
		      position: positions,
		      normal:   normals,
		      texcoord: texcoords,
		      indices:  indices,
		    };
		  }


		  /**
		   * Creates a disc BufferInfo. The disc will be in the xz plane, centered at
		   * the origin. When creating, at least 3 divisions, or pie
		   * pieces, need to be specified, otherwise the triangles making
		   * up the disc will be degenerate. You can also specify the
		   * number of radial pieces `stacks`. A value of 1 for
		   * stacks will give you a simple disc of pie pieces.  If you
		   * want to create an annulus you can set `innerRadius` to a
		   * value > 0. Finally, `stackPower` allows you to have the widths
		   * increase or decrease as you move away from the center. This
		   * is particularly useful when using the disc as a ground plane
		   * with a fixed camera such that you don't need the resolution
		   * of small triangles near the perimeter. For example, a value
		   * of 2 will produce stacks whose ouside radius increases with
		   * the square of the stack index. A value of 1 will give uniform
		   * stacks.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius Radius of the ground plane.
		   * @param {number} divisions Number of triangles in the ground plane (at least 3).
		   * @param {number} [stacks] Number of radial divisions (default=1).
		   * @param {number} [innerRadius] Default 0.
		   * @param {number} [stackPower] Power to raise stack size to for decreasing width.
		   * @return {module:twgl.BufferInfo} The created BufferInfo.
		   * @memberOf module:twgl/primitives
		   * @function createDiscBufferInfo
		   */

		  /**
		   * Creates disc buffers. The disc will be in the xz plane, centered at
		   * the origin. When creating, at least 3 divisions, or pie
		   * pieces, need to be specified, otherwise the triangles making
		   * up the disc will be degenerate. You can also specify the
		   * number of radial pieces `stacks`. A value of 1 for
		   * stacks will give you a simple disc of pie pieces.  If you
		   * want to create an annulus you can set `innerRadius` to a
		   * value > 0. Finally, `stackPower` allows you to have the widths
		   * increase or decrease as you move away from the center. This
		   * is particularly useful when using the disc as a ground plane
		   * with a fixed camera such that you don't need the resolution
		   * of small triangles near the perimeter. For example, a value
		   * of 2 will produce stacks whose ouside radius increases with
		   * the square of the stack index. A value of 1 will give uniform
		   * stacks.
		   *
		   * @param {WebGLRenderingContext} gl The WebGLRenderingContext.
		   * @param {number} radius Radius of the ground plane.
		   * @param {number} divisions Number of triangles in the ground plane (at least 3).
		   * @param {number} [stacks] Number of radial divisions (default=1).
		   * @param {number} [innerRadius] Default 0.
		   * @param {number} [stackPower] Power to raise stack size to for decreasing width.
		   * @return {Object.<string, WebGLBuffer>} The created buffers.
		   * @memberOf module:twgl/primitives
		   * @function createDiscBuffers
		   */

		  /**
		   * Creates disc vertices. The disc will be in the xz plane, centered at
		   * the origin. When creating, at least 3 divisions, or pie
		   * pieces, need to be specified, otherwise the triangles making
		   * up the disc will be degenerate. You can also specify the
		   * number of radial pieces `stacks`. A value of 1 for
		   * stacks will give you a simple disc of pie pieces.  If you
		   * want to create an annulus you can set `innerRadius` to a
		   * value > 0. Finally, `stackPower` allows you to have the widths
		   * increase or decrease as you move away from the center. This
		   * is particularly useful when using the disc as a ground plane
		   * with a fixed camera such that you don't need the resolution
		   * of small triangles near the perimeter. For example, a value
		   * of 2 will produce stacks whose ouside radius increases with
		   * the square of the stack index. A value of 1 will give uniform
		   * stacks.
		   *
		   * @param {number} radius Radius of the ground plane.
		   * @param {number} divisions Number of triangles in the ground plane (at least 3).
		   * @param {number} [stacks] Number of radial divisions (default=1).
		   * @param {number} [innerRadius] Default 0.
		   * @param {number} [stackPower] Power to raise stack size to for decreasing width.
		   * @return {Object.<string, TypedArray>} The created vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function createDiscVertices(
		      radius,
		      divisions,
		      stacks,
		      innerRadius,
		      stackPower) {
		    if (divisions < 3) {
		      throw Error('divisions must be at least 3');
		    }

		    stacks = stacks ? stacks : 1;
		    stackPower = stackPower ? stackPower : 1;
		    innerRadius = innerRadius ? innerRadius : 0;

		    // Note: We don't share the center vertex because that would
		    // mess up texture coordinates.
		    var numVertices = (divisions + 1) * (stacks + 1);

		    var positions = createAugmentedTypedArray(3, numVertices);
		    var normals   = createAugmentedTypedArray(3, numVertices);
		    var texcoords = createAugmentedTypedArray(2, numVertices);
		    var indices   = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);

		    var firstIndex = 0;
		    var radiusSpan = radius - innerRadius;
		    var pointsPerStack = divisions + 1;

		    // Build the disk one stack at a time.
		    for (var stack = 0; stack <= stacks; ++stack) {
		      var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);

		      for (var i = 0; i <= divisions; ++i) {
		        var theta = 2.0 * Math.PI * i / divisions;
		        var x = stackRadius * Math.cos(theta);
		        var z = stackRadius * Math.sin(theta);

		        positions.push(x, 0, z);
		        normals.push(0, 1, 0);
		        texcoords.push(1 - (i / divisions), stack / stacks);
		        if (stack > 0 && i !== divisions) {
		          // a, b, c and d are the indices of the vertices of a quad.  unless
		          // the current stack is the one closest to the center, in which case
		          // the vertices a and b connect to the center vertex.
		          var a = firstIndex + (i + 1);
		          var b = firstIndex + i;
		          var c = firstIndex + i - pointsPerStack;
		          var d = firstIndex + (i + 1) - pointsPerStack;

		          // Make a quad of the vertices a, b, c, d.
		          indices.push(a, b, c);
		          indices.push(a, c, d);
		        }
		      }

		      firstIndex += divisions + 1;
		    }

		    return {
		      position: positions,
		      normal: normals,
		      texcoord: texcoords,
		      indices: indices,
		    };
		  }

		  /**
		   * creates a random integer between 0 and range - 1 inclusive.
		   * @param {number} range
		   * @return {number} random value between 0 and range - 1 inclusive.
		   */
		  function randInt(range) {
		    return Math.random() * range | 0;
		  }

		  /**
		   * Used to supply random colors
		   * @callback RandomColorFunc
		   * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed
		   * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha
		   * @return {number} a number from 0 to 255
		   * @memberOf module:twgl/primitives
		   */

		  /**
		   * @typedef {Object} RandomVerticesOptions
		   * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices
		   * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers
		   * @memberOf module:twgl/primitives
		   */

		  /**
		   * Creates an augmentedTypedArray of random vertex colors.
		   * If the vertices are indexed (have an indices array) then will
		   * just make random colors. Otherwise assumes they are triangles
		   * and makes one random color for every 3 vertices.
		   * @param {Object.<string, augmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.
		   * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.
		   * @return {Object.<string, augmentedTypedArray>} same vertices as passed in with `color` added.
		   * @memberOf module:twgl/primitives
		   */
		  function makeRandomVertexColors(vertices, options) {
		    options = options || {};
		    var numElements = vertices.position.numElements;
		    var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);
		    var rand = options.rand || function(ndx, channel) {
		      return channel < 3 ? randInt(256) : 255;
		    };
		    vertices.color = vcolors;
		    if (vertices.indices) {
		      // just make random colors if index
		      for (var ii = 0; ii < numElements; ++ii) {
		        vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));
		      }
		    } else {
		      // make random colors per triangle
		      var numVertsPerColor = options.vertsPerColor || 3;
		      var numSets = numElements / numVertsPerColor;
		      for (var ii = 0; ii < numSets; ++ii) {  // eslint-disable-line
		        var color = [rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3)];
		        for (var jj = 0; jj < numVertsPerColor; ++jj) {
		          vcolors.push(color);
		        }
		      }
		    }
		    return vertices;
		  }

		  /**
		   * creates a function that calls fn to create vertices and then
		   * creates a buffers for them
		   */
		  function createBufferFunc(fn) {
		    return function(gl) {
		      var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));
		      return twgl.createBuffersFromArrays(gl, arrays);
		    };
		  }

		  /**
		   * creates a function that calls fn to create vertices and then
		   * creates a bufferInfo object for them
		   */
		  function createBufferInfoFunc(fn) {
		    return function(gl) {
		      var arrays = fn.apply(null,  Array.prototype.slice.call(arguments, 1));
		      return twgl.createBufferInfoFromArrays(gl, arrays);
		    };
		  }

		  var arraySpecPropertyNames = [
		    "numComponents",
		    "size",
		    "type",
		    "normalize",
		    "stride",
		    "offset",
		    "attrib",
		    "name",
		    "attribName",
		  ];

		  /**
		   * Copy elements from one array to another
		   *
		   * @param {Array|TypedArray} src source array
		   * @param {Array|TypedArray} dst dest array
		   * @param {number} dstNdx index in dest to copy src
		   * @param {number} [offset] offset to add to copied values
		   */
		  function copyElements(src, dst, dstNdx, offset) {
		    offset = offset || 0;
		    var length = src.length;
		    for (var ii = 0; ii < length; ++ii) {
		      dst[dstNdx + ii] = src[ii] + offset;
		    }
		  }

		  /**
		   * Creates an array of the same time
		   *
		   * @param {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} srcArray array who's type to copy
		   * @param {number} length size of new array
		   * @return {(number[]|ArrayBuffer|module:twgl.FullArraySpec)} array with same type as srcArray
		   */
		  function createArrayOfSameType(srcArray, length) {
		    var arraySrc = getArray(srcArray);
		    var newArray = new arraySrc.constructor(length);
		    var newArraySpec = newArray;
		    // If it appears to have been augmented make new one augemented
		    if (arraySrc.numComponents && arraySrc.numElements) {
		      augmentTypedArray(newArray, arraySrc.numComponents);
		    }
		    // If it was a fullspec make new one a fullspec
		    if (srcArray.data) {
		      newArraySpec = {
		        data: newArray,
		      };
		      utils.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);
		    }
		    return newArraySpec;
		  }

		  /**
		   * Concatinates sets of vertices
		   *
		   * Assumes the vertices match in composition. For example
		   * if one set of vertices has positions, normals, and indices
		   * all sets of vertices must have positions, normals, and indices
		   * and of the same type.
		   *
		   * Example:
		   *
		   *      var cubeVertices = twgl.primtiives.createCubeVertices(2);
		   *      var sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);
		   *      // move the sphere 2 units up
		   *      twgl.primitives.reorientVertices(
		   *          sphereVertices, twgl.m4.translation([0, 2, 0]));
		   *      // merge the sphere with the cube
		   *      var cubeSphereVertices = twgl.primitives.concatVertices(
		   *          [cubeVertices, sphereVertices]);
		   *      // turn them into WebGL buffers and attrib data
		   *      var bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);
		   *
		   * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices
		   * @return {module:twgl.Arrays} The concatinated vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function concatVertices(arrayOfArrays) {
		    var names = {};
		    var baseName;
		    // get names of all arrays.
		    // and numElements for each set of vertices
		    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
		      var arrays = arrayOfArrays[ii];
		      Object.keys(arrays).forEach(function(name) {  // eslint-disable-line
		        if (!names[name]) {
		          names[name] = [];
		        }
		        if (!baseName && name !== 'indices') {
		          baseName = name;
		        }
		        var arrayInfo = arrays[name];
		        var numComponents = getNumComponents(arrayInfo, name);
		        var array = getArray(arrayInfo);
		        var numElements = array.length / numComponents;
		        names[name].push(numElements);
		      });
		    }

		    // compute length of combined array
		    // and return one for reference
		    function getLengthOfCombinedArrays(name) {
		      var length = 0;
		      var arraySpec;
		      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
		        var arrays = arrayOfArrays[ii];
		        var arrayInfo = arrays[name];
		        var array = getArray(arrayInfo);
		        length += array.length;
		        if (!arraySpec || arrayInfo.data) {
		          arraySpec = arrayInfo;
		        }
		      }
		      return {
		        length: length,
		        spec: arraySpec,
		      };
		    }

		    function copyArraysToNewArray(name, base, newArray) {
		      var baseIndex = 0;
		      var offset = 0;
		      for (var ii = 0; ii < arrayOfArrays.length; ++ii) {
		        var arrays = arrayOfArrays[ii];
		        var arrayInfo = arrays[name];
		        var array = getArray(arrayInfo);
		        if (name === 'indices') {
		          copyElements(array, newArray, offset, baseIndex);
		          baseIndex += base[ii];
		        } else {
		          copyElements(array, newArray, offset);
		        }
		        offset += array.length;
		      }
		    }

		    var base = names[baseName];

		    var newArrays = {};
		    Object.keys(names).forEach(function(name) {
		      var info = getLengthOfCombinedArrays(name);
		      var newArraySpec = createArrayOfSameType(info.spec, info.length);
		      copyArraysToNewArray(name, base, getArray(newArraySpec));
		      newArrays[name] = newArraySpec;
		    });
		    return newArrays;
		  }

		  /**
		   * Creates a duplicate set of vertices
		   *
		   * This is useful for calling reorientVertices when you
		   * also want to keep the original available
		   *
		   * @param {module:twgl.Arrays} arrays of vertices
		   * @return {module:twgl.Arrays} The dupilicated vertices.
		   * @memberOf module:twgl/primitives
		   */
		  function duplicateVertices(arrays) {
		    var newArrays = {};
		    Object.keys(arrays).forEach(function(name) {
		      var arraySpec = arrays[name];
		      var srcArray = getArray(arraySpec);
		      var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);
		      copyElements(srcArray, getArray(newArraySpec), 0);
		      newArrays[name] = newArraySpec;
		    });
		    return newArrays;
		  }

		  // Using quotes prevents Uglify from changing the names.
		  // No speed diff AFAICT.
		  return {
		    "create3DFBufferInfo": createBufferInfoFunc(create3DFVertices),
		    "create3DFBuffers": createBufferFunc(create3DFVertices),
		    "create3DFVertices": create3DFVertices,
		    "createAugmentedTypedArray": createAugmentedTypedArray,
		    "createCubeBufferInfo": createBufferInfoFunc(createCubeVertices),
		    "createCubeBuffers": createBufferFunc(createCubeVertices),
		    "createCubeVertices": createCubeVertices,
		    "createPlaneBufferInfo": createBufferInfoFunc(createPlaneVertices),
		    "createPlaneBuffers": createBufferFunc(createPlaneVertices),
		    "createPlaneVertices": createPlaneVertices,
		    "createSphereBufferInfo": createBufferInfoFunc(createSphereVertices),
		    "createSphereBuffers": createBufferFunc(createSphereVertices),
		    "createSphereVertices": createSphereVertices,
		    "createTruncatedConeBufferInfo": createBufferInfoFunc(createTruncatedConeVertices),
		    "createTruncatedConeBuffers": createBufferFunc(createTruncatedConeVertices),
		    "createTruncatedConeVertices": createTruncatedConeVertices,
		    "createXYQuadBufferInfo": createBufferInfoFunc(createXYQuadVertices),
		    "createXYQuadBuffers": createBufferFunc(createXYQuadVertices),
		    "createXYQuadVertices": createXYQuadVertices,
		    "createCresentBufferInfo": createBufferInfoFunc(createCresentVertices),
		    "createCresentBuffers": createBufferFunc(createCresentVertices),
		    "createCresentVertices": createCresentVertices,
		    "createCylinderBufferInfo": createBufferInfoFunc(createCylinderVertices),
		    "createCylinderBuffers": createBufferFunc(createCylinderVertices),
		    "createCylinderVertices": createCylinderVertices,
		    "createTorusBufferInfo": createBufferInfoFunc(createTorusVertices),
		    "createTorusBuffers": createBufferFunc(createTorusVertices),
		    "createTorusVertices": createTorusVertices,
		    "createDiscBufferInfo": createBufferInfoFunc(createDiscVertices),
		    "createDiscBuffers": createBufferFunc(createDiscVertices),
		    "createDiscVertices": createDiscVertices,
		    "deindexVertices": deindexVertices,
		    "flattenNormals": flattenNormals,
		    "makeRandomVertexColors": makeRandomVertexColors,
		    "reorientDirections": reorientDirections,
		    "reorientNormals": reorientNormals,
		    "reorientPositions": reorientPositions,
		    "reorientVertices": reorientVertices,
		    "concatVertices": concatVertices,
		    "duplicateVertices": duplicateVertices,
		  };

		});

		define('main', [
		    'twgl/twgl',
		    'twgl/m4',
		    'twgl/v3',
		    'twgl/primitives',
		  ], function(
		    twgl,
		    m4,
		    v3,
		    primitives
		  ) {
		    twgl.m4 = m4;
		    twgl.v3 = v3;
		    twgl.primitives = primitives;
		    return twgl;
		})

		notrequirebecasebrowserifymessesup(['main'], function(main) {
		  return main;
		}, undefined, true);   // forceSync = true


		;
		define("build/js/twgl-includer-full", function(){});

		    return notrequirebecasebrowserifymessesup('main');
		}));


	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var twgl = __webpack_require__(11);
		var svgToImage = __webpack_require__(13);
		var xhr = __webpack_require__(16);

		var Rectangle = __webpack_require__(24);
		var ShaderManager = __webpack_require__(25);

		var Drawable =
		/**
		 * An object which can be drawn by the renderer.
		 * TODO: double-buffer all rendering state (position, skin, effects, etc.)
		 * @param gl The OpenGL context.
		 * @constructor
		 */
		function Drawable(gl) {
		    _classCallCheck(this, Drawable);

		    this._id = Drawable._nextDrawable++;
		    Drawable._allDrawables[this._id] = this;

		    this._gl = gl;

		    /**
		     * The uniforms to be used by the vertex and pixel shaders.
		     * Some of these are used by other parts of the renderer as well.
		     * @type {Object.<string,*>}
		     * @private
		     */
		    this._uniforms = {
		        /**
		         * The model matrix, to concat with projection at draw time.
		         * @type {module:twgl/m4.Mat4}
		         */
		        u_modelMatrix: twgl.m4.identity(),

		        /**
		         * The nominal (not necessarily current) size of the current skin.
		         * This is scaled by _costumeResolution.
		         * @type {number[]}
		         */
		        u_skinSize: [0, 0],

		        /**
		         * The actual WebGL texture object for the skin.
		         * @type {WebGLTexture}
		         */
		        u_skin: null,

		        /**
		         * The color to use in the silhouette draw mode.
		         * @type {number[]}
		         */
		        u_silhouetteColor: Drawable.color4fFromID(this._id)
		    };

		    // Effect values are uniforms too
		    var numEffects = ShaderManager.EFFECTS.length;
		    for (var index = 0; index < numEffects; ++index) {
		        var effectName = ShaderManager.EFFECTS[index];
		        var converter = ShaderManager.EFFECT_INFO[effectName].converter;
		        this._uniforms['u_' + effectName] = converter(0);
		    }

		    this._position = twgl.v3.create(0, 0);
		    this._scale = twgl.v3.create(100, 100);
		    this._rotationCenter = twgl.v3.create(0, 0);
		    this._direction = 90;
		    this._transformDirty = true;
		    this._visible = true;
		    this._effectBits = 0;

		    this._convexHullPoints = null;
		    this._convexHullDirty = true;

		    // Create a transparent 1x1 texture for temporary use
		    var tempTexture = twgl.createTexture(gl, { src: [0, 0, 0, 0] });
		    this._useSkin(tempTexture, 0, 0, 1, true);

		    // Load a real skin
		    this.setSkin(Drawable._DEFAULT_SKIN);
		};

		module.exports = Drawable;

		/**
		 * @callback Drawable~idFilterFunc
		 * @param {int} drawableID The ID to filter.
		 * @return {bool} True if the ID passes the filter, otherwise false.
		 */

		/**
		 * An invalid Drawable ID which can be used to signify absence, etc.
		 * @type {int}
		 */
		Drawable.NONE = -1;

		/**
		 * The ID to be assigned next time the Drawable constructor is called.
		 * @type {number}
		 * @private
		 */
		Drawable._nextDrawable = 0;

		/**
		 * All current Drawables, by ID.
		 * @type {Object.<int, Drawable>}
		 * @private
		 */
		Drawable._allDrawables = {};

		/**
		 * Fetch a Drawable by its ID number.
		 * @param drawableID {int} The ID of the Drawable to fetch.
		 * @returns {?Drawable} The specified Drawable if found, otherwise null.
		 */
		Drawable.getDrawableByID = function (drawableID) {
		    return Drawable._allDrawables[drawableID];
		};

		// TODO: fall back on a built-in skin to protect against network problems
		Drawable._DEFAULT_SKIN = {
		    squirrel: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + '7e24c99c1b853e52f8e7f9004416fa34.png/get/',
		    bus: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + '66895930177178ea01d9e610917f8acf.png/get/',
		    scratch_cat: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + '09dc888b0b7df19f70d81588ae73420e.svg/get/',
		    gradient: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + 'a49ff276b9b8f997a1ae163992c2c145.png/get/'
		}.squirrel;

		/**
		 * Dispose of this Drawable. Do not use it after calling this method.
		 */
		Drawable.prototype.dispose = function () {
		    this.setSkin(null);
		    if (this._id >= 0) {
		        delete Drawable[this._id];
		    }
		};

		/**
		 * Mark this Drawable's transform as dirty.
		 * It will be recalculated next time it's needed.
		 */
		Drawable.prototype.setTransformDirty = function () {
		    this._transformDirty = true;
		};

		/**
		 * Retrieve the ID for this Drawable.
		 * @returns {number} The ID for this Drawable.
		 */
		Drawable.prototype.getID = function () {
		    return this._id;
		};

		/**
		 * Set this Drawable's skin.
		 * The Drawable will continue using the existing skin until the new one loads.
		 * If there is no existing skin, the Drawable will use a 1x1 transparent image.
		 * @param {string} skin_url The URL of the skin.
		 * @param {number=} opt_costumeResolution Optionally, a resolution for the skin.
		 */
		Drawable.prototype.setSkin = function (skin_url, opt_costumeResolution) {
		    // TODO: cache Skins instead of loading each time. Ref count them?
		    // TODO: share Skins across Drawables - see also destroy()
		    if (skin_url) {
		        var ext = skin_url.substring(skin_url.lastIndexOf('.') + 1);
		        switch (ext) {
		            case 'svg':
		            case 'svg/get/':
		            case 'svgz':
		            case 'svgz/get/':
		                this._setSkinSVG(skin_url);
		                break;
		            default:
		                this._setSkinBitmap(skin_url, opt_costumeResolution);
		                break;
		        }
		    } else {
		        this._useSkin(null, 0, 0, 1, true);
		    }
		};

		/**
		 * Use a skin if it is the currently-pending skin, or if skipPendingCheck==true.
		 * If the passed skin is used (for either reason) _pendingSkin will be cleared.
		 * @param {WebGLTexture} skin The skin to use.
		 * @param {int} width The width of the skin.
		 * @param {int} height The height of the skin.
		 * @param {int} costumeResolution The resolution to use for this skin.
		 * @param {Boolean} [skipPendingCheck] If true, don't compare to _pendingSkin.
		 * @private
		 */
		Drawable.prototype._useSkin = function (skin, width, height, costumeResolution, skipPendingCheck) {

		    if (skipPendingCheck || skin == this._pendingSkin) {
		        this._pendingSkin = null;
		        if (this._uniforms.u_skin && this._uniforms.u_skin != skin) {
		            this._gl.deleteTexture(this._uniforms.u_skin);
		        }
		        this._setSkinSize(width, height, costumeResolution);
		        this._uniforms.u_skin = skin;
		    }
		};

		/**
		 * @returns {int} A bitmask identifying which effects are currently in use.
		 */
		Drawable.prototype.getEnabledEffects = function () {
		    return this._effectBits;
		};

		/**
		 * Load a bitmap skin. Supports the same formats as the Image element.
		 * @param {string} skin_md5ext The MD5 and file extension of the bitmap skin.
		 * @param {number=} opt_costumeResolution Optionally, a resolution for the skin.
		 * @private
		 */
		Drawable.prototype._setSkinBitmap = function (skin_md5ext, opt_costumeResolution) {
		    var url = skin_md5ext;
		    this._setSkinCore(url, opt_costumeResolution);
		};

		/**
		 * Load an SVG-based skin. This still needs quite a bit of work to match the
		 * level of quality found in Scratch 2.0:
		 * - We should detect when a skin is being scaled up and render the SVG at a
		 *   higher resolution in those cases.
		 * - Colors seem a little off. This may be browser-specific.
		 * - This method works in Chrome, Firefox, Safari, and Edge but causes a
		 *   security error in IE.
		 * @param {string} skin_md5ext The MD5 and file extension of the SVG skin.
		 * @private
		 */
		Drawable.prototype._setSkinSVG = function (skin_md5ext) {
		    var url = skin_md5ext;
		    var instance = this;
		    function gotSVG(err, response, body) {
		        if (!err) {
		            svgToImage(body, gotImage);
		        }
		    }
		    function gotImage(err, image) {
		        if (!err) {
		            instance._setSkinCore(image, 1);
		        }
		    }
		    xhr.get({
		        useXDR: true,
		        url: url
		    }, gotSVG);
		    // TODO: if there's no current u_skin, install *something* before returning
		};

		/**
		 * Common code for setting all skin types.
		 * @param {string|Image} source The source of image data for the skin.
		 * @param {int} costumeResolution The resolution to use for this skin.
		 * @private
		 */
		Drawable.prototype._setSkinCore = function (source, costumeResolution) {
		    var instance = this;
		    var callback = function callback(err, texture, source) {
		        if (!err && instance._pendingSkin == texture) {
		            instance._useSkin(texture, source.width, source.height, costumeResolution);
		        }
		    };

		    var gl = this._gl;
		    var options = {
		        auto: true,
		        mag: gl.NEAREST,
		        min: gl.NEAREST, // TODO: mipmaps, linear (except pixelate)
		        wrap: gl.CLAMP_TO_EDGE,
		        src: source
		    };
		    var willCallCallback = typeof source == 'string';
		    instance._pendingSkin = twgl.createTexture(gl, options, willCallCallback ? callback : null);

		    // If we won't get a callback, start using the skin immediately.
		    // This will happen if the data is already local.
		    if (!willCallCallback) {
		        callback(null, instance._pendingSkin, source);
		    }
		};

		/**
		 * Retrieve the shader uniforms to be used when rendering this Drawable.
		 * @returns {Object.<string, *>}
		 */
		Drawable.prototype.getUniforms = function () {
		    if (this._transformDirty) {
		        this._calculateTransform();
		    }
		    return this._uniforms;
		};

		/**
		 * Retrieve whether this Drawable is visible.
		 * @returns {boolean}
		 */
		Drawable.prototype.getVisible = function () {
		    return this._visible;
		};

		/**
		 * Update the position, direction, scale, or effect properties of this Drawable.
		 * @param {Object.<string,*>} properties The new property values to set.
		 */
		Drawable.prototype.updateProperties = function (properties) {
		    var dirty = false;
		    if ('skin' in properties) {
		        this.setSkin(properties.skin, properties.costumeResolution);
		        this.setConvexHullDirty();
		    }
		    if ('position' in properties && (this._position[0] != properties.position[0] || this._position[1] != properties.position[1])) {
		        this._position[0] = properties.position[0];
		        this._position[1] = properties.position[1];
		        dirty = true;
		    }
		    if ('direction' in properties && this._direction != properties.direction) {
		        this._direction = properties.direction;
		        dirty = true;
		    }
		    if ('scale' in properties && (this._scale[0] != properties.scale[0] || this._scale[1] != properties.scale[1])) {
		        this._scale[0] = properties.scale[0];
		        this._scale[1] = properties.scale[1];
		        dirty = true;
		    }
		    if ('rotationCenter' in properties && (this._rotationCenter[0] != properties.rotationCenter[0] || this._rotationCenter[1] != properties.rotationCenter[1])) {
		        this._rotationCenter[0] = properties.rotationCenter[0];
		        this._rotationCenter[1] = properties.rotationCenter[1];
		        dirty = true;
		    }
		    if ('visible' in properties) {
		        this._visible = properties.visible;
		        this.setConvexHullDirty();
		    }
		    if (dirty) {
		        this.setTransformDirty();
		    }
		    var numEffects = ShaderManager.EFFECTS.length;
		    for (var index = 0; index < numEffects; ++index) {
		        var effectName = ShaderManager.EFFECTS[index];
		        if (effectName in properties) {
		            var rawValue = properties[effectName];
		            var effectInfo = ShaderManager.EFFECT_INFO[effectName];
		            if (rawValue != 0) {
		                this._effectBits |= effectInfo.mask;
		            } else {
		                this._effectBits &= ~effectInfo.mask;
		            }
		            var converter = effectInfo.converter;
		            this._uniforms['u_' + effectName] = converter(rawValue);
		            if (effectInfo.shapeChanges) {
		                this.setConvexHullDirty();
		            }
		        }
		    }
		};

		/**
		 * Set the dimensions of this Drawable's skin.
		 * @param {int} width The width of the new skin.
		 * @param {int} height The height of the new skin.
		 * @param {int} [costumeResolution] The resolution to use for this skin.
		 * @private
		 */
		Drawable.prototype._setSkinSize = function (width, height, costumeResolution) {
		    costumeResolution = costumeResolution || 1;
		    width /= costumeResolution;
		    height /= costumeResolution;
		    if (this._uniforms.u_skinSize[0] != width || this._uniforms.u_skinSize[1] != height) {
		        this._uniforms.u_skinSize[0] = width;
		        this._uniforms.u_skinSize[1] = height;
		        this.setTransformDirty();
		    }
		    this.setConvexHullDirty();
		};

		/**
		 * Get the size of the Drawable's current skin.
		 * @return {Array.<number>} Skin size, width and height.
		 */
		Drawable.prototype.getSkinSize = function () {
		    return this._uniforms.u_skinSize.slice();
		};

		/**
		 * Calculate the transform to use when rendering this Drawable.
		 * @private
		 */
		Drawable.prototype._calculateTransform = function () {
		    var modelMatrix = this._uniforms.u_modelMatrix;

		    twgl.m4.identity(modelMatrix);
		    twgl.m4.translate(modelMatrix, this._position, modelMatrix);

		    var rotation = (270 - this._direction) * Math.PI / 180;
		    twgl.m4.rotateZ(modelMatrix, rotation, modelMatrix);

		    // Adjust rotation center relative to the skin.
		    var rotationAdjusted = twgl.v3.subtract(this._rotationCenter, twgl.v3.divScalar(this._uniforms.u_skinSize, 2));
		    rotationAdjusted[1] *= -1; // Y flipped to Scratch coordinate.
		    rotationAdjusted[2] = 0; // Z coordinate is 0.

		    twgl.m4.translate(modelMatrix, rotationAdjusted, modelMatrix);

		    var scaledSize = twgl.v3.divScalar(twgl.v3.multiply(this._uniforms.u_skinSize, this._scale), 100);
		    scaledSize[2] = 0; // was NaN because the vectors have only 2 components.
		    twgl.m4.scale(modelMatrix, scaledSize, modelMatrix);

		    this._transformDirty = false;
		};

		/**
		 * Whether the Drawable needs convex hull points provided by the renderer.
		 * @return {boolean} True when no convex hull known, or it's dirty.
		 */
		Drawable.prototype.needsConvexHullPoints = function () {
		    return !this._convexHullPoints || this._convexHullDirty;
		};

		/**
		 * Set the convex hull to be dirty.
		 * Do this whenever the Drawable's shape has possibly changed.
		 */
		Drawable.prototype.setConvexHullDirty = function () {
		    this._convexHullDirty = true;
		};

		/**
		 * Set the convex hull points for the Drawable.
		 * @param {Array.<Array.<number>>} points Convex hull points, as [[x, y], ...]
		 */
		Drawable.prototype.setConvexHullPoints = function (points) {
		    this._convexHullPoints = points;
		    this._convexHullDirty = false;
		};

		/**
		 * Get the precise bounds for a Drawable.
		 * This function applies the transform matrix to the known convex hull,
		 * and then finds the minimum box along the axes.
		 * Before calling this, ensure the renderer has updated convex hull points.
		 * @return {!Rectangle} Bounds for a tight box around the Drawable.
		 */
		Drawable.prototype.getBounds = function () {
		    if (this.needsConvexHullPoints()) {
		        throw 'Needs updated convex hull points before bounds calculation.';
		    }
		    if (this._transformDirty) {
		        this._calculateTransform();
		    }
		    // First, transform all the convex hull points by the current Drawable's
		    // transform. This allows us to skip recalculating the convex hull
		    // for many Drawable updates, including translation, rotation, scaling.
		    var projection = twgl.m4.ortho(-1, 1, -1, 1, -1, 1);
		    var skinSize = this._uniforms.u_skinSize;
		    var tm = twgl.m4.multiply(this._uniforms.u_modelMatrix, projection);
		    var transformedHullPoints = [];
		    for (var i = 0; i < this._convexHullPoints.length; i++) {
		        var point = this._convexHullPoints[i];
		        var glPoint = twgl.v3.create(0.5 + -point[0] / skinSize[0], 0.5 + -point[1] / skinSize[1], 0);
		        twgl.m4.transformPoint(tm, glPoint, glPoint);
		        transformedHullPoints.push(glPoint);
		    }
		    // Search through transformed points to generate box on axes.
		    var bounds = new Rectangle();
		    bounds.initFromPointsAABB(transformedHullPoints);
		    return bounds;
		};

		/**
		 * Get the rough axis-aligned bounding box for the Drawable.
		 * Calculated by transforming the skin's bounds.
		 * Note that this is less precise than the box returned by `getBounds`,
		 * which is tightly snapped to account for a Drawable's transparent regions.
		 * `getAABB` returns a much less accurate bounding box, but will be much
		 * faster to calculate so may be desired for quick checks/optimizations.
		 * @return {!Rectangle} Rough axis-aligned bounding box for Drawable.
		 */
		Drawable.prototype.getAABB = function () {
		    if (this._transformDirty) {
		        this._calculateTransform();
		    }
		    var tm = this._uniforms.u_modelMatrix;
		    var bounds = new Rectangle();
		    bounds.initFromPointsAABB([twgl.m4.transformPoint(tm, [-0.5, -0.5, 0]), twgl.m4.transformPoint(tm, [0.5, -0.5, 0]), twgl.m4.transformPoint(tm, [-0.5, 0.5, 0]), twgl.m4.transformPoint(tm, [0.5, 0.5, 0])]);
		    return bounds;
		};

		/**
		 * Return the best Drawable bounds possible without performing graphics queries.
		 * I.e., returns the tight bounding box when the convex hull points are already
		 * known, but otherwise return the rough AABB of the Drawable.
		 * @return {!Rectangle} Bounds for the Drawable.
		 */
		Drawable.prototype.getFastBounds = function () {
		    if (!this.needsConvexHullPoints()) {
		        return this.getBounds();
		    }
		    return this.getAABB();
		};

		/**
		 * Calculate a color to represent the given ID number. At least one component of
		 * the resulting color will be non-zero if the ID is not Drawable.NONE.
		 * @param {int} id The ID to convert.
		 * @returns {number[]} An array of [r,g,b,a], each component in the range [0,1].
		 */
		Drawable.color4fFromID = function (id) {
		    id -= Drawable.NONE;
		    var r = (id >> 0 & 255) / 255.0;
		    var g = (id >> 8 & 255) / 255.0;
		    var b = (id >> 16 & 255) / 255.0;
		    return [r, g, b, 1.0];
		};

		/**
		 * Calculate the ID number represented by the given color. If all components of
		 * the color are zero, the result will be Drawable.NONE; otherwise the result
		 * will be a valid ID.
		 * @param {int} r The red value of the color, in the range [0,255].
		 * @param {int} g The green value of the color, in the range [0,255].
		 * @param {int} b The blue value of the color, in the range [0,255].
		 * @param {int} a The alpha value of the color, in the range [0,255].
		 * @returns {int} The ID represented by that color.
		 */
		// eslint-disable-next-line no-unused-vars
		Drawable.color4bToID = function (r, g, b, a) {
		    var id;
		    id = (r & 255) << 0;
		    id |= (g & 255) << 8;
		    id |= (b & 255) << 16;
		    return id + Drawable.NONE;
		};

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		/* WEBPACK VAR INJECTION */(function(process) {var loadImage = __webpack_require__(15)
		var noop = function () {}

		module.exports = svgToImage
		function svgToImage (svg, opt, cb) {
		  if (typeof opt === 'function') {
		    cb = opt
		    opt = {}
		  }
		  cb = cb || noop
		  opt = opt || {}

		  if (typeof window === 'undefined') {
		    return bail('window global is undefined; not in a browser')
		  }

		  var DOMURL = getURL()
		  if (!DOMURL ||
		    typeof DOMURL.createObjectURL !== 'function' ||
		    typeof DOMURL.revokeObjectURL !== 'function') {
		    return bail('browser does not support URL.createObjectURL')
		  }

		  if (typeof window.Blob === 'undefined') {
		    return bail('browser does not support Blob constructor')
		  }

		  if (!Array.isArray(svg)) {
		    svg = [ svg ]
		  }

		  var blob
		  try {
		    blob = new window.Blob(svg, {
		      type: 'image/svg+xml;charset=utf-8'
		    })
		  } catch (e) {
		    return bail(e)
		  }

		  var url = DOMURL.createObjectURL(blob)
		  loadImage(url, opt, function (err, img) {
		    DOMURL.revokeObjectURL(url)
		    if (err) {
		      // try again for Safari 8.0, using simple encodeURIComponent
		      // this will fail with DOM content but at least it works with SVG
		      var url2 = 'data:image/svg+xml,' + encodeURIComponent(svg.join(''))
		      return loadImage(url2, opt, cb)
		    }

		    cb(err, img)
		  })

		  function bail (msg) {
		    process.nextTick(function () {
		      cb(new Error(msg))
		    })
		  }
		}

		function getURL () {
		  return window.URL ||
		  window.webkitURL ||
		  window.mozURL ||
		  window.msURL
		}

		/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

	/***/ },
	/* 14 */
	/***/ function(module, exports) {

		// shim for using process in browser
		var process = module.exports = {};

		// cached from whatever global is present so that test runners that stub it
		// don't break things.  But we need to wrap it in a try catch in case it is
		// wrapped in strict mode code which doesn't define any globals.  It's inside a
		// function because try/catches deoptimize in certain engines.

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
		    throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout () {
		    throw new Error('clearTimeout has not been defined');
		}
		(function () {
		    try {
		        if (typeof setTimeout === 'function') {
		            cachedSetTimeout = setTimeout;
		        } else {
		            cachedSetTimeout = defaultSetTimout;
		        }
		    } catch (e) {
		        cachedSetTimeout = defaultSetTimout;
		    }
		    try {
		        if (typeof clearTimeout === 'function') {
		            cachedClearTimeout = clearTimeout;
		        } else {
		            cachedClearTimeout = defaultClearTimeout;
		        }
		    } catch (e) {
		        cachedClearTimeout = defaultClearTimeout;
		    }
		} ())
		function runTimeout(fun) {
		    if (cachedSetTimeout === setTimeout) {
		        //normal enviroments in sane situations
		        return setTimeout(fun, 0);
		    }
		    // if setTimeout wasn't available but was latter defined
		    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
		        cachedSetTimeout = setTimeout;
		        return setTimeout(fun, 0);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedSetTimeout(fun, 0);
		    } catch(e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
		            return cachedSetTimeout.call(null, fun, 0);
		        } catch(e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
		            return cachedSetTimeout.call(this, fun, 0);
		        }
		    }


		}
		function runClearTimeout(marker) {
		    if (cachedClearTimeout === clearTimeout) {
		        //normal enviroments in sane situations
		        return clearTimeout(marker);
		    }
		    // if clearTimeout wasn't available but was latter defined
		    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
		        cachedClearTimeout = clearTimeout;
		        return clearTimeout(marker);
		    }
		    try {
		        // when when somebody has screwed with setTimeout but no I.E. maddness
		        return cachedClearTimeout(marker);
		    } catch (e){
		        try {
		            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
		            return cachedClearTimeout.call(null, marker);
		        } catch (e){
		            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
		            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
		            return cachedClearTimeout.call(this, marker);
		        }
		    }



		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
		    if (!draining || !currentQueue) {
		        return;
		    }
		    draining = false;
		    if (currentQueue.length) {
		        queue = currentQueue.concat(queue);
		    } else {
		        queueIndex = -1;
		    }
		    if (queue.length) {
		        drainQueue();
		    }
		}

		function drainQueue() {
		    if (draining) {
		        return;
		    }
		    var timeout = runTimeout(cleanUpNextTick);
		    draining = true;

		    var len = queue.length;
		    while(len) {
		        currentQueue = queue;
		        queue = [];
		        while (++queueIndex < len) {
		            if (currentQueue) {
		                currentQueue[queueIndex].run();
		            }
		        }
		        queueIndex = -1;
		        len = queue.length;
		    }
		    currentQueue = null;
		    draining = false;
		    runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
		    var args = new Array(arguments.length - 1);
		    if (arguments.length > 1) {
		        for (var i = 1; i < arguments.length; i++) {
		            args[i - 1] = arguments[i];
		        }
		    }
		    queue.push(new Item(fun, args));
		    if (queue.length === 1 && !draining) {
		        runTimeout(drainQueue);
		    }
		};

		// v8 likes predictible objects
		function Item(fun, array) {
		    this.fun = fun;
		    this.array = array;
		}
		Item.prototype.run = function () {
		    this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = ''; // empty string to avoid regexp issues
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
		    throw new Error('process.binding is not supported');
		};

		process.cwd = function () { return '/' };
		process.chdir = function (dir) {
		    throw new Error('process.chdir is not supported');
		};
		process.umask = function() { return 0; };


	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		module.exports = loadImage;
		function loadImage (src, opt, callback) {
		  if (typeof opt === 'function') {
		    callback = opt;
		    opt = null;
		  }

		  var el = document.createElement('img');
		  var locked;

		  el.onload = function onLoaded () {
		    if (locked) return;
		    locked = true;

		    if (callback) callback(undefined, el);
		  };

		  el.onerror = function onError () {
		    if (locked) return;
		    locked = true;

		    if (callback) callback(new Error('Unable to load "' + src + '"'), el);
		  };

		  if (opt && opt.crossOrigin) {
		    el.crossOrigin = opt.crossOrigin;
		  }

		  el.src = src;

		  return el;
		}


	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

		"use strict";
		var window = __webpack_require__(17)
		var once = __webpack_require__(18)
		var isFunction = __webpack_require__(19)
		var parseHeaders = __webpack_require__(20)
		var xtend = __webpack_require__(23)

		module.exports = createXHR
		createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
		createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

		forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
		    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
		        options = initParams(uri, options, callback)
		        options.method = method.toUpperCase()
		        return _createXHR(options)
		    }
		})

		function forEachArray(array, iterator) {
		    for (var i = 0; i < array.length; i++) {
		        iterator(array[i])
		    }
		}

		function isEmpty(obj){
		    for(var i in obj){
		        if(obj.hasOwnProperty(i)) return false
		    }
		    return true
		}

		function initParams(uri, options, callback) {
		    var params = uri

		    if (isFunction(options)) {
		        callback = options
		        if (typeof uri === "string") {
		            params = {uri:uri}
		        }
		    } else {
		        params = xtend(options, {uri: uri})
		    }

		    params.callback = callback
		    return params
		}

		function createXHR(uri, options, callback) {
		    options = initParams(uri, options, callback)
		    return _createXHR(options)
		}

		function _createXHR(options) {
		    var callback = options.callback
		    if(typeof callback === "undefined"){
		        throw new Error("callback argument missing")
		    }
		    callback = once(callback)

		    function readystatechange() {
		        if (xhr.readyState === 4) {
		            loadFunc()
		        }
		    }

		    function getBody() {
		        // Chrome with requestType=blob throws errors arround when even testing access to responseText
		        var body = undefined

		        if (xhr.response) {
		            body = xhr.response
		        } else if (xhr.responseType === "text" || !xhr.responseType) {
		            body = xhr.responseText || xhr.responseXML
		        }

		        if (isJson) {
		            try {
		                body = JSON.parse(body)
		            } catch (e) {}
		        }

		        return body
		    }

		    var failureResponse = {
		                body: undefined,
		                headers: {},
		                statusCode: 0,
		                method: method,
		                url: uri,
		                rawRequest: xhr
		            }

		    function errorFunc(evt) {
		        clearTimeout(timeoutTimer)
		        if(!(evt instanceof Error)){
		            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
		        }
		        evt.statusCode = 0
		        callback(evt, failureResponse)
		    }

		    // will load the data & process the response in a special response object
		    function loadFunc() {
		        if (aborted) return
		        var status
		        clearTimeout(timeoutTimer)
		        if(options.useXDR && xhr.status===undefined) {
		            //IE8 CORS GET successful response doesn't have a status field, but body is fine
		            status = 200
		        } else {
		            status = (xhr.status === 1223 ? 204 : xhr.status)
		        }
		        var response = failureResponse
		        var err = null

		        if (status !== 0){
		            response = {
		                body: getBody(),
		                statusCode: status,
		                method: method,
		                headers: {},
		                url: uri,
		                rawRequest: xhr
		            }
		            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
		                response.headers = parseHeaders(xhr.getAllResponseHeaders())
		            }
		        } else {
		            err = new Error("Internal XMLHttpRequest Error")
		        }
		        callback(err, response, response.body)

		    }

		    var xhr = options.xhr || null

		    if (!xhr) {
		        if (options.cors || options.useXDR) {
		            xhr = new createXHR.XDomainRequest()
		        }else{
		            xhr = new createXHR.XMLHttpRequest()
		        }
		    }

		    var key
		    var aborted
		    var uri = xhr.url = options.uri || options.url
		    var method = xhr.method = options.method || "GET"
		    var body = options.body || options.data || null
		    var headers = xhr.headers = options.headers || {}
		    var sync = !!options.sync
		    var isJson = false
		    var timeoutTimer

		    if ("json" in options) {
		        isJson = true
		        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
		        if (method !== "GET" && method !== "HEAD") {
		            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
		            body = JSON.stringify(options.json)
		        }
		    }

		    xhr.onreadystatechange = readystatechange
		    xhr.onload = loadFunc
		    xhr.onerror = errorFunc
		    // IE9 must have onprogress be set to a unique function.
		    xhr.onprogress = function () {
		        // IE must die
		    }
		    xhr.ontimeout = errorFunc
		    xhr.open(method, uri, !sync, options.username, options.password)
		    //has to be after open
		    if(!sync) {
		        xhr.withCredentials = !!options.withCredentials
		    }
		    // Cannot set timeout with sync request
		    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
		    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
		    if (!sync && options.timeout > 0 ) {
		        timeoutTimer = setTimeout(function(){
		            aborted=true//IE9 may still call readystatechange
		            xhr.abort("timeout")
		            var e = new Error("XMLHttpRequest timeout")
		            e.code = "ETIMEDOUT"
		            errorFunc(e)
		        }, options.timeout )
		    }

		    if (xhr.setRequestHeader) {
		        for(key in headers){
		            if(headers.hasOwnProperty(key)){
		                xhr.setRequestHeader(key, headers[key])
		            }
		        }
		    } else if (options.headers && !isEmpty(options.headers)) {
		        throw new Error("Headers cannot be set on an XDomainRequest object")
		    }

		    if ("responseType" in options) {
		        xhr.responseType = options.responseType
		    }

		    if ("beforeSend" in options &&
		        typeof options.beforeSend === "function"
		    ) {
		        options.beforeSend(xhr)
		    }

		    xhr.send(body)

		    return xhr


		}

		function noop() {}


	/***/ },
	/* 17 */
	/***/ function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {if (typeof window !== "undefined") {
		    module.exports = window;
		} else if (typeof global !== "undefined") {
		    module.exports = global;
		} else if (typeof self !== "undefined"){
		    module.exports = self;
		} else {
		    module.exports = {};
		}

		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 18 */
	/***/ function(module, exports) {

		module.exports = once

		once.proto = once(function () {
		  Object.defineProperty(Function.prototype, 'once', {
		    value: function () {
		      return once(this)
		    },
		    configurable: true
		  })
		})

		function once (fn) {
		  var called = false
		  return function () {
		    if (called) return
		    called = true
		    return fn.apply(this, arguments)
		  }
		}


	/***/ },
	/* 19 */
	/***/ function(module, exports) {

		module.exports = isFunction

		var toString = Object.prototype.toString

		function isFunction (fn) {
		  var string = toString.call(fn)
		  return string === '[object Function]' ||
		    (typeof fn === 'function' && string !== '[object RegExp]') ||
		    (typeof window !== 'undefined' &&
		     // IE8 and below
		     (fn === window.setTimeout ||
		      fn === window.alert ||
		      fn === window.confirm ||
		      fn === window.prompt))
		};


	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		var trim = __webpack_require__(21)
		  , forEach = __webpack_require__(22)
		  , isArray = function(arg) {
		      return Object.prototype.toString.call(arg) === '[object Array]';
		    }

		module.exports = function (headers) {
		  if (!headers)
		    return {}

		  var result = {}

		  forEach(
		      trim(headers).split('\n')
		    , function (row) {
		        var index = row.indexOf(':')
		          , key = trim(row.slice(0, index)).toLowerCase()
		          , value = trim(row.slice(index + 1))

		        if (typeof(result[key]) === 'undefined') {
		          result[key] = value
		        } else if (isArray(result[key])) {
		          result[key].push(value)
		        } else {
		          result[key] = [ result[key], value ]
		        }
		      }
		  )

		  return result
		}

	/***/ },
	/* 21 */
	/***/ function(module, exports) {

		
		exports = module.exports = trim;

		function trim(str){
		  return str.replace(/^\s*|\s*$/g, '');
		}

		exports.left = function(str){
		  return str.replace(/^\s*/, '');
		};

		exports.right = function(str){
		  return str.replace(/\s*$/, '');
		};


	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		var isFunction = __webpack_require__(19)

		module.exports = forEach

		var toString = Object.prototype.toString
		var hasOwnProperty = Object.prototype.hasOwnProperty

		function forEach(list, iterator, context) {
		    if (!isFunction(iterator)) {
		        throw new TypeError('iterator must be a function')
		    }

		    if (arguments.length < 3) {
		        context = this
		    }
		    
		    if (toString.call(list) === '[object Array]')
		        forEachArray(list, iterator, context)
		    else if (typeof list === 'string')
		        forEachString(list, iterator, context)
		    else
		        forEachObject(list, iterator, context)
		}

		function forEachArray(array, iterator, context) {
		    for (var i = 0, len = array.length; i < len; i++) {
		        if (hasOwnProperty.call(array, i)) {
		            iterator.call(context, array[i], i, array)
		        }
		    }
		}

		function forEachString(string, iterator, context) {
		    for (var i = 0, len = string.length; i < len; i++) {
		        // no such thing as a sparse string.
		        iterator.call(context, string.charAt(i), i, string)
		    }
		}

		function forEachObject(object, iterator, context) {
		    for (var k in object) {
		        if (hasOwnProperty.call(object, k)) {
		            iterator.call(context, object[k], k, object)
		        }
		    }
		}


	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		module.exports = extend

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		function extend() {
		    var target = {}

		    for (var i = 0; i < arguments.length; i++) {
		        var source = arguments[i]

		        for (var key in source) {
		            if (hasOwnProperty.call(source, key)) {
		                target[key] = source[key]
		            }
		        }
		    }

		    return target
		}


	/***/ },
	/* 24 */
	/***/ function(module, exports) {

		"use strict";

		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		/**
		 * @fileoverview
		 * A utility for creating and comparing axis-aligned rectangles.
		 */

		var Rectangle = function () {
		    /**
		     * Rectangles are always initialized to the "largest possible rectangle";
		     * use one of the init* methods below to set up a particular rectangle.
		     * @constructor
		     */
		    function Rectangle() {
		        _classCallCheck(this, Rectangle);

		        this.left = -Infinity;
		        this.right = Infinity;
		        this.bottom = -Infinity;
		        this.top = Infinity;
		    }

		    /**
		     * Initialize a Rectangle from given Scratch-coordinate bounds.
		     * @param {number} left Left bound of the rectangle.
		     * @param {number} right Right bound of the rectangle.
		     * @param {number} bottom Bottom bound of the rectangle.
		     * @param {number} top Top bound of the rectangle.
		     */


		    _createClass(Rectangle, [{
		        key: "initFromBounds",
		        value: function initFromBounds(left, right, bottom, top) {
		            this.left = left;
		            this.right = right;
		            this.bottom = bottom;
		            this.top = top;
		        }

		        /**
		         * Initialize a Rectangle to the minimum AABB around a set of points.
		         * @param {Array.<Array.<number>>} points Array of [x, y] points.
		         */

		    }, {
		        key: "initFromPointsAABB",
		        value: function initFromPointsAABB(points) {
		            this.left = Infinity;
		            this.right = -Infinity;
		            this.top = -Infinity;
		            this.bottom = Infinity;
		            for (var i = 0; i < points.length; i++) {
		                var x = points[i][0];
		                var y = points[i][1];
		                if (x < this.left) {
		                    this.left = x;
		                }
		                if (x > this.right) {
		                    this.right = x;
		                }
		                if (y > this.top) {
		                    this.top = y;
		                }
		                if (y < this.bottom) {
		                    this.bottom = y;
		                }
		            }
		        }

		        /**
		         * Determine if this Rectangle intersects some other.
		         * Note that this is a comparison assuming the Rectangle was
		         * initialized with Scratch-space bounds or points.
		         * @param {!Rectangle} other Rectangle to check if intersecting.
		         * @return {Boolean} True if this Rectangle intersects other.
		         */

		    }, {
		        key: "intersects",
		        value: function intersects(other) {
		            return this.left <= other.right && other.left <= this.right && this.top >= other.bottom && other.top >= this.bottom;
		        }

		        /**
		         * Determine if this Rectangle fully contains some other.
		         * Note that this is a comparison assuming the Rectangle was
		         * initialized with Scratch-space bounds or points.
		         * @param {!Rectangle} other Rectangle to check if fully contained.
		         * @return {Boolean} True if this Rectangle fully contains other.
		         */

		    }, {
		        key: "contains",
		        value: function contains(other) {
		            return other.left > this.left && other.right < this.right && other.top < this.top && other.bottom > this.bottom;
		        }

		        /**
		         * Clamp a Rectangle to bounds.
		         * @param {number} left Left clamp.
		         * @param {number} right Right clamp.
		         * @param {number} bottom Bottom clamp.
		         * @param {number} top Top clamp.
		         */

		    }, {
		        key: "clamp",
		        value: function clamp(left, right, bottom, top) {
		            this.left = Math.max(this.left, left);
		            this.right = Math.min(this.right, right);
		            this.bottom = Math.max(this.bottom, bottom);
		            this.top = Math.min(this.top, top);
		            // Ensure rectangle coordinates in order.
		            this.left = Math.min(this.left, this.right);
		            this.right = Math.max(this.right, this.left);
		            this.bottom = Math.min(this.bottom, this.top);
		            this.top = Math.max(this.top, this.bottom);
		        }

		        /**
		         * Push out the Rectangle to integer bounds.
		         */

		    }, {
		        key: "snapToInt",
		        value: function snapToInt() {
		            this.left = Math.floor(this.left);
		            this.right = Math.ceil(this.right);
		            this.bottom = Math.floor(this.bottom);
		            this.top = Math.ceil(this.top);
		        }

		        /**
		         * Width of the Rectangle.
		         * @return {number} Width of rectangle.
		         */

		    }, {
		        key: "width",
		        get: function get() {
		            return Math.abs(this.left - this.right);
		        }

		        /**
		         * Height of the Rectangle.
		         * @return {number} Height of rectangle.
		         */

		    }, {
		        key: "height",
		        get: function get() {
		            return Math.abs(this.top - this.bottom);
		        }
		    }]);

		    return Rectangle;
		}();

		module.exports = Rectangle;

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

		var twgl = __webpack_require__(11);

		var ShaderManager = function ShaderManager(gl) {
		    _classCallCheck(this, ShaderManager);

		    this._gl = gl;

		    /**
		     * The cache of all shaders compiled so far, filled on demand.
		     * @type {Object.<ShaderManager.DRAW_MODE, Array.<ProgramInfo>>}
		     * @private
		     */
		    this._shaderCache = {};
		    for (var modeName in ShaderManager.DRAW_MODE) {
		        if (ShaderManager.DRAW_MODE.hasOwnProperty(modeName)) {
		            this._shaderCache[modeName] = [];
		        }
		    }
		};

		module.exports = ShaderManager;

		/**
		 * Mapping of each effect name to info about that effect.
		 * The info includes:
		 * - The bit in 'effectBits' representing the effect.
		 * - A conversion function which takes a Scratch value (generally in the range
		 *   0..100 or -100..100) and maps it to a value useful to the shader. This
		 *   mapping may not be reversible.
		 * - `shapeChanges`, whether the effect could change the drawn shape.
		 * @type {Object.<string,Object.<string,*>>}
		 */
		ShaderManager.EFFECT_INFO = {
		    color: {
		        mask: 1 << 0,
		        converter: function converter(x) {
		            return x / 200 % 1;
		        },
		        shapeChanges: false
		    },
		    fisheye: {
		        mask: 1 << 1,
		        converter: function converter(x) {
		            return Math.max(0, (x + 100) / 100);
		        },
		        shapeChanges: true
		    },
		    whirl: {
		        mask: 1 << 2,
		        converter: function converter(x) {
		            return x * Math.PI / 180;
		        },
		        shapeChanges: true
		    },
		    pixelate: {
		        mask: 1 << 3,
		        converter: function converter(x) {
		            return Math.abs(x) / 10;
		        },
		        shapeChanges: true
		    },
		    mosaic: {
		        mask: 1 << 4,
		        converter: function converter(x) {
		            x = Math.round((Math.abs(x) + 10) / 10);
		            // TODO: cap by Math.min(srcWidth, srcHeight)
		            return Math.max(1, Math.min(x, 512));
		        },
		        shapeChanges: true
		    },
		    brightness: {
		        mask: 1 << 5,
		        converter: function converter(x) {
		            return Math.max(-100, Math.min(x, 100)) / 100;
		        },
		        shapeChanges: false
		    },
		    ghost: {
		        mask: 1 << 6,
		        converter: function converter(x) {
		            return 1 - Math.max(0, Math.min(x, 100)) / 100;
		        },
		        shapeChanges: false
		    }
		};

		/**
		 * The name of each supported effect.
		 * @type {Array}
		 */
		ShaderManager.EFFECTS = Object.keys(ShaderManager.EFFECT_INFO);

		/**
		 * The available draw modes.
		 * @readonly
		 * @enum {string}
		 */
		ShaderManager.DRAW_MODE = {
		    /**
		     * Draw normally.
		     */
		    default: 'default',

		    /**
		     * Draw a silhouette using a solid color.
		     */
		    silhouette: 'silhouette',

		    /**
		     * Draw only the parts of the drawable which match a particular color.
		     */
		    colorMask: 'colorMask'
		};

		/**
		 * Fetch the shader for a particular set of active effects.
		 * Build the shader if necessary.
		 * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
		 * @param {int} effectBits Bitmask representing the enabled effects.
		 * @returns {ProgramInfo} The shader's program info.
		 */
		ShaderManager.prototype.getShader = function (drawMode, effectBits) {
		    var cache = this._shaderCache[drawMode];
		    if (drawMode == ShaderManager.DRAW_MODE.silhouette) {
		        // Silhouette mode isn't affected by these effects.
		        effectBits &= ~(ShaderManager.EFFECT_INFO.color.mask | ShaderManager.EFFECT_INFO.brightness.mask);
		    }
		    var shader = cache[effectBits];
		    if (!shader) {
		        shader = cache[effectBits] = this._buildShader(drawMode, effectBits);
		    }
		    return shader;
		};

		/**
		 * Build the shader for a particular set of active effects.
		 * @param {ShaderManager.DRAW_MODE} drawMode Draw normally, silhouette, etc.
		 * @param {int} effectBits Bitmask representing the enabled effects.
		 * @returns {ProgramInfo} The new shader's program info.
		 * @private
		 */
		ShaderManager.prototype._buildShader = function (drawMode, effectBits) {
		    var numEffects = ShaderManager.EFFECTS.length;

		    var defines = ['#define DRAW_MODE_' + drawMode];
		    for (var index = 0; index < numEffects; ++index) {
		        if ((effectBits & 1 << index) != 0) {
		            defines.push('#define ENABLE_' + ShaderManager.EFFECTS[index]);
		        }
		    }

		    var definesText = defines.join('\n') + '\n';
		    var vsFullText = definesText + __webpack_require__(26);
		    var fsFullText = definesText + __webpack_require__(27);

		    return twgl.createProgramInfo(this._gl, [vsFullText, fsFullText]);
		};

	/***/ },
	/* 26 */
	/***/ function(module, exports) {

		module.exports = "uniform mat4 u_projectionMatrix;\nuniform mat4 u_modelMatrix;\n\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\n\nvarying vec2 v_texCoord;\n\nvoid main() {\n    gl_Position = u_projectionMatrix * u_modelMatrix * vec4(a_position, 0, 1);\n    v_texCoord = a_texCoord;\n}\n"

	/***/ },
	/* 27 */
	/***/ function(module, exports) {

		module.exports = "precision mediump float;\n\nuniform float u_fudge;\n\n#ifdef DRAW_MODE_silhouette\nuniform vec4 u_silhouetteColor;\n#else // DRAW_MODE_silhouette\n# ifdef ENABLE_color\nuniform float u_color;\n# endif // ENABLE_color\n# ifdef ENABLE_brightness\nuniform float u_brightness;\n# endif // ENABLE_brightness\n#endif // DRAW_MODE_silhouette\n\n#ifdef DRAW_MODE_colorMask\nuniform vec3 u_colorMask;\nuniform float u_colorMaskTolerance;\n#endif // DRAW_MODE_colorMask\n\n#ifdef ENABLE_fisheye\nuniform float u_fisheye;\n#endif // ENABLE_fisheye\n#ifdef ENABLE_whirl\nuniform float u_whirl;\n#endif // ENABLE_whirl\n#ifdef ENABLE_pixelate\nuniform float u_pixelate;\nuniform vec2 u_skinSize;\n#endif // ENABLE_pixelate\n#ifdef ENABLE_mosaic\nuniform float u_mosaic;\n#endif // ENABLE_mosaic\n#ifdef ENABLE_ghost\nuniform float u_ghost;\n#endif // ENABLE_ghost\n\nuniform sampler2D u_skin;\n\nvarying vec2 v_texCoord;\n\n#if !defined(DRAW_MODE_silhouette) && (defined(ENABLE_color) || defined(ENABLE_brightness))\n// Branchless color conversions based on code from:\n// http://www.chilliant.com/rgb2hsv.html by Ian Taylor\n// Based in part on work by Sam Hocevar and Emil Persson\n\nconst float kEpsilon = 1e-6;\n\nvec3 convertRGB2HCV(vec3 rgb)\n{\n\tvec4 p = (rgb.g < rgb.b) ? vec4(rgb.bg, -1, 2.0/3.0) : vec4(rgb.gb, 0, -1.0/3.0);\n\tvec4 q = (rgb.r < p.x) ? vec4(p.xyw, rgb.r) : vec4(rgb.r, p.yzx);\n\tfloat c = q.x - min(q.w, q.y);\n\tfloat h = abs((q.w - q.y) / (6.0 * c + kEpsilon) + q.z);\n\treturn vec3(h, c, q.x);\n}\n\nvec3 convertRGB2HSL(vec3 rgb)\n{\n\tvec3 hcv = convertRGB2HCV(rgb);\n\tfloat l = hcv.z - hcv.y * 0.5;\n\tfloat s = hcv.y / (1.0 - abs(l * 2.0 - 1.0) + kEpsilon);\n\treturn vec3(hcv.x, s, l);\n}\n\nvec3 convertHue2RGB(float hue)\n{\n\tfloat r = abs(hue * 6.0 - 3.0) - 1.0;\n\tfloat g = 2.0 - abs(hue * 6.0 - 2.0);\n\tfloat b = 2.0 - abs(hue * 6.0 - 4.0);\n\treturn clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nvec3 convertHSL2RGB(vec3 hsl)\n{\n\tvec3 rgb = convertHue2RGB(hsl.x);\n\tfloat c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;\n\treturn (rgb - 0.5) * c + hsl.z;\n}\n#endif // !defined(DRAW_MODE_silhouette) && (defined(ENABLE_color) || defined(ENABLE_brightness))\n\nconst vec2 kCenter = vec2(0.5, 0.5);\n\nvoid main()\n{\n\tvec2 texcoord0 = v_texCoord;\n\n\t#ifdef ENABLE_mosaic\n\ttexcoord0 = fract(u_mosaic * texcoord0);\n\t#endif // ENABLE_mosaic\n\n\t#ifdef ENABLE_pixelate\n\t{\n\t\t// TODO: clean up \"pixel\" edges\n\t\tvec2 pixelTexelSize = u_skinSize / u_pixelate;\n\t\ttexcoord0 = (floor(texcoord0 * pixelTexelSize) + kCenter) / pixelTexelSize;\n\t}\n\t#endif // ENABLE_pixelate\n\n\t#ifdef ENABLE_whirl\n\t{\n\t\tconst float kRadius = 0.5;\n\t\tvec2 offset = texcoord0 - kCenter;\n\t\tfloat offsetMagnitude = length(offset);\n\t\tfloat whirlFactor = 1.0 - (offsetMagnitude / kRadius);\n\t\tfloat whirlActual = u_whirl * whirlFactor * whirlFactor;\n\t\tfloat sinWhirl = sin(whirlActual);\n\t\tfloat cosWhirl = cos(whirlActual);\n\t\tmat2 rotationMatrix = mat2(\n\t\t\tcosWhirl, -sinWhirl,\n\t\t\tsinWhirl, cosWhirl\n\t\t);\n\n\t\t// TODO: tweak this algorithm such that texture coordinates don't depend on conditionals.\n\t\t// see: https://www.opengl.org/wiki/Sampler_%28GLSL%29#Non-uniform_flow_control\n\t\tif (offsetMagnitude <= kRadius)\n\t\t{\n\t\t\ttexcoord0 = rotationMatrix * offset + kCenter;\n\t\t}\n\t}\n\t#endif // ENABLE_whirl\n\n\t#ifdef ENABLE_fisheye\n\t{\n\t\tvec2 vec = (texcoord0 - kCenter) / kCenter;\n\t\tfloat r = pow(length(vec), u_fisheye);\n\t\tfloat angle = atan(vec.y, vec.x);\n\t\t// TODO: tweak this algorithm such that texture coordinates don't depend on conditionals.\n\t\t// see: https://www.opengl.org/wiki/Sampler_%28GLSL%29#Non-uniform_flow_control\n\t\tif (r <= 1.0)\n\t\t{\n\t\t\ttexcoord0 = kCenter + r * vec2(cos(angle), sin(angle)) * kCenter;\n\t\t}\n\t}\n\t#endif // ENABLE_fisheye\n\n\tgl_FragColor = texture2D(u_skin, texcoord0);\n\n\n\tif (gl_FragColor.a == 0.0)\n\t{\n\t\tdiscard;\n\t}\n\n    #ifdef ENABLE_ghost\n    gl_FragColor.a *= u_ghost;\n    #endif // ENABLE_ghost\n\n\t#ifdef DRAW_MODE_silhouette\n\t// switch to u_silhouetteColor only AFTER the alpha test\n\tgl_FragColor = u_silhouetteColor;\n\t#else // DRAW_MODE_silhouette\n\n\t#if defined(ENABLE_color) || defined(ENABLE_brightness)\n\t{\n\t\tvec3 hsl = convertRGB2HSL(gl_FragColor.xyz);\n\n\t\t#ifdef ENABLE_color\n\t\t{\n\t\t\t// this code forces grayscale values to be slightly saturated\n\t\t\t// so that some slight change of hue will be visible\n\t\t\tconst float minLightness = 0.11 / 2.0;\n\t\t\tconst float minSaturation = 0.09;\n\t\t\tif (hsl.z < minLightness) hsl = vec3(0.0, 1.0, minLightness);\n\t\t\telse if (hsl.y < minSaturation) hsl = vec3(0.0, minSaturation, hsl.z);\n\n\t\t\thsl.x = mod(hsl.x + u_color, 1.0);\n\t\t\tif (hsl.x < 0.0) hsl.x += 1.0;\n\t\t}\n\t\t#endif // ENABLE_color\n\n\t\t#ifdef ENABLE_brightness\n\t\thsl.z = clamp(hsl.z + u_brightness, 0.0, 1.0);\n\t\t#endif // ENABLE_brightness\n\n\t\tgl_FragColor.rgb = convertHSL2RGB(hsl);\n\t}\n\t#endif // defined(ENABLE_color) || defined(ENABLE_brightness)\n\n\t#ifdef DRAW_MODE_colorMask\n\tvec3 maskDistance = abs(gl_FragColor.rgb - u_colorMask);\n\tvec3 colorMaskTolerance = vec3(u_colorMaskTolerance, u_colorMaskTolerance, u_colorMaskTolerance);\n\tif (any(greaterThan(maskDistance, colorMaskTolerance)))\n\t{\n\t\tdiscard;\n\t}\n\t#endif // DRAW_MODE_colorMask\n\n\t// WebGL defaults to premultiplied alpha\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n\t#endif // DRAW_MODE_silhouette\n}\n"

	/***/ }
	/******/ ]);

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var StageComponent = function (_React$Component) {
	    _inherits(StageComponent, _React$Component);

	    function StageComponent() {
	        _classCallCheck(this, StageComponent);

	        return _possibleConstructorReturn(this, (StageComponent.__proto__ || Object.getPrototypeOf(StageComponent)).apply(this, arguments));
	    }

	    _createClass(StageComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var canvasRef = _props.canvasRef;
	            var width = _props.width;
	            var height = _props.height;

	            var props = _objectWithoutProperties(_props, ['canvasRef', 'width', 'height']);

	            return React.createElement('canvas', _extends({
	                className: 'scratch-stage',
	                ref: canvasRef,
	                style: {
	                    position: 'absolute',
	                    top: 10,
	                    right: 10,
	                    width: width,
	                    height: height
	                }
	            }, props));
	        }
	    }]);

	    return StageComponent;
	}(React.Component);

	StageComponent.propTypes = {
	    canvasRef: React.PropTypes.func,
	    height: React.PropTypes.number,
	    width: React.PropTypes.number
	};

	StageComponent.defaultProps = {
	    canvasRef: function canvasRef() {},
	    width: 480,
	    height: 360
	};

	module.exports = StageComponent;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);

	var StopAllComponent = __webpack_require__(205);

	var StopAll = function (_React$Component) {
	    _inherits(StopAll, _React$Component);

	    function StopAll(props) {
	        _classCallCheck(this, StopAll);

	        var _this = _possibleConstructorReturn(this, (StopAll.__proto__ || Object.getPrototypeOf(StopAll)).call(this, props));

	        bindAll(_this, ['handleClick']);
	        return _this;
	    }

	    _createClass(StopAll, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            e.preventDefault();
	            this.props.vm.stopAll();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var vm = _props.vm;

	            var props = _objectWithoutProperties(_props, ['vm']);

	            return React.createElement(StopAllComponent, _extends({
	                onClick: this.handleClick
	            }, props));
	        }
	    }]);

	    return StopAll;
	}(React.Component);

	StopAll.propTypes = {
	    vm: React.PropTypes.instanceOf(VM)
	};

	module.exports = StopAll;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);

	var StopAllComponent = function (_React$Component) {
	    _inherits(StopAllComponent, _React$Component);

	    function StopAllComponent() {
	        _classCallCheck(this, StopAllComponent);

	        return _possibleConstructorReturn(this, (StopAllComponent.__proto__ || Object.getPrototypeOf(StopAllComponent)).apply(this, arguments));
	    }

	    _createClass(StopAllComponent, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props;
	            var onClick = _props.onClick;
	            var title = _props.title;

	            var props = _objectWithoutProperties(_props, ['onClick', 'title']);

	            return React.createElement(
	                'div',
	                _extends({
	                    className: 'scratch-stop-all',
	                    style: {
	                        position: 'absolute',
	                        top: 380,
	                        right: 400,
	                        width: 50
	                    }
	                }, props),
	                React.createElement(
	                    'button',
	                    { onClick: onClick },
	                    title
	                )
	            );
	        }
	    }]);

	    return StopAllComponent;
	}(React.Component);

	StopAllComponent.propTypes = {
	    onClick: React.PropTypes.func,
	    title: React.PropTypes.string
	};

	StopAllComponent.defaultProps = {
	    title: 'Stop'
	};

	module.exports = StopAllComponent;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);
	var MediaLibrary = __webpack_require__(187);

	var LibaryComponent = __webpack_require__(207);

	var SpriteLibrary = function (_React$Component) {
	    _inherits(SpriteLibrary, _React$Component);

	    function SpriteLibrary(props) {
	        _classCallCheck(this, SpriteLibrary);

	        var _this = _possibleConstructorReturn(this, (SpriteLibrary.__proto__ || Object.getPrototypeOf(SpriteLibrary)).call(this, props));

	        bindAll(_this, ['setData', 'handleItemSelect', 'setSpriteData']);
	        _this.state = { data: [], spriteData: {} };
	        return _this;
	    }

	    _createClass(SpriteLibrary, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.visible && this.state.data.length === 0) {
	                this.props.mediaLibrary.getMediaLibrary('sprite', this.setData);
	            }
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            this.setState({ data: data });
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;

	            try {
	                for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var sprite = _step.value;

	                    this.props.mediaLibrary.getSprite(sprite.md5, this.setSpriteData);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'setSpriteData',
	        value: function setSpriteData(md5, data) {
	            this.setState({
	                spriteData: Object.assign({}, this.state.spriteData, _defineProperty({}, md5, data))
	            });
	        }
	    }, {
	        key: 'handleItemSelect',
	        value: function handleItemSelect(item) {
	            var spriteData = JSON.stringify(this.state.spriteData[item.json]);
	            this.props.vm.addSprite2(spriteData);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(LibaryComponent, {
	                data: Object.keys(this.state.spriteData).map(function (libraryKey) {
	                    var libraryItem = _this2.state.spriteData[libraryKey];
	                    return {
	                        name: libraryItem.objName,
	                        md5: libraryItem.costumes[0].baseLayerMD5,
	                        json: libraryKey
	                    };
	                }),
	                mediaLibrary: this.props.mediaLibrary,
	                title: 'Sprite Library',
	                visible: this.props.visible,
	                onItemSelected: this.handleItemSelect,
	                onRequestClose: this.props.onRequestClose
	            });
	        }
	    }]);

	    return SpriteLibrary;
	}(React.Component);

	SpriteLibrary.propTypes = {
	    mediaLibrary: React.PropTypes.instanceOf(MediaLibrary),
	    onRequestClose: React.PropTypes.func,
	    visible: React.PropTypes.bool,
	    vm: React.PropTypes.instanceOf(VM).isRequired
	};

	module.exports = SpriteLibrary;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);

	var LibraryItem = __webpack_require__(208);
	var ModalComponent = __webpack_require__(214);

	var LibraryComponent = function (_React$Component) {
	    _inherits(LibraryComponent, _React$Component);

	    function LibraryComponent(props) {
	        _classCallCheck(this, LibraryComponent);

	        var _this = _possibleConstructorReturn(this, (LibraryComponent.__proto__ || Object.getPrototypeOf(LibraryComponent)).call(this, props));

	        bindAll(_this, ['handleSelect']);
	        _this.state = { selectedItem: null };
	        return _this;
	    }

	    _createClass(LibraryComponent, [{
	        key: 'handleSelect',
	        value: function handleSelect(id) {
	            if (this.state.selectedItem === id) {
	                // Double select: select as the library's value.
	                this.props.onRequestClose();
	                this.props.onItemSelected(this.props.data[id]);
	            }
	            this.setState({ selectedItem: id });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            var scrollGridStyle = {
	                overflow: 'scroll',
	                position: 'absolute',
	                top: '70px',
	                bottom: '20px',
	                left: '30px',
	                right: '30px'
	            };
	            return React.createElement(
	                ModalComponent,
	                {
	                    visible: this.props.visible,
	                    onRequestClose: this.props.onRequestClose
	                },
	                React.createElement(
	                    'h1',
	                    null,
	                    this.props.title
	                ),
	                React.createElement(
	                    'div',
	                    { style: scrollGridStyle },
	                    this.props.data.map(function (dataItem, itemId) {
	                        var scratchURL = dataItem.md5 ? 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + dataItem.md5 + '/get/' : dataItem.rawURL;
	                        return React.createElement(LibraryItem, {
	                            iconURL: scratchURL,
	                            id: itemId,
	                            key: 'item_' + itemId,
	                            name: dataItem.name,
	                            selected: _this2.state.selectedItem === itemId,
	                            onSelect: _this2.handleSelect
	                        });
	                    })
	                )
	            );
	        }
	    }]);

	    return LibraryComponent;
	}(React.Component);

	LibraryComponent.propTypes = {
	    data: React.PropTypes.arrayOf(
	    /* eslint-disable react/no-unused-prop-types, lines-around-comment */
	    React.PropTypes.shape({
	        md5: React.PropTypes.string,
	        name: React.PropTypes.string,
	        rawURL: React.PropTypes.string
	    })
	    /* eslint-enable react/no-unused-prop-types, lines-around-comment */
	    ),
	    onItemSelected: React.PropTypes.func,
	    onRequestClose: React.PropTypes.func,
	    title: React.PropTypes.string,
	    visible: React.PropTypes.bool
	};

	module.exports = LibraryComponent;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var stylePropType = __webpack_require__(209);

	var CostumeCanvas = __webpack_require__(211);

	var LibraryItem = function (_React$Component) {
	    _inherits(LibraryItem, _React$Component);

	    function LibraryItem(props) {
	        _classCallCheck(this, LibraryItem);

	        var _this = _possibleConstructorReturn(this, (LibraryItem.__proto__ || Object.getPrototypeOf(LibraryItem)).call(this, props));

	        bindAll(_this, ['handleClick']);
	        return _this;
	    }

	    _createClass(LibraryItem, [{
	        key: 'handleClick',
	        value: function handleClick(e) {
	            this.props.onSelect(this.props.id);
	            e.preventDefault();
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var style = this.props.selected ? this.props.selectedGridTileStyle : this.props.gridTileStyle;
	            return React.createElement(
	                'div',
	                {
	                    style: style,
	                    onClick: this.handleClick
	                },
	                React.createElement(CostumeCanvas, { url: this.props.iconURL }),
	                React.createElement(
	                    'p',
	                    null,
	                    this.props.name
	                )
	            );
	        }
	    }]);

	    return LibraryItem;
	}(React.Component);

	LibraryItem.defaultProps = {
	    gridTileStyle: {
	        float: 'left',
	        width: '140px',
	        marginLeft: '5px',
	        marginRight: '5px',
	        textAlign: 'center',
	        cursor: 'pointer'
	    },
	    selectedGridTileStyle: {
	        float: 'left',
	        width: '140px',
	        marginLeft: '5px',
	        marginRight: '5px',
	        textAlign: 'center',
	        cursor: 'pointer',
	        background: '#aaa',
	        borderRadius: '6px'
	    }
	};

	LibraryItem.propTypes = {
	    gridTileStyle: stylePropType,
	    iconURL: React.PropTypes.string,
	    id: React.PropTypes.number,
	    name: React.PropTypes.string,
	    onSelect: React.PropTypes.func,
	    selected: React.PropTypes.bool,
	    selectedGridTileStyle: stylePropType
	};

	module.exports = LibraryItem;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var properties = __webpack_require__(210);

	module.exports = function(props, propName, componentName) {
	  var styles = props[propName];
	  if (!styles) {
	    return;
	  }

	  var failures = [];
	  Object.keys(styles).forEach(function(styleKey){
	    if (properties.indexOf(styleKey) === -1) {
	      failures.push(styleKey);
	    }
	  });
	  if (failures.length) {
	    throw new Error('Prop ' + propName + ' passed to ' + componentName + '. Has invalid keys ' + failures.join(', '));
	  }
	};

	module.exports.isRequired = function(props, propName, componentName) {
	  if (!props[propName]) {
	    throw new Error('Prop ' + propName + ' passed to ' + componentName + ' is required');
	  }
	  return module.exports(props, propName, componentName);
	};



/***/ },
/* 210 */
/***/ function(module, exports) {

	module.exports = [
	  "alignContent",
	  "MozAlignContent",
	  "WebKitAlignContent",
	  "MSAlignContent",
	  "OAlignContent",
	  "alignItems",
	  "MozAlignItems",
	  "WebKitAlignItems",
	  "MSAlignItems",
	  "OAlignItems",
	  "alignSelf",
	  "MozAlignSelf",
	  "WebKitAlignSelf",
	  "MSAlignSelf",
	  "OAlignSelf",
	  "all",
	  "MozAll",
	  "WebKitAll",
	  "MSAll",
	  "OAll",
	  "animation",
	  "MozAnimation",
	  "WebKitAnimation",
	  "MSAnimation",
	  "OAnimation",
	  "animationDelay",
	  "MozAnimationDelay",
	  "WebKitAnimationDelay",
	  "MSAnimationDelay",
	  "OAnimationDelay",
	  "animationDirection",
	  "MozAnimationDirection",
	  "WebKitAnimationDirection",
	  "MSAnimationDirection",
	  "OAnimationDirection",
	  "animationDuration",
	  "MozAnimationDuration",
	  "WebKitAnimationDuration",
	  "MSAnimationDuration",
	  "OAnimationDuration",
	  "animationFillMode",
	  "MozAnimationFillMode",
	  "WebKitAnimationFillMode",
	  "MSAnimationFillMode",
	  "OAnimationFillMode",
	  "animationIterationCount",
	  "MozAnimationIterationCount",
	  "WebKitAnimationIterationCount",
	  "MSAnimationIterationCount",
	  "OAnimationIterationCount",
	  "animationName",
	  "MozAnimationName",
	  "WebKitAnimationName",
	  "MSAnimationName",
	  "OAnimationName",
	  "animationPlayState",
	  "MozAnimationPlayState",
	  "WebKitAnimationPlayState",
	  "MSAnimationPlayState",
	  "OAnimationPlayState",
	  "animationTimingFunction",
	  "MozAnimationTimingFunction",
	  "WebKitAnimationTimingFunction",
	  "MSAnimationTimingFunction",
	  "OAnimationTimingFunction",
	  "backfaceVisibility",
	  "MozBackfaceVisibility",
	  "WebKitBackfaceVisibility",
	  "MSBackfaceVisibility",
	  "OBackfaceVisibility",
	  "background",
	  "MozBackground",
	  "WebKitBackground",
	  "MSBackground",
	  "OBackground",
	  "backgroundAttachment",
	  "MozBackgroundAttachment",
	  "WebKitBackgroundAttachment",
	  "MSBackgroundAttachment",
	  "OBackgroundAttachment",
	  "backgroundBlendMode",
	  "MozBackgroundBlendMode",
	  "WebKitBackgroundBlendMode",
	  "MSBackgroundBlendMode",
	  "OBackgroundBlendMode",
	  "backgroundClip",
	  "MozBackgroundClip",
	  "WebKitBackgroundClip",
	  "MSBackgroundClip",
	  "OBackgroundClip",
	  "backgroundColor",
	  "MozBackgroundColor",
	  "WebKitBackgroundColor",
	  "MSBackgroundColor",
	  "OBackgroundColor",
	  "backgroundImage",
	  "MozBackgroundImage",
	  "WebKitBackgroundImage",
	  "MSBackgroundImage",
	  "OBackgroundImage",
	  "backgroundOrigin",
	  "MozBackgroundOrigin",
	  "WebKitBackgroundOrigin",
	  "MSBackgroundOrigin",
	  "OBackgroundOrigin",
	  "backgroundPosition",
	  "MozBackgroundPosition",
	  "WebKitBackgroundPosition",
	  "MSBackgroundPosition",
	  "OBackgroundPosition",
	  "backgroundRepeat",
	  "MozBackgroundRepeat",
	  "WebKitBackgroundRepeat",
	  "MSBackgroundRepeat",
	  "OBackgroundRepeat",
	  "backgroundSize",
	  "MozBackgroundSize",
	  "WebKitBackgroundSize",
	  "MSBackgroundSize",
	  "OBackgroundSize",
	  "blockSize",
	  "MozBlockSize",
	  "WebKitBlockSize",
	  "MSBlockSize",
	  "OBlockSize",
	  "border",
	  "MozBorder",
	  "WebKitBorder",
	  "MSBorder",
	  "OBorder",
	  "borderBlockEnd",
	  "MozBorderBlockEnd",
	  "WebKitBorderBlockEnd",
	  "MSBorderBlockEnd",
	  "OBorderBlockEnd",
	  "borderBlockEndColor",
	  "MozBorderBlockEndColor",
	  "WebKitBorderBlockEndColor",
	  "MSBorderBlockEndColor",
	  "OBorderBlockEndColor",
	  "borderBlockEndStyle",
	  "MozBorderBlockEndStyle",
	  "WebKitBorderBlockEndStyle",
	  "MSBorderBlockEndStyle",
	  "OBorderBlockEndStyle",
	  "borderBlockEndWidth",
	  "MozBorderBlockEndWidth",
	  "WebKitBorderBlockEndWidth",
	  "MSBorderBlockEndWidth",
	  "OBorderBlockEndWidth",
	  "borderBlockStart",
	  "MozBorderBlockStart",
	  "WebKitBorderBlockStart",
	  "MSBorderBlockStart",
	  "OBorderBlockStart",
	  "borderBlockStartColor",
	  "MozBorderBlockStartColor",
	  "WebKitBorderBlockStartColor",
	  "MSBorderBlockStartColor",
	  "OBorderBlockStartColor",
	  "borderBlockStartStyle",
	  "MozBorderBlockStartStyle",
	  "WebKitBorderBlockStartStyle",
	  "MSBorderBlockStartStyle",
	  "OBorderBlockStartStyle",
	  "borderBlockStartWidth",
	  "MozBorderBlockStartWidth",
	  "WebKitBorderBlockStartWidth",
	  "MSBorderBlockStartWidth",
	  "OBorderBlockStartWidth",
	  "borderBottom",
	  "MozBorderBottom",
	  "WebKitBorderBottom",
	  "MSBorderBottom",
	  "OBorderBottom",
	  "borderBottomColor",
	  "MozBorderBottomColor",
	  "WebKitBorderBottomColor",
	  "MSBorderBottomColor",
	  "OBorderBottomColor",
	  "borderBottomLeftRadius",
	  "MozBorderBottomLeftRadius",
	  "WebKitBorderBottomLeftRadius",
	  "MSBorderBottomLeftRadius",
	  "OBorderBottomLeftRadius",
	  "borderBottomRightRadius",
	  "MozBorderBottomRightRadius",
	  "WebKitBorderBottomRightRadius",
	  "MSBorderBottomRightRadius",
	  "OBorderBottomRightRadius",
	  "borderBottomStyle",
	  "MozBorderBottomStyle",
	  "WebKitBorderBottomStyle",
	  "MSBorderBottomStyle",
	  "OBorderBottomStyle",
	  "borderBottomWidth",
	  "MozBorderBottomWidth",
	  "WebKitBorderBottomWidth",
	  "MSBorderBottomWidth",
	  "OBorderBottomWidth",
	  "borderCollapse",
	  "MozBorderCollapse",
	  "WebKitBorderCollapse",
	  "MSBorderCollapse",
	  "OBorderCollapse",
	  "borderColor",
	  "MozBorderColor",
	  "WebKitBorderColor",
	  "MSBorderColor",
	  "OBorderColor",
	  "borderImage",
	  "MozBorderImage",
	  "WebKitBorderImage",
	  "MSBorderImage",
	  "OBorderImage",
	  "borderImageOutset",
	  "MozBorderImageOutset",
	  "WebKitBorderImageOutset",
	  "MSBorderImageOutset",
	  "OBorderImageOutset",
	  "borderImageRepeat",
	  "MozBorderImageRepeat",
	  "WebKitBorderImageRepeat",
	  "MSBorderImageRepeat",
	  "OBorderImageRepeat",
	  "borderImageSlice",
	  "MozBorderImageSlice",
	  "WebKitBorderImageSlice",
	  "MSBorderImageSlice",
	  "OBorderImageSlice",
	  "borderImageSource",
	  "MozBorderImageSource",
	  "WebKitBorderImageSource",
	  "MSBorderImageSource",
	  "OBorderImageSource",
	  "borderImageWidth",
	  "MozBorderImageWidth",
	  "WebKitBorderImageWidth",
	  "MSBorderImageWidth",
	  "OBorderImageWidth",
	  "borderInlineEnd",
	  "MozBorderInlineEnd",
	  "WebKitBorderInlineEnd",
	  "MSBorderInlineEnd",
	  "OBorderInlineEnd",
	  "borderInlineEndColor",
	  "MozBorderInlineEndColor",
	  "WebKitBorderInlineEndColor",
	  "MSBorderInlineEndColor",
	  "OBorderInlineEndColor",
	  "borderInlineEndStyle",
	  "MozBorderInlineEndStyle",
	  "WebKitBorderInlineEndStyle",
	  "MSBorderInlineEndStyle",
	  "OBorderInlineEndStyle",
	  "borderInlineEndWidth",
	  "MozBorderInlineEndWidth",
	  "WebKitBorderInlineEndWidth",
	  "MSBorderInlineEndWidth",
	  "OBorderInlineEndWidth",
	  "borderInlineStart",
	  "MozBorderInlineStart",
	  "WebKitBorderInlineStart",
	  "MSBorderInlineStart",
	  "OBorderInlineStart",
	  "borderInlineStartColor",
	  "MozBorderInlineStartColor",
	  "WebKitBorderInlineStartColor",
	  "MSBorderInlineStartColor",
	  "OBorderInlineStartColor",
	  "borderInlineStartStyle",
	  "MozBorderInlineStartStyle",
	  "WebKitBorderInlineStartStyle",
	  "MSBorderInlineStartStyle",
	  "OBorderInlineStartStyle",
	  "borderInlineStartWidth",
	  "MozBorderInlineStartWidth",
	  "WebKitBorderInlineStartWidth",
	  "MSBorderInlineStartWidth",
	  "OBorderInlineStartWidth",
	  "borderLeft",
	  "MozBorderLeft",
	  "WebKitBorderLeft",
	  "MSBorderLeft",
	  "OBorderLeft",
	  "borderLeftColor",
	  "MozBorderLeftColor",
	  "WebKitBorderLeftColor",
	  "MSBorderLeftColor",
	  "OBorderLeftColor",
	  "borderLeftStyle",
	  "MozBorderLeftStyle",
	  "WebKitBorderLeftStyle",
	  "MSBorderLeftStyle",
	  "OBorderLeftStyle",
	  "borderLeftWidth",
	  "MozBorderLeftWidth",
	  "WebKitBorderLeftWidth",
	  "MSBorderLeftWidth",
	  "OBorderLeftWidth",
	  "borderRadius",
	  "MozBorderRadius",
	  "WebKitBorderRadius",
	  "MSBorderRadius",
	  "OBorderRadius",
	  "borderRight",
	  "MozBorderRight",
	  "WebKitBorderRight",
	  "MSBorderRight",
	  "OBorderRight",
	  "borderRightColor",
	  "MozBorderRightColor",
	  "WebKitBorderRightColor",
	  "MSBorderRightColor",
	  "OBorderRightColor",
	  "borderRightStyle",
	  "MozBorderRightStyle",
	  "WebKitBorderRightStyle",
	  "MSBorderRightStyle",
	  "OBorderRightStyle",
	  "borderRightWidth",
	  "MozBorderRightWidth",
	  "WebKitBorderRightWidth",
	  "MSBorderRightWidth",
	  "OBorderRightWidth",
	  "borderSpacing",
	  "MozBorderSpacing",
	  "WebKitBorderSpacing",
	  "MSBorderSpacing",
	  "OBorderSpacing",
	  "borderStyle",
	  "MozBorderStyle",
	  "WebKitBorderStyle",
	  "MSBorderStyle",
	  "OBorderStyle",
	  "borderTop",
	  "MozBorderTop",
	  "WebKitBorderTop",
	  "MSBorderTop",
	  "OBorderTop",
	  "borderTopColor",
	  "MozBorderTopColor",
	  "WebKitBorderTopColor",
	  "MSBorderTopColor",
	  "OBorderTopColor",
	  "borderTopLeftRadius",
	  "MozBorderTopLeftRadius",
	  "WebKitBorderTopLeftRadius",
	  "MSBorderTopLeftRadius",
	  "OBorderTopLeftRadius",
	  "borderTopRightRadius",
	  "MozBorderTopRightRadius",
	  "WebKitBorderTopRightRadius",
	  "MSBorderTopRightRadius",
	  "OBorderTopRightRadius",
	  "borderTopStyle",
	  "MozBorderTopStyle",
	  "WebKitBorderTopStyle",
	  "MSBorderTopStyle",
	  "OBorderTopStyle",
	  "borderTopWidth",
	  "MozBorderTopWidth",
	  "WebKitBorderTopWidth",
	  "MSBorderTopWidth",
	  "OBorderTopWidth",
	  "borderWidth",
	  "MozBorderWidth",
	  "WebKitBorderWidth",
	  "MSBorderWidth",
	  "OBorderWidth",
	  "bottom",
	  "MozBottom",
	  "WebKitBottom",
	  "MSBottom",
	  "OBottom",
	  "boxDecorationBreak",
	  "MozBoxDecorationBreak",
	  "WebKitBoxDecorationBreak",
	  "MSBoxDecorationBreak",
	  "OBoxDecorationBreak",
	  "boxShadow",
	  "MozBoxShadow",
	  "WebKitBoxShadow",
	  "MSBoxShadow",
	  "OBoxShadow",
	  "boxSizing",
	  "MozBoxSizing",
	  "WebKitBoxSizing",
	  "MSBoxSizing",
	  "OBoxSizing",
	  "breakAfter",
	  "MozBreakAfter",
	  "WebKitBreakAfter",
	  "MSBreakAfter",
	  "OBreakAfter",
	  "breakBefore",
	  "MozBreakBefore",
	  "WebKitBreakBefore",
	  "MSBreakBefore",
	  "OBreakBefore",
	  "breakInside",
	  "MozBreakInside",
	  "WebKitBreakInside",
	  "MSBreakInside",
	  "OBreakInside",
	  "captionSide",
	  "MozCaptionSide",
	  "WebKitCaptionSide",
	  "MSCaptionSide",
	  "OCaptionSide",
	  "ch",
	  "MozCh",
	  "WebKitCh",
	  "MSCh",
	  "OCh",
	  "clear",
	  "MozClear",
	  "WebKitClear",
	  "MSClear",
	  "OClear",
	  "clip",
	  "MozClip",
	  "WebKitClip",
	  "MSClip",
	  "OClip",
	  "clipPath",
	  "MozClipPath",
	  "WebKitClipPath",
	  "MSClipPath",
	  "OClipPath",
	  "cm",
	  "MozCm",
	  "WebKitCm",
	  "MSCm",
	  "OCm",
	  "color",
	  "MozColor",
	  "WebKitColor",
	  "MSColor",
	  "OColor",
	  "columnCount",
	  "MozColumnCount",
	  "WebKitColumnCount",
	  "MSColumnCount",
	  "OColumnCount",
	  "columnFill",
	  "MozColumnFill",
	  "WebKitColumnFill",
	  "MSColumnFill",
	  "OColumnFill",
	  "columnGap",
	  "MozColumnGap",
	  "WebKitColumnGap",
	  "MSColumnGap",
	  "OColumnGap",
	  "columnRule",
	  "MozColumnRule",
	  "WebKitColumnRule",
	  "MSColumnRule",
	  "OColumnRule",
	  "columnRuleColor",
	  "MozColumnRuleColor",
	  "WebKitColumnRuleColor",
	  "MSColumnRuleColor",
	  "OColumnRuleColor",
	  "columnRuleStyle",
	  "MozColumnRuleStyle",
	  "WebKitColumnRuleStyle",
	  "MSColumnRuleStyle",
	  "OColumnRuleStyle",
	  "columnRuleWidth",
	  "MozColumnRuleWidth",
	  "WebKitColumnRuleWidth",
	  "MSColumnRuleWidth",
	  "OColumnRuleWidth",
	  "columnSpan",
	  "MozColumnSpan",
	  "WebKitColumnSpan",
	  "MSColumnSpan",
	  "OColumnSpan",
	  "columnWidth",
	  "MozColumnWidth",
	  "WebKitColumnWidth",
	  "MSColumnWidth",
	  "OColumnWidth",
	  "columns",
	  "MozColumns",
	  "WebKitColumns",
	  "MSColumns",
	  "OColumns",
	  "content",
	  "MozContent",
	  "WebKitContent",
	  "MSContent",
	  "OContent",
	  "counterIncrement",
	  "MozCounterIncrement",
	  "WebKitCounterIncrement",
	  "MSCounterIncrement",
	  "OCounterIncrement",
	  "counterReset",
	  "MozCounterReset",
	  "WebKitCounterReset",
	  "MSCounterReset",
	  "OCounterReset",
	  "cursor",
	  "MozCursor",
	  "WebKitCursor",
	  "MSCursor",
	  "OCursor",
	  "deg",
	  "MozDeg",
	  "WebKitDeg",
	  "MSDeg",
	  "ODeg",
	  "direction",
	  "MozDirection",
	  "WebKitDirection",
	  "MSDirection",
	  "ODirection",
	  "display",
	  "MozDisplay",
	  "WebKitDisplay",
	  "MSDisplay",
	  "ODisplay",
	  "dpcm",
	  "MozDpcm",
	  "WebKitDpcm",
	  "MSDpcm",
	  "ODpcm",
	  "dpi",
	  "MozDpi",
	  "WebKitDpi",
	  "MSDpi",
	  "ODpi",
	  "dppx",
	  "MozDppx",
	  "WebKitDppx",
	  "MSDppx",
	  "ODppx",
	  "em",
	  "MozEm",
	  "WebKitEm",
	  "MSEm",
	  "OEm",
	  "emptyCells",
	  "MozEmptyCells",
	  "WebKitEmptyCells",
	  "MSEmptyCells",
	  "OEmptyCells",
	  "ex",
	  "MozEx",
	  "WebKitEx",
	  "MSEx",
	  "OEx",
	  "filter",
	  "MozFilter",
	  "WebKitFilter",
	  "MSFilter",
	  "OFilter",
	  "flex",
	  "MozFlex",
	  "WebKitFlex",
	  "MSFlex",
	  "OFlex",
	  "flexBasis",
	  "MozFlexBasis",
	  "WebKitFlexBasis",
	  "MSFlexBasis",
	  "OFlexBasis",
	  "flexDirection",
	  "MozFlexDirection",
	  "WebKitFlexDirection",
	  "MSFlexDirection",
	  "OFlexDirection",
	  "flexFlow",
	  "MozFlexFlow",
	  "WebKitFlexFlow",
	  "MSFlexFlow",
	  "OFlexFlow",
	  "flexGrow",
	  "MozFlexGrow",
	  "WebKitFlexGrow",
	  "MSFlexGrow",
	  "OFlexGrow",
	  "flexShrink",
	  "MozFlexShrink",
	  "WebKitFlexShrink",
	  "MSFlexShrink",
	  "OFlexShrink",
	  "flexWrap",
	  "MozFlexWrap",
	  "WebKitFlexWrap",
	  "MSFlexWrap",
	  "OFlexWrap",
	  "float",
	  "MozFloat",
	  "WebKitFloat",
	  "MSFloat",
	  "OFloat",
	  "font",
	  "MozFont",
	  "WebKitFont",
	  "MSFont",
	  "OFont",
	  "fontFamily",
	  "MozFontFamily",
	  "WebKitFontFamily",
	  "MSFontFamily",
	  "OFontFamily",
	  "fontFeatureSettings",
	  "MozFontFeatureSettings",
	  "WebKitFontFeatureSettings",
	  "MSFontFeatureSettings",
	  "OFontFeatureSettings",
	  "fontKerning",
	  "MozFontKerning",
	  "WebKitFontKerning",
	  "MSFontKerning",
	  "OFontKerning",
	  "fontLanguageOverride",
	  "MozFontLanguageOverride",
	  "WebKitFontLanguageOverride",
	  "MSFontLanguageOverride",
	  "OFontLanguageOverride",
	  "fontSize",
	  "MozFontSize",
	  "WebKitFontSize",
	  "MSFontSize",
	  "OFontSize",
	  "fontSizeAdjust",
	  "MozFontSizeAdjust",
	  "WebKitFontSizeAdjust",
	  "MSFontSizeAdjust",
	  "OFontSizeAdjust",
	  "fontStretch",
	  "MozFontStretch",
	  "WebKitFontStretch",
	  "MSFontStretch",
	  "OFontStretch",
	  "fontStyle",
	  "MozFontStyle",
	  "WebKitFontStyle",
	  "MSFontStyle",
	  "OFontStyle",
	  "fontSynthesis",
	  "MozFontSynthesis",
	  "WebKitFontSynthesis",
	  "MSFontSynthesis",
	  "OFontSynthesis",
	  "fontVariant",
	  "MozFontVariant",
	  "WebKitFontVariant",
	  "MSFontVariant",
	  "OFontVariant",
	  "fontVariantAlternates",
	  "MozFontVariantAlternates",
	  "WebKitFontVariantAlternates",
	  "MSFontVariantAlternates",
	  "OFontVariantAlternates",
	  "fontVariantCaps",
	  "MozFontVariantCaps",
	  "WebKitFontVariantCaps",
	  "MSFontVariantCaps",
	  "OFontVariantCaps",
	  "fontVariantEastAsian",
	  "MozFontVariantEastAsian",
	  "WebKitFontVariantEastAsian",
	  "MSFontVariantEastAsian",
	  "OFontVariantEastAsian",
	  "fontVariantLigatures",
	  "MozFontVariantLigatures",
	  "WebKitFontVariantLigatures",
	  "MSFontVariantLigatures",
	  "OFontVariantLigatures",
	  "fontVariantNumeric",
	  "MozFontVariantNumeric",
	  "WebKitFontVariantNumeric",
	  "MSFontVariantNumeric",
	  "OFontVariantNumeric",
	  "fontVariantPosition",
	  "MozFontVariantPosition",
	  "WebKitFontVariantPosition",
	  "MSFontVariantPosition",
	  "OFontVariantPosition",
	  "fontWeight",
	  "MozFontWeight",
	  "WebKitFontWeight",
	  "MSFontWeight",
	  "OFontWeight",
	  "grad",
	  "MozGrad",
	  "WebKitGrad",
	  "MSGrad",
	  "OGrad",
	  "grid",
	  "MozGrid",
	  "WebKitGrid",
	  "MSGrid",
	  "OGrid",
	  "gridArea",
	  "MozGridArea",
	  "WebKitGridArea",
	  "MSGridArea",
	  "OGridArea",
	  "gridAutoColumns",
	  "MozGridAutoColumns",
	  "WebKitGridAutoColumns",
	  "MSGridAutoColumns",
	  "OGridAutoColumns",
	  "gridAutoFlow",
	  "MozGridAutoFlow",
	  "WebKitGridAutoFlow",
	  "MSGridAutoFlow",
	  "OGridAutoFlow",
	  "gridAutoRows",
	  "MozGridAutoRows",
	  "WebKitGridAutoRows",
	  "MSGridAutoRows",
	  "OGridAutoRows",
	  "gridColumn",
	  "MozGridColumn",
	  "WebKitGridColumn",
	  "MSGridColumn",
	  "OGridColumn",
	  "gridColumnEnd",
	  "MozGridColumnEnd",
	  "WebKitGridColumnEnd",
	  "MSGridColumnEnd",
	  "OGridColumnEnd",
	  "gridColumnGap",
	  "MozGridColumnGap",
	  "WebKitGridColumnGap",
	  "MSGridColumnGap",
	  "OGridColumnGap",
	  "gridColumnStart",
	  "MozGridColumnStart",
	  "WebKitGridColumnStart",
	  "MSGridColumnStart",
	  "OGridColumnStart",
	  "gridGap",
	  "MozGridGap",
	  "WebKitGridGap",
	  "MSGridGap",
	  "OGridGap",
	  "gridRow",
	  "MozGridRow",
	  "WebKitGridRow",
	  "MSGridRow",
	  "OGridRow",
	  "gridRowEnd",
	  "MozGridRowEnd",
	  "WebKitGridRowEnd",
	  "MSGridRowEnd",
	  "OGridRowEnd",
	  "gridRowGap",
	  "MozGridRowGap",
	  "WebKitGridRowGap",
	  "MSGridRowGap",
	  "OGridRowGap",
	  "gridRowStart",
	  "MozGridRowStart",
	  "WebKitGridRowStart",
	  "MSGridRowStart",
	  "OGridRowStart",
	  "gridTemplate",
	  "MozGridTemplate",
	  "WebKitGridTemplate",
	  "MSGridTemplate",
	  "OGridTemplate",
	  "gridTemplateAreas",
	  "MozGridTemplateAreas",
	  "WebKitGridTemplateAreas",
	  "MSGridTemplateAreas",
	  "OGridTemplateAreas",
	  "gridTemplateColumns",
	  "MozGridTemplateColumns",
	  "WebKitGridTemplateColumns",
	  "MSGridTemplateColumns",
	  "OGridTemplateColumns",
	  "gridTemplateRows",
	  "MozGridTemplateRows",
	  "WebKitGridTemplateRows",
	  "MSGridTemplateRows",
	  "OGridTemplateRows",
	  "height",
	  "MozHeight",
	  "WebKitHeight",
	  "MSHeight",
	  "OHeight",
	  "hyphens",
	  "MozHyphens",
	  "WebKitHyphens",
	  "MSHyphens",
	  "OHyphens",
	  "hz",
	  "MozHz",
	  "WebKitHz",
	  "MSHz",
	  "OHz",
	  "imageOrientation",
	  "MozImageOrientation",
	  "WebKitImageOrientation",
	  "MSImageOrientation",
	  "OImageOrientation",
	  "imageRendering",
	  "MozImageRendering",
	  "WebKitImageRendering",
	  "MSImageRendering",
	  "OImageRendering",
	  "imageResolution",
	  "MozImageResolution",
	  "WebKitImageResolution",
	  "MSImageResolution",
	  "OImageResolution",
	  "imeMode",
	  "MozImeMode",
	  "WebKitImeMode",
	  "MSImeMode",
	  "OImeMode",
	  "in",
	  "MozIn",
	  "WebKitIn",
	  "MSIn",
	  "OIn",
	  "inherit",
	  "MozInherit",
	  "WebKitInherit",
	  "MSInherit",
	  "OInherit",
	  "initial",
	  "MozInitial",
	  "WebKitInitial",
	  "MSInitial",
	  "OInitial",
	  "inlineSize",
	  "MozInlineSize",
	  "WebKitInlineSize",
	  "MSInlineSize",
	  "OInlineSize",
	  "isolation",
	  "MozIsolation",
	  "WebKitIsolation",
	  "MSIsolation",
	  "OIsolation",
	  "justifyContent",
	  "MozJustifyContent",
	  "WebKitJustifyContent",
	  "MSJustifyContent",
	  "OJustifyContent",
	  "khz",
	  "MozKhz",
	  "WebKitKhz",
	  "MSKhz",
	  "OKhz",
	  "left",
	  "MozLeft",
	  "WebKitLeft",
	  "MSLeft",
	  "OLeft",
	  "letterSpacing",
	  "MozLetterSpacing",
	  "WebKitLetterSpacing",
	  "MSLetterSpacing",
	  "OLetterSpacing",
	  "lineBreak",
	  "MozLineBreak",
	  "WebKitLineBreak",
	  "MSLineBreak",
	  "OLineBreak",
	  "lineHeight",
	  "MozLineHeight",
	  "WebKitLineHeight",
	  "MSLineHeight",
	  "OLineHeight",
	  "listStyle",
	  "MozListStyle",
	  "WebKitListStyle",
	  "MSListStyle",
	  "OListStyle",
	  "listStyleImage",
	  "MozListStyleImage",
	  "WebKitListStyleImage",
	  "MSListStyleImage",
	  "OListStyleImage",
	  "listStylePosition",
	  "MozListStylePosition",
	  "WebKitListStylePosition",
	  "MSListStylePosition",
	  "OListStylePosition",
	  "listStyleType",
	  "MozListStyleType",
	  "WebKitListStyleType",
	  "MSListStyleType",
	  "OListStyleType",
	  "margin",
	  "MozMargin",
	  "WebKitMargin",
	  "MSMargin",
	  "OMargin",
	  "marginBlockEnd",
	  "MozMarginBlockEnd",
	  "WebKitMarginBlockEnd",
	  "MSMarginBlockEnd",
	  "OMarginBlockEnd",
	  "marginBlockStart",
	  "MozMarginBlockStart",
	  "WebKitMarginBlockStart",
	  "MSMarginBlockStart",
	  "OMarginBlockStart",
	  "marginBottom",
	  "MozMarginBottom",
	  "WebKitMarginBottom",
	  "MSMarginBottom",
	  "OMarginBottom",
	  "marginInlineEnd",
	  "MozMarginInlineEnd",
	  "WebKitMarginInlineEnd",
	  "MSMarginInlineEnd",
	  "OMarginInlineEnd",
	  "marginInlineStart",
	  "MozMarginInlineStart",
	  "WebKitMarginInlineStart",
	  "MSMarginInlineStart",
	  "OMarginInlineStart",
	  "marginLeft",
	  "MozMarginLeft",
	  "WebKitMarginLeft",
	  "MSMarginLeft",
	  "OMarginLeft",
	  "marginRight",
	  "MozMarginRight",
	  "WebKitMarginRight",
	  "MSMarginRight",
	  "OMarginRight",
	  "marginTop",
	  "MozMarginTop",
	  "WebKitMarginTop",
	  "MSMarginTop",
	  "OMarginTop",
	  "mask",
	  "MozMask",
	  "WebKitMask",
	  "MSMask",
	  "OMask",
	  "maskClip",
	  "MozMaskClip",
	  "WebKitMaskClip",
	  "MSMaskClip",
	  "OMaskClip",
	  "maskComposite",
	  "MozMaskComposite",
	  "WebKitMaskComposite",
	  "MSMaskComposite",
	  "OMaskComposite",
	  "maskImage",
	  "MozMaskImage",
	  "WebKitMaskImage",
	  "MSMaskImage",
	  "OMaskImage",
	  "maskMode",
	  "MozMaskMode",
	  "WebKitMaskMode",
	  "MSMaskMode",
	  "OMaskMode",
	  "maskOrigin",
	  "MozMaskOrigin",
	  "WebKitMaskOrigin",
	  "MSMaskOrigin",
	  "OMaskOrigin",
	  "maskPosition",
	  "MozMaskPosition",
	  "WebKitMaskPosition",
	  "MSMaskPosition",
	  "OMaskPosition",
	  "maskRepeat",
	  "MozMaskRepeat",
	  "WebKitMaskRepeat",
	  "MSMaskRepeat",
	  "OMaskRepeat",
	  "maskSize",
	  "MozMaskSize",
	  "WebKitMaskSize",
	  "MSMaskSize",
	  "OMaskSize",
	  "maskType",
	  "MozMaskType",
	  "WebKitMaskType",
	  "MSMaskType",
	  "OMaskType",
	  "maxBlockSize",
	  "MozMaxBlockSize",
	  "WebKitMaxBlockSize",
	  "MSMaxBlockSize",
	  "OMaxBlockSize",
	  "maxHeight",
	  "MozMaxHeight",
	  "WebKitMaxHeight",
	  "MSMaxHeight",
	  "OMaxHeight",
	  "maxInlineSize",
	  "MozMaxInlineSize",
	  "WebKitMaxInlineSize",
	  "MSMaxInlineSize",
	  "OMaxInlineSize",
	  "maxWidth",
	  "MozMaxWidth",
	  "WebKitMaxWidth",
	  "MSMaxWidth",
	  "OMaxWidth",
	  "minBlockSize",
	  "MozMinBlockSize",
	  "WebKitMinBlockSize",
	  "MSMinBlockSize",
	  "OMinBlockSize",
	  "minHeight",
	  "MozMinHeight",
	  "WebKitMinHeight",
	  "MSMinHeight",
	  "OMinHeight",
	  "minInlineSize",
	  "MozMinInlineSize",
	  "WebKitMinInlineSize",
	  "MSMinInlineSize",
	  "OMinInlineSize",
	  "minWidth",
	  "MozMinWidth",
	  "WebKitMinWidth",
	  "MSMinWidth",
	  "OMinWidth",
	  "mixBlendMode",
	  "MozMixBlendMode",
	  "WebKitMixBlendMode",
	  "MSMixBlendMode",
	  "OMixBlendMode",
	  "mm",
	  "MozMm",
	  "WebKitMm",
	  "MSMm",
	  "OMm",
	  "ms",
	  "MozMs",
	  "WebKitMs",
	  "MSMs",
	  "OMs",
	  "objectFit",
	  "MozObjectFit",
	  "WebKitObjectFit",
	  "MSObjectFit",
	  "OObjectFit",
	  "objectPosition",
	  "MozObjectPosition",
	  "WebKitObjectPosition",
	  "MSObjectPosition",
	  "OObjectPosition",
	  "offsetBlockEnd",
	  "MozOffsetBlockEnd",
	  "WebKitOffsetBlockEnd",
	  "MSOffsetBlockEnd",
	  "OOffsetBlockEnd",
	  "offsetBlockStart",
	  "MozOffsetBlockStart",
	  "WebKitOffsetBlockStart",
	  "MSOffsetBlockStart",
	  "OOffsetBlockStart",
	  "offsetInlineEnd",
	  "MozOffsetInlineEnd",
	  "WebKitOffsetInlineEnd",
	  "MSOffsetInlineEnd",
	  "OOffsetInlineEnd",
	  "offsetInlineStart",
	  "MozOffsetInlineStart",
	  "WebKitOffsetInlineStart",
	  "MSOffsetInlineStart",
	  "OOffsetInlineStart",
	  "opacity",
	  "MozOpacity",
	  "WebKitOpacity",
	  "MSOpacity",
	  "OOpacity",
	  "order",
	  "MozOrder",
	  "WebKitOrder",
	  "MSOrder",
	  "OOrder",
	  "orphans",
	  "MozOrphans",
	  "WebKitOrphans",
	  "MSOrphans",
	  "OOrphans",
	  "outline",
	  "MozOutline",
	  "WebKitOutline",
	  "MSOutline",
	  "OOutline",
	  "outlineColor",
	  "MozOutlineColor",
	  "WebKitOutlineColor",
	  "MSOutlineColor",
	  "OOutlineColor",
	  "outlineOffset",
	  "MozOutlineOffset",
	  "WebKitOutlineOffset",
	  "MSOutlineOffset",
	  "OOutlineOffset",
	  "outlineStyle",
	  "MozOutlineStyle",
	  "WebKitOutlineStyle",
	  "MSOutlineStyle",
	  "OOutlineStyle",
	  "outlineWidth",
	  "MozOutlineWidth",
	  "WebKitOutlineWidth",
	  "MSOutlineWidth",
	  "OOutlineWidth",
	  "overflow",
	  "MozOverflow",
	  "WebKitOverflow",
	  "MSOverflow",
	  "OOverflow",
	  "overflowWrap",
	  "MozOverflowWrap",
	  "WebKitOverflowWrap",
	  "MSOverflowWrap",
	  "OOverflowWrap",
	  "overflowX",
	  "MozOverflowX",
	  "WebKitOverflowX",
	  "MSOverflowX",
	  "OOverflowX",
	  "overflowY",
	  "MozOverflowY",
	  "WebKitOverflowY",
	  "MSOverflowY",
	  "OOverflowY",
	  "padding",
	  "MozPadding",
	  "WebKitPadding",
	  "MSPadding",
	  "OPadding",
	  "paddingBlockEnd",
	  "MozPaddingBlockEnd",
	  "WebKitPaddingBlockEnd",
	  "MSPaddingBlockEnd",
	  "OPaddingBlockEnd",
	  "paddingBlockStart",
	  "MozPaddingBlockStart",
	  "WebKitPaddingBlockStart",
	  "MSPaddingBlockStart",
	  "OPaddingBlockStart",
	  "paddingBottom",
	  "MozPaddingBottom",
	  "WebKitPaddingBottom",
	  "MSPaddingBottom",
	  "OPaddingBottom",
	  "paddingInlineEnd",
	  "MozPaddingInlineEnd",
	  "WebKitPaddingInlineEnd",
	  "MSPaddingInlineEnd",
	  "OPaddingInlineEnd",
	  "paddingInlineStart",
	  "MozPaddingInlineStart",
	  "WebKitPaddingInlineStart",
	  "MSPaddingInlineStart",
	  "OPaddingInlineStart",
	  "paddingLeft",
	  "MozPaddingLeft",
	  "WebKitPaddingLeft",
	  "MSPaddingLeft",
	  "OPaddingLeft",
	  "paddingRight",
	  "MozPaddingRight",
	  "WebKitPaddingRight",
	  "MSPaddingRight",
	  "OPaddingRight",
	  "paddingTop",
	  "MozPaddingTop",
	  "WebKitPaddingTop",
	  "MSPaddingTop",
	  "OPaddingTop",
	  "pageBreakAfter",
	  "MozPageBreakAfter",
	  "WebKitPageBreakAfter",
	  "MSPageBreakAfter",
	  "OPageBreakAfter",
	  "pageBreakBefore",
	  "MozPageBreakBefore",
	  "WebKitPageBreakBefore",
	  "MSPageBreakBefore",
	  "OPageBreakBefore",
	  "pageBreakInside",
	  "MozPageBreakInside",
	  "WebKitPageBreakInside",
	  "MSPageBreakInside",
	  "OPageBreakInside",
	  "pc",
	  "MozPc",
	  "WebKitPc",
	  "MSPc",
	  "OPc",
	  "perspective",
	  "MozPerspective",
	  "WebKitPerspective",
	  "MSPerspective",
	  "OPerspective",
	  "perspectiveOrigin",
	  "MozPerspectiveOrigin",
	  "WebKitPerspectiveOrigin",
	  "MSPerspectiveOrigin",
	  "OPerspectiveOrigin",
	  "pointerEvents",
	  "MozPointerEvents",
	  "WebKitPointerEvents",
	  "MSPointerEvents",
	  "OPointerEvents",
	  "position",
	  "MozPosition",
	  "WebKitPosition",
	  "MSPosition",
	  "OPosition",
	  "pt",
	  "MozPt",
	  "WebKitPt",
	  "MSPt",
	  "OPt",
	  "px",
	  "MozPx",
	  "WebKitPx",
	  "MSPx",
	  "OPx",
	  "q",
	  "MozQ",
	  "WebKitQ",
	  "MSQ",
	  "OQ",
	  "quotes",
	  "MozQuotes",
	  "WebKitQuotes",
	  "MSQuotes",
	  "OQuotes",
	  "rad",
	  "MozRad",
	  "WebKitRad",
	  "MSRad",
	  "ORad",
	  "rem",
	  "MozRem",
	  "WebKitRem",
	  "MSRem",
	  "ORem",
	  "resize",
	  "MozResize",
	  "WebKitResize",
	  "MSResize",
	  "OResize",
	  "revert",
	  "MozRevert",
	  "WebKitRevert",
	  "MSRevert",
	  "ORevert",
	  "right",
	  "MozRight",
	  "WebKitRight",
	  "MSRight",
	  "ORight",
	  "rubyAlign",
	  "MozRubyAlign",
	  "WebKitRubyAlign",
	  "MSRubyAlign",
	  "ORubyAlign",
	  "rubyMerge",
	  "MozRubyMerge",
	  "WebKitRubyMerge",
	  "MSRubyMerge",
	  "ORubyMerge",
	  "rubyPosition",
	  "MozRubyPosition",
	  "WebKitRubyPosition",
	  "MSRubyPosition",
	  "ORubyPosition",
	  "s",
	  "MozS",
	  "WebKitS",
	  "MSS",
	  "OS",
	  "scrollBehavior",
	  "MozScrollBehavior",
	  "WebKitScrollBehavior",
	  "MSScrollBehavior",
	  "OScrollBehavior",
	  "scrollSnapCoordinate",
	  "MozScrollSnapCoordinate",
	  "WebKitScrollSnapCoordinate",
	  "MSScrollSnapCoordinate",
	  "OScrollSnapCoordinate",
	  "scrollSnapDestination",
	  "MozScrollSnapDestination",
	  "WebKitScrollSnapDestination",
	  "MSScrollSnapDestination",
	  "OScrollSnapDestination",
	  "scrollSnapType",
	  "MozScrollSnapType",
	  "WebKitScrollSnapType",
	  "MSScrollSnapType",
	  "OScrollSnapType",
	  "shapeImageThreshold",
	  "MozShapeImageThreshold",
	  "WebKitShapeImageThreshold",
	  "MSShapeImageThreshold",
	  "OShapeImageThreshold",
	  "shapeMargin",
	  "MozShapeMargin",
	  "WebKitShapeMargin",
	  "MSShapeMargin",
	  "OShapeMargin",
	  "shapeOutside",
	  "MozShapeOutside",
	  "WebKitShapeOutside",
	  "MSShapeOutside",
	  "OShapeOutside",
	  "tabSize",
	  "MozTabSize",
	  "WebKitTabSize",
	  "MSTabSize",
	  "OTabSize",
	  "tableLayout",
	  "MozTableLayout",
	  "WebKitTableLayout",
	  "MSTableLayout",
	  "OTableLayout",
	  "textAlign",
	  "MozTextAlign",
	  "WebKitTextAlign",
	  "MSTextAlign",
	  "OTextAlign",
	  "textAlignLast",
	  "MozTextAlignLast",
	  "WebKitTextAlignLast",
	  "MSTextAlignLast",
	  "OTextAlignLast",
	  "textCombineUpright",
	  "MozTextCombineUpright",
	  "WebKitTextCombineUpright",
	  "MSTextCombineUpright",
	  "OTextCombineUpright",
	  "textDecoration",
	  "MozTextDecoration",
	  "WebKitTextDecoration",
	  "MSTextDecoration",
	  "OTextDecoration",
	  "textDecorationColor",
	  "MozTextDecorationColor",
	  "WebKitTextDecorationColor",
	  "MSTextDecorationColor",
	  "OTextDecorationColor",
	  "textDecorationLine",
	  "MozTextDecorationLine",
	  "WebKitTextDecorationLine",
	  "MSTextDecorationLine",
	  "OTextDecorationLine",
	  "textDecorationStyle",
	  "MozTextDecorationStyle",
	  "WebKitTextDecorationStyle",
	  "MSTextDecorationStyle",
	  "OTextDecorationStyle",
	  "textEmphasis",
	  "MozTextEmphasis",
	  "WebKitTextEmphasis",
	  "MSTextEmphasis",
	  "OTextEmphasis",
	  "textEmphasisColor",
	  "MozTextEmphasisColor",
	  "WebKitTextEmphasisColor",
	  "MSTextEmphasisColor",
	  "OTextEmphasisColor",
	  "textEmphasisPosition",
	  "MozTextEmphasisPosition",
	  "WebKitTextEmphasisPosition",
	  "MSTextEmphasisPosition",
	  "OTextEmphasisPosition",
	  "textEmphasisStyle",
	  "MozTextEmphasisStyle",
	  "WebKitTextEmphasisStyle",
	  "MSTextEmphasisStyle",
	  "OTextEmphasisStyle",
	  "textIndent",
	  "MozTextIndent",
	  "WebKitTextIndent",
	  "MSTextIndent",
	  "OTextIndent",
	  "textOrientation",
	  "MozTextOrientation",
	  "WebKitTextOrientation",
	  "MSTextOrientation",
	  "OTextOrientation",
	  "textOverflow",
	  "MozTextOverflow",
	  "WebKitTextOverflow",
	  "MSTextOverflow",
	  "OTextOverflow",
	  "textRendering",
	  "MozTextRendering",
	  "WebKitTextRendering",
	  "MSTextRendering",
	  "OTextRendering",
	  "textShadow",
	  "MozTextShadow",
	  "WebKitTextShadow",
	  "MSTextShadow",
	  "OTextShadow",
	  "textTransform",
	  "MozTextTransform",
	  "WebKitTextTransform",
	  "MSTextTransform",
	  "OTextTransform",
	  "textUnderlinePosition",
	  "MozTextUnderlinePosition",
	  "WebKitTextUnderlinePosition",
	  "MSTextUnderlinePosition",
	  "OTextUnderlinePosition",
	  "top",
	  "MozTop",
	  "WebKitTop",
	  "MSTop",
	  "OTop",
	  "touchAction",
	  "MozTouchAction",
	  "WebKitTouchAction",
	  "MSTouchAction",
	  "OTouchAction",
	  "transform",
	  "MozTransform",
	  "WebKitTransform",
	  "MSTransform",
	  "OTransform",
	  "transformBox",
	  "MozTransformBox",
	  "WebKitTransformBox",
	  "MSTransformBox",
	  "OTransformBox",
	  "transformOrigin",
	  "MozTransformOrigin",
	  "WebKitTransformOrigin",
	  "MSTransformOrigin",
	  "OTransformOrigin",
	  "transformStyle",
	  "MozTransformStyle",
	  "WebKitTransformStyle",
	  "MSTransformStyle",
	  "OTransformStyle",
	  "transition",
	  "MozTransition",
	  "WebKitTransition",
	  "MSTransition",
	  "OTransition",
	  "transitionDelay",
	  "MozTransitionDelay",
	  "WebKitTransitionDelay",
	  "MSTransitionDelay",
	  "OTransitionDelay",
	  "transitionDuration",
	  "MozTransitionDuration",
	  "WebKitTransitionDuration",
	  "MSTransitionDuration",
	  "OTransitionDuration",
	  "transitionProperty",
	  "MozTransitionProperty",
	  "WebKitTransitionProperty",
	  "MSTransitionProperty",
	  "OTransitionProperty",
	  "transitionTimingFunction",
	  "MozTransitionTimingFunction",
	  "WebKitTransitionTimingFunction",
	  "MSTransitionTimingFunction",
	  "OTransitionTimingFunction",
	  "turn",
	  "MozTurn",
	  "WebKitTurn",
	  "MSTurn",
	  "OTurn",
	  "unicodeBidi",
	  "MozUnicodeBidi",
	  "WebKitUnicodeBidi",
	  "MSUnicodeBidi",
	  "OUnicodeBidi",
	  "unset",
	  "MozUnset",
	  "WebKitUnset",
	  "MSUnset",
	  "OUnset",
	  "verticalAlign",
	  "MozVerticalAlign",
	  "WebKitVerticalAlign",
	  "MSVerticalAlign",
	  "OVerticalAlign",
	  "vh",
	  "MozVh",
	  "WebKitVh",
	  "MSVh",
	  "OVh",
	  "visibility",
	  "MozVisibility",
	  "WebKitVisibility",
	  "MSVisibility",
	  "OVisibility",
	  "vmax",
	  "MozVmax",
	  "WebKitVmax",
	  "MSVmax",
	  "OVmax",
	  "vmin",
	  "MozVmin",
	  "WebKitVmin",
	  "MSVmin",
	  "OVmin",
	  "vw",
	  "MozVw",
	  "WebKitVw",
	  "MSVw",
	  "OVw",
	  "whiteSpace",
	  "MozWhiteSpace",
	  "WebKitWhiteSpace",
	  "MSWhiteSpace",
	  "OWhiteSpace",
	  "widows",
	  "MozWidows",
	  "WebKitWidows",
	  "MSWidows",
	  "OWidows",
	  "width",
	  "MozWidth",
	  "WebKitWidth",
	  "MSWidth",
	  "OWidth",
	  "willChange",
	  "MozWillChange",
	  "WebKitWillChange",
	  "MSWillChange",
	  "OWillChange",
	  "wordBreak",
	  "MozWordBreak",
	  "WebKitWordBreak",
	  "MSWordBreak",
	  "OWordBreak",
	  "wordSpacing",
	  "MozWordSpacing",
	  "WebKitWordSpacing",
	  "MSWordSpacing",
	  "OWordSpacing",
	  "wordWrap",
	  "MozWordWrap",
	  "WebKitWordWrap",
	  "MSWordWrap",
	  "OWordWrap",
	  "writingMode",
	  "MozWritingMode",
	  "WebKitWritingMode",
	  "MSWritingMode",
	  "OWritingMode",
	  "zIndex",
	  "MozZIndex",
	  "WebKitZIndex",
	  "MSZIndex",
	  "OZIndex",
	  "fontSize",
	  "MozFontSize",
	  "WebKitFontSize",
	  "MSFontSize",
	  "OFontSize"
	]


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);
	var svgToImage = __webpack_require__(212);
	var xhr = __webpack_require__(188);

	/**
	 * @fileoverview
	 * A component for rendering Scratch costume URLs to canvases.
	 * Use for sprite library, costume library, sprite selector, etc.
	 * Props include width, height, and direction (direction in Scratch value).
	 */

	var CostumeCanvas = function (_React$Component) {
	    _inherits(CostumeCanvas, _React$Component);

	    function CostumeCanvas() {
	        _classCallCheck(this, CostumeCanvas);

	        return _possibleConstructorReturn(this, (CostumeCanvas.__proto__ || Object.getPrototypeOf(CostumeCanvas)).apply(this, arguments));
	    }

	    _createClass(CostumeCanvas, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.load();
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(prevProps) {
	            if (prevProps.url !== this.props.url) {
	                this.load();
	            } else if (prevProps.width !== this.props.width || prevProps.height !== this.props.height || prevProps.direction !== this.props.direction) {
	                this.draw();
	            }
	        }
	    }, {
	        key: 'draw',
	        value: function draw() {
	            if (!this.canvas) {
	                return;
	            }

	            // Draw the costume to the rendered canvas.
	            var img = this.img;
	            var context = this.canvas.getContext('2d');

	            // Scale to fit.
	            var scale = void 0;

	            // Choose the larger dimension to scale by.
	            if (img.width > img.height) {
	                scale = this.canvas.width / img.width;
	            } else {
	                scale = this.canvas.height / img.height;
	            }

	            // Rotate by the Scratch-value direction.
	            var angle = (-90 + this.props.direction) * Math.PI / 180;

	            // Rotation origin point will be center of the canvas.
	            var contextTranslateX = this.canvas.width / 2;
	            var contextTranslateY = this.canvas.height / 2;

	            // First, clear the canvas.
	            context.clearRect(0, 0, this.canvas.width, this.canvas.height);

	            // Translate the context to the center of the canvas,
	            // then rotate canvas drawing by `angle`.
	            context.translate(contextTranslateX, contextTranslateY);
	            context.rotate(angle);
	            context.drawImage(img, 0, 0, img.width, img.height, -(scale * img.width / 2), -(scale * img.height / 2), scale * img.width, scale * img.height);

	            // Reset the canvas rotation and translation to 0, (0, 0).
	            context.rotate(-angle);
	            context.translate(-contextTranslateX, -contextTranslateY);
	        }
	    }, {
	        key: 'load',
	        value: function load() {
	            var _this2 = this;

	            // Draw the icon on our canvas.
	            var url = this.props.url;
	            if (url.indexOf('.svg') > -1) {
	                // Vector graphics: need to download with XDR and rasterize.
	                // Queue request asynchronously.
	                setTimeout(function () {
	                    xhr.get({
	                        useXDR: true,
	                        url: url
	                    }, function (err, response, body) {
	                        if (!err) {
	                            svgToImage(body, function (svgErr, img) {
	                                if (!svgErr) {
	                                    _this2.img = img;
	                                    _this2.draw();
	                                }
	                            });
	                        }
	                    });
	                }, 0);
	            } else {
	                (function () {
	                    // Raster graphics: create Image and draw it.
	                    var img = new Image();
	                    img.src = url;
	                    img.onload = function () {
	                        _this2.img = img;
	                        _this2.draw();
	                    };
	                })();
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement('canvas', {
	                height: this.props.height,
	                width: this.props.width,
	                ref: this._getCanvas // eslint-disable-line react/jsx-sort-props
	            });
	        }
	    }]);

	    return CostumeCanvas;
	}(React.Component);

	CostumeCanvas.defaultProps = {
	    width: 100,
	    height: 100,
	    direction: 90
	};

	CostumeCanvas.propTypes = {
	    direction: React.PropTypes.number,
	    height: React.PropTypes.number,
	    url: React.PropTypes.string,
	    width: React.PropTypes.number
	};

	module.exports = CostumeCanvas;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var loadImage = __webpack_require__(213)
	var noop = function () {}

	module.exports = svgToImage
	function svgToImage (svg, opt, cb) {
	  if (typeof opt === 'function') {
	    cb = opt
	    opt = {}
	  }
	  cb = cb || noop
	  opt = opt || {}

	  if (typeof window === 'undefined') {
	    return bail('window global is undefined; not in a browser')
	  }

	  var DOMURL = getURL()
	  if (!DOMURL ||
	    typeof DOMURL.createObjectURL !== 'function' ||
	    typeof DOMURL.revokeObjectURL !== 'function') {
	    return bail('browser does not support URL.createObjectURL')
	  }

	  if (typeof window.Blob === 'undefined') {
	    return bail('browser does not support Blob constructor')
	  }

	  if (!Array.isArray(svg)) {
	    svg = [ svg ]
	  }

	  var blob
	  try {
	    blob = new window.Blob(svg, {
	      type: 'image/svg+xml;charset=utf-8'
	    })
	  } catch (e) {
	    return bail(e)
	  }

	  var url = DOMURL.createObjectURL(blob)
	  loadImage(url, opt, function (err, img) {
	    DOMURL.revokeObjectURL(url)
	    if (err) {
	      // try again for Safari 8.0, using simple encodeURIComponent
	      // this will fail with DOM content but at least it works with SVG
	      var url2 = 'data:image/svg+xml,' + encodeURIComponent(svg.join(''))
	      return loadImage(url2, opt, cb)
	    }

	    cb(err, img)
	  })

	  function bail (msg) {
	    process.nextTick(function () {
	      cb(new Error(msg))
	    })
	  }
	}

	function getURL () {
	  return window.URL ||
	  window.webkitURL ||
	  window.mozURL ||
	  window.msURL
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 213 */
/***/ function(module, exports) {

	module.exports = loadImage;
	function loadImage (src, opt, callback) {
	  if (typeof opt === 'function') {
	    callback = opt;
	    opt = null;
	  }

	  var el = document.createElement('img');
	  var locked;

	  el.onload = function onLoaded () {
	    if (locked) return;
	    locked = true;

	    if (callback) callback(undefined, el);
	  };

	  el.onerror = function onError () {
	    if (locked) return;
	    locked = true;

	    if (callback) callback(new Error('Unable to load "' + src + '"'), el);
	  };

	  if (opt && opt.crossOrigin) {
	    el.crossOrigin = opt.crossOrigin;
	  }

	  el.src = src;

	  return el;
	}


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var React = __webpack_require__(2);
	var ReactModal = __webpack_require__(215);
	var stylePropType = __webpack_require__(209);

	var ModalComponent = function (_React$Component) {
	    _inherits(ModalComponent, _React$Component);

	    function ModalComponent() {
	        _classCallCheck(this, ModalComponent);

	        return _possibleConstructorReturn(this, (ModalComponent.__proto__ || Object.getPrototypeOf(ModalComponent)).apply(this, arguments));
	    }

	    _createClass(ModalComponent, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;

	            return React.createElement(
	                ReactModal,
	                {
	                    isOpen: this.props.visible,
	                    ref: function ref(m) {
	                        return _this2.modal = m;
	                    },
	                    style: this.props.modalStyle,
	                    onRequestClose: this.props.onRequestClose
	                },
	                React.createElement(
	                    'div',
	                    {
	                        style: this.props.closeButtonStyle,
	                        onClick: this.props.onRequestClose
	                    },
	                    'x'
	                ),
	                this.props.children
	            );
	        }
	    }]);

	    return ModalComponent;
	}(React.Component);

	var modalStyle = {
	    overlay: {
	        zIndex: 1000,
	        backgroundColor: 'rgba(0, 0, 0, .75)'
	    },
	    content: {
	        position: 'absolute',
	        overflow: 'visible',
	        borderRadius: '6px',
	        padding: 0,
	        top: '5%',
	        bottom: '5%',
	        left: '5%',
	        right: '5%',
	        background: '#fcfcfc'
	    }
	};

	var closeButtonStyle = {
	    color: 'rgb(255, 255, 255)',
	    background: 'rgb(50, 50, 50)',
	    borderRadius: '15px',
	    width: '30px',
	    height: '25px',
	    textAlign: 'center',
	    paddingTop: '5px',
	    position: 'absolute',
	    right: '3px',
	    top: '3px',
	    cursor: 'pointer'
	};

	ModalComponent.defaultProps = {
	    modalStyle: modalStyle,
	    closeButtonStyle: closeButtonStyle
	};

	ModalComponent.propTypes = {
	    children: React.PropTypes.node,
	    closeButtonStyle: stylePropType,
	    modalStyle: stylePropType,
	    onRequestClose: React.PropTypes.func,
	    visible: React.PropTypes.bool
	};

	module.exports = ModalComponent;

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(216);



/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(2);
	var ReactDOM = __webpack_require__(35);
	var ExecutionEnvironment = __webpack_require__(217);
	var ModalPortal = React.createFactory(__webpack_require__(218));
	var ariaAppHider = __webpack_require__(233);
	var elementClass = __webpack_require__(234);
	var renderSubtreeIntoContainer = __webpack_require__(35).unstable_renderSubtreeIntoContainer;
	var Assign = __webpack_require__(222);

	var SafeHTMLElement = ExecutionEnvironment.canUseDOM ? window.HTMLElement : {};
	var AppElement = ExecutionEnvironment.canUseDOM ? document.body : {appendChild: function() {}};

	var Modal = React.createClass({

	  displayName: 'Modal',
	  statics: {
	    setAppElement: function(element) {
	        AppElement = ariaAppHider.setElement(element);
	    },
	    injectCSS: function() {
	      "production" !== process.env.NODE_ENV
	        && console.warn('React-Modal: injectCSS has been deprecated ' +
	                        'and no longer has any effect. It will be removed in a later version');
	    }
	  },

	  propTypes: {
	    isOpen: React.PropTypes.bool.isRequired,
	    style: React.PropTypes.shape({
	      content: React.PropTypes.object,
	      overlay: React.PropTypes.object
	    }),
	    portalClassName: React.PropTypes.string,
	    appElement: React.PropTypes.instanceOf(SafeHTMLElement),
	    onAfterOpen: React.PropTypes.func,
	    onRequestClose: React.PropTypes.func,
	    closeTimeoutMS: React.PropTypes.number,
	    ariaHideApp: React.PropTypes.bool,
	    shouldCloseOnOverlayClick: React.PropTypes.bool,
	    role: React.PropTypes.string
	  },

	  getDefaultProps: function () {
	    return {
	      isOpen: false,
	      portalClassName: 'ReactModalPortal',
	      ariaHideApp: true,
	      closeTimeoutMS: 0,
	      shouldCloseOnOverlayClick: true
	    };
	  },

	  componentDidMount: function() {
	    this.node = document.createElement('div');
	    this.node.className = this.props.portalClassName;
	    document.body.appendChild(this.node);
	    this.renderPortal(this.props);
	  },

	  componentWillReceiveProps: function(newProps) {
	    this.renderPortal(newProps);
	  },

	  componentWillUnmount: function() {
	    ReactDOM.unmountComponentAtNode(this.node);
	    document.body.removeChild(this.node);
	    elementClass(document.body).remove('ReactModal__Body--open');
	  },

	  renderPortal: function(props) {
	    if (props.isOpen) {
	      elementClass(document.body).add('ReactModal__Body--open');
	    } else {
	      elementClass(document.body).remove('ReactModal__Body--open');
	    }

	    if (props.ariaHideApp) {
	      ariaAppHider.toggle(props.isOpen, props.appElement);
	    }

	    this.portal = renderSubtreeIntoContainer(this, ModalPortal(Assign({}, props, {defaultStyles: Modal.defaultStyles})), this.node);
	  },

	  render: function () {
	    return React.DOM.noscript();
	  }
	});

	Modal.defaultStyles = {
	  overlay: {
	    position        : 'fixed',
	    top             : 0,
	    left            : 0,
	    right           : 0,
	    bottom          : 0,
	    backgroundColor : 'rgba(255, 255, 255, 0.75)'
	  },
	  content: {
	    position                : 'absolute',
	    top                     : '40px',
	    left                    : '40px',
	    right                   : '40px',
	    bottom                  : '40px',
	    border                  : '1px solid #ccc',
	    background              : '#fff',
	    overflow                : 'auto',
	    WebkitOverflowScrolling : 'touch',
	    borderRadius            : '4px',
	    outline                 : 'none',
	    padding                 : '20px'
	  }
	}

	module.exports = Modal

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/

	(function () {
		'use strict';

		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);

		var ExecutionEnvironment = {

			canUseDOM: canUseDOM,

			canUseWorkers: typeof Worker !== 'undefined',

			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),

			canUseViewport: canUseDOM && !!window.screen

		};

		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}

	}());


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var React = __webpack_require__(2);
	var div = React.DOM.div;
	var focusManager = __webpack_require__(219);
	var scopeTab = __webpack_require__(221);
	var Assign = __webpack_require__(222);

	// so that our CSS is statically analyzable
	var CLASS_NAMES = {
	  overlay: {
	    base: 'ReactModal__Overlay',
	    afterOpen: 'ReactModal__Overlay--after-open',
	    beforeClose: 'ReactModal__Overlay--before-close'
	  },
	  content: {
	    base: 'ReactModal__Content',
	    afterOpen: 'ReactModal__Content--after-open',
	    beforeClose: 'ReactModal__Content--before-close'
	  }
	};

	var ModalPortal = module.exports = React.createClass({

	  displayName: 'ModalPortal',
	  shouldClose: null,

	  getDefaultProps: function() {
	    return {
	      style: {
	        overlay: {},
	        content: {}
	      }
	    };
	  },

	  getInitialState: function() {
	    return {
	      afterOpen: false,
	      beforeClose: false
	    };
	  },

	  componentDidMount: function() {
	    // Focus needs to be set when mounting and already open
	    if (this.props.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    }
	  },

	  componentWillUnmount: function() {
	    clearTimeout(this.closeTimer);
	  },

	  componentWillReceiveProps: function(newProps) {
	    // Focus only needs to be set once when the modal is being opened
	    if (!this.props.isOpen && newProps.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    } else if (this.props.isOpen && !newProps.isOpen) {
	      this.close();
	    }
	  },

	  componentDidUpdate: function () {
	    if (this.focusAfterRender) {
	      this.focusContent();
	      this.setFocusAfterRender(false);
	    }
	  },

	  setFocusAfterRender: function (focus) {
	    this.focusAfterRender = focus;
	  },

	  open: function() {
	    if (this.state.afterOpen && this.state.beforeClose) {
	      clearTimeout(this.closeTimer);
	      this.setState({ beforeClose: false });
	    } else {
	      focusManager.setupScopedFocus(this.node);
	      focusManager.markForFocusLater();
	      this.setState({isOpen: true}, function() {
	        this.setState({afterOpen: true});

	        if (this.props.isOpen && this.props.onAfterOpen) {
	          this.props.onAfterOpen();
	        }
	      }.bind(this));
	    }
	  },

	  close: function() {
	    if (!this.ownerHandlesClose())
	      return;
	    if (this.props.closeTimeoutMS > 0)
	      this.closeWithTimeout();
	    else
	      this.closeWithoutTimeout();
	  },

	  focusContent: function() {
	    // Don't steal focus from inner elements
	    if (!this.contentHasFocus()) {
	      this.refs.content.focus();
	    }
	  },

	  closeWithTimeout: function() {
	    this.setState({beforeClose: true}, function() {
	      this.closeTimer = setTimeout(this.closeWithoutTimeout, this.props.closeTimeoutMS);
	    }.bind(this));
	  },

	  closeWithoutTimeout: function() {
	    this.setState({
	      beforeClose: false,
	      isOpen: false,
	      afterOpen: false,
	    }, this.afterClose);
	  },

	  afterClose: function() {
	    focusManager.returnFocus();
	    focusManager.teardownScopedFocus();
	  },

	  handleKeyDown: function(event) {
	    if (event.keyCode == 9 /*tab*/) scopeTab(this.refs.content, event);
	    if (event.keyCode == 27 /*esc*/) {
	      event.preventDefault();
	      this.requestClose(event);
	    }
	  },

	  handleOverlayMouseDown: function(event) {
	    if (this.shouldClose === null) {
	      this.shouldClose = true;
	    }
	  },

	  handleOverlayMouseUp: function(event) {
	    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {
	      if (this.ownerHandlesClose())
	        this.requestClose(event);
	      else
	        this.focusContent();
	    }
	    this.shouldClose = null;
	  },

	  handleContentMouseDown: function(event) {
	    this.shouldClose = false;
	  },

	  handleContentMouseUp: function(event) {
	    this.shouldClose = false;
	  },

	  requestClose: function(event) {
	    if (this.ownerHandlesClose())
	      this.props.onRequestClose(event);
	  },

	  ownerHandlesClose: function() {
	    return this.props.onRequestClose;
	  },

	  shouldBeClosed: function() {
	    return !this.props.isOpen && !this.state.beforeClose;
	  },

	  contentHasFocus: function() {
	    return document.activeElement === this.refs.content || this.refs.content.contains(document.activeElement);
	  },

	  buildClassName: function(which, additional) {
	    var className = CLASS_NAMES[which].base;
	    if (this.state.afterOpen)
	      className += ' '+CLASS_NAMES[which].afterOpen;
	    if (this.state.beforeClose)
	      className += ' '+CLASS_NAMES[which].beforeClose;
	    return additional ? className + ' ' + additional : className;
	  },

	  render: function() {
	    var contentStyles = (this.props.className) ? {} : this.props.defaultStyles.content;
	    var overlayStyles = (this.props.overlayClassName) ? {} : this.props.defaultStyles.overlay;

	    return this.shouldBeClosed() ? div() : (
	      div({
	        ref: "overlay",
	        className: this.buildClassName('overlay', this.props.overlayClassName),
	        style: Assign({}, overlayStyles, this.props.style.overlay || {}),
	        onMouseDown: this.handleOverlayMouseDown,
	        onMouseUp: this.handleOverlayMouseUp
	      },
	        div({
	          ref: "content",
	          style: Assign({}, contentStyles, this.props.style.content || {}),
	          className: this.buildClassName('content', this.props.className),
	          tabIndex: "-1",
	          onKeyDown: this.handleKeyDown,
	          onMouseDown: this.handleContentMouseDown,
	          onMouseUp: this.handleContentMouseUp,
	          role: this.props.role
	        },
	          this.props.children
	        )
	      )
	    );
	  }
	});


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(220);
	var modalElement = null;
	var focusLaterElement = null;
	var needToFocus = false;

	function handleBlur(event) {
	  needToFocus = true;
	}

	function handleFocus(event) {
	  if (needToFocus) {
	    needToFocus = false;
	    if (!modalElement) {
	      return;
	    }
	    // need to see how jQuery shims document.on('focusin') so we don't need the
	    // setTimeout, firefox doesn't support focusin, if it did, we could focus
	    // the element outside of a setTimeout. Side-effect of this implementation 
	    // is that the document.body gets focus, and then we focus our element right 
	    // after, seems fine.
	    setTimeout(function() {
	      if (modalElement.contains(document.activeElement))
	        return;
	      var el = (findTabbable(modalElement)[0] || modalElement);
	      el.focus();
	    }, 0);
	  }
	}

	exports.markForFocusLater = function() {
	  focusLaterElement = document.activeElement;
	};

	exports.returnFocus = function() {
	  try {
	    focusLaterElement.focus();
	  }
	  catch (e) {
	    console.warn('You tried to return focus to '+focusLaterElement+' but it is not in the DOM anymore');
	  }
	  focusLaterElement = null;
	};

	exports.setupScopedFocus = function(element) {
	  modalElement = element;

	  if (window.addEventListener) {
	    window.addEventListener('blur', handleBlur, false);
	    document.addEventListener('focus', handleFocus, true);
	  } else {
	    window.attachEvent('onBlur', handleBlur);
	    document.attachEvent('onFocus', handleFocus);
	  }
	};

	exports.teardownScopedFocus = function() {
	  modalElement = null;

	  if (window.addEventListener) {
	    window.removeEventListener('blur', handleBlur);
	    document.removeEventListener('focus', handleFocus);
	  } else {
	    window.detachEvent('onBlur', handleBlur);
	    document.detachEvent('onFocus', handleFocus);
	  }
	};




/***/ },
/* 220 */
/***/ function(module, exports) {

	/*!
	 * Adapted from jQuery UI core
	 *
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */

	function focusable(element, isTabIndexNotNaN) {
	  var nodeName = element.nodeName.toLowerCase();
	  return (/input|select|textarea|button|object/.test(nodeName) ?
	    !element.disabled :
	    "a" === nodeName ?
	      element.href || isTabIndexNotNaN :
	      isTabIndexNotNaN) && visible(element);
	}

	function hidden(el) {
	  return (el.offsetWidth <= 0 && el.offsetHeight <= 0) ||
	    el.style.display === 'none';
	}

	function visible(element) {
	  while (element) {
	    if (element === document.body) break;
	    if (hidden(element)) return false;
	    element = element.parentNode;
	  }
	  return true;
	}

	function tabbable(element) {
	  var tabIndex = element.getAttribute('tabindex');
	  if (tabIndex === null) tabIndex = undefined;
	  var isTabIndexNaN = isNaN(tabIndex);
	  return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
	}

	function findTabbableDescendants(element) {
	  return [].slice.call(element.querySelectorAll('*'), 0).filter(function(el) {
	    return tabbable(el);
	  });
	}

	module.exports = findTabbableDescendants;



/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(220);

	module.exports = function(node, event) {
	  var tabbable = findTabbable(node);
	  if (!tabbable.length) {
	      event.preventDefault();
	      return;
	  }
	  var finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
	  var leavingFinalTabbable = (
	    finalTabbable === document.activeElement ||
	    // handle immediate shift+tab after opening with mouse
	    node === document.activeElement
	  );
	  if (!leavingFinalTabbable) return;
	  event.preventDefault();
	  var target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
	  target.focus();
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseAssign = __webpack_require__(223),
	    createAssigner = __webpack_require__(229),
	    keys = __webpack_require__(225);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it is invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.2.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var baseCopy = __webpack_require__(224),
	    keys = __webpack_require__(225);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 224 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.2 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var getNative = __webpack_require__(226),
	    isArguments = __webpack_require__(227),
	    isArray = __webpack_require__(228);

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keys;


/***/ },
/* 226 */
/***/ function(module, exports) {

	/**
	 * lodash 3.9.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = getNative;


/***/ },
/* 227 */
/***/ function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isArguments;


/***/ },
/* 228 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.4 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    funcTag = '[object Function]';

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 equivalents which return 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isArray;


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * lodash 3.1.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	var bindCallback = __webpack_require__(230),
	    isIterateeCall = __webpack_require__(231),
	    restParam = __webpack_require__(232);

	/**
	 * Creates a function that assigns properties of source object(s) to a given
	 * destination object.
	 *
	 * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 230 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = bindCallback;


/***/ },
/* 231 */
/***/ function(module, exports) {

	/**
	 * lodash 3.0.9 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isIterateeCall;


/***/ },
/* 232 */
/***/ function(module, exports) {

	/**
	 * lodash 3.6.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern modularize exports="npm" -o ./`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 233 */
/***/ function(module, exports) {

	var _element = typeof document !== 'undefined' ? document.body : null;

	function setElement(element) {
	  if (typeof element === 'string') {
	    var el = document.querySelectorAll(element);
	    element = 'length' in el ? el[0] : el;
	  }
	  _element = element || _element;
	  return _element;
	}

	function hide(appElement) {
	  validateElement(appElement);
	  (appElement || _element).setAttribute('aria-hidden', 'true');
	}

	function show(appElement) {
	  validateElement(appElement);
	  (appElement || _element).removeAttribute('aria-hidden');
	}

	function toggle(shouldHide, appElement) {
	  if (shouldHide)
	    hide(appElement);
	  else
	    show(appElement);
	}

	function validateElement(appElement) {
	  if (!appElement && !_element)
	    throw new Error('react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible');
	}

	function resetForTesting() {
	  _element = document.body;
	}

	exports.toggle = toggle;
	exports.setElement = setElement;
	exports.show = show;
	exports.hide = hide;
	exports.resetForTesting = resetForTesting;


/***/ },
/* 234 */
/***/ function(module, exports) {

	module.exports = function(opts) {
	  return new ElementClass(opts)
	}

	function indexOf(arr, prop) {
	  if (arr.indexOf) return arr.indexOf(prop)
	  for (var i = 0, len = arr.length; i < len; i++)
	    if (arr[i] === prop) return i
	  return -1
	}

	function ElementClass(opts) {
	  if (!(this instanceof ElementClass)) return new ElementClass(opts)
	  var self = this
	  if (!opts) opts = {}

	  // similar doing instanceof HTMLElement but works in IE8
	  if (opts.nodeType) opts = {el: opts}

	  this.opts = opts
	  this.el = opts.el || document.body
	  if (typeof this.el !== 'object') this.el = document.querySelector(this.el)
	}

	ElementClass.prototype.add = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return el.className = className
	  var classes = el.className.split(' ')
	  if (indexOf(classes, className) > -1) return classes
	  classes.push(className)
	  el.className = classes.join(' ')
	  return classes
	}

	ElementClass.prototype.remove = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return
	  var classes = el.className.split(' ')
	  var idx = indexOf(classes, className)
	  if (idx > -1) classes.splice(idx, 1)
	  el.className = classes.join(' ')
	  return classes
	}

	ElementClass.prototype.has = function(className) {
	  var el = this.el
	  if (!el) return
	  var classes = el.className.split(' ')
	  return indexOf(classes, className) > -1
	}

	ElementClass.prototype.toggle = function(className) {
	  var el = this.el
	  if (!el) return
	  if (this.has(className)) this.remove(className)
	  else this.add(className)
	}


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);
	var MediaLibrary = __webpack_require__(187);

	var LibaryComponent = __webpack_require__(207);

	var CostumeLibrary = function (_React$Component) {
	    _inherits(CostumeLibrary, _React$Component);

	    function CostumeLibrary(props) {
	        _classCallCheck(this, CostumeLibrary);

	        var _this = _possibleConstructorReturn(this, (CostumeLibrary.__proto__ || Object.getPrototypeOf(CostumeLibrary)).call(this, props));

	        bindAll(_this, ['setData', 'handleItemSelected']);
	        _this.state = { costumeData: [] };
	        return _this;
	    }

	    _createClass(CostumeLibrary, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.visible && this.state.costumeData.length === 0) {
	                this.props.mediaLibrary.getMediaLibrary('costume', this.setData);
	            }
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            this.setState({ costumeData: data });
	        }
	    }, {
	        key: 'handleItemSelected',
	        value: function handleItemSelected(item) {
	            var vmCostume = {
	                skin: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/$(item.md5)/get/',
	                name: item.name,
	                rotationCenterX: item.info[0],
	                rotationCenterY: item.info[1]
	            };
	            if (item.info.length > 2) {
	                vmCostume.bitmapResolution = item.info[2];
	            }
	            this.props.vm.addCostume(vmCostume);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(LibaryComponent, {
	                data: this.state.costumeData,
	                title: 'Costume Library',
	                visible: this.props.visible,
	                onItemSelected: this.handleItemSelected,
	                onRequestClose: this.props.onRequestClose
	            });
	        }
	    }]);

	    return CostumeLibrary;
	}(React.Component);

	CostumeLibrary.propTypes = {
	    mediaLibrary: React.PropTypes.instanceOf(MediaLibrary),
	    onRequestClose: React.PropTypes.func,
	    visible: React.PropTypes.bool,
	    vm: React.PropTypes.instanceOf(VM).isRequired
	};

	module.exports = CostumeLibrary;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var bindAll = __webpack_require__(1);
	var React = __webpack_require__(2);
	var VM = __webpack_require__(173);
	var MediaLibrary = __webpack_require__(187);

	var LibaryComponent = __webpack_require__(207);

	var BackdropLibrary = function (_React$Component) {
	    _inherits(BackdropLibrary, _React$Component);

	    function BackdropLibrary(props) {
	        _classCallCheck(this, BackdropLibrary);

	        var _this = _possibleConstructorReturn(this, (BackdropLibrary.__proto__ || Object.getPrototypeOf(BackdropLibrary)).call(this, props));

	        bindAll(_this, ['setData', 'handleItemSelect']);
	        _this.state = { backdropData: [] };
	        return _this;
	    }

	    _createClass(BackdropLibrary, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.visible && this.state.backdropData.length === 0) {
	                this.props.mediaLibrary.getMediaLibrary('backdrop', this.setData);
	            }
	        }
	    }, {
	        key: 'setData',
	        value: function setData(data) {
	            this.setState({ backdropData: data });
	        }
	    }, {
	        key: 'handleItemSelect',
	        value: function handleItemSelect(item) {
	            var vmBackdrop = {
	                skin: 'https://cdn.assets.scratch.mit.edu/internalapi/asset/' + item.md5 + '/get/',
	                name: item.name,
	                rotationCenterX: item.info[0],
	                rotationCenterY: item.info[1]
	            };
	            if (item.info.length > 2) {
	                vmBackdrop.bitmapResolution = item.info[2];
	            }
	            this.props.vm.addBackdrop(vmBackdrop);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return React.createElement(LibaryComponent, {
	                data: this.state.backdropData,
	                title: 'Backdrop Library',
	                visible: this.props.visible,
	                onItemSelected: this.handleItemSelect,
	                onRequestClose: this.props.onRequestClose
	            });
	        }
	    }]);

	    return BackdropLibrary;
	}(React.Component);

	BackdropLibrary.propTypes = {
	    mediaLibrary: React.PropTypes.instanceOf(MediaLibrary),
	    onRequestClose: React.PropTypes.func,
	    visible: React.PropTypes.bool,
	    vm: React.PropTypes.instanceOf(VM).isRequired
	};

	module.exports = BackdropLibrary;

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var minilog = __webpack_require__(238);
	minilog.enable();

	module.exports = minilog('gui');

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var Minilog = __webpack_require__(239);

	var oldEnable = Minilog.enable,
	    oldDisable = Minilog.disable,
	    isChrome = (typeof navigator != 'undefined' && /chrome/i.test(navigator.userAgent)),
	    console = __webpack_require__(243);

	// Use a more capable logging backend if on Chrome
	Minilog.defaultBackend = (isChrome ? console.minilog : console);

	// apply enable inputs from localStorage and from the URL
	if(typeof window != 'undefined') {
	  try {
	    Minilog.enable(JSON.parse(window.localStorage['minilogSettings']));
	  } catch(e) {}
	  if(window.location && window.location.search) {
	    var match = RegExp('[?&]minilog=([^&]*)').exec(window.location.search);
	    match && Minilog.enable(decodeURIComponent(match[1]));
	  }
	}

	// Make enable also add to localStorage
	Minilog.enable = function() {
	  oldEnable.call(Minilog, true);
	  try { window.localStorage['minilogSettings'] = JSON.stringify(true); } catch(e) {}
	  return this;
	};

	Minilog.disable = function() {
	  oldDisable.call(Minilog);
	  try { delete window.localStorage.minilogSettings; } catch(e) {}
	  return this;
	};

	exports = module.exports = Minilog;

	exports.backends = {
	  array: __webpack_require__(247),
	  browser: Minilog.defaultBackend,
	  localStorage: __webpack_require__(248),
	  jQuery: __webpack_require__(249)
	};


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240),
	    Filter = __webpack_require__(242);

	var log = new Transform(),
	    slice = Array.prototype.slice;

	exports = module.exports = function create(name) {
	  var o   = function() { log.write(name, undefined, slice.call(arguments)); return o; };
	  o.debug = function() { log.write(name, 'debug', slice.call(arguments)); return o; };
	  o.info  = function() { log.write(name, 'info',  slice.call(arguments)); return o; };
	  o.warn  = function() { log.write(name, 'warn',  slice.call(arguments)); return o; };
	  o.error = function() { log.write(name, 'error', slice.call(arguments)); return o; };
	  o.log   = o.debug; // for interface compliance with Node and browser consoles
	  o.suggest = exports.suggest;
	  o.format = log.format;
	  return o;
	};

	// filled in separately
	exports.defaultBackend = exports.defaultFormatter = null;

	exports.pipe = function(dest) {
	  return log.pipe(dest);
	};

	exports.end = exports.unpipe = exports.disable = function(from) {
	  return log.unpipe(from);
	};

	exports.Transform = Transform;
	exports.Filter = Filter;
	// this is the default filter that's applied when .enable() is called normally
	// you can bypass it completely and set up your own pipes
	exports.suggest = new Filter();

	exports.enable = function() {
	  if(exports.defaultFormatter) {
	    return log.pipe(exports.suggest) // filter
	              .pipe(exports.defaultFormatter) // formatter
	              .pipe(exports.defaultBackend); // backend
	  }
	  return log.pipe(exports.suggest) // filter
	            .pipe(exports.defaultBackend); // formatter
	};



/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var microee = __webpack_require__(241);

	// Implements a subset of Node's stream.Transform - in a cross-platform manner.
	function Transform() {}

	microee.mixin(Transform);

	// The write() signature is different from Node's
	// --> makes it much easier to work with objects in logs.
	// One of the lessons from v1 was that it's better to target
	// a good browser rather than the lowest common denominator
	// internally.
	// If you want to use external streams, pipe() to ./stringify.js first.
	Transform.prototype.write = function(name, level, args) {
	  this.emit('item', name, level, args);
	};

	Transform.prototype.end = function() {
	  this.emit('end');
	  this.removeAllListeners();
	};

	Transform.prototype.pipe = function(dest) {
	  var s = this;
	  // prevent double piping
	  s.emit('unpipe', dest);
	  // tell the dest that it's being piped to
	  dest.emit('pipe', s);

	  function onItem() {
	    dest.write.apply(dest, Array.prototype.slice.call(arguments));
	  }
	  function onEnd() { !dest._isStdio && dest.end(); }

	  s.on('item', onItem);
	  s.on('end', onEnd);

	  s.when('unpipe', function(from) {
	    var match = (from === dest) || typeof from == 'undefined';
	    if(match) {
	      s.removeListener('item', onItem);
	      s.removeListener('end', onEnd);
	      dest.emit('unpipe');
	    }
	    return match;
	  });

	  return dest;
	};

	Transform.prototype.unpipe = function(from) {
	  this.emit('unpipe', from);
	  return this;
	};

	Transform.prototype.format = function(dest) {
	  throw new Error([
	    'Warning: .format() is deprecated in Minilog v2! Use .pipe() instead. For example:',
	    'var Minilog = require(\'minilog\');',
	    'Minilog',
	    '  .pipe(Minilog.backends.console.formatClean)',
	    '  .pipe(Minilog.backends.console);'].join('\n'));
	};

	Transform.mixin = function(dest) {
	  var o = Transform.prototype, k;
	  for (k in o) {
	    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);
	  }
	};

	module.exports = Transform;


/***/ },
/* 241 */
/***/ function(module, exports) {

	function M() { this._events = {}; }
	M.prototype = {
	  on: function(ev, cb) {
	    this._events || (this._events = {});
	    var e = this._events;
	    (e[ev] || (e[ev] = [])).push(cb);
	    return this;
	  },
	  removeListener: function(ev, cb) {
	    var e = this._events[ev] || [], i;
	    for(i = e.length-1; i >= 0 && e[i]; i--){
	      if(e[i] === cb || e[i].cb === cb) { e.splice(i, 1); }
	    }
	  },
	  removeAllListeners: function(ev) {
	    if(!ev) { this._events = {}; }
	    else { this._events[ev] && (this._events[ev] = []); }
	  },
	  emit: function(ev) {
	    this._events || (this._events = {});
	    var args = Array.prototype.slice.call(arguments, 1), i, e = this._events[ev] || [];
	    for(i = e.length-1; i >= 0 && e[i]; i--){
	      e[i].apply(this, args);
	    }
	    return this;
	  },
	  when: function(ev, cb) {
	    return this.once(ev, cb, true);
	  },
	  once: function(ev, cb, when) {
	    if(!cb) return this;
	    function c() {
	      if(!when) this.removeListener(ev, c);
	      if(cb.apply(this, arguments) && when) this.removeListener(ev, c);
	    }
	    c.cb = cb;
	    this.on(ev, c);
	    return this;
	  }
	};
	M.mixin = function(dest) {
	  var o = M.prototype, k;
	  for (k in o) {
	    o.hasOwnProperty(k) && (dest.prototype[k] = o[k]);
	  }
	};
	module.exports = M;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	// default filter
	var Transform = __webpack_require__(240);

	var levelMap = { debug: 1, info: 2, warn: 3, error: 4 };

	function Filter() {
	  this.enabled = true;
	  this.defaultResult = true;
	  this.clear();
	}

	Transform.mixin(Filter);

	// allow all matching, with level >= given level
	Filter.prototype.allow = function(name, level) {
	  this._white.push({ n: name, l: levelMap[level] });
	  return this;
	};

	// deny all matching, with level <= given level
	Filter.prototype.deny = function(name, level) {
	  this._black.push({ n: name, l: levelMap[level] });
	  return this;
	};

	Filter.prototype.clear = function() {
	  this._white = [];
	  this._black = [];
	  return this;
	};

	function test(rule, name) {
	  // use .test for RegExps
	  return (rule.n.test ? rule.n.test(name) : rule.n == name);
	};

	Filter.prototype.test = function(name, level) {
	  var i, len = Math.max(this._white.length, this._black.length);
	  for(i = 0; i < len; i++) {
	    if(this._white[i] && test(this._white[i], name) && levelMap[level] >= this._white[i].l) {
	      return true;
	    }
	    if(this._black[i] && test(this._black[i], name) && levelMap[level] < this._black[i].l) {
	      return false;
	    }
	  }
	  return this.defaultResult;
	};

	Filter.prototype.write = function(name, level, args) {
	  if(!this.enabled || this.test(name, level)) {
	    return this.emit('item', name, level, args);
	  }
	};

	module.exports = Filter;


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240);

	var newlines = /\n+$/,
	    logger = new Transform();

	logger.write = function(name, level, args) {
	  var i = args.length-1;
	  if (typeof console === 'undefined' || !console.log) {
	    return;
	  }
	  if(console.log.apply) {
	    return console.log.apply(console, [name, level].concat(args));
	  } else if(JSON && JSON.stringify) {
	    // console.log.apply is undefined in IE8 and IE9
	    // for IE8/9: make console.log at least a bit less awful
	    if(args[i] && typeof args[i] == 'string') {
	      args[i] = args[i].replace(newlines, '');
	    }
	    try {
	      for(i = 0; i < args.length; i++) {
	        args[i] = JSON.stringify(args[i]);
	      }
	    } catch(e) {}
	    console.log(args.join(' '));
	  }
	};

	logger.formatters = ['color', 'minilog'];
	logger.color = __webpack_require__(244);
	logger.minilog = __webpack_require__(246);

	module.exports = logger;


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240),
	    color = __webpack_require__(245);

	var colors = { debug: ['cyan'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },
	    logger = new Transform();

	logger.write = function(name, level, args) {
	  var fn = console.log;
	  if(console[level] && console[level].apply) {
	    fn = console[level];
	    fn.apply(console, [ '%c'+name+' %c'+level, color('gray'), color.apply(color, colors[level])].concat(args));
	  }
	};

	// NOP, because piping the formatted logs can only cause trouble.
	logger.pipe = function() { };

	module.exports = logger;


/***/ },
/* 245 */
/***/ function(module, exports) {

	var hex = {
	  black: '#000',
	  red: '#c23621',
	  green: '#25bc26',
	  yellow: '#bbbb00',
	  blue:  '#492ee1',
	  magenta: '#d338d3',
	  cyan: '#33bbc8',
	  gray: '#808080',
	  purple: '#708'
	};
	function color(fg, isInverse) {
	  if(isInverse) {
	    return 'color: #fff; background: '+hex[fg]+';';
	  } else {
	    return 'color: '+hex[fg]+';';
	  }
	}

	module.exports = color;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240),
	    color = __webpack_require__(245),
	    colors = { debug: ['gray'], info: ['purple' ], warn: [ 'yellow', true ], error: [ 'red', true ] },
	    logger = new Transform();

	logger.write = function(name, level, args) {
	  var fn = console.log;
	  if(level != 'debug' && console[level]) {
	    fn = console[level];
	  }

	  var subset = [], i = 0;
	  if(level != 'info') {
	    for(; i < args.length; i++) {
	      if(typeof args[i] != 'string') break;
	    }
	    fn.apply(console, [ '%c'+name +' '+ args.slice(0, i).join(' '), color.apply(color, colors[level]) ].concat(args.slice(i)));
	  } else {
	    fn.apply(console, [ '%c'+name, color.apply(color, colors[level]) ].concat(args));
	  }
	};

	// NOP, because piping the formatted logs can only cause trouble.
	logger.pipe = function() { };

	module.exports = logger;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240),
	    cache = [ ];

	var logger = new Transform();

	logger.write = function(name, level, args) {
	  cache.push([ name, level, args ]);
	};

	// utility functions
	logger.get = function() { return cache; };
	logger.empty = function() { cache = []; };

	module.exports = logger;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240),
	    cache = false;

	var logger = new Transform();

	logger.write = function(name, level, args) {
	  if(typeof window == 'undefined' || typeof JSON == 'undefined' || !JSON.stringify || !JSON.parse) return;
	  try {
	    if(!cache) { cache = (window.localStorage.minilog ? JSON.parse(window.localStorage.minilog) : []); }
	    cache.push([ new Date().toString(), name, level, args ]);
	    window.localStorage.minilog = JSON.stringify(cache);
	  } catch(e) {}
	};

	module.exports = logger;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var Transform = __webpack_require__(240);

	var cid = new Date().valueOf().toString(36);

	function AjaxLogger(options) {
	  this.url = options.url || '';
	  this.cache = [];
	  this.timer = null;
	  this.interval = options.interval || 30*1000;
	  this.enabled = true;
	  this.jQuery = window.jQuery;
	  this.extras = {};
	}

	Transform.mixin(AjaxLogger);

	AjaxLogger.prototype.write = function(name, level, args) {
	  if(!this.timer) { this.init(); }
	  this.cache.push([name, level].concat(args));
	};

	AjaxLogger.prototype.init = function() {
	  if(!this.enabled || !this.jQuery) return;
	  var self = this;
	  this.timer = setTimeout(function() {
	    var i, logs = [], ajaxData, url = self.url;
	    if(self.cache.length == 0) return self.init();
	    // Test each log line and only log the ones that are valid (e.g. don't have circular references).
	    // Slight performance hit but benefit is we log all valid lines.
	    for(i = 0; i < self.cache.length; i++) {
	      try {
	        JSON.stringify(self.cache[i]);
	        logs.push(self.cache[i]);
	      } catch(e) { }
	    }
	    if(self.jQuery.isEmptyObject(self.extras)) {
	        ajaxData = JSON.stringify({ logs: logs });
	        url = self.url + '?client_id=' + cid;
	    } else {
	        ajaxData = JSON.stringify(self.jQuery.extend({logs: logs}, self.extras));
	    }

	    self.jQuery.ajax(url, {
	      type: 'POST',
	      cache: false,
	      processData: false,
	      data: ajaxData,
	      contentType: 'application/json',
	      timeout: 10000
	    }).success(function(data, status, jqxhr) {
	      if(data.interval) {
	        self.interval = Math.max(1000, data.interval);
	      }
	    }).error(function() {
	      self.interval = 30000;
	    }).always(function() {
	      self.init();
	    });
	    self.cache = [];
	  }, this.interval);
	};

	AjaxLogger.prototype.end = function() {};

	// wait until jQuery is defined. Useful if you don't control the load order.
	AjaxLogger.jQueryWait = function(onDone) {
	  if(typeof window !== 'undefined' && (window.jQuery || window.$)) {
	    return onDone(window.jQuery || window.$);
	  } else if (typeof window !== 'undefined') {
	    setTimeout(function() { AjaxLogger.jQueryWait(onDone); }, 200);
	  }
	};

	module.exports = AjaxLogger;


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var xhr = __webpack_require__(188);

	var log = __webpack_require__(237);

	var ProjectLoader = function () {
	    function ProjectLoader() {
	        _classCallCheck(this, ProjectLoader);

	        this.DEFAULT_PROJECT_DATA = ProjectLoader.DEFAULT_PROJECT_DATA;
	    }

	    _createClass(ProjectLoader, [{
	        key: 'load',
	        value: function load(id, callback) {
	            callback = callback || function (err) {
	                return log.error(err);
	            };
	            xhr({
	                uri: 'https://projects.scratch.mit.edu/internalapi/project/' + id + '/get/'
	            }, function (err, res, body) {
	                if (err) return callback(err);
	                callback(null, body);
	            });
	        }
	    }]);

	    return ProjectLoader;
	}();

	ProjectLoader.DEFAULT_PROJECT_DATA = __webpack_require__(251);

	module.exports = new ProjectLoader();

/***/ },
/* 251 */
/***/ function(module, exports) {

	module.exports = {
		"objName": "Stage",
		"sounds": [
			{
				"soundName": "pop",
				"soundID": 1,
				"md5": "83a9787d4cb6f3b7632b4ddfebf74367.wav",
				"sampleCount": 258,
				"rate": 11025,
				"format": ""
			}
		],
		"costumes": [
			{
				"costumeName": "backdrop1",
				"baseLayerID": 2,
				"baseLayerMD5": "739b5e2a2435f6e1ec2993791b423146.png",
				"bitmapResolution": 1,
				"rotationCenterX": 240,
				"rotationCenterY": 180
			}
		],
		"currentCostumeIndex": 0,
		"penLayerMD5": "5c81a336fab8be57adc039a8a2b33ca9.png",
		"penLayerID": -1,
		"tempoBPM": 60,
		"videoAlpha": 0.5,
		"children": []
	};

/***/ }
]);